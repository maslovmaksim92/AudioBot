#!/usr/bin/env python3
"""
Simple entry point for Render deployment
This file is specifically for Render.com deployment
"""

import os
import logging
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from datetime import datetime
from typing import Dict, List, Any

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create FastAPI app
app = FastAPI(
    title="AI Assistant for Business Management - Render",
    description="AI assistant for cleaning company operations",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Simple mock AI for demo
class SimpleAI:
    @staticmethod
    def get_response(message: str) -> str:
        message_lower = message.lower()
        
        if "–±–∏—Ç—Ä–∏–∫—Å" in message_lower or "bitrix" in message_lower:
            return "üìä –ü–æ –¥–∞–Ω–Ω—ã–º Bitrix24: —É –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ '–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤' —Å –æ–±–æ—Ä–æ—Ç–æ–º 4+ –º–ª–Ω —Ä—É–±–ª–µ–π. –û—Ç–ª–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏!"
        elif "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫" in message_lower or "–∫–æ–º–∞–Ω–¥–∞" in message_lower:
            return "üë• –í –∫–æ–º–∞–Ω–¥–µ 100 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: 70 –≤ –ö–∞–ª—É–≥–µ, 25 –≤ –ö–µ–º–µ—Ä–æ–≤–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏."
        elif "–∫–∞–ª—É–≥–∞" in message_lower:
            return "üè† –ö–∞–ª—É–≥–∞: 500 –¥–æ–º–æ–≤ –ø–æ–¥ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ 12% –∑–∞ –º–µ—Å—è—Ü. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
        elif "–∫–µ–º–µ—Ä–æ–≤–æ" in message_lower:
            return "üèòÔ∏è –ö–µ–º–µ—Ä–æ–≤–æ: 100 –¥–æ–º–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ."
        elif "–ø–ª–∞–Ω–µ—Ä–∫–∞" in message_lower or "—Å–æ–≤–µ—â–∞–Ω–∏–µ" in message_lower:
            return "üéôÔ∏è –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–µ—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω–∞! –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–æ–≤–µ—â–∞–Ω–∏—è - —è –≤—ã–¥–µ–ª—é –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –∑–∞–¥–∞—á–∏."
        elif "–≥–æ–ª–æ—Å" in message_lower or "–º–∞–∫—Å" in message_lower:
            return "üó£Ô∏è –ü—Ä–∏–≤–µ—Ç! –Ø –ú–ê–ö–°, –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! –ì–æ—Ç–æ–≤ –∫ –∂–∏–≤–æ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä—É –∏ –∞–Ω–∞–ª–∏–∑—É –±–∏–∑–Ω–µ—Å–∞."
        elif "–¥–µ–Ω—å–≥–∏" in message_lower or "–ø—Ä–∏–±—ã–ª—å" in message_lower:
            return "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: 4+ –º–ª–Ω –æ–±–æ—Ä–æ—Ç, —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ –ö–µ–º–µ—Ä–æ–≤–æ."
        else:
            return f"ü§ñ –ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–æ '{message}'. –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ú–ê–ö–° –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º Bitrix24, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–æ–π –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ—Ü–µ—Å—Å–æ–≤!"

simple_ai = SimpleAI()

# Routes
@app.get("/")
async def root():
    return {
        "message": "ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π",
        "status": "‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ Render!",
        "version": "1.0.0",
        "company": "–í–∞—Å–î–æ–º - –£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤",
        "coverage": "–ö–∞–ª—É–≥–∞ (500 –¥–æ–º–æ–≤) + –ö–µ–º–µ—Ä–æ–≤–æ (100 –¥–æ–º–æ–≤)",
        "team": "100 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
        "revenue": "4+ –º–ª–Ω —Ä—É–±–ª–µ–π (–¥–∞–Ω–Ω—ã–µ Bitrix24)",
        "features": [
            "ü§ñ AI —á–∞—Ç —Å GPT-–ø–æ–¥–æ–±–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º",
            "üìä –î–∞—à–±–æ—Ä–¥ —Å –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∞–º–∏",
            "üéôÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–µ—Ä–æ–∫ –∏ —Å–æ–≤–µ—â–∞–Ω–∏–π",
            "üìû Live –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç",
            "üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Bitrix24",
            "üì± Telegram –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        ],
        "endpoints": {
            "api": "/api",
            "docs": "/docs",
            "health": "/health"
        }
    }

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "deployment": "render",
        "services": {
            "api": "running",
            "ai_chat": "active"
        }
    }

@app.get("/api")
async def api_root():
    return {
        "message": "AI Assistant API",
        "status": "active",
        "version": "1.0.0",
        "deployed_on": "Render.com"
    }

@app.get("/api/dashboard")
async def get_dashboard():
    return {
        "metrics": {
            "total_employees": 100,
            "active_employees": 95,
            "kaluga_employees": 70,
            "kemerovo_employees": 25,
            "total_houses": 600,
            "kaluga_houses": 500,
            "kemerovo_houses": 100
        },
        "recent_activities": [
            {"type": "deployment", "message": "üöÄ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –Ω–∞ Render", "time": "—Ç–æ–ª—å–∫–æ —á—Ç–æ"},
            {"type": "bitrix24", "message": "üìä –î–∞–Ω–Ω—ã–µ Bitrix24 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã", "time": "1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥"},
            {"type": "ai_ready", "message": "ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ú–ê–ö–° –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", "time": "2 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥"}
        ],
        "ai_insights": [
            "üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ Render!",
            "üíº –ö–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è –í–∞—Å–î–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            "üìà –û–±–æ—Ä–æ—Ç 4+ –º–ª–Ω —Ä—É–±–ª–µ–π - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç –±–∏–∑–Ω–µ—Å–∞",
            "üèÜ –ö–æ–º–∞–Ω–¥–∞ 100 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–≤—É—Ö –≥–æ—Ä–æ–¥–∞—Ö",
            "üöÄ AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≥–æ—Ç–æ–≤—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã"
        ]
    }

@app.post("/api/ai/chat")
async def ai_chat(request: dict):
    try:
        message = request.get("message", "")
        if not message:
            return {"error": "Message is required", "status": "error"}
        
        response = simple_ai.get_response(message)
        
        return {
            "response": response,
            "timestamp": datetime.utcnow().isoformat(),
            "status": "success",
            "model": "simple-ai-mock",
            "deployment": "render"
        }
    except Exception as e:
        return {
            "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
            "error": str(e),
            "status": "error"
        }

@app.get("/api/company/info")
async def get_company_info():
    return {
        "success": True,
        "company": {
            "name": "–ö–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è –í–∞—Å–î–æ–º",
            "description": "–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤ –≤ –ö–∞–ª—É–≥–µ –∏ –ö–µ–º–µ—Ä–æ–≤–æ",
            "cities": ["–ö–∞–ª—É–≥–∞", "–ö–µ–º–µ—Ä–æ–≤–æ"],
            "houses_count": {"–ö–∞–ª—É–≥–∞": 500, "–ö–µ–º–µ—Ä–æ–≤–æ": 100},
            "revenue": "4+ –º–ª–Ω —Ä—É–±–ª–µ–π",
            "employees": 100
        },
        "departments": [
            {"name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "description": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–∏"},
            {"name": "–ö–ª–∏–Ω–∏–Ω–≥", "description": "–û—Ç–¥–µ–ª —É–±–æ—Ä–∫–∏ –ø–æ–¥—ä–µ–∑–¥–æ–≤"},
            {"name": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "description": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"},
            {"name": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", "description": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á–µ—Ç"}
        ]
    }

@app.get("/api/bitrix24/test")
async def test_bitrix24():
    webhook_url = os.environ.get('BITRIX24_WEBHOOK_URL')
    return {
        "status": "configured" if webhook_url else "not_configured",
        "webhook_configured": bool(webhook_url),
        "message": "Bitrix24 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞" if webhook_url else "Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
        "demo_data": {
            "deals": 50,
            "revenue": "4+ –º–ª–Ω —Ä—É–±–ª–µ–π",
            "pipeline": "–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤"
        }
    }

@app.get("/api/telegram/bot-info")
async def telegram_info():
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    return {
        "bot_username": "@aitest123432_bot",
        "bot_token_configured": bool(bot_token),
        "status": "ready",
        "message": "Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
    }

# Startup event
@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ AI Assistant successfully deployed on Render!")
    logger.info("üè¢ Company: –í–∞—Å–î–æ–º Cleaning Services")
    logger.info("üìç Coverage: Kaluga (500 houses) + Kemerovo (100 houses)")
    logger.info("üë• Team: 100 employees")
    logger.info("üí∞ Revenue: 4+ million rubles")
    logger.info("ü§ñ AI Assistant MAKS is ready!")

if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)