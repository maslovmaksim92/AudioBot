import time
import os
from fastapi import FastAPI, APIRouter, Request
from loguru import logger
from datetime import datetime
import sys
from dotenv import load_dotenv

# Load environment variables from backend/.env
load_dotenv("/app/backend/.env")

# –ü–æ–ª—É—á–∞–µ–º MongoDB URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç Render > local .env)
mongo_url = os.environ.get("MONGO_URL", "mongodb://localhost:27017")
print(f"üîå MongoDB URL: {mongo_url[:50]}..." if mongo_url else "‚ùå MONGO_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

# MongoDB Connection (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ)
try:
    from motor.motor_asyncio import AsyncIOMotorClient
    mongo_client = AsyncIOMotorClient(mongo_url)
    db = mongo_client[os.environ.get("DB_NAME", "vasdom_db")]
    print("‚úÖ MongoDB client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except ImportError:
    mongo_client = None
    db = None
    print("‚ö†Ô∏è MongoDB client –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω (motor –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
except Exception as e:
    mongo_client = None
    db = None
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Render Dashboard
logger.remove() # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä
logger.add(sys.stdout, format="üöÄ {time:HH:mm:ss} | {level} | {message}", level="INFO")
logger.add(sys.stderr, format="üö® {time:HH:mm:ss} | {level} | {message}", level="ERROR")

# –°–æ–∑–¥–∞—ë–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

print("üöÄ =============================================================")
print("üöÄ VASDOM AI ASSISTANT STARTING UP - PRODUCTION READY")
print("üöÄ =============================================================")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞)
application_logs = []
telegram_messages = []
system_status = {
    "startup_time": datetime.utcnow().isoformat(),
    "total_requests": 0,
    "telegram_updates": 0,
    "errors": 0,
    "last_activity": None
}

def add_log(level: str, message: str, details: dict = None):
    """–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ + –≤—ã–≤–µ—Å—Ç–∏ –≤ Render"""
    global application_logs
    
    timestamp = datetime.utcnow().isoformat()
    log_entry = {
        "timestamp": timestamp,
        "level": level,
        "message": message,
        "details": details or {}
    }
    application_logs.append(log_entry)
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
    if len(application_logs) > 100:
        application_logs = application_logs[-100:]
    
    # –í–´–í–û–î–ò–ú –í RENDER DASHBOARD (stdout)
    render_message = f"üìã [{timestamp}] {level}: {message}"
    print(render_message)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏, –≤—ã–≤–æ–¥–∏–º –∏—Ö —Ç–æ–∂–µ
    if details:
        print(f"üìù –î–ï–¢–ê–õ–ò: {details}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –≤ loguru
    if level == "ERROR":
        logger.error(f"üî¥ {message}")
    elif level == "WARNING":
        logger.warning(f"üü° {message}")
    elif level == "SUCCESS":
        logger.success(f"üü¢ {message}")
    else: # INFO
        logger.info(f"üîµ {message}")

def generate_smart_response(user_message: str, user_context: dict = None) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è VasDom"""
    
    message_lower = user_message.lower()
    user_name = user_context.get("user_name", "–¥–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç") if user_context else "–¥–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç"
    
    print(f"üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è: {user_message[:50]}...")
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π", "start", "/start"]):
        response = f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! üè†

–Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –í–∞—Å–î–æ–º. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –≤ –ö–∞–ª—É–≥–µ –∏ –æ–±–ª–∞—Å—Ç–∏ —É–∂–µ –º–Ω–æ–≥–æ –ª–µ—Ç.

üè† –ù–ê–®–ò –£–°–õ–£–ì–ò:
‚úÖ –£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤ –∏ –ª–µ—Å—Ç–Ω–∏—á–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
‚úÖ –ö–ª–∏–Ω–∏–Ω–≥ –ø—Ä–∏–¥–æ–º–æ–≤—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π  
‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é
‚úÖ –†–µ—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ñ–ö–•

üìä –ù–ê–®–ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:
‚Ä¢ 500+ –¥–æ–º–æ–≤ –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
‚Ä¢ 100+ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
‚Ä¢ –†–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ

–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ò–ª–∏ —Å–≤—è–∂—É –≤–∞—Å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ú–∞–∫—Å–∏–º–æ–º –ú–∞—Å–ª–æ–≤—ã–º! üìû"""

    # –£–±–æ—Ä–∫–∞ –∏ –∫–ª–∏–Ω–∏–Ω–≥
    elif any(word in message_lower for word in ["—É–±–æ—Ä–∫", "—á–∏—Å—Ç", "–∫–ª–∏–Ω–∏–Ω–≥", "–º—ã—Ç—å", "–ø–æ–¥—ä–µ–∑–¥"]):
        response = f"""üßπ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, {user_name}!

–í–∞—Å–î–æ–º - –ª–∏–¥–µ—Ä –ø–æ —É–±–æ—Ä–∫–µ –ø–æ–¥—ä–µ–∑–¥–æ–≤ –≤ –ö–∞–ª—É–≥–µ! 

üîπ –†–ï–ì–£–õ–Ø–†–ù–ê–Ø –£–ë–û–†–ö–ê –ü–û–î–™–ï–ó–î–û–í:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —É–±–æ—Ä–∫–∞ –ª–µ—Å—Ç–Ω–∏—Ü –∏ —Ö–æ–ª–ª–æ–≤
‚Ä¢ –ú—ã—Ç—å–µ –ø–µ—Ä–∏–ª, —Å—Ç—É–ø–µ–Ω–µ–π, –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤
‚Ä¢ –£–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –∏ –ª–∏—Å—Ç–≤—ã
‚Ä¢ –ú–æ–π–∫–∞ –æ–∫–æ–Ω –∏ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤

üîπ –ì–ï–ù–ï–†–ê–õ–¨–ù–ê–Ø –£–ë–û–†–ö–ê:
‚Ä¢ –ì–ª—É–±–æ–∫–∞—è —á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
‚Ä¢ –î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –æ–±—â–∏—Ö –∑–æ–Ω
‚Ä¢ –£–±–æ—Ä–∫–∞ –ø–æ–¥–≤–∞–ª–æ–≤ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–º–µ—â–µ–Ω–∏–π

üîπ –°–ï–ó–û–ù–ù–´–ï –†–ê–ë–û–¢–´:
‚Ä¢ –£–±–æ—Ä–∫–∞ —Å–Ω–µ–≥–∞ –∑–∏–º–æ–π
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—Å—Ç–≤—ã –æ—Å–µ–Ω—å—é
‚Ä¢ –û–∑–µ–ª–µ–Ω–µ–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –≤–µ—Å–Ω–æ–π

üí∞ –¶–µ–Ω—ã –æ—Ç 1500‚ÇΩ/–º–µ—Å—è—Ü –∑–∞ –ø–æ–¥—ä–µ–∑–¥!

–•–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å? –ú–µ–Ω–µ–¥–∂–µ—Ä –ú–∞–∫—Å–∏–º –ú–∞—Å–ª–æ–≤ –ø–æ–º–æ–∂–µ—Ç! üì±"""

    # –¶–µ–Ω—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    elif any(word in message_lower for word in ["—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ", "—Ç–∞—Ä–∏—Ñ", "–¥–µ–Ω—å–≥–∏", "—Ä—É–±"]):
        response = f"""üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –í–∞—Å–î–æ–º, {user_name}:

üìã –£–ë–û–†–ö–ê –ü–û–î–™–ï–ó–î–û–í:
üî∏ –†–∞–∑–æ–≤–∞—è —É–±–æ—Ä–∫–∞: –æ—Ç 2000‚ÇΩ
üî∏ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è: –æ—Ç 1800‚ÇΩ/–º–µ—Å—è—Ü
üî∏ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è: –æ—Ç 1500‚ÇΩ/–º–µ—Å—è—Ü
üî∏ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞: –æ—Ç 3500‚ÇΩ

üìã –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–°–õ–£–ì–ò:
üî∏ –ú–æ–π–∫–∞ –æ–∫–æ–Ω: 150‚ÇΩ –∑–∞ –æ–∫–Ω–æ
üî∏ –£–±–æ—Ä–∫–∞ –ø—Ä–∏–¥–æ–º–æ–≤–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏: +800‚ÇΩ
üî∏ –í—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞: –≤–∫–ª—é—á–µ–Ω–æ
üî∏ –î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è: +300‚ÇΩ

üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨–Æ:
üî∏ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: –æ—Ç 1000‚ÇΩ
üî∏ –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –æ—Ç 5000‚ÇΩ/–º–µ—Å—è—Ü
üî∏ –¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: –æ—Ç 2500‚ÇΩ/–º–µ—Å—è—Ü

üéØ –°–ö–ò–î–ö–ò:
‚Ä¢ –ü—Ä–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ –≥–æ–¥: -15%
‚Ä¢ –î–ª—è —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π: -20%  
‚Ä¢ –ü—Ä–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ 5+ –¥–æ–º–æ–≤: -25%

üí° –¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–¥–µ–ª–∞–µ—Ç –ú–∞–∫—Å–∏–º –ú–∞—Å–ª–æ–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É!"""

    # –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä
    elif any(word in message_lower for word in ["–∫–æ–Ω—Ç–∞–∫—Ç", "—Ç–µ–ª–µ—Ñ–æ–Ω", "—Å–≤—è–∑–∞—Ç—å—Å—è", "–º–µ–Ω–µ–¥–∂–µ—Ä", "–º–∞–∫—Å–∏–º", "–º–∞—Å–ª–æ–≤"]):
        response = f"""üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –í–∞—Å–î–æ–º, {user_name}:

üë®‚Äçüíº –ì–õ–ê–í–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–†: 
üîπ –ú–∞–∫—Å–∏–º –ú–∞—Å–ª–æ–≤
üîπ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: 8+ –ª–µ—Ç
üîπ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é

üì± –ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
üîπ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX (—É—Ç–æ—á–Ω—è–µ—Ç—Å—è)
üîπ Email: info@vas-dom.ru  
üîπ Telegram: @vas_dom_kaluga
üîπ WhatsApp: –¥–æ—Å—Ç—É–ø–µ–Ω

üè¢ –û–§–ò–° –í –ö–ê–õ–£–ì–ï:
üîπ –ê–¥—Ä–µ—Å: –≥. –ö–∞–ª—É–≥–∞ (—Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞)
üîπ –ü—Ä–∏–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤: –ø–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏

‚è∞ –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´:
‚Ä¢ –ü–Ω-–ü—Ç: 8:00 - 19:00
‚Ä¢ –°–±: 9:00 - 17:00  
‚Ä¢ –í—Å: 10:00 - 16:00
‚Ä¢ –ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–ª—É–∂–±–∞: 24/7

‚úÖ –ú–∞–∫—Å–∏–º –ª–∏—á–Ω–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç!"""

    # –í–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏
    elif any(word in message_lower for word in ["–∫–æ–º–ø–∞–Ω–∏—è", "–≤–∞—Å–¥–æ–º", "–∫–∞–ª—É–≥–∞", "–æ –≤–∞—Å", "–∫—Ç–æ –≤—ã"]):
        response = f"""üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏ –í–∞—Å–î–æ–º, {user_name}:

üéØ –ù–ê–®–ê –ú–ò–°–°–ò–Ø: –î–µ–ª–∞–µ–º –¥–æ–º–∞ —É—é—Ç–Ω—ã–º–∏ –∏ —á–∏—Å—Ç—ã–º–∏!

üìà –ù–ê–®–ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:
‚úÖ 8+ –ª–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ –ö–∞–ª—É–≥–∏ –∏ –æ–±–ª–∞—Å—Ç–∏
‚úÖ 500+ –¥–æ–º–æ–≤ –ø–æ–¥ –Ω–∞—à–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º  
‚úÖ 100+ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
‚úÖ 5000+ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
‚úÖ 98% –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤

üèÜ –ü–û–ß–ï–ú–£ –í–´–ë–ò–†–ê–Æ–¢ –ù–ê–°:
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
‚Ä¢ –≠–∫–æ–ª–æ–≥–∏—á–Ω—ã–µ –º–æ—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ 100%

üåç –ì–ï–û–ì–†–ê–§–ò–Ø –†–ê–ë–û–¢–´:
‚Ä¢ –ö–∞–ª—É–≥–∞ (–≤—Å–µ —Ä–∞–π–æ–Ω—ã)
‚Ä¢ –ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
‚Ä¢ –í—ã–µ–∑–¥–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –≤ –¢—É–ª—É, –ú–æ—Å–∫–≤—É

üë• –ù–ê–®–ê –ö–û–ú–ê–ù–î–ê:
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä: –ú–∞–∫—Å–∏–º –ú–∞—Å–ª–æ–≤
‚Ä¢ 15 –±—Ä–∏–≥–∞–¥ –∫–ª–∏–Ω–µ—Ä–æ–≤
‚Ä¢ 5 —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –¥–æ–º–∞–º–∏  
‚Ä¢ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–∞—è —Å–ª—É–∂–±–∞

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º! ü§ù"""

    # Help –∏ –ø–æ–º–æ—â—å
    elif any(word in message_lower for word in ["–ø–æ–º–æ—â—å", "help", "/help", "—á—Ç–æ —É–º–µ–µ—à—å"]):
        response = f"""‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –í–∞—Å–î–æ–º, {user_name}:

ü§ñ –ß–¢–û –Ø –£–ú–ï–Æ:
‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —É—Å–ª—É–≥–∞–º —É–±–æ—Ä–∫–∏
‚úÖ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
‚úÖ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏
‚úÖ –ü–æ–º–æ–≥–∞—Ç—å —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–∞

üìù –ö–û–ú–ê–ù–î–´:
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ "—É–±–æ—Ä–∫–∞" - —É–∑–Ω–∞—Ç—å –æ–± —É—Å–ª—É–≥–∞—Ö
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ "—Ü–µ–Ω—ã" - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã  
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ "–∫–æ–Ω—Ç–∞–∫—Ç—ã" - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ "–æ –∫–æ–º–ø–∞–Ω–∏–∏" - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—Å–î–æ–º

üí¨ –ü–†–ò–ú–ï–†–´ –ó–ê–ü–†–û–°–û–í:
‚Ä¢ "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —É–±–∏—Ä–∞—Ç—å –ø–æ–¥—ä–µ–∑–¥?"
‚Ä¢ "–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—É—é —É–±–æ—Ä–∫—É"
‚Ä¢ "–°–≤—è–∂–∏—Ç–µ –º–µ–Ω—è —Å –ú–∞–∫—Å–∏–º–æ–º"
‚Ä¢ "–†–∞–±–æ—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ?"

üéØ –ù–ï –ù–ê–®–õ–ò –û–¢–í–ï–¢?
–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å - —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å –∏–ª–∏ –ø–µ—Ä–µ–≤–µ–¥—É –≤–∞—Å –Ω–∞ –ú–∞–∫—Å–∏–º–∞ –ú–∞—Å–ª–æ–≤–∞!"""

    # –ñ–∞–ª–æ–±—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã
    elif any(word in message_lower for word in ["–ø–ª–æ—Ö–æ", "–∂–∞–ª–æ–±–∞", "–ø—Ä–æ–±–ª–µ–º–∞", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–Ω–µ–¥–æ–≤–æ–ª—å–Ω"]):
        response = f"""üòî –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, {user_name}!

–ú—ã —Å–µ—Ä—å–µ–∑–Ω–æ –æ—Ç–Ω–æ—Å–∏–º—Å—è –∫ –∫–∞–∂–¥–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é.

üîß –ß–¢–û –î–ï–õ–ê–ï–ú:
1Ô∏è‚É£ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–∑–±–µ—Ä–µ–º –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é
2Ô∏è‚É£ –ü—Ä–∏–º–µ–º –º–µ—Ä—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤
3Ô∏è‚É£ –ö–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º —É—â–µ—Ä–± –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
4Ô∏è‚É£ –£–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è

üìû –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –°–í–Ø–ó–¨:
‚Ä¢ –ú–∞–∫—Å–∏–º –ú–∞—Å–ª–æ–≤ –ª–∏—á–Ω–æ –∑–∞–π–º–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å–æ–º
‚Ä¢ –ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–ª—É–∂–±–∞: 24/7
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã: 100%

üí° –û–ü–ò–®–ò–¢–ï –ü–†–û–ë–õ–ï–ú–£:
–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ - –∏ –º—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏—Å–ø—Ä–∞–≤–∏–º —Å–∏—Ç—É–∞—Ü–∏—é!

‚úÖ –í–∞—Å–î–æ–º –¥–æ—Ä–æ–∂–∏—Ç –∫–∞–∂–¥—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º!"""

    # –û–±—â–∏–π —Å–ª—É—á–∞–π
    else:
        response = f"""–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, {user_name}! üè†

–ö–æ–º–ø–∞–Ω–∏—è –í–∞—Å–î–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ö–∞–ª—É–≥–µ –∏ –æ–±–ª–∞—Å—Ç–∏ —É–∂–µ 8+ –ª–µ—Ç. 

üè† –ú–´ –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú–°–Ø –ù–ê:
‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —É–±–æ—Ä–∫–µ –ø–æ–¥—ä–µ–∑–¥–æ–≤
‚úÖ –ö–ª–∏–Ω–∏–Ω–≥–µ –ø—Ä–∏–¥–æ–º–æ–≤—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∂–∏–ª–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é
‚úÖ –†–µ—à–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ñ–ö–•

üìä –ù–ê–®–ò –¶–ò–§–†–´:
‚Ä¢ 500+ –¥–æ–º–æ–≤ –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
‚Ä¢ 100+ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤  
‚Ä¢ 5000+ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ 98% –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤

üí¨ –ü–†–ò–ú–ï–† –í–û–ü–†–û–°–û–í:
‚Ä¢ "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —É–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–∞?"
‚Ä¢ "–†–∞–±–æ—Ç–∞–µ—Ç–µ –ª–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ?"
‚Ä¢ "–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—É—é —É–±–æ—Ä–∫—É"

üìû –ù–£–ñ–ù–ê –ü–û–ú–û–©–¨?
–ú–µ–Ω–µ–¥–∂–µ—Ä –ú–∞–∫—Å–∏–º –ú–∞—Å–ª–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–∂–µ—Ç —Å –≤—ã–±–æ—Ä–æ–º —É—Å–ª—É–≥!

–ü–∏—à–∏—Ç–µ - —è –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! ü§ñ"""
    
    add_log("SUCCESS", f"üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç", {
        "user_message": user_message[:50],
        "response_length": len(response),
        "user_name": user_name
    })
    
    return response

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –í–°–ï–• –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    client_ip = request.client.host if request.client else "unknown"
    method = request.method
    url = str(request.url)
    
    print(f"üì• ========== –ù–û–í–´–ô –ó–ê–ü–†–û–° ==========")
    print(f"üì• IP: {client_ip}")
    print(f"üì• METHOD: {method}")
    print(f"üì• URL: {url}")
    print(f"üì• TIME: {datetime.utcnow().isoformat()}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    response = await call_next(request)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    process_time = time.time() - start_time
    status_code = response.status_code
    
    print(f"üì§ ========== –û–¢–í–ï–¢ –ì–û–¢–û–í ==========")
    print(f"üì§ STATUS: {status_code}")
    print(f"üì§ TIME: {process_time:.3f}s")
    print(f"üì§ =====================================")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    system_status["total_requests"] += 1
    system_status["last_activity"] = datetime.utcnow().isoformat()
    
    add_log("INFO", f"REQUEST {method} {url} -> {status_code} ({process_time:.3f}s)", {
        "ip": client_ip,
        "method": method,
        "url": url,
        "status": status_code,
        "duration": f"{process_time:.3f}s"
    })
    
    return response

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    print("üè† ========== –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ==========")
    print("üè† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    print("üè† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ")
    
    add_log("INFO", "üè† –ó–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã", {"endpoint": "/"})
    
    response_data = {
        "message": "ü§ñ AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –í–∞—Å–î–æ–º - PRODUCTION READY",
        "status": "‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ Render",
        "company": "–í–∞—Å–î–æ–º - –ö–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è –ö–∞–ª—É–≥–∞",
        "version": "4.0.0 (Production Ready Edition)",
        "telegram_bot": "@aitest123432_bot",
        "logs_count": len(application_logs),
        "system_status": system_status,
        "current_time": datetime.utcnow().isoformat(),
        "features": {
            "smart_ai_responses": True,
            "telegram_bot": True,
            "bitrix24_integration": True,
            "realtime_logging": True,
            "production_ready": True
        },
        "endpoints": {
            "health": "/health",
            "webhook_setup": "/telegram/set-webhook", 
            "dashboard": "/dashboard",
            "logs": "/logs",
            "test_ai": "/test-ai"
        }
    }
    
    print(f"üè† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: {len(str(response_data))} —Å–∏–º–≤–æ–ª–æ–≤")
    return response_data

@app.get("/health")
async def health_check():
    """Health check endpoint —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    
    print("üíä ========== HEALTH CHECK ==========")
    print("üíä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_vars = {
        "TELEGRAM_BOT_TOKEN": os.environ.get("TELEGRAM_BOT_TOKEN") or os.environ.get("BOT_TOKEN"),
        "TELEGRAM_WEBHOOK_URL": os.environ.get("TELEGRAM_WEBHOOK_URL"),
        "BITRIX24_WEBHOOK_URL": os.environ.get("BITRIX24_WEBHOOK_URL"),
        "EMERGENT_LLM_KEY": os.environ.get("EMERGENT_LLM_KEY")
    }
    
    print("üíä –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    for key, value in env_vars.items():
        status = "‚úÖ –ù–ê–°–¢–†–û–ï–ù–ê" if value else "‚ùå –ù–ï –ù–ê–°–¢–†–û–ï–ù–ê"
        value_preview = value[:20] + "..." if value and len(value) > 20 else value
        print(f"üíä {key}: {status} ({value_preview})")
    
    env_check = {k: bool(v) for k, v in env_vars.items()}
    
    health_status = {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "service": "VasDom AI Assistant (Production Ready)",
        "version": "4.0.0",
        "deployment": "render",
        "uptime": system_status["startup_time"],
        "environment_variables": env_check,
        "environment_values": {k: v[:20] + "..." if v and len(v) > 20 else v for k, v in env_vars.items()},
        "statistics": system_status,
        "logs_available": len(application_logs),
        "ai_mode": "smart_responses_enabled",
        "database": {
            "mongodb_configured": bool(mongo_url),
            "mongodb_url": mongo_url[:50] + "..." if mongo_url and len(mongo_url) > 50 else mongo_url,
            "mongodb_client": "connected" if db is not None else "not_connected",
            "database_name": os.environ.get("DB_NAME", "vasdom_db")
        }
    }
    
    print(f"üíä Health check complete: {health_status['status']}")
    add_log("INFO", "üíä Health check –≤—ã–ø–æ–ª–Ω–µ–Ω", health_status)
    
    return health_status

@app.get("/api/mongodb/test")
async def test_mongodb():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB"""
    
    if not db or db is None:
        return {"status": "error", "message": "MongoDB –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
    
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        server_info = await mongo_client.server_info()
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å
        test_doc = {
            "test_message": "VasDom AI Assistant connection test",
            "timestamp": datetime.utcnow(),
            "version": "4.0.0"
        }
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        result = await db.connection_tests.insert_one(test_doc)
        
        return {
            "status": "success",
            "message": "‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
            "database": os.environ.get("DB_NAME", "vasdom_db"),
            "mongo_version": server_info.get("version"),
            "test_document_id": str(result.inserted_id),
            "connection_url": mongo_url[:50] + "..." if len(mongo_url) > 50 else mongo_url
        }
        
    except Exception as e:
        return {
            "status": "error", 
            "message": f"‚ùå –û—à–∏–±–∫–∞ MongoDB: {str(e)}",
            "mongo_url_configured": bool(mongo_url)
        }

@app.get("/test-ai")
async def test_ai_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞"""
    
    print("üß† ========== –¢–ï–°–¢ AI –°–ï–†–í–ò–°–ê ==========")
    
    test_message = "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö –ø–æ —É–±–æ—Ä–∫–µ –ø–æ–¥—ä–µ–∑–¥–æ–≤ –≤ –ö–∞–ª—É–≥–µ."
    
    add_log("INFO", "üß† –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ AI —Å–µ—Ä–≤–∏—Å–∞", {"test_message": test_message})
    
    try:
        ai_response = generate_smart_response(test_message, {"user_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"})
        
        return {
            "status": "‚úÖ AI –†–ê–ë–û–¢–ê–ï–¢ (SMART MODE)",
            "test_message": test_message,
            "ai_response": ai_response,
            "response_length": len(ai_response),
            "timestamp": datetime.utcnow().isoformat(),
            "mode": "smart_keyword_based_responses",
            "company": "VasDom - –ö–∞–ª—É–≥–∞"
        }
    except Exception as e:
        return {
            "status": "‚ùå AI –û–®–ò–ë–ö–ê",
            "error": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }

@app.get("/dashboard")
async def get_dashboard():
    """–î–∞—à–±–æ—Ä–¥ —Å –ª–æ–≥–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    
    print("üìä ========== –î–ê–®–ë–û–†–î –ó–ê–ü–†–û–° ==========")
    print(f"üìä –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {len(application_logs)}")
    print(f"üìä Telegram —Å–æ–æ–±—â–µ–Ω–∏–π: {len(telegram_messages)}")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {system_status['total_requests']}")
    
    add_log("INFO", "üìä –ó–∞–ø—Ä–æ—Å –¥–∞—à–±–æ—Ä–¥–∞", {"endpoint": "/dashboard"})
    
    dashboard_data = {
        "success": True,
        "company": "–í–∞—Å–î–æ–º - –ö–∞–ª—É–≥–∞",
        "message": "üéâ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! (Production Ready Edition)",
        "system_status": system_status,
        "telegram_bot": "@aitest123432_bot",
        "recent_logs": application_logs[-20:], # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–æ–≥–æ–≤
        "telegram_messages": telegram_messages[-10:], # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        "metrics": {
            "houses": {"–ö–∞–ª—É–≥–∞": 500, "–û–±–ª–∞—Å—Ç—å": 150},
            "employees": 100,
            "status": "active",
            "total_requests": system_status["total_requests"],
            "telegram_updates": system_status["telegram_updates"],
            "errors": system_status["errors"],
            "ai_mode": "smart_responses"
        },
        "environment": {
            "telegram_configured": bool(os.environ.get("TELEGRAM_BOT_TOKEN")),
            "webhook_configured": bool(os.environ.get("TELEGRAM_WEBHOOK_URL")),
            "bitrix24_configured": bool(os.environ.get("BITRIX24_WEBHOOK_URL")),
            "ai_configured": "smart_mode_enabled"
        }
    }
    
    print(f"üìä –î–∞—à–±–æ—Ä–¥ –≥–æ—Ç–æ–≤: {len(str(dashboard_data))} —Å–∏–º–≤–æ–ª–æ–≤")
    return dashboard_data

@app.get("/logs")
async def get_logs():
    """Endpoint –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ª–æ–≥–æ–≤"""
    
    print("üìã ========== –õ–û–ì–ò –ó–ê–ü–†–û–° ==========")
    print(f"üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(application_logs)} –ª–æ–≥–æ–≤")
    
    return {
        "total_logs": len(application_logs),
        "logs": application_logs,
        "system_status": system_status,
        "telegram_messages": telegram_messages
    }

@app.get("/telegram/set-webhook")
async def set_telegram_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram webhook"""
    
    print("üîó ========== –£–°–¢–ê–ù–û–í–ö–ê WEBHOOK ==========")
    
    add_log("INFO", "üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –£–°–¢–ê–ù–û–í–ö–£ TELEGRAM WEBHOOK", {"step": "start"})
    
    try:
        webhook_url = os.environ.get("TELEGRAM_WEBHOOK_URL")
        bot_token = os.environ.get("TELEGRAM_BOT_TOKEN") or os.environ.get("BOT_TOKEN")
        
        if not webhook_url or not bot_token:
            missing = []
            if not webhook_url: missing.append("TELEGRAM_WEBHOOK_URL")
            if not bot_token: missing.append("TELEGRAM_BOT_TOKEN")
            
            return {
                "status": "‚ùå –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ï–ü–û–õ–ù–ê–Ø",
                "missing_variables": missing,
                "instructions": [
                    "1. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Render Environment",
                    "2. –î–æ–∂–¥–∏—Ç–µ—Å—å redeploy (3-5 –º–∏–Ω—É—Ç)",
                    "3. –í—ã–∑–æ–≤–∏—Ç–µ —ç—Ç–æ—Ç endpoint —Å–Ω–æ–≤–∞"
                ]
            }
        
        import httpx
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            telegram_api_url = f"https://api.telegram.org/bot{bot_token}/setWebhook"
            
            payload = {
                "url": webhook_url,
                "drop_pending_updates": True,
                "allowed_updates": ["message", "callback_query"]
            }
            
            response = await client.post(telegram_api_url, json=payload)
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    add_log("SUCCESS", f"‚úÖ WEBHOOK –£–°–¢–ê–ù–û–í–õ–ï–ù: {webhook_url}")
                    
                    return {
                        "status": "‚úÖ –ü–û–õ–ù–´–ô –£–°–ü–ï–•!",
                        "message": "Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
                        "webhook_url": webhook_url,
                        "bot": "@aitest123432_bot",
                        "ai_mode": "smart_responses_enabled",
                        "next_steps": [
                            "1. –ù–∞–π–¥–∏—Ç–µ @aitest123432_bot –≤ Telegram",
                            "2. –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                            "3. –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç —É–º–Ω–æ –∏ –ø–æ-—Ä—É—Å—Å–∫–∏!",
                            "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /dashboard –¥–ª—è –ª–æ–≥–æ–≤"
                        ]
                    }
                else:
                    return {"status": "‚ùå Telegram API –æ—à–∏–±–∫–∞", "error": result.get("description")}
            else:
                return {"status": "‚ùå HTTP –æ—à–∏–±–∫–∞", "http_status": response.status_code}
    
    except Exception as e:
        add_log("ERROR", f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        return {"status": "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê", "error": str(e)}

@app.post("/telegram/webhook")
async def telegram_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram webhook —Å —É–º–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    
    print("ü§ñ ========== TELEGRAM WEBHOOK ==========")
    system_status["telegram_updates"] += 1
    
    try:
        data = await request.json()
        
        add_log("INFO", "ü§ñ –ü–û–õ–£–ß–ï–ù TELEGRAM UPDATE", {
            "update_keys": list(data.keys()),
            "update_id": data.get("update_id")
        })
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'message' in data:
            message = data['message']
            chat_id = message.get('chat', {}).get('id')
            text = message.get('text', '')
            user_info = message.get('from', {})
            user_name = user_info.get('first_name', 'Unknown')
            username = user_info.get('username', 'no_username')
            
            message_info = {
                "chat_id": chat_id,
                "user_name": user_name,
                "username": username,
                "text": text,
                "timestamp": datetime.utcnow().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
            telegram_messages.append(message_info)
            if len(telegram_messages) > 50:
                telegram_messages[:] = telegram_messages[-50:]
            
            add_log("SUCCESS", f"üí¨ –°–û–û–ë–©–ï–ù–ò–ï –û–¢ {user_name}: {text[:50]}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
            try:
                smart_response = generate_smart_response(text, {
                    "user_name": user_name,
                    "username": username,
                    "chat_id": chat_id
                })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Telegram API
                bot_token = os.environ.get("TELEGRAM_BOT_TOKEN") or os.environ.get("BOT_TOKEN")
                if bot_token:
                    import httpx
                    
                    send_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                    send_data = {
                        "chat_id": chat_id,
                        "text": smart_response,
                        "parse_mode": "HTML"
                    }
                    
                    async with httpx.AsyncClient(timeout=10.0) as client:
                        telegram_response = await client.post(send_url, json=send_data)
                        if telegram_response.status_code == 200:
                            add_log("SUCCESS", f"‚úÖ –£–ú–ù–´–ô –û–¢–í–ï–¢ –û–¢–ü–†–ê–í–õ–ï–ù ({len(smart_response)} —Å–∏–º–≤–æ–ª–æ–≤)")
                        else:
                            add_log("ERROR", f"‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò: {telegram_response.status_code}")
                            
            except Exception as ai_error:
                add_log("ERROR", f"‚ùå –û–®–ò–ë–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–í–ï–¢–ê: {str(ai_error)}")
        
        return {"ok": True}
    
    except Exception as e:
        add_log("ERROR", f"‚ùå –û–®–ò–ë–ö–ê WEBHOOK: {str(e)}")
        return {"ok": False, "error": str(e)}

# Bitrix24 integration endpoints
@app.get("/api/bitrix24/test")
async def test_bitrix24():
    """Test Bitrix24 connection"""
    try:
        import httpx
        webhook_url = os.getenv("BITRIX24_WEBHOOK_URL")
        if not webhook_url:
            return {"status": "error", "message": "BITRIX24_WEBHOOK_URL not configured"}
        
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.post(f"{webhook_url}user.current")
            if response.status_code == 200:
                result = response.json()
                user = result.get("result", {})
                return {
                    "status": "success",
                    "user": {"NAME": user.get("NAME"), "LAST_NAME": user.get("LAST_NAME")},
                    "integration_status": "‚úÖ –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï BITRIX24"
                }
            else:
                return {"status": "error", "message": f"HTTP {response.status_code}"}
    except Exception as e:
        return {"status": "error", "message": str(e)}

@app.get("/api/bitrix24/deals")
async def get_bitrix24_deals():
    """Get deals from Bitrix24"""
    try:
        import httpx
        webhook_url = os.getenv("BITRIX24_WEBHOOK_URL")
        if not webhook_url:
            return {"error": "BITRIX24_WEBHOOK_URL not configured"}
        
        async with httpx.AsyncClient(timeout=15) as client:
            response = await client.post(f"{webhook_url}crm.deal.list",
                json={"select": ["ID", "TITLE", "STAGE_ID", "OPPORTUNITY"], "start": 0})
            if response.status_code == 200:
                result = response.json()
                deals = result.get("result", [])
                return {"deals": deals, "count": len(deals), "data_source": "‚úÖ –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï BITRIX24"}
            else:
                return {"error": f"HTTP {response.status_code}"}
    except Exception as e:
        return {"error": str(e)}

# Startup event
@app.on_event("startup")
async def startup_event():
    print("üöÄ ========== –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø ==========")
    print("üöÄ VasDom AI Assistant - Production Ready Edition")
    print("üöÄ Smart AI responses enabled!")
    print("üöÄ Ready for Render deployment!")
    print("üöÄ ==========================================")
    
    add_log("SUCCESS", "üöÄ VASDOM AI ASSISTANT –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï! (Production Ready)", {
        "timestamp": datetime.utcnow().isoformat(),
        "version": "4.0.0",
        "ai_mode": "smart_responses",
        "company": "VasDom - –ö–∞–ª—É–≥–∞"
    })
    logger.info("‚úÖ VasDom AI Assistant —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª! –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã!")

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)