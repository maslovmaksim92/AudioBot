import time
import os
from fastapi import FastAPI, APIRouter, Request
from loguru import logger
from datetime import datetime
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Render Dashboard
logger.remove()  # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä
logger.add(sys.stdout, format="üöÄ {time:HH:mm:ss} | {level} | {message}", level="INFO")
logger.add(sys.stderr, format="üö® {time:HH:mm:ss} | {level} | {message}", level="ERROR")

# –°–æ–∑–¥–∞—ë–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

print("üöÄ =============================================================")
print("üöÄ VASDOM AI ASSISTANT STARTING UP - FULL LOGGING ENABLED")
print("üöÄ =============================================================")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞)
application_logs = []
telegram_messages = []
system_status = {
    "startup_time": datetime.utcnow().isoformat(),
    "total_requests": 0,
    "telegram_updates": 0,
    "errors": 0,
    "last_activity": None
}

def add_log(level: str, message: str, details: dict = None):
    """–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ + –≤—ã–≤–µ—Å—Ç–∏ –≤ Render"""
    global application_logs
    
    timestamp = datetime.utcnow().isoformat()
    log_entry = {
        "timestamp": timestamp,
        "level": level,
        "message": message,
        "details": details or {}
    }
    application_logs.append(log_entry)
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
    if len(application_logs) > 100:
        application_logs = application_logs[-100:]
    
    # –í–´–í–û–î–ò–ú –í RENDER DASHBOARD (stdout)
    render_message = f"üìã [{timestamp}] {level}: {message}"
    print(render_message)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏, –≤—ã–≤–æ–¥–∏–º –∏—Ö —Ç–æ–∂–µ
    if details:
        print(f"üìù –î–ï–¢–ê–õ–ò: {details}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –≤ loguru
    if level == "ERROR":
        logger.error(f"üî¥ {message}")
    elif level == "WARNING":
        logger.warning(f"üü° {message}")
    elif level == "SUCCESS":
        logger.success(f"üü¢ {message}")
    else:  # INFO
        logger.info(f"üîµ {message}")

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –í–°–ï–• –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    client_ip = request.client.host if request.client else "unknown"
    method = request.method
    url = str(request.url)
    
    print(f"üì• ========== –ù–û–í–´–ô –ó–ê–ü–†–û–° ==========")
    print(f"üì• IP: {client_ip}")
    print(f"üì• METHOD: {method}")
    print(f"üì• URL: {url}")
    print(f"üì• TIME: {datetime.utcnow().isoformat()}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    response = await call_next(request)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    process_time = time.time() - start_time
    status_code = response.status_code
    
    print(f"üì§ ========== –û–¢–í–ï–¢ –ì–û–¢–û–í ==========")
    print(f"üì§ STATUS: {status_code}")
    print(f"üì§ TIME: {process_time:.3f}s")
    print(f"üì§ =====================================")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    system_status["total_requests"] += 1
    system_status["last_activity"] = datetime.utcnow().isoformat()
    
    add_log("INFO", f"REQUEST {method} {url} -> {status_code} ({process_time:.3f}s)", {
        "ip": client_ip,
        "method": method,
        "url": url,
        "status": status_code,
        "duration": f"{process_time:.3f}s"
    })
    
    return response

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    print("üè† ========== –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ==========")
    print("üè† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    print("üè† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ")
    
    add_log("INFO", "üè† –ó–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã", {"endpoint": "/"})
    
    response_data = {
        "message": "ü§ñ AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –í–∞—Å–î–æ–º - –ü–û–õ–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï",
        "status": "‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ Render",
        "company": "–í–∞—Å–î–æ–º - –ö–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
        "version": "3.1.0 (Full Logging Edition)",
        "telegram_bot": "@aitest123432_bot",
        "logs_count": len(application_logs),
        "system_status": system_status,
        "current_time": datetime.utcnow().isoformat(),
        "endpoints": {
            "health": "/health",
            "webhook_setup": "/telegram/set-webhook",
            "dashboard": "/dashboard",
            "logs": "/logs",
            "test_chat": "/test-chat"
        }
    }
    
    print(f"üè† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: {len(str(response_data))} —Å–∏–º–≤–æ–ª–æ–≤")
    return response_data

@app.get("/health")
async def health_check():
    """Health check endpoint —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    
    print("üíä ========== HEALTH CHECK ==========")
    print("üíä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_vars = {
        "TELEGRAM_BOT_TOKEN": os.environ.get("TELEGRAM_BOT_TOKEN"),
        "TELEGRAM_WEBHOOK_URL": os.environ.get("TELEGRAM_WEBHOOK_URL"),
        "BITRIX24_WEBHOOK_URL": os.environ.get("BITRIX24_WEBHOOK_URL"),
        "EMERGENT_LLM_KEY": os.environ.get("EMERGENT_LLM_KEY")
    }
    
    print("üíä –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    for key, value in env_vars.items():
        status = "‚úÖ –ù–ê–°–¢–†–û–ï–ù–ê" if value else "‚ùå –ù–ï –ù–ê–°–¢–†–û–ï–ù–ê"
        value_preview = value[:20] + "..." if value and len(value) > 20 else value
        print(f"üíä   {key}: {status} ({value_preview})")
    
    env_check = {k: bool(v) for k, v in env_vars.items()}
    
    health_status = {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "service": "VasDom AI Assistant (Full Logging Edition)",
        "version": "3.1.0",
        "deployment": "render",
        "uptime": system_status["startup_time"],
        "environment_variables": env_check,
        "environment_values": {k: v[:20] + "..." if v and len(v) > 20 else v for k, v in env_vars.items()},
        "statistics": system_status,
        "logs_available": len(application_logs)
    }
    
    print(f"üíä Health check complete: {health_status['status']}")
    add_log("INFO", "üíä Health check –≤—ã–ø–æ–ª–Ω–µ–Ω", health_status)
    
    return health_status

@app.get("/test-chat")
async def test_chat():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞"""
    
    print("üí¨ ========== –¢–ï–°–¢ –ß–ê–¢–ê ==========")
    print("üí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–∞—Ç–∞...")
    
    test_message = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞."
    
    add_log("INFO", "üí¨ –¢–µ—Å—Ç —á–∞—Ç–∞ –∑–∞–ø—É—â–µ–Ω", {"test_message": test_message})
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º AI –æ—Ç–≤–µ—Ç
    ai_response = f"ü§ñ –ü–æ–ª—É—á–∏–ª —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{test_message}'. –ß–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
    
    print(f"üí¨ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {test_message}")
    print(f"üí¨ AI –æ—Ç–≤–µ—Ç: {ai_response}")
    
    add_log("SUCCESS", "üí¨ –¢–µ—Å—Ç —á–∞—Ç–∞ —É—Å–ø–µ—à–µ–Ω", {"ai_response": ai_response})
    
    return {
        "status": "success",
        "test_message": test_message,
        "ai_response": ai_response,
        "timestamp": datetime.utcnow().isoformat(),
        "logs_count": len(application_logs)
    }

@app.get("/dashboard")
async def get_dashboard():
    """–î–∞—à–±–æ—Ä–¥ —Å –ª–æ–≥–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    
    print("üìä ========== –î–ê–®–ë–û–†–î –ó–ê–ü–†–û–° ==========")
    print(f"üìä –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {len(application_logs)}")
    print(f"üìä Telegram —Å–æ–æ–±—â–µ–Ω–∏–π: {len(telegram_messages)}")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {system_status['total_requests']}")
    
    add_log("INFO", "üìä –ó–∞–ø—Ä–æ—Å –¥–∞—à–±–æ—Ä–¥–∞", {"endpoint": "/dashboard"})
    
    dashboard_data = {
        "success": True,
        "company": "–í–∞—Å–î–æ–º",
        "message": "üéâ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! (Full Logging Edition)",
        "system_status": system_status,
        "telegram_bot": "@aitest123432_bot",
        "recent_logs": application_logs[-20:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–æ–≥–æ–≤
        "telegram_messages": telegram_messages[-10:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        "metrics": {
            "houses": {"–ö–∞–ª—É–≥–∞": 500, "–ö–µ–º–µ—Ä–æ–≤–æ": 100},
            "employees": 100,
            "status": "active",
            "total_requests": system_status["total_requests"],
            "telegram_updates": system_status["telegram_updates"],
            "errors": system_status["errors"]
        },
        "environment": {
            "telegram_configured": bool(os.environ.get("TELEGRAM_BOT_TOKEN")),
            "webhook_configured": bool(os.environ.get("TELEGRAM_WEBHOOK_URL")),
            "bitrix24_configured": bool(os.environ.get("BITRIX24_WEBHOOK_URL")),
            "ai_configured": bool(os.environ.get("EMERGENT_LLM_KEY"))
        }
    }
    
    print(f"üìä –î–∞—à–±–æ—Ä–¥ –≥–æ—Ç–æ–≤: {len(str(dashboard_data))} —Å–∏–º–≤–æ–ª–æ–≤")
    return dashboard_data

@app.get("/logs")
async def get_logs():
    """Endpoint –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ª–æ–≥–æ–≤"""
    
    print("üìã ========== –õ–û–ì–ò –ó–ê–ü–†–û–° ==========")
    print(f"üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(application_logs)} –ª–æ–≥–æ–≤")
    
    return {
        "total_logs": len(application_logs),
        "logs": application_logs,
        "system_status": system_status,
        "telegram_messages": telegram_messages
    }

@app.get("/live-status")
async def live_status():
    """–ñ–∏–≤–æ–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    print("üì∫ ========== LIVE STATUS CHECK ==========")
    print(f"üì∫ –í—Ä–µ–º—è: {datetime.utcnow().isoformat()}")
    print(f"üì∫ –ó–∞–ø—Ä–æ—Å–æ–≤: {system_status['total_requests']}")
    print(f"üì∫ Telegram updates: {system_status['telegram_updates']}")
    print(f"üì∫ –û—à–∏–±–æ–∫: {system_status['errors']}")
    print(f"üì∫ –õ–æ–≥–æ–≤: {len(application_logs)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–æ–≥–æ–≤
    recent_logs = application_logs[-5:] if application_logs else []
    print("üì∫ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–æ–≥–æ–≤:")
    for log in recent_logs:
        print(f"üì∫   [{log['timestamp']}] {log['level']}: {log['message']}")
    
    return {
        "live_time": datetime.utcnow().isoformat(),
        "status": "‚úÖ ALIVE",
        "uptime_seconds": (datetime.utcnow() - datetime.fromisoformat(system_status["startup_time"])).total_seconds(),
        "statistics": system_status,
        "recent_logs": recent_logs,
        "environment_check": {
            "telegram_bot_token": "‚úÖ" if os.environ.get("TELEGRAM_BOT_TOKEN") else "‚ùå",
            "telegram_webhook_url": "‚úÖ" if os.environ.get("TELEGRAM_WEBHOOK_URL") else "‚ùå",
            "bitrix24_webhook_url": "‚úÖ" if os.environ.get("BITRIX24_WEBHOOK_URL") else "‚ùå",
            "emergent_llm_key": "‚úÖ" if os.environ.get("EMERGENT_LLM_KEY") else "‚ùå"
        },
        "message": "üéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –í–°–ï –¥–µ–π—Å—Ç–≤–∏—è!"
    }

@app.get("/telegram/set-webhook")
async def set_telegram_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram webhook - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ó–ê–õ–û–ì–ò–†–û–í–ê–ù–û"""
    
    print("üîó ========== –£–°–¢–ê–ù–û–í–ö–ê WEBHOOK ==========")
    
    add_log("INFO", "üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –£–°–¢–ê–ù–û–í–ö–£ TELEGRAM WEBHOOK", {"step": "start"})
    
    try:
        webhook_url = os.environ.get("TELEGRAM_WEBHOOK_URL")
        bot_token = os.environ.get("TELEGRAM_BOT_TOKEN")
        
        print(f"üîó TELEGRAM_WEBHOOK_URL: {webhook_url}")
        print(f"üîó TELEGRAM_BOT_TOKEN: {'‚úÖ –ï–°–¢–¨' if bot_token else '‚ùå –ù–ï–¢'}")
        
        add_log("INFO", f"üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è", {
            "webhook_url": webhook_url, 
            "bot_token_configured": bool(bot_token)
        })
        
        if not webhook_url or not bot_token:
            missing = []
            if not webhook_url: missing.append("TELEGRAM_WEBHOOK_URL")
            if not bot_token: missing.append("TELEGRAM_BOT_TOKEN")
            
            error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}"
            print(f"üîó –û–®–ò–ë–ö–ê: {error_msg}")
            
            add_log("ERROR", error_msg, {"missing_vars": missing})
            system_status["errors"] += 1
            
            return {
                "status": "‚ùå –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ï–ü–û–õ–ù–ê–Ø",
                "missing_variables": missing,
                "required_env_vars": {
                    "TELEGRAM_WEBHOOK_URL": "https://audiobot-qq2.onrender.com/telegram/webhook",
                    "TELEGRAM_BOT_TOKEN": "8327964628:AAHMIgT1XiGEkLc34nogRGZt-Ox-9R0TSn0"
                },
                "instructions": [
                    "1. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Render Environment",
                    "2. –î–æ–∂–¥–∏—Ç–µ—Å—å redeploy (3-5 –º–∏–Ω—É—Ç)",
                    "3. –í—ã–∑–æ–≤–∏—Ç–µ —ç—Ç–æ—Ç endpoint —Å–Ω–æ–≤–∞"
                ],
                "logs": application_logs[-5:]
            }
        
        print(f"üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram API...")
        add_log("INFO", "üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram API", {
            "telegram_url": f"https://api.telegram.org/bot{bot_token[:10]}***/setWebhook",
            "webhook_url": webhook_url
        })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram API
        import httpx
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            telegram_api_url = f"https://api.telegram.org/bot{bot_token}/setWebhook"
            
            payload = {
                "url": webhook_url,
                "drop_pending_updates": True,
                "allowed_updates": ["message", "callback_query"]
            }
            
            print(f"üîó Payload: {payload}")
            add_log("INFO", "üì° –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ Telegram", payload)
            
            response = await client.post(telegram_api_url, json=payload)
            
            print(f"üîó Response status: {response.status_code}")
            print(f"üîó Response text: {response.text}")
            
            add_log("INFO", f"üì• –û—Ç–≤–µ—Ç –æ—Ç Telegram API", {
                "status_code": response.status_code,
                "response_text": response.text[:500]
            })
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    success_msg = f"‚úÖ WEBHOOK –£–°–¢–ê–ù–û–í–õ–ï–ù –£–°–ü–ï–®–ù–û: {webhook_url}"
                    print(f"üîó –£–°–ü–ï–•: {success_msg}")
                    
                    add_log("SUCCESS", success_msg, {
                        "webhook_url": webhook_url,
                        "telegram_response": result
                    })
                    
                    return {
                        "status": "‚úÖ –ü–û–õ–ù–´–ô –£–°–ü–ï–•!",
                        "message": "Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
                        "webhook_url": webhook_url,
                        "bot": "@aitest123432_bot",
                        "telegram_response": result,
                        "next_steps": [
                            "1. –ù–∞–π–¥–∏—Ç–µ @aitest123432_bot –≤ Telegram",
                            "2. –ù–∞–ø–∏—à–∏—Ç–µ /start",
                            "3. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!",
                            "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /dashboard –¥–ª—è –ª–æ–≥–æ–≤"
                        ],
                        "logs": application_logs[-3:]
                    }
                else:
                    error_msg = f"‚ùå TELEGRAM API –û–®–ò–ë–ö–ê: {result.get('description')}"
                    print(f"üîó –û–®–ò–ë–ö–ê: {error_msg}")
                    
                    add_log("ERROR", error_msg, {"telegram_response": result})
                    system_status["errors"] += 1
                    
                    return {
                        "status": "‚ùå Telegram API –æ—à–∏–±–∫–∞",
                        "error": result.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
                        "telegram_response": result,
                        "logs": application_logs[-5:]
                    }
            else:
                error_msg = f"‚ùå HTTP –û–®–ò–ë–ö–ê: {response.status_code}"
                print(f"üîó –û–®–ò–ë–ö–ê: {error_msg}")
                
                add_log("ERROR", error_msg, {
                    "status_code": response.status_code,
                    "response": response.text[:300]
                })
                system_status["errors"] += 1
                
                return {
                    "status": "‚ùå HTTP –æ—à–∏–±–∫–∞",
                    "http_status": response.status_code,
                    "response": response.text[:500],
                    "logs": application_logs[-5:]
                }
                
    except Exception as e:
        error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}"
        print(f"üîó –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        
        add_log("ERROR", error_msg, {"exception": str(e)})
        system_status["errors"] += 1
        
        return {
            "status": "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê",
            "error": str(e),
            "troubleshooting": [
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –¥–æ–º–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –ø—É–±–ª–∏—á–Ω–æ",
                "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ Render –Ω–∞ –æ—à–∏–±–∫–∏"
            ],
            "logs": application_logs[-10:]
        }

@app.post("/telegram/webhook")
async def telegram_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram webhook - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ó–ê–õ–û–ì–ò–†–û–í–ê–ù–û"""
    
    print("ü§ñ ========== TELEGRAM WEBHOOK ==========")
    system_status["telegram_updates"] += 1
    
    try:
        data = await request.json()
        
        print(f"ü§ñ –ü–æ–ª—É—á–µ–Ω update –æ—Ç Telegram:")
        print(f"ü§ñ Keys: {list(data.keys())}")
        print(f"ü§ñ Data: {str(data)[:200]}...")
        
        add_log("INFO", "ü§ñ –ü–û–õ–£–ß–ï–ù TELEGRAM UPDATE", {
            "update_keys": list(data.keys()),
            "update_id": data.get("update_id"),
            "data_size": len(str(data))
        })
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'message' in data:
            message = data['message']
            chat_id = message.get('chat', {}).get('id')
            text = message.get('text', '')
            user_info = message.get('from', {})
            user_name = user_info.get('first_name', 'Unknown')
            username = user_info.get('username', 'no_username')
            
            print(f"ü§ñ üí¨ –°–û–û–ë–©–ï–ù–ò–ï:")
            print(f"ü§ñ   –û—Ç: {user_name} (@{username})")
            print(f"ü§ñ   Chat ID: {chat_id}")
            print(f"ü§ñ   –¢–µ–∫—Å—Ç: {text}")
            
            message_info = {
                "chat_id": chat_id,
                "user_name": user_name,
                "username": username,
                "text": text,
                "timestamp": datetime.utcnow().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
            telegram_messages.append(message_info)
            if len(telegram_messages) > 50:  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50
                telegram_messages[:] = telegram_messages[-50:]
            
            add_log("SUCCESS", f"üí¨ –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø", message_info)
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Telegram API
            print("ü§ñ ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            add_log("SUCCESS", "‚úÖ –°–û–û–ë–©–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ê–ù–û –£–°–ü–ï–®–ù–û", {
                "processed_at": datetime.utcnow().isoformat()
            })
        
        elif 'callback_query' in data:
            callback = data['callback_query']
            print(f"ü§ñ üîò CALLBACK QUERY: {callback.get('data', '')}")
            add_log("INFO", "üîò –ü–û–õ–£–ß–ï–ù CALLBACK QUERY", {
                "callback_data": callback.get('data', ''),
                "user_id": callback.get('from', {}).get('id')
            })
        
        else:
            print(f"ü§ñ ‚ö†Ô∏è –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü UPDATE: {list(data.keys())}")
            add_log("WARNING", "‚ö†Ô∏è –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü UPDATE", {
                "update_keys": list(data.keys())
            })
        
        return {"ok": True}
        
    except Exception as e:
        error_msg = f"‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò WEBHOOK: {str(e)}"
        print(f"ü§ñ –û–®–ò–ë–ö–ê: {e}")
        
        add_log("ERROR", error_msg, {"exception": str(e)})
        system_status["errors"] += 1
        
        return {"ok": False, "error": str(e)}

# Startup event
@app.on_event("startup")
async def startup_event():
    print("üöÄ ========== –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø ==========")
    print("üöÄ VasDom AI Assistant - Full Logging Edition")
    print("üöÄ –í—Å–µ –ª–æ–≥–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ Render Dashboard")
    print("üöÄ ==========================================")
    
    add_log("SUCCESS", "üöÄ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–û (Full Logging Edition)", {
        "timestamp": datetime.utcnow().isoformat(),
        "module": "app.main",
        "version": "3.1.0"
    })

logger.info("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–æ (Full Logging Edition)")