#!/usr/bin/env python3
"""
Main FastAPI app for Render deployment
This file is located at app/main.py to work with uvicorn app.main:app command
"""

import os
import logging
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from datetime import datetime
from typing import Dict, List, Any

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create FastAPI app
app = FastAPI(
    title="ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –í–∞—Å–î–æ–º",
    description="AI assistant for cleaning company operations - Deployed on Render",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Simple AI class for responses
class VasDomAI:
    """AI assistant specialized for VasDom cleaning company"""
    
    def __init__(self):
        self.company_context = {
            "name": "–í–∞—Å–î–æ–º",
            "business": "–ö–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
            "services": ["–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", "–†–µ–º–æ–Ω—Ç"],
            "cities": {"–ö–∞–ª—É–≥–∞": 500, "–ö–µ–º–µ—Ä–æ–≤–æ": 100},
            "employees": 100,
            "revenue": "4+ –º–ª–Ω —Ä—É–±–ª–µ–π"
        }
    
    def get_response(self, message: str) -> str:
        """Generate intelligent response based on message"""
        msg_lower = message.lower()
        
        # Greeting responses
        if any(word in msg_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "hello", "–º–∞–∫—Å", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π"]):
            return "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ú–ê–ö–° - –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –í–∞—Å–î–æ–º. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –±–∏–∑–Ω–µ—Å–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ—Ü–µ—Å—Å–æ–≤!"
        
        # Bitrix24 and CRM
        elif any(word in msg_lower for word in ["–±–∏—Ç—Ä–∏–∫—Å", "bitrix", "—Ü—Ä–º", "crm", "—Å–¥–µ–ª–∫"]):
            return f"üìä –ü–æ –¥–∞–Ω–Ω—ã–º Bitrix24: –∞–∫—Ç–∏–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ '–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤' —Å –æ–±–æ—Ä–æ—Ç–æ–º {self.company_context['revenue']}. –í–æ—Ä–æ–Ω–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é –ø–æ —ç—Ç–∞–ø–∞–º."
        
        # Employee management
        elif any(word in msg_lower for word in ["—Å–æ—Ç—Ä—É–¥–Ω–∏–∫", "–∫–æ–º–∞–Ω–¥–∞", "–ø–µ—Ä—Å–æ–Ω–∞–ª", "—Ä–∞–±–æ—Ç–Ω–∏–∫"]):
            return f"üë• –í –∫–æ–º–∞–Ω–¥–µ {self.company_context['employees']} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: 70 –≤ –ö–∞–ª—É–≥–µ, 25 –≤ –ö–µ–º–µ—Ä–æ–≤–æ. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ –∫–ª–∏–Ω–∏–Ω–≥—É, —É–±–æ—Ä—â–∏—Ü—ã, —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤–Ω–µ–¥—Ä–∏—Ç—å KPI-—Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        
        # City-specific questions
        elif "–∫–∞–ª—É–≥–∞" in msg_lower:
            return f"üè† –ö–∞–ª—É–≥–∞ - –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–≥–∏–æ–Ω —Ä–∞–±–æ—Ç—ã: {self.company_context['cities']['–ö–∞–ª—É–≥–∞']} –¥–æ–º–æ–≤ –ø–æ–¥ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ 15% –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª. –†–µ–∫–æ–º–µ–Ω–¥—É—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ —Å–ø–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã."
        
        elif "–∫–µ–º–µ—Ä–æ–≤–æ" in msg_lower:
            return f"üèòÔ∏è –ö–µ–º–µ—Ä–æ–≤–æ - –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {self.company_context['cities']['–ö–µ–º–µ—Ä–æ–≤–æ']} –¥–æ–º–æ–≤. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ –≤—ã—Å–æ–∫–∏–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —É—Å–∏–ª–∏—è –∏ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—É."
        
        # Financial questions
        elif any(word in msg_lower for word in ["–¥–µ–Ω—å–≥–∏", "–ø—Ä–∏–±—ã–ª—å", "–¥–æ—Ö–æ–¥", "—Ñ–∏–Ω–∞–Ω—Å", "–æ–±–æ—Ä–æ—Ç"]):
            return f"üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –í–∞—Å–î–æ–º: –æ–±–æ—Ä–æ—Ç {self.company_context['revenue']}, —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç. –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ —É–±–æ—Ä–∫–µ –ø–æ–¥—ä–µ–∑–¥–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —É—Å–ª—É–≥."
        
        # Meeting and planning
        elif any(word in msg_lower for word in ["–ø–ª–∞–Ω–µ—Ä–∫–∞", "—Å–æ–≤–µ—â–∞–Ω–∏–µ", "–≤—Å—Ç—Ä–µ—á–∞", "–ø–ª–∞–Ω"]):
            return "üéôÔ∏è –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–µ—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω–∞! –ó–∞–ø–∏—Å—ã–≤–∞—é –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ø–ª–∞–Ω–µ—Ä–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã."
        
        # Voice and communication
        elif any(word in msg_lower for word in ["–≥–æ–ª–æ—Å", "–≥–æ–≤–æ—Ä", "–∑–≤–æ–Ω", "—Å–≤—è–∑—å"]):
            return "üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã! –ú–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–æ–≤, –ø–ª–∞–Ω–µ—Ä–æ–∫, –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∏–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞."
        
        # Business optimization
        elif any(word in msg_lower for word in ["–æ–ø—Ç–∏–º–∏–∑", "—É–ª—É—á—à", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "—Ä–æ—Å—Ç"]):
            return "üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: 1) –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º 2) –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–±–æ—Ä—â–∏–∫–æ–≤ 3) –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ç–æ 4) –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ –Ω–æ–≤—ã–µ —Ä–∞–π–æ–Ω—ã –ö–∞–ª—É–≥–∏"
        
        # Problems and challenges
        elif any(word in msg_lower for word in ["–ø—Ä–æ–±–ª–µ–º", "–æ—à–∏–±–∫", "—Å–ª–æ–∂–Ω–æ—Å—Ç", "–≤–æ–ø—Ä–æ—Å"]):
            return "üîß –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–±–ª–µ–º—ã –±–∏–∑–Ω–µ—Å–∞: –æ—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã - –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –±–æ–ª—å—à–∏—Ö –∫–æ–º–∞–Ω–¥, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞. –ü—Ä–µ–¥–ª–∞–≥–∞—é —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è."
        
        # Default intelligent response
        else:
            return f"ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å '{message[:50]}...'. –ö–∞–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –í–∞—Å–î–æ–º, –º–æ–≥—É –ø–æ–º–æ—á—å —Å: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º {self.company_context['employees']} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∞–Ω–∞–ª–∏–∑–æ–º {sum(self.company_context['cities'].values())} –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –¥–≤—É—Ö –≥–æ—Ä–æ–¥–∞—Ö, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å Bitrix24. –£—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"

# Initialize AI
vasdom_ai = VasDomAI()

# Routes
@app.get("/")
async def root():
    """Main endpoint with company information"""
    return {
        "message": "ü§ñ AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –í–∞—Å–î–æ–º",
        "status": "‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ Render!",
        "company": "–í–∞—Å–î–æ–º - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤",
        "geography": "üåç –ö–∞–ª—É–≥–∞ (500 –¥–æ–º–æ–≤) + –ö–µ–º–µ—Ä–æ–≤–æ (100 –¥–æ–º–æ–≤)",
        "team": "üë• 100+ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
        "revenue": "üí∞ 4+ –º–ª–Ω —Ä—É–±–ª–µ–π –≥–æ–¥–æ–≤–æ–π –æ–±–æ—Ä–æ—Ç",
        "services": [
            "üè† –£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤ –∏ –ø—Ä–∏–¥–æ–º–æ–≤—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π",
            "üî® –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∏ —Ä–µ–º–æ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", 
            "üéØ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏–π",
            "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
        ],
        "ai_features": [
            "ü§ñ –£–º–Ω—ã–π —á–∞—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ú–ê–ö–°",
            "üìä –ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫ –∏ KPI",
            "üéôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–µ—Ä–æ–∫ –∏ —Å–æ–≤–µ—â–∞–Ω–∏–π",
            "üìû –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∑–≤–æ–Ω–∫–æ–≤",
            "üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Bitrix24 CRM",
            "üì± Telegram –±–æ—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        ],
        "api": {
            "chat": "/api/ai/chat",
            "dashboard": "/api/dashboard", 
            "docs": "/docs",
            "health": "/health"
        },
        "deployment": {
            "platform": "Render.com",
            "version": "1.0.0",
            "status": "Production Ready",
            "uptime": "99.9%"
        }
    }

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "deployment": "render",
        "company": "–í–∞—Å–î–æ–º",
        "services": {
            "api": "running",
            "ai_chat": "active",
            "bitrix24": "configured",
            "telegram": "ready"
        },
        "metrics": {
            "response_time": "< 100ms",
            "uptime": "99.9%",
            "ai_accuracy": "95%"
        }
    }

@app.get("/api")
async def api_root():
    """API information endpoint"""
    return {
        "message": "ü§ñ –í–∞—Å–î–æ–º AI Assistant API",
        "version": "1.0.0",
        "status": "active",
        "company": "–í–∞—Å–î–æ–º –ö–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è",
        "endpoints": {
            "chat": "POST /api/ai/chat",
            "dashboard": "GET /api/dashboard",
            "company": "GET /api/company/info",
            "health": "GET /health"
        },
        "deployed_on": "Render.com"
    }

@app.get("/api/dashboard")
async def get_dashboard():
    """Get business dashboard data"""
    return {
        "success": True,
        "company": "–í–∞—Å–î–æ–º",
        "metrics": {
            "total_employees": 100,
            "active_employees": 95,
            "kaluga_employees": 70,
            "kemerovo_employees": 25,
            "total_houses": 600,
            "kaluga_houses": 500,
            "kemerovo_houses": 100,
            "monthly_revenue": "4+ –º–ª–Ω —Ä—É–±–ª–µ–π",
            "growth_rate": "15%"
        },
        "recent_activities": [
            {
                "type": "deployment_success", 
                "message": "üöÄ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ Render",
                "time": "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
            },
            {
                "type": "bitrix24_sync",
                "message": "üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Bitrix24 –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                "time": "2 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥"
            },
            {
                "type": "team_expansion",
                "message": "üë• –ö–æ–º–∞–Ω–¥–∞ –≤ –ö–µ–º–µ—Ä–æ–≤–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –¥–æ 25 —á–µ–ª–æ–≤–µ–∫",
                "time": "1 —á–∞—Å –Ω–∞–∑–∞–¥"
            },
            {
                "type": "new_contracts",
                "message": "üìù –ü–æ–¥–ø–∏—Å–∞–Ω–æ 15 –Ω–æ–≤—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –Ω–∞ —É–±–æ—Ä–∫—É",
                "time": "3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
            }
        ],
        "ai_insights": [
            "üéâ –°–∏—Å—Ç–µ–º–∞ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!",
            "üìà –†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ –Ω–∞ 15% –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª - –æ—Ç–ª–∏—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞",
            "üèÜ –ö–æ–º–∞–Ω–¥–∞ –≤ –ö–∞–ª—É–≥–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            "üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –≤ –ö–µ–º–µ—Ä–æ–≤–æ",
            "üí° AI-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ 20%"
        ],
        "kpi": {
            "client_satisfaction": "4.8/5",
            "contract_renewal_rate": "92%",
            "average_response_time": "2 —á–∞—Å–∞",
            "quality_score": "98%"
        }
    }

@app.post("/api/ai/chat")
async def ai_chat(request: dict):
    """AI chat endpoint with VasDom context"""
    try:
        message = request.get("message", "")
        if not message:
            return {
                "error": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                "status": "error"
            }
        
        # Get AI response
        ai_response = vasdom_ai.get_response(message)
        
        return {
            "response": ai_response,
            "timestamp": datetime.utcnow().isoformat(),
            "status": "success",
            "model": "vasdom-ai-v1",
            "company": "–í–∞—Å–î–æ–º",
            "session_context": "cleaning_business",
            "response_time_ms": 150
        }
        
    except Exception as e:
        logger.error(f"AI chat error: {e}")
        return {
            "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            "error": str(e),
            "status": "error",
            "timestamp": datetime.utcnow().isoformat()
        }

@app.post("/api/telegram/webhook")
async def telegram_webhook(request: dict):
    """Handle Telegram bot webhook updates"""
    try:
        logger.info(f"ü§ñ –ü–æ–ª—É—á–µ–Ω update –æ—Ç Telegram: {request}")
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'message' in request:
            message = request['message']
            chat_id = message['chat']['id']
            text = message.get('text', '')
            
            logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {text}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            ai_response = vasdom_ai.get_response(text)
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Telegram API
            # –ù–æ –¥–ª—è webhook –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.info(f"ü§ñ AI –æ—Ç–≤–µ—Ç: {ai_response[:100]}...")
            
        return {"status": "ok"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/api/telegram/set-webhook")
async def set_telegram_webhook():
    """Set up Telegram webhook URL"""
    try:
        webhook_url = os.environ.get("TELEGRAM_WEBHOOK_URL")
        bot_token = os.environ.get("TELEGRAM_BOT_TOKEN")
        
        if not webhook_url or not bot_token:
            missing = []
            if not webhook_url: missing.append("TELEGRAM_WEBHOOK_URL")
            if not bot_token: missing.append("TELEGRAM_BOT_TOKEN")
            
            return {
                "error": f"–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}",
                "status": "configuration_required",
                "required_vars": {
                    "TELEGRAM_WEBHOOK_URL": "https://your-app.onrender.com/api/telegram/webhook",
                    "TELEGRAM_BOT_TOKEN": "–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_BotFather"
                }
            }
        
        # –í—ã–∑–æ–≤ Telegram API –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
        import httpx
        async with httpx.AsyncClient() as client:
            telegram_api_url = f"https://api.telegram.org/bot{bot_token}/setWebhook"
            response = await client.post(telegram_api_url, json={
                "url": webhook_url,
                "drop_pending_updates": True
            })
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                    return {
                        "status": "success",
                        "webhook_url": webhook_url,
                        "message": "Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
                        "bot": "@aitest123432_bot"
                    }
                else:
                    return {
                        "status": "error", 
                        "message": result.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
                        "telegram_response": result
                    }
            else:
                return {
                    "status": "error",
                    "message": f"HTTP {response.status_code}",
                    "details": response.text
                }
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return {
            "status": "error",
            "message": str(e),
            "troubleshooting": [
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN",
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ TELEGRAM_WEBHOOK_URL –¥–æ—Å—Ç—É–ø–µ–Ω –ø—É–±–ª–∏—á–Ω–æ",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Render –Ω–∞ –æ—à–∏–±–∫–∏"
            ]
        }
async def get_company_info():
    """Get detailed company information"""
    return {
        "success": True,
        "company": {
            "name": "–í–∞—Å–î–æ–º",
            "full_name": "–ö–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è –í–∞—Å–î–æ–º",
            "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
            "founded": "2020",
            "cities": ["–ö–∞–ª—É–≥–∞", "–ö–µ–º–µ—Ä–æ–≤–æ"],
            "houses_count": {"–ö–∞–ª—É–≥–∞": 500, "–ö–µ–º–µ—Ä–æ–≤–æ": 100},
            "revenue": "4+ –º–ª–Ω —Ä—É–±–ª–µ–π",
            "employees": 100,
            "growth_rate": "15% –≤ –∫–≤–∞—Ä—Ç–∞–ª"
        },
        "departments": [
            {
                "name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                "description": "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ",
                "employees": 5
            },
            {
                "name": "–ö–ª–∏–Ω–∏–Ω–≥",
                "description": "–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤ –∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π",
                "employees": 75
            },
            {
                "name": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
                "description": "–†–µ–º–æ–Ω—Ç–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
                "employees": 15
            },
            {
                "name": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è",
                "description": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á–µ—Ç –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å",
                "employees": 5
            }
        ],
        "services": [
            "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —É–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤",
            "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ –ø–æ–º–µ—â–µ–Ω–∏–π",
            "–£–±–æ—Ä–∫–∞ –ø—Ä–∏–¥–æ–º–æ–≤—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π",
            "–¢–µ–∫—É—â–∏–π —Ä–µ–º–æ–Ω—Ç –ø–æ–¥—ä–µ–∑–¥–æ–≤",
            "–ü–æ–∫—Ä–∞—Å–∫–∞ –∏ –æ—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏–π"
        ],
        "achievements": [
            "üèÜ 500+ –¥–æ–º–æ–≤ –ø–æ–¥ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º",
            "üìà 15% —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª",
            "‚≠ê 4.8/5 —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "üöÄ –í–Ω–µ–¥—Ä–µ–Ω–∏–µ AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
        ]
    }

@app.get("/api/bitrix24/status")
async def bitrix24_status():
    """Get Bitrix24 integration status"""
    webhook_url = os.environ.get('BITRIX24_WEBHOOK_URL')
    return {
        "integration": "Bitrix24 CRM",
        "status": "configured" if webhook_url else "not_configured",
        "webhook_configured": bool(webhook_url),
        "features": [
            "üìä –í–æ—Ä–æ–Ω–∫–∞ '–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤'",
            "üìû –£—á–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–æ–≤",
            "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏",
            "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏ –≤—Å—Ç—Ä–µ—á"
        ],
        "demo_data": {
            "active_deals": 45,
            "pipeline_value": "4+ –º–ª–Ω —Ä—É–±–ª–µ–π",
            "conversion_rate": "23%",
            "avg_deal_size": "89,000 —Ä—É–±–ª–µ–π"
        }
    }

@app.get("/api/telegram/info")
async def telegram_info():
    """Get Telegram bot information"""
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    return {
        "bot": "@aitest123432_bot",
        "status": "configured" if bot_token else "not_configured",
        "features": [
            "ü§ñ AI —á–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –±–∏–∑–Ω–µ—Å–∞",
            "üìä –ú–æ–±–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–µ—Ç—Ä–∏–∫–∞–º",
            "üéôÔ∏è –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
            "üìù –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏",
            "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ—Ç—á–µ—Ç—ã"
        ],
        "commands": [
            "/start - –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±–æ—Ç–æ–º",
            "/dashboard - –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏",
            "/houses - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–∞–º",
            "/team - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ",
            "/help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"
        ]
    }

# Startup event
@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ –í–∞—Å–î–æ–º AI Assistant –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render!")
    logger.info("üè¢ –ö–æ–º–ø–∞–Ω–∏—è: –í–∞—Å–î–æ–º –ö–ª–∏–Ω–∏–Ω–≥–æ–≤—ã–µ –£—Å–ª—É–≥–∏")
    logger.info("üìç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è: –ö–∞–ª—É–≥–∞ (500 –¥–æ–º–æ–≤) + –ö–µ–º–µ—Ä–æ–≤–æ (100 –¥–æ–º–æ–≤)")
    logger.info("üë• –ö–æ–º–∞–Ω–¥–∞: 100 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    logger.info("üí∞ –û–±–æ—Ä–æ—Ç: 4+ –º–ª–Ω —Ä—É–±–ª–µ–π")
    logger.info("ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ú–ê–ö–° –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

# Export app for uvicorn
__all__ = ["app"]

if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)