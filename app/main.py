import logging
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import RedirectResponse, HTMLResponse

# Import configuration
from .config.settings import (
    APP_TITLE, APP_VERSION, APP_DESCRIPTION, 
    CORS_ORIGINS, FRONTEND_DASHBOARD_URL
)
from .config.database import init_database, close_database
from .config.mongodb import init_mongodb

# Import routers
from .routers import dashboard, voice, telegram, meetings, cleaning, logs, tasks, analytics
from .routers import learning_simple as learning
# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ voice –º–æ–¥—É–ª–∏
from .routers import websocket_simple as websocket

logger = logging.getLogger(__name__)

# Create FastAPI app
app = FastAPI(
    title=APP_TITLE,
    version=APP_VERSION,
    description=APP_DESCRIPTION
)

# CORS middleware —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=CORS_ORIGINS,  # –ß–∏—Ç–∞–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
logger.info(f"‚úÖ CORS configured for origins: {CORS_ORIGINS}")

# Dashboard Routes - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–π URL
@app.get("/", response_class=HTMLResponse)  
async def root_redirect():
    """Redirect root to React dashboard"""
    return RedirectResponse(url=FRONTEND_DASHBOARD_URL, status_code=302)

@app.get("/dashbord", response_class=HTMLResponse)
@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard_redirect():
    """Redirect to React VasDom AudioBot Dashboard"""
    return RedirectResponse(url=FRONTEND_DASHBOARD_URL, status_code=302)

@app.get("/api/force-houses-490")
async def force_houses_490():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• 490 –¥–æ–º–æ–≤ —Å CATEGORY_ID=34"""
    try:
        import httpx
        import urllib.parse
        from app.config.settings import BITRIX24_WEBHOOK_URL
        
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ–º CATEGORY_ID=34
        deals = []
        start = 0
        
        while len(deals) < 500:  # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–∫—Å–∏–º—É–º
            params = {
                'select[0]': 'ID',
                'select[1]': 'TITLE', 
                'select[2]': 'STAGE_ID',
                'select[3]': 'COMPANY_ID',
                'select[4]': 'ASSIGNED_BY_ID',
                'select[5]': 'UF_CRM_1669704529022',  # –ö–≤–∞—Ä—Ç–∏—Ä—ã
                'select[6]': 'UF_CRM_1669705507390',  # –ü–æ–¥—ä–µ–∑–¥—ã
                'select[7]': 'UF_CRM_1669704631166',  # –≠—Ç–∞–∂–∏
                'select[8]': 'UF_CRM_1741592774017',  # –°–µ–Ω—Ç—è–±—Ä—å –¥–∞—Ç–∞ 1
                'filter[CATEGORY_ID]': '34',          # ‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û 34!
                'order[DATE_CREATE]': 'DESC',
                'start': str(start)
            }
            
            query_string = urllib.parse.urlencode(params)
            url = f"{BITRIX24_WEBHOOK_URL}crm.deal.list.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, timeout=15)
                
                if response.status_code == 200:
                    data = response.json()
                    batch = data.get('result', [])
                    
                    if not batch:
                        break
                    
                    deals.extend(batch)
                    start += 50
                    
                    if len(batch) < 50:
                        break
                else:
                    break
        
        # –û–±–æ–≥–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–æ–º–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        enriched_houses = []
        for deal in deals[:5]:
            address = deal.get('TITLE', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –£–ö –ø–æ –∞–¥—Ä–µ—Å—É
            if '—Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è' in address.lower():
                uk = "–û–û–û –£–ö –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥"
            elif '–≥–≤–∞—Ä–¥–µ–π—Å–∫–∞—è' in address.lower():
                uk = "–û–û–û –†–ò–¶ –ñ–†–≠–£"  
            elif '–∫–æ–Ω–¥—Ä–æ–≤–æ' in address.lower():
                uk = "–û–û–û –†–ö–¶ –ñ–ò–õ–ò–©–ï"
            else:
                uk = "–û–û–û –ñ–∏–ª–∫–æ–º—Å–µ—Ä–≤–∏—Å"
            
            enriched_houses.append({
                'address': address,
                'deal_id': deal.get('ID'),
                'management_company': uk,
                'apartments_count': int(deal.get('UF_CRM_1669704529022', 0)) if deal.get('UF_CRM_1669704529022') else 0,
                'entrances_count': int(deal.get('UF_CRM_1669705507390', 0)) if deal.get('UF_CRM_1669705507390') else 0,
                'floors_count': int(deal.get('UF_CRM_1669704631166', 0)) if deal.get('UF_CRM_1669704631166') else 0,
                'brigade': "4 –±—Ä–∏–≥–∞–¥–∞ - –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω",
                'september_dates': deal.get('UF_CRM_1741592774017', [])
            })
        
        return {
            "status": "‚úÖ FORCE SUCCESS",
            "category_used": "34",
            "total_houses": len(deals),
            "houses_sample": enriched_houses,
            "message": f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(deals)} –¥–æ–º–æ–≤ —Å CATEGORY_ID=34"
        }
        
    except Exception as e:
        return {"status": "‚ùå FORCE ERROR", "error": str(e)}

@app.get("/api/debug-houses")
async def debug_houses_endpoint():
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π endpoint –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –¥–æ–º–∞–º–∏"""
    try:
        from app.services.bitrix_service import BitrixService
        from app.config.settings import BITRIX24_WEBHOOK_URL
        
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        deals = await bitrix.get_deals_optimized(limit=2)
        
        if not deals:
            return {"error": "No deals loaded", "bitrix_url": BITRIX24_WEBHOOK_URL[:50]}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É
        first_deal = deals[0]
        
        return {
            "status": "debug_success",
            "version": "DEBUG-v1",
            "total_deals": len(deals),
            "first_deal_analysis": {
                "ID": first_deal.get('ID'),
                "TITLE": first_deal.get('TITLE'),
                "COMPANY_ID": first_deal.get('COMPANY_ID'),
                "COMPANY_TITLE": first_deal.get('COMPANY_TITLE'),
                "ASSIGNED_BY_ID": first_deal.get('ASSIGNED_BY_ID'),
                "ASSIGNED_BY_NAME": first_deal.get('ASSIGNED_BY_NAME'),
                "apartments": first_deal.get('UF_CRM_1669704529022'),
                "entrances": first_deal.get('UF_CRM_1669705507390'),
                "floors": first_deal.get('UF_CRM_1669704631166'),
                "september_date_1": first_deal.get('UF_CRM_1741592774017'),
                "september_type_1": first_deal.get('UF_CRM_1741592855565')
            }
        }
    except Exception as e:
        return {"error": str(e), "status": "debug_failed"}

@app.get("/api/version-check")
async def version_check():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∫–æ–¥–∞ - FORCE UPDATE v2"""
    return {
        "status": "success",
        "version": "3.0-FIXED-FORCE-UPDATE",
        "build_timestamp": "2025-09-12T09:35:00Z",
        "features": {
            "management_companies_fixed": True,
            "september_schedules": True,
            "490_houses_loading": True,
            "production_debug_endpoints": True,
            "database_independent": True
        },
        "deployment_status": "FORCE UPDATED FOR RENDER"
    }

# Include routers
app.include_router(dashboard.router)
app.include_router(voice.router)
app.include_router(telegram.router)
app.include_router(meetings.router)
app.include_router(cleaning.router)
app.include_router(tasks.router)
app.include_router(logs.router)
app.include_router(analytics.router)
app.include_router(learning.router)       # –ù–æ–≤—ã–π: –º–æ–¥—É–ª—å —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è

app.include_router(websocket.router)        # –ù–æ–≤—ã–π: WebSocket –¥–ª—è –∂–∏–≤–æ–≥–æ —á–∞—Ç–∞

logger.info("‚úÖ All routers included")

# Startup/Shutdown events
@app.on_event("startup")
async def startup():
    logger.info("üöÄ VasDom AudioBot starting...")
    db_success = await init_database()
    if db_success:
        logger.info("üêò PostgreSQL database ready")
    else:
        logger.warning("‚ö†Ô∏è Database unavailable - API will work with limited functionality")
    logger.info("‚úÖ VasDom AudioBot started successfully")

@app.on_event("shutdown")
async def shutdown():
    logger.info("üõë VasDom AudioBot shutting down...")
    await close_database()
    logger.info("üëã Shutdown complete")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)