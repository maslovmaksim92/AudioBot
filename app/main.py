import logging
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import RedirectResponse, HTMLResponse

# Import configuration
from .config.settings import (
    APP_TITLE, APP_VERSION, APP_DESCRIPTION, 
    CORS_ORIGINS, FRONTEND_DASHBOARD_URL
)
from .config.database import init_database, close_database

# Import routers
from .routers import dashboard, voice, telegram, meetings, cleaning, logs, tasks, analytics
from .routers import ai_chat

logger = logging.getLogger(__name__)

# Create FastAPI app
app = FastAPI(
    title=APP_TITLE,
    version=APP_VERSION,
    description=APP_DESCRIPTION
)

# CORS middleware —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=CORS_ORIGINS,  # –ß–∏—Ç–∞–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
logger.info(f"‚úÖ CORS configured for origins: {CORS_ORIGINS}")

# Dashboard Routes - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–π URL
@app.get("/", response_class=HTMLResponse)  
async def root_redirect():
    """Redirect root to React dashboard"""
    return RedirectResponse(url=FRONTEND_DASHBOARD_URL, status_code=302)

@app.get("/dashbord", response_class=HTMLResponse)
@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard_redirect():
    """Redirect to React VasDom AudioBot Dashboard"""
    return RedirectResponse(url=FRONTEND_DASHBOARD_URL, status_code=302)

@app.get("/api/force-houses-490")
async def force_houses_490():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• 490 –¥–æ–º–æ–≤ —Å CATEGORY_ID=34"""
    try:
        import httpx
        import urllib.parse
        from app.config.settings import BITRIX24_WEBHOOK_URL
        
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ–º CATEGORY_ID=34
        deals = []
        start = 0
        
        while len(deals) < 500:  # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–∫—Å–∏–º—É–º
            params = {
                'select[0]': 'ID',
                'select[1]': 'TITLE', 
                'select[2]': 'STAGE_ID',
                'select[3]': 'COMPANY_ID',
                'select[4]': 'ASSIGNED_BY_ID',
                'select[5]': 'UF_CRM_1669704529022',  # –ö–≤–∞—Ä—Ç–∏—Ä—ã
                'select[6]': 'UF_CRM_1669705507390',  # –ü–æ–¥—ä–µ–∑–¥—ã
                'select[7]': 'UF_CRM_1669704631166',  # –≠—Ç–∞–∂–∏
                'select[8]': 'UF_CRM_1741592774017',  # –°–µ–Ω—Ç—è–±—Ä—å –¥–∞—Ç–∞ 1
                'filter[CATEGORY_ID]': '34',          # ‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û 34!
                'order[DATE_CREATE]': 'DESC',
                'start': str(start)
            }
            
            query_string = urllib.parse.urlencode(params)
            url = f"{BITRIX24_WEBHOOK_URL}crm.deal.list.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, timeout=15)
                
                if response.status_code == 200:
                    data = response.json()
                    batch = data.get('result', [])
                    
                    if not batch:
                        break
                    
                    deals.extend(batch)
                    start += 50
                    
                    if len(batch) < 50:
                        break
                else:
                    break
        
        # –û–±–æ–≥–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–æ–º–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        enriched_houses = []
        for deal in deals[:5]:
            address = deal.get('TITLE', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –£–ö –ø–æ –∞–¥—Ä–µ—Å—É
            if '—Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è' in address.lower():
                uk = "–û–û–û –£–ö –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥"
            elif '–≥–≤–∞—Ä–¥–µ–π—Å–∫–∞—è' in address.lower():
                uk = "–û–û–û –†–ò–¶ –ñ–†–≠–£"  
            elif '–∫–æ–Ω–¥—Ä–æ–≤–æ' in address.lower():
                uk = "–û–û–û –†–ö–¶ –ñ–ò–õ–ò–©–ï"
            else:
                uk = "–û–û–û –ñ–∏–ª–∫–æ–º—Å–µ—Ä–≤–∏—Å"
            
            enriched_houses.append({
                'address': address,
                'deal_id': deal.get('ID'),
                'management_company': uk,
                'apartments_count': int(deal.get('UF_CRM_1669704529022', 0)) if deal.get('UF_CRM_1669704529022') else 0,
                'entrances_count': int(deal.get('UF_CRM_1669705507390', 0)) if deal.get('UF_CRM_1669705507390') else 0,
                'floors_count': int(deal.get('UF_CRM_1669704631166', 0)) if deal.get('UF_CRM_1669704631166') else 0,
                'brigade': "4 –±—Ä–∏–≥–∞–¥–∞ - –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω",
                'september_dates': deal.get('UF_CRM_1741592774017', [])
            })
        
        return {
            "status": "‚úÖ FORCE SUCCESS",
            "category_used": "34",
            "total_houses": len(deals),
            "houses_sample": enriched_houses,
            "message": f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(deals)} –¥–æ–º–æ–≤ —Å CATEGORY_ID=34"
        }
        
    except Exception as e:
        return {"status": "‚ùå FORCE ERROR", "error": str(e)}

@app.get("/api/debug-houses")
async def debug_houses_endpoint():
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π endpoint –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –¥–æ–º–∞–º–∏"""
    try:
        from app.services.bitrix_service import BitrixService
        from app.config.settings import BITRIX24_WEBHOOK_URL
        
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        deals = await bitrix.get_deals_optimized(limit=2)
        
        if not deals:
            return {"error": "No deals loaded", "bitrix_url": BITRIX24_WEBHOOK_URL[:50]}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É
        first_deal = deals[0]
        
        return {
            "status": "debug_success",
            "version": "DEBUG-v1",
            "total_deals": len(deals),
            "first_deal_analysis": {
                "ID": first_deal.get('ID'),
                "TITLE": first_deal.get('TITLE'),
                "COMPANY_ID": first_deal.get('COMPANY_ID'),
                "COMPANY_TITLE": first_deal.get('COMPANY_TITLE'),
                "ASSIGNED_BY_ID": first_deal.get('ASSIGNED_BY_ID'),
                "ASSIGNED_BY_NAME": first_deal.get('ASSIGNED_BY_NAME'),
                "apartments": first_deal.get('UF_CRM_1669704529022'),
                "entrances": first_deal.get('UF_CRM_1669705507390'),
                "floors": first_deal.get('UF_CRM_1669704631166'),
                "september_date_1": first_deal.get('UF_CRM_1741592774017'),
                "september_type_1": first_deal.get('UF_CRM_1741592855565')
            }
        }
    except Exception as e:
        return {"error": str(e), "status": "debug_failed"}

@app.get("/api/version-check")
async def version_check():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∫–æ–¥–∞ - FORCE UPDATE v2"""
    return {
        "status": "success",
        "version": "3.0-FIXED-FORCE-UPDATE",
        "build_timestamp": "2025-09-12T09:35:00Z",
        "features": {
            "management_companies_fixed": True,
            "september_schedules": True,
            "490_houses_loading": True,
            "production_debug_endpoints": True,
            "database_independent": True
        },
        "deployment_status": "FORCE UPDATED FOR RENDER"
    }

# Include routers
app.include_router(dashboard.router)
app.include_router(voice.router)
app.include_router(telegram.router)
app.include_router(meetings.router)
app.include_router(cleaning.router)
app.include_router(tasks.router)
app.include_router(logs.router)
app.include_router(analytics.router)

# Add simple AI Chat endpoint directly in main
# Simple AI Chat endpoints without database (Render-friendly)
from pydantic import BaseModel
from datetime import datetime

class ChatRequest(BaseModel):
    message: str
    session_id: str = "default"

# In-memory storage for demo
chat_sessions = {}

@app.post("/api/ai/chat")
async def ai_chat_endpoint(request: ChatRequest):
    """–ü—Ä–æ—Å—Ç–æ–π AI Chat –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Render-compatible)"""
    try:
        user_message = request.message
        session_id = request.session_id
        
        # Store in memory
        if session_id not in chat_sessions:
            chat_sessions[session_id] = []
        
        chat_sessions[session_id].append({
            "type": "user",
            "message": user_message,
            "timestamp": datetime.utcnow().isoformat()
        })
        
        # Smart AI responses
        user_msg = user_message.lower()
        
        if "–¥–æ–º" in user_msg or "–∫–≤–∞—Ä—Ç–∏—Ä" in user_msg:
            ai_response = "üè† –£ –Ω–∞—Å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ 490 –¥–æ–º–æ–≤ –∏ 50,960 –∫–≤–∞—Ä—Ç–∏—Ä. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Bitrix24 CRM. –ú–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ª—é–±–æ–º—É –æ–±—ä–µ–∫—Ç—É –∏–ª–∏ —Ä–∞–π–æ–Ω—É."
        elif "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫" in user_msg or "–±—Ä–∏–≥–∞–¥" in user_msg:
            ai_response = "üë• –í VasDom —Ä–∞–±–æ—Ç–∞–µ—Ç 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö –ø–æ —Ä–∞–π–æ–Ω–∞–º: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π, –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π, –ñ–µ–ª–µ—Ç–æ–≤–æ, –°–µ–≤–µ—Ä–Ω—ã–π, –ü—Ä–∏–≥–æ—Ä–æ–¥ –∏ –û–∫—Ä–∞–∏–Ω—ã. –ù—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±—Ä–∏–≥–∞–¥–µ?"
        elif "–ø–ª–∞–Ω–µ—Ä–∫" in user_msg:
            ai_response = "üé§ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –ø–ª–∞–Ω–µ—Ä–æ–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–ü–ª–∞–Ω–µ—Ä–∫–∏' - —è —Å–æ–∑–¥–∞–º AI-–∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è."
        elif "—Å—Ç–∞—Ç" in user_msg or "—Ü–∏—Ñ—Ä" in user_msg:
            ai_response = "üìä –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VasDom:\n‚Ä¢ 490 –¥–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏\n‚Ä¢ 50,960 –∫–≤–∞—Ä—Ç–∏—Ä\n‚Ä¢ 1,621 –ø–æ–¥—ä–µ–∑–¥\n‚Ä¢ 4,222 —ç—Ç–∞–∂–∞\n‚Ä¢ 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ Bitrix24."
        elif "–ø—Ä–∏–≤–µ—Ç" in user_msg or "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π" in user_msg or "–¥–æ–±—Ä" in user_msg:
            ai_response = "–ü—Ä–∏–≤–µ—Ç! üëã –Ø VasDom AI, –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π. –ó–Ω–∞—é –≤—Å—ë –æ –Ω–∞—à–∏—Ö 490 –¥–æ–º–∞—Ö, 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∏ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–ª–∞–Ω–µ—Ä–∫–∞–º–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –∑–∞–¥–∞—á–∞–º–∏. –û —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏–º?"
        elif "–ø–æ–º–æ—â" in user_msg or "—á—Ç–æ —É–º–µ–µ—à—å" in user_msg:
            ai_response = "ü§ñ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –¥–æ–º–∞–º –∏ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º\n‚Ä¢ –î–∞–Ω–Ω—ã–º–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∏ –±—Ä–∏–≥–∞–¥–∞—Ö\n‚Ä¢ –ó–∞–ø–∏—Å—å—é –∏ –∞–Ω–∞–ª–∏–∑–æ–º –ø–ª–∞–Ω–µ—Ä–æ–∫\n‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π\n‚Ä¢ –ó–∞–¥–∞—á–∞–º–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n\n–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ VasDom!"
        else:
            ai_response = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –Ø VasDom AI –∏ –ø–æ–º–æ–≥–∞—é —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π. –£ –Ω–∞—Å 490 –¥–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö. –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –¥–æ–º–∞—Ö, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö, –ø–ª–∞–Ω–µ—Ä–∫–∞—Ö –∏–ª–∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö —Ä–∞–±–æ—Ç—ã. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üè¢"
        
        # Store AI response
        chat_sessions[session_id].append({
            "type": "ai", 
            "message": ai_response,
            "timestamp": datetime.utcnow().isoformat()
        })
        
        return {
            "response": ai_response,
            "session_id": session_id,
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"AI Chat error: {e}")
        return {
            "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", 
            "session_id": session_id if 'session_id' in locals() else "error",
            "timestamp": datetime.utcnow().isoformat()
        }

@app.post("/api/ai/analyze-meeting")
async def analyze_meeting_endpoint(data: dict):
    """–ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–µ—Ä–∫–∏ –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        transcript = data.get("transcript", "")
        
        if not transcript.strip():
            return {"error": "–ü—É—Å—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç"}
        
        # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        words = transcript.split()
        word_count = len(words)
        
        themes = []
        if any(word in transcript.lower() for word in ["–¥–æ–º", "–∫–≤–∞—Ä—Ç–∏—Ä", "–ø–æ–¥—ä–µ–∑–¥"]):
            themes.append("üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞–º–∏")
        if any(word in transcript.lower() for word in ["—Å–æ—Ç—Ä—É–¥–Ω–∏–∫", "–±—Ä–∏–≥–∞–¥", "—Ä–∞–±–æ—Ç–Ω–∏–∫"]):
            themes.append("üë• –ö–∞–¥—Ä–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        if any(word in transcript.lower() for word in ["–ø–ª–∞–Ω", "–∑–∞–¥–∞—á", "—Ü–µ–ª—å"]):
            themes.append("üéØ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        if any(word in transcript.lower() for word in ["–ø—Ä–æ–±–ª–µ–º", "–æ—à–∏–±–∫", "—Å–±–æ–π"]):
            themes.append("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã")
        
        summary = f"""üé§ AI-–ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–ï–†–ö–ò

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –°–ª–æ–≤ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ: {word_count}
‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {word_count // 150} –º–∏–Ω

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
{chr(10).join([f"‚Ä¢ {theme}" for theme in themes]) if themes else "‚Ä¢ –û–±—â–∏–µ —Ä–∞–±–æ—á–∏–µ –≤–æ–ø—Ä–æ—Å—ã"}

üìù –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:
{transcript[:300]}{'...' if len(transcript) > 300 else ''}

‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ VasDom AI:
‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ–±—Å—É–∂–¥—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
‚Ä¢ –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""

        return {
            "summary": summary,
            "themes": themes,
            "word_count": word_count,
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Meeting analysis error: {e}")
        return {"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–ª–∞–Ω–µ—Ä–∫–∏"}

logger.info("‚úÖ AI Chat endpoints added (Render-compatible)")

logger.info("‚úÖ All routers included")

# Startup/Shutdown events
@app.on_event("startup")
async def startup():
    logger.info("üöÄ VasDom AudioBot starting...")
    
    # Render-friendly startup - no databases required
    logger.info("üåê Running in API-only mode (Render compatible)")
    app.state.db_type = "none"
    
    logger.info("‚úÖ VasDom AudioBot started successfully")

@app.on_event("shutdown")
async def shutdown():
    logger.info("üõë VasDom AudioBot shutting down...")
    await close_database()
    logger.info("üëã Shutdown complete")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)