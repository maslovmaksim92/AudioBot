#!/usr/bin/env python3
"""
Simple FastAPI app for Render deployment - VasDom AI Assistant
"""

import os
import logging
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create FastAPI app
app = FastAPI(
    title="ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –í–∞—Å–î–æ–º",
    description="AI assistant for VasDom cleaning company",
    version="2.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    """Main endpoint"""
    return {
        "message": "ü§ñ AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –í–∞—Å–î–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "status": "‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ Render",
        "company": "–í–∞—Å–î–æ–º - –ö–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
        "version": "2.0.0",
        "endpoints": {
            "health": "/health",
            "api": "/api",
            "telegram_webhook_setup": "/api/telegram/set-webhook",
            "dashboard": "/api/dashboard"
        }
    }

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "service": "VasDom AI Assistant",
        "version": "2.0.0",
        "deployment": "render"
    }

@app.get("/api")
async def api_root():
    """API root endpoint"""
    return {
        "message": "ü§ñ –í–∞—Å–î–æ–º AI Assistant API",
        "version": "2.0.0",
        "status": "running",
        "telegram_bot": "@aitest123432_bot",
        "endpoints": [
            "GET /api/telegram/set-webhook",
            "POST /api/telegram/webhook", 
            "GET /api/dashboard",
            "POST /api/ai/chat"
        ]
    }

@app.get("/api/telegram/set-webhook")
async def set_telegram_webhook():
    """Set up Telegram webhook URL - SIMPLIFIED VERSION"""
    try:
        webhook_url = os.environ.get("TELEGRAM_WEBHOOK_URL")
        bot_token = os.environ.get("TELEGRAM_BOT_TOKEN")
        
        # Check configuration
        config_status = {
            "webhook_url": webhook_url,
            "bot_token_configured": bool(bot_token),
            "webhook_configured": bool(webhook_url)
        }
        
        if not webhook_url or not bot_token:
            return {
                "status": "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è",
                "config": config_status,
                "required_env_vars": {
                    "TELEGRAM_WEBHOOK_URL": "https://audiobot-qq2.onrender.com/api/telegram/webhook",
                    "TELEGRAM_BOT_TOKEN": "8327964628:AAHMIgT1XiGEkLc34nogRGZt-Ox-9R0TSn0"
                },
                "instructions": [
                    "1. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Render Environment",
                    "2. –î–æ–∂–¥–∏—Ç–µ—Å—å redeploy",
                    "3. –í—ã–∑–æ–≤–∏—Ç–µ —ç—Ç–æ—Ç endpoint —Å–Ω–æ–≤–∞"
                ]
            }
        
        # Try to set webhook via HTTP request
        import httpx
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            telegram_url = f"https://api.telegram.org/bot{bot_token}/setWebhook"
            
            payload = {
                "url": webhook_url,
                "drop_pending_updates": True
            }
            
            response = await client.post(telegram_url, json=payload)
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ: {webhook_url}")
                    return {
                        "status": "‚úÖ –£–°–ü–ï–•!",
                        "message": "Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
                        "webhook_url": webhook_url,
                        "bot": "@aitest123432_bot",
                        "next_steps": [
                            "1. –ù–∞–π–¥–∏—Ç–µ @aitest123432_bot –≤ Telegram",
                            "2. –ù–∞–ø–∏—à–∏—Ç–µ /start",
                            "3. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å!"
                        ],
                        "telegram_response": result
                    }
                else:
                    return {
                        "status": "‚ùå Telegram API –æ—à–∏–±–∫–∞",
                        "error": result.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
                        "telegram_response": result
                    }
            else:
                return {
                    "status": "‚ùå HTTP –æ—à–∏–±–∫–∞",
                    "http_status": response.status_code,
                    "response": response.text[:500]
                }
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return {
            "status": "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
            "error": str(e),
            "troubleshooting": [
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Render",
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç —Ç–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –¥–æ–º–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –ø—É–±–ª–∏—á–Ω–æ"
            ]
        }

@app.post("/api/telegram/webhook")
async def telegram_webhook(request: Request):
    """Handle Telegram webhook updates"""
    try:
        data = await request.json()
        logger.info(f"ü§ñ –ü–æ–ª—É—á–µ–Ω Telegram update: {data}")
        
        # Simple message handling
        if 'message' in data:
            message = data['message']
            chat_id = message['chat']['id']
            text = message.get('text', '')
            user_name = message.get('from', {}).get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID:{chat_id}): {text}")
            
            # Here we would normally send response back to Telegram
            # For now, just log successful processing
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        return {"ok": True}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return {"ok": False, "error": str(e)}

@app.get("/api/dashboard")
async def get_dashboard():
    """Simple dashboard endpoint"""
    return {
        "success": True,
        "company": "–í–∞—Å–î–æ–º",
        "message": "üéâ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "metrics": {
            "houses": {"–ö–∞–ª—É–≥–∞": 500, "–ö–µ–º–µ—Ä–æ–≤–æ": 100},
            "employees": 100,
            "status": "active"
        },
        "telegram_bot": "@aitest123432_bot"
    }

@app.post("/api/ai/chat")
async def ai_chat(request: Request):
    """Simple AI chat endpoint"""
    try:
        data = await request.json()
        message = data.get("message", "")
        
        # Simple AI responses
        responses = {
            "–ø—Ä–∏–≤–µ—Ç": "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ú–ê–ö–° - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –í–∞—Å–î–æ–º!",
            "–¥–æ–º–∞": "üè† –£ –Ω–∞—Å 500 –¥–æ–º–æ–≤ –≤ –ö–∞–ª—É–≥–µ –∏ 100 –≤ –ö–µ–º–µ—Ä–æ–≤–æ",
            "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏": "üë• –í –∫–æ–º–∞–Ω–¥–µ 100 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "default": f"ü§ñ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'. AI-–∞–Ω–∞–ª–∏–∑ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!"
        }
        
        response_text = responses.get(message.lower(), responses["default"])
        
        return {
            "response": response_text,
            "timestamp": datetime.utcnow().isoformat(),
            "status": "success"
        }
        
    except Exception as e:
        return {
            "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            "error": str(e),
            "status": "error"
        }

# Startup event
@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ VasDom AI Assistant –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render!")
    logger.info("ü§ñ Telegram Bot: @aitest123432_bot")
    logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")

# Export for gunicorn
if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
async def get_company_info():
    """Get detailed company information"""
    return {
        "success": True,
        "company": {
            "name": "–í–∞—Å–î–æ–º",
            "full_name": "–ö–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è –í–∞—Å–î–æ–º",
            "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
            "founded": "2020",
            "cities": ["–ö–∞–ª—É–≥–∞", "–ö–µ–º–µ—Ä–æ–≤–æ"],
            "houses_count": {"–ö–∞–ª—É–≥–∞": 500, "–ö–µ–º–µ—Ä–æ–≤–æ": 100},
            "revenue": "4+ –º–ª–Ω —Ä—É–±–ª–µ–π",
            "employees": 100,
            "growth_rate": "15% –≤ –∫–≤–∞—Ä—Ç–∞–ª"
        },
        "departments": [
            {
                "name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                "description": "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ",
                "employees": 5
            },
            {
                "name": "–ö–ª–∏–Ω–∏–Ω–≥",
                "description": "–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤ –∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π",
                "employees": 75
            },
            {
                "name": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
                "description": "–†–µ–º–æ–Ω—Ç–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
                "employees": 15
            },
            {
                "name": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è",
                "description": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á–µ—Ç –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å",
                "employees": 5
            }
        ],
        "services": [
            "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —É–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤",
            "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ –ø–æ–º–µ—â–µ–Ω–∏–π",
            "–£–±–æ—Ä–∫–∞ –ø—Ä–∏–¥–æ–º–æ–≤—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π",
            "–¢–µ–∫—É—â–∏–π —Ä–µ–º–æ–Ω—Ç –ø–æ–¥—ä–µ–∑–¥–æ–≤",
            "–ü–æ–∫—Ä–∞—Å–∫–∞ –∏ –æ—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏–π"
        ],
        "achievements": [
            "üèÜ 500+ –¥–æ–º–æ–≤ –ø–æ–¥ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º",
            "üìà 15% —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª",
            "‚≠ê 4.8/5 —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "üöÄ –í–Ω–µ–¥—Ä–µ–Ω–∏–µ AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
        ]
    }

@app.get("/api/bitrix24/status")
async def bitrix24_status():
    """Get Bitrix24 integration status"""
    webhook_url = os.environ.get('BITRIX24_WEBHOOK_URL')
    return {
        "integration": "Bitrix24 CRM",
        "status": "configured" if webhook_url else "not_configured",
        "webhook_configured": bool(webhook_url),
        "features": [
            "üìä –í–æ—Ä–æ–Ω–∫–∞ '–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤'",
            "üìû –£—á–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–æ–≤",
            "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏",
            "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏ –≤—Å—Ç—Ä–µ—á"
        ],
        "demo_data": {
            "active_deals": 45,
            "pipeline_value": "4+ –º–ª–Ω —Ä—É–±–ª–µ–π",
            "conversion_rate": "23%",
            "avg_deal_size": "89,000 —Ä—É–±–ª–µ–π"
        }
    }

@app.get("/api/telegram/info")
async def telegram_info():
    """Get Telegram bot information"""
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    return {
        "bot": "@aitest123432_bot",
        "status": "configured" if bot_token else "not_configured",
        "features": [
            "ü§ñ AI —á–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –±–∏–∑–Ω–µ—Å–∞",
            "üìä –ú–æ–±–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–µ—Ç—Ä–∏–∫–∞–º",
            "üéôÔ∏è –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
            "üìù –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏",
            "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ—Ç—á–µ—Ç—ã"
        ],
        "commands": [
            "/start - –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±–æ—Ç–æ–º",
            "/dashboard - –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏",
            "/houses - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–∞–º",
            "/team - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ",
            "/help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"
        ]
    }

# Startup event
@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ –í–∞—Å–î–æ–º AI Assistant –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render!")
    logger.info("üè¢ –ö–æ–º–ø–∞–Ω–∏—è: –í–∞—Å–î–æ–º –ö–ª–∏–Ω–∏–Ω–≥–æ–≤—ã–µ –£—Å–ª—É–≥–∏")
    logger.info("üìç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è: –ö–∞–ª—É–≥–∞ (500 –¥–æ–º–æ–≤) + –ö–µ–º–µ—Ä–æ–≤–æ (100 –¥–æ–º–æ–≤)")
    logger.info("üë• –ö–æ–º–∞–Ω–¥–∞: 100 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    logger.info("üí∞ –û–±–æ—Ä–æ—Ç: 4+ –º–ª–Ω —Ä—É–±–ª–µ–π")
    logger.info("ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ú–ê–ö–° –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

# Export app for uvicorn
__all__ = ["app"]

if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)