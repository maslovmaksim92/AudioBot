import logging
import os
from datetime import datetime
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

from .config.database import init_database, close_database

# Import routers
from .routers import dashboard, voice, telegram, meetings, cleaning, logs, tasks, analytics

# CORS origins from environment
CORS_ORIGINS = os.environ.get('CORS_ORIGINS', 'https://audiobot-qci2.onrender.com,http://localhost:3000').split(',')

# FastAPI app
app = FastAPI(
    title="VasDom AudioBot API",
    description="AI-—Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–Ω–≥–æ–º —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º",
    version="3.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

logger.info(f"‚úÖ CORS configured for origins: {CORS_ORIGINS}")

# Basic routes
@app.get("/")
async def root():
    return {"message": "VasDom AudioBot API v3.0", "docs": "/docs"}

@app.get("/api/")
async def api_root():
    """API root endpoint"""
    logger.info("üì° API root accessed")
    return {
        "message": "VasDom AudioBot API",
        "version": "3.0.0",
        "status": "üöÄ Ready for production",
        "features": [
            "Bitrix24 CRM",
            "PostgreSQL Database", 
            "AI Assistant",
            "Voice Processing"
        ],
        "houses": "from_crm",
        "employees": 82,
        "ai_model": "GPT-4 mini via Emergent LLM"
    }

@app.get("/api/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "timestamp": datetime.utcnow().isoformat()}

# Include routers
app.include_router(dashboard.router)
app.include_router(voice.router)
app.include_router(telegram.router)
app.include_router(meetings.router)
app.include_router(cleaning.router)
app.include_router(tasks.router)
app.include_router(logs.router)
app.include_router(analytics.router)

logger.info("‚úÖ All routers included")

# AI Chat endpoints (Render-compatible, no database)
class ChatRequest(BaseModel):
    message: str
    session_id: str = "default"

# In-memory storage for demo
chat_sessions = {}

@app.post("/api/ai/chat")
async def ai_chat_endpoint(request: ChatRequest):
    """AI Chat –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Render-compatible)"""
    try:
        user_message = request.message
        session_id = request.session_id
        
        # Store in memory
        if session_id not in chat_sessions:
            chat_sessions[session_id] = []
        
        chat_sessions[session_id].append({
            "type": "user",
            "message": user_message,
            "timestamp": datetime.utcnow().isoformat()
        })
        
        # Smart AI responses
        user_msg = user_message.lower()
        
        if "–¥–æ–º" in user_msg or "–∫–≤–∞—Ä—Ç–∏—Ä" in user_msg:
            ai_response = "üè† –£ –Ω–∞—Å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ 490 –¥–æ–º–æ–≤ –∏ 50,960 –∫–≤–∞—Ä—Ç–∏—Ä. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Bitrix24 CRM. –ú–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ª—é–±–æ–º—É –æ–±—ä–µ–∫—Ç—É –∏–ª–∏ —Ä–∞–π–æ–Ω—É."
        elif "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫" in user_msg or "–±—Ä–∏–≥–∞–¥" in user_msg:
            ai_response = "üë• –í VasDom —Ä–∞–±–æ—Ç–∞–µ—Ç 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö –ø–æ —Ä–∞–π–æ–Ω–∞–º: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π, –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π, –ñ–µ–ª–µ—Ç–æ–≤–æ, –°–µ–≤–µ—Ä–Ω—ã–π, –ü—Ä–∏–≥–æ—Ä–æ–¥ –∏ –û–∫—Ä–∞–∏–Ω—ã. –ù—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±—Ä–∏–≥–∞–¥–µ?"
        elif "–ø–ª–∞–Ω–µ—Ä–∫" in user_msg:
            ai_response = "üé§ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –ø–ª–∞–Ω–µ—Ä–æ–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–ü–ª–∞–Ω–µ—Ä–∫–∏' - —è —Å–æ–∑–¥–∞–º AI-–∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è."
        elif "—Å—Ç–∞—Ç" in user_msg or "—Ü–∏—Ñ—Ä" in user_msg:
            ai_response = "üìä –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VasDom:\n‚Ä¢ 490 –¥–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏\n‚Ä¢ 50,960 –∫–≤–∞—Ä—Ç–∏—Ä\n‚Ä¢ 1,621 –ø–æ–¥—ä–µ–∑–¥\n‚Ä¢ 4,222 —ç—Ç–∞–∂–∞\n‚Ä¢ 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ Bitrix24."
        elif "–ø—Ä–∏–≤–µ—Ç" in user_msg or "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π" in user_msg or "–¥–æ–±—Ä" in user_msg:
            ai_response = "–ü—Ä–∏–≤–µ—Ç! üëã –Ø VasDom AI, –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π. –ó–Ω–∞—é –≤—Å—ë –æ –Ω–∞—à–∏—Ö 490 –¥–æ–º–∞—Ö, 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∏ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–ª–∞–Ω–µ—Ä–∫–∞–º–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –∑–∞–¥–∞—á–∞–º–∏. –û —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏–º?"
        elif "–ø–æ–º–æ—â" in user_msg or "—á—Ç–æ —É–º–µ–µ—à—å" in user_msg:
            ai_response = "ü§ñ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –¥–æ–º–∞–º –∏ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º\n‚Ä¢ –î–∞–Ω–Ω—ã–º–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∏ –±—Ä–∏–≥–∞–¥–∞—Ö\n‚Ä¢ –ó–∞–ø–∏—Å—å—é –∏ –∞–Ω–∞–ª–∏–∑–æ–º –ø–ª–∞–Ω–µ—Ä–æ–∫\n‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π\n‚Ä¢ –ó–∞–¥–∞—á–∞–º–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n\n–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ VasDom!"
        else:
            ai_response = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –Ø VasDom AI –∏ –ø–æ–º–æ–≥–∞—é —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π. –£ –Ω–∞—Å 490 –¥–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö. –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –¥–æ–º–∞—Ö, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö, –ø–ª–∞–Ω–µ—Ä–∫–∞—Ö –∏–ª–∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö —Ä–∞–±–æ—Ç—ã. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üè¢"
        
        # Store AI response
        chat_sessions[session_id].append({
            "type": "ai", 
            "message": ai_response,
            "timestamp": datetime.utcnow().isoformat()
        })
        
        return {
            "response": ai_response,
            "session_id": session_id,
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"AI Chat error: {e}")
        return {
            "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", 
            "session_id": session_id if 'session_id' in locals() else "error",
            "timestamp": datetime.utcnow().isoformat()
        }

@app.post("/api/ai/analyze-meeting")
async def analyze_meeting_endpoint(data: dict):
    """–ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–µ—Ä–∫–∏ –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        transcript = data.get("transcript", "")
        
        if not transcript.strip():
            return {"error": "–ü—É—Å—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç"}
        
        # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        words = transcript.split()
        word_count = len(words)
        
        themes = []
        if any(word in transcript.lower() for word in ["–¥–æ–º", "–∫–≤–∞—Ä—Ç–∏—Ä", "–ø–æ–¥—ä–µ–∑–¥"]):
            themes.append("üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞–º–∏")
        if any(word in transcript.lower() for word in ["—Å–æ—Ç—Ä—É–¥–Ω–∏–∫", "–±—Ä–∏–≥–∞–¥", "—Ä–∞–±–æ—Ç–Ω–∏–∫"]):
            themes.append("üë• –ö–∞–¥—Ä–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        if any(word in transcript.lower() for word in ["–ø–ª–∞–Ω", "–∑–∞–¥–∞—á", "—Ü–µ–ª—å"]):
            themes.append("üéØ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        if any(word in transcript.lower() for word in ["–ø—Ä–æ–±–ª–µ–º", "–æ—à–∏–±–∫", "—Å–±–æ–π"]):
            themes.append("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã")
        
        summary = f"""üé§ AI-–ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–ï–†–ö–ò

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –°–ª–æ–≤ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ: {word_count}
‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {word_count // 150} –º–∏–Ω

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
{chr(10).join([f"‚Ä¢ {theme}" for theme in themes]) if themes else "‚Ä¢ –û–±—â–∏–µ —Ä–∞–±–æ—á–∏–µ –≤–æ–ø—Ä–æ—Å—ã"}

üìù –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:
{transcript[:300]}{'...' if len(transcript) > 300 else ''}

‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ VasDom AI:
‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ–±—Å—É–∂–¥—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
‚Ä¢ –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""

        return {
            "summary": summary,
            "themes": themes,
            "word_count": word_count,
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Meeting analysis error: {e}")
        return {"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–ª–∞–Ω–µ—Ä–∫–∏"}

logger.info("‚úÖ AI Chat endpoints added (Render-compatible)")

# Startup/Shutdown events
@app.on_event("startup")
async def startup():
    logger.info("üöÄ VasDom AudioBot starting...")
    
    # Render-friendly startup - no databases required
    logger.info("üåê Running in API-only mode (Render compatible)")
    app.state.db_type = "none"
    
    logger.info("‚úÖ VasDom AudioBot started successfully")

@app.on_event("shutdown")
async def shutdown():
    logger.info("üõë VasDom AudioBot shutting down...")
    await close_database()
    logger.info("üëã Shutdown complete")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)