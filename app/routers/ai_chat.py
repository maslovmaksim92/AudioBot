import logging
import uuid
from datetime import datetime
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import Optional

from ..config.mongodb import get_mongo_db, Collections

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api/ai", tags=["ai-chat"])

class ChatMessage(BaseModel):
    message: str
    session_id: Optional[str] = None

class ChatResponse(BaseModel):
    response: str
    session_id: str
    timestamp: str

@router.post("/chat", response_model=ChatResponse)
async def chat_with_ai(chat_message: ChatMessage):
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è AI —á–∞—Ç–∞"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º session_id –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        session_id = chat_message.session_id or str(uuid.uuid4())
        
        # –ü–æ–ª—É—á–∞–µ–º MongoDB
        db = await get_mongo_db()
        
        if db is not None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db[Collections.CHAT_SESSIONS].insert_one({
                "session_id": session_id,
                "type": "user",
                "message": chat_message.message,
                "timestamp": datetime.utcnow()
            })
        
        # –ü—Ä–æ—Å—Ç–æ–π AI –æ—Ç–≤–µ—Ç (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
        user_msg = chat_message.message.lower()
        
        if "–¥–æ–º" in user_msg or "–∫–≤–∞—Ä—Ç–∏—Ä" in user_msg:
            ai_response = f"–£ –Ω–∞—Å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ 490 –¥–æ–º–æ–≤ –∏ 50,960 –∫–≤–∞—Ä—Ç–∏—Ä. –ú–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ª—é–±–æ–º—É –æ–±—ä–µ–∫—Ç—É. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        elif "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫" in user_msg or "–±—Ä–∏–≥–∞–¥" in user_msg:
            ai_response = f"–í VasDom —Ä–∞–±–æ—Ç–∞–µ—Ç 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö –ø–æ —Ä–∞–π–æ–Ω–∞–º: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π, –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π, –ñ–µ–ª–µ—Ç–æ–≤–æ, –°–µ–≤–µ—Ä–Ω—ã–π, –ü—Ä–∏–≥–æ—Ä–æ–¥ –∏ –û–∫—Ä–∞–∏–Ω—ã. –ù—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±—Ä–∏–≥–∞–¥–µ?"
        elif "–ø–ª–∞–Ω–µ—Ä–∫" in user_msg:
            ai_response = f"–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –ø–ª–∞–Ω–µ—Ä–æ–∫ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–ü–ª–∞–Ω–µ—Ä–∫–∏'. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∏ AI-–∞–Ω–∞–ª–∏–∑."
        elif "–ø—Ä–∏–≤–µ—Ç" in user_msg or "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π" in user_msg:
            ai_response = f"–ü—Ä–∏–≤–µ—Ç! –Ø VasDom AI, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π. –£ –º–µ–Ω—è –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ 490 –¥–æ–º–∞–º, 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∏ –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º. –ß–µ–º –ø–æ–º–æ—á—å?"
        elif "—Å—Ç–∞—Ç" in user_msg or "–ø–æ–∫–∞–∑–∞—Ç" in user_msg:
            ai_response = f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VasDom:\n‚Ä¢ 490 –¥–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏\n‚Ä¢ 50,960 –∫–≤–∞—Ä—Ç–∏—Ä\n‚Ä¢ 1,592 –ø–æ–¥—ä–µ–∑–¥–∞\n‚Ä¢ 4,165 —ç—Ç–∞–∂–µ–π\n‚Ä¢ 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Bitrix24 CRM."
        else:
            ai_response = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –Ø VasDom AI –∏ –ø–æ–º–æ–≥–∞—é —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π. –£ –Ω–∞—Å 490 –¥–æ–º–æ–≤, 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö. –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –¥–æ–º–∞—Ö, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö, –ø–ª–∞–Ω–µ—Ä–∫–∞—Ö –∏–ª–∏ –ø–æ–º–æ—á—å —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
        if db is not None:
            await db[Collections.CHAT_SESSIONS].insert_one({
                "session_id": session_id,
                "type": "ai",
                "message": ai_response,
                "timestamp": datetime.utcnow()
            })
        
        return ChatResponse(
            response=ai_response,
            session_id=session_id,
            timestamp=datetime.utcnow().isoformat()
        )
        
    except Exception as e:
        logger.error(f"AI Chat error: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

@router.get("/chat/history/{session_id}")
async def get_chat_history(session_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    try:
        db = await get_mongo_db()
        
        if db is None:
            return {"messages": [], "error": "Database unavailable"}
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor = db[Collections.CHAT_SESSIONS].find({
            "session_id": session_id
        }).sort("timestamp", 1)
        
        messages = []
        async for doc in cursor:
            messages.append({
                "type": doc["type"],
                "message": doc["message"],
                "timestamp": doc["timestamp"].isoformat()
            })
        
        return {"messages": messages}
        
    except Exception as e:
        logger.error(f"Chat history error: {e}")
        return {"messages": [], "error": str(e)}

@router.post("/analyze-meeting")
async def analyze_meeting(data: dict):
    """–ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–µ—Ä–∫–∏ (–¥–ª—è MeetingRecorder)"""
    try:
        transcript = data.get("transcript", "")
        
        if not transcript.strip():
            raise HTTPException(status_code=400, detail="–ü—É—Å—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
        words = transcript.split()
        word_count = len(words)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã
        themes = []
        if any(word in transcript.lower() for word in ["–¥–æ–º", "–∫–≤–∞—Ä—Ç–∏—Ä", "–ø–æ–¥—ä–µ–∑–¥"]):
            themes.append("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞–º–∏")
        if any(word in transcript.lower() for word in ["—Å–æ—Ç—Ä—É–¥–Ω–∏–∫", "–±—Ä–∏–≥–∞–¥", "—Ä–∞–±–æ—Ç–Ω–∏–∫"]):
            themes.append("–ö–∞–¥—Ä–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        if any(word in transcript.lower() for word in ["–ø–ª–∞–Ω", "–∑–∞–¥–∞—á", "—Ü–µ–ª—å"]):
            themes.append("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        if any(word in transcript.lower() for word in ["–ø—Ä–æ–±–ª–µ–º", "–æ—à–∏–±–∫", "—Å–±–æ–π"]):
            themes.append("–ü—Ä–æ–±–ª–µ–º—ã")
        
        # –°–æ–∑–¥–∞–µ–º summary
        summary = f"""üé§ –ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–ï–†–ö–ò

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {word_count} —Å–ª–æ–≤
‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {word_count // 150} –º–∏–Ω—É—Ç

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
{chr(10).join([f"‚Ä¢ {theme}" for theme in themes]) if themes else "‚Ä¢ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã"}

üìù –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:
{transcript[:200]}{'...' if len(transcript) > 200 else ''}

‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ–±—Å—É–∂–¥—ë–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–∏—Å—Ç–µ–º–µ
‚Ä¢ –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–ª–∞–Ω—ë—Ä–∫—É"""

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        db = await get_mongo_db()
        if db is not None:
            await db[Collections.MEETINGS].insert_one({
                "transcript": transcript,
                "analysis": summary,
                "themes": themes,
                "word_count": word_count,
                "timestamp": datetime.utcnow()
            })
        
        return {
            "summary": summary,
            "themes": themes,
            "word_count": word_count,
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Meeting analysis error: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–ª–∞–Ω–µ—Ä–∫–∏")