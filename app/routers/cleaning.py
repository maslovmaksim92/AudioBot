import logging
from datetime import datetime
from typing import List, Optional
from fastapi import APIRouter, HTTPException
from ..models.schemas import House
from ..services.bitrix_service import BitrixService
from ..config.settings import BITRIX24_WEBHOOK_URL

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api", tags=["cleaning"])

@router.get("/cleaning/houses", response_model=dict)
async def get_cleaning_houses(limit: Optional[int] = None):
    """–í—Å–µ –¥–æ–º–∞ –∏–∑ Bitrix24"""
    try:
        logger.info(f"üè† Loading houses from CRM...")
        
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        deals = await bitrix.get_deals(limit=limit)
        
        houses = []
        for deal in deals:
            address = deal.get('TITLE', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            deal_id = deal.get('ID', '')
            stage_id = deal.get('STAGE_ID', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–∏–≥–∞–¥—É –∏ —Å—Ç–∞—Ç—É—Å
            brigade = bitrix.analyze_house_brigade(address)
            status_text, status_color = bitrix.get_status_info(stage_id)
            
            house_data = House(
                address=address,
                deal_id=deal_id,
                stage=stage_id,
                brigade=brigade,
                status_text=status_text,
                status_color=status_color,
                created_date=deal.get('DATE_CREATE'),
                opportunity=deal.get('OPPORTUNITY'),
                last_sync=datetime.utcnow().isoformat()
            )
            
            houses.append(house_data.dict())
        
        logger.info(f"‚úÖ Houses data prepared: {len(houses)} houses")
        
        return {
            "status": "success",
            "houses": houses,
            "total": len(houses),
            "source": "üî• Bitrix24 CRM",
            "sync_timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Houses error: {e}")
        return {"status": "error", "message": str(e)}

@router.get("/cleaning/brigades")
async def get_brigades():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∏–≥–∞–¥–∞—Ö"""
    return {
        "status": "success",
        "brigades": [
            {"id": 1, "name": "1 –±—Ä–∏–≥–∞–¥–∞ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω", "employees": 14, "areas": ["–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è", "–ë–∞—Ä—Ä–∏–∫–∞–¥", "–õ–µ–Ω–∏–Ω–∞"]},
            {"id": 2, "name": "2 –±—Ä–∏–≥–∞–¥–∞ - –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω", "employees": 13, "areas": ["–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ", "–ù–∏–∫–∏—Ç–∏–Ω–∞", "–¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è"]},
            {"id": 3, "name": "3 –±—Ä–∏–≥–∞–¥–∞ - –ñ–∏–ª–µ—Ç–æ–≤–æ", "employees": 12, "areas": ["–ú–æ–ª–æ–¥–µ–∂–Ω–∞—è", "–®–∏—Ä–æ–∫–∞—è"]},
            {"id": 4, "name": "4 –±—Ä–∏–≥–∞–¥–∞ - –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω", "employees": 15, "areas": ["–ñ—É–∫–æ–≤–∞", "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è", "–ì–≤–∞—Ä–¥–µ–π—Å–∫–∞—è"]},
            {"id": 5, "name": "5 –±—Ä–∏–≥–∞–¥–∞ - –ü—Ä–∏–≥–æ—Ä–æ–¥", "employees": 14, "areas": ["–ö–æ–Ω–¥—Ä–æ–≤–æ", "–ü—É—à–∫–∏–Ω–∞", "–¢—É–ª—å—Å–∫–∞—è"]},
            {"id": 6, "name": "6 –±—Ä–∏–≥–∞–¥–∞ - –û–∫—Ä–∞–∏–Ω—ã", "employees": 14, "areas": ["–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã"]}
        ],
        "total_employees": 82,
        "total_brigades": 6
    }

@router.get("/cleaning/stats")
async def get_cleaning_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É–±–æ—Ä–∫–µ"""
    try:
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        houses_data = await bitrix.get_deals()
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        stats = {
            "total_houses": len(houses_data),
            "completed": 0,
            "in_progress": 0,
            "problematic": 0,
            "invoiced": 0
        }
        
        for house in houses_data:
            stage = house.get('STAGE_ID', '')
            if stage == 'C2:WON':
                stats["completed"] += 1
            elif 'APOLOGY' in stage or 'LOSE' in stage:
                stats["problematic"] += 1
            elif 'FINAL_INVOICE' in stage:
                stats["invoiced"] += 1
            else:
                stats["in_progress"] += 1
        
        return {
            "status": "success",
            "stats": stats,
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Cleaning stats error: {e}")
        return {"status": "error", "message": str(e)}

@router.get("/bitrix24/test")
async def test_bitrix24_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Bitrix24"""
    try:
        logger.info("üîß Testing Bitrix24 integration...")
        
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)  
        deals = await bitrix.get_deals(limit=3)  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 3 –¥–æ–º–∞—Ö
        
        if deals and len(deals) > 0:
            test_results = {
                "status": "success",
                "webhook_url": BITRIX24_WEBHOOK_URL[:50] + "..." if len(BITRIX24_WEBHOOK_URL) > 50 else BITRIX24_WEBHOOK_URL,
                "connection": "‚úÖ Connected",
                "sample_deals": len(deals),
                "sample_data": [
                    {
                        "id": deal.get('ID'),
                        "title": deal.get('TITLE', ''),
                        "stage": deal.get('STAGE_ID', ''),
                        "created": deal.get('DATE_CREATE', '')
                    } for deal in deals[:2]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
                ],
                "timestamp": datetime.utcnow().isoformat()
            }
            
            logger.info(f"‚úÖ Bitrix24 test successful: {len(deals)} deals loaded")
            return test_results
            
        else:
            return {
                "status": "error",
                "webhook_url": "configured" if BITRIX24_WEBHOOK_URL else "not_configured",
                "connection": "‚ùå No data received",
                "message": "Bitrix24 –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                "timestamp": datetime.utcnow().isoformat()
            }
            
    except Exception as e:
        logger.error(f"‚ùå Bitrix24 test error: {e}")
        return {
            "status": "error",
            "webhook_url": "error" if BITRIX24_WEBHOOK_URL else "not_configured", 
            "connection": "‚ùå Connection failed",
            "message": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }