import logging
import json
import os
import tempfile
import base64
from fastapi import APIRouter, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.responses import Response
from emergentintegrations.llm.chat import LlmChat, UserMessage
from openai import OpenAI
from ..services.bitrix_service import BitrixService
from ..config.settings import EMERGENT_LLM_KEY, BITRIX24_WEBHOOK_URL

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api", tags=["realistic-voice"])

# Initialize services
openai_client = OpenAI(api_key=EMERGENT_LLM_KEY)
llm_chat = LlmChat(
    api_key=EMERGENT_LLM_KEY,
    session_id="vasdom_realistic_voice",
    system_message="–í—ã - –ê–ª–∏—Å–∞, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ VasDom. –ì–æ–≤–æ—Ä–∏—Ç–µ –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫."
).with_model("openai", "gpt-4o-mini")

bitrix_service = BitrixService(BITRIX24_WEBHOOK_URL) if BITRIX24_WEBHOOK_URL else None

class VasDomRealisticVoice:
    def __init__(self):
        self.bitrix_service = bitrix_service
        self.context = {
            "company": "VasDom",
            "location": "–ö–∞–ª—É–≥–∞", 
            "role": "–ê–ª–∏—Å–∞ - –∂–∏–≤–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫",
            "houses_count": 50,  # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Bitrix24
            "employees_count": 82,
            "brigades_count": 6
        }
    
    async def get_company_data(self, query: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Bitrix24 –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        if not self.bitrix_service:
            return "–Ø –∑–Ω–∞—é –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VasDom"
            
        try:
            query_lower = query.lower()
            
            if any(word in query_lower for word in ['–¥–æ–º', '–¥–æ–º–∞', '–∞–¥—Ä–µ—Å', '–ø–æ–¥—ä–µ–∑–¥']):
                deals = await self.bitrix_service.get_deals()
                houses_info = []
                
                for deal in deals[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –¥–æ–º–æ–≤
                    title = deal.get('TITLE', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    status_info, _ = self.bitrix_service.get_status_info(deal.get('STAGE_ID', ''))
                    brigade = self.bitrix_service.analyze_house_brigade(title)
                    houses_info.append(f"{title} - {status_info}")
                
                return f"–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å: " + ". ".join(houses_info[:3])
                
            elif any(word in query_lower for word in ['–±—Ä–∏–≥–∞–¥', '–∫–æ–º–∞–Ω–¥', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫']):
                return f"–£ –Ω–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç 82 –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö –ø–æ –≤—Å–µ–π –ö–∞–ª—É–≥–µ"
                       
            elif any(word in query_lower for word in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫', '–æ—Ç—á–µ—Ç', '–¥–∞–Ω–Ω—ã–µ']):
                deals = await self.bitrix_service.get_deals()
                return f"–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: —É –Ω–∞—Å {len(deals)} –¥–æ–º–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ, 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö"
                       
            else:
                return f"–Ø –ê–ª–∏—Å–∞ –∏–∑ VasDom! –£ –Ω–∞—Å 50 –¥–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤ –ö–∞–ª—É–≥–µ"
                
        except Exception as e:
            logger.error(f"‚ùå Error getting Bitrix24 data: {e}")
            return "–î–∞–≤–∞–π—Ç–µ —è —Ä–∞—Å—Å–∫–∞–∂—É —á—Ç–æ –∑–Ω–∞—é –æ VasDom"
    
    def create_human_prompt(self) -> str:
        return """–í—ã - –ê–ª–∏—Å–∞, –∂–∏–≤–æ–π –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ VasDom –≤ –ö–∞–ª—É–≥–µ.

–í–ê–ñ–ù–û - –ì–û–í–û–†–ò–¢–ï –ö–ê–ö –ù–ê–°–¢–û–Ø–©–ò–ô –ß–ï–õ–û–í–ï–ö:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∂–∏–≤—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: "–ö–æ–Ω–µ—á–Ω–æ!", "–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º", "–û, –æ—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å!"
- –ë—É–¥—å—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π
- –ù–∏–∫–∞–∫–∏—Ö —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
- –ì–æ–≤–æ—Ä–∏—Ç–µ –∫–∞–∫ –±—É–¥—Ç–æ –≤—ã —Ä–µ–∞–ª—å–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ VasDom

–û –ö–û–ú–ü–ê–ù–ò–ò:
- VasDom - –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è –≤ –ö–∞–ª—É–≥–µ
- 50 –¥–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
- 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö
- –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∑–¥–µ—Å—å –∏ –∑–Ω–∞–µ—Ç–µ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –¢–µ–ø–ª—ã–π, —á–µ–ª–æ–≤–µ—á–Ω—ã–π, –∫–∞–∫ —Å —Ö–æ—Ä–æ—à–∏–º –∑–Ω–∞–∫–æ–º—ã–º
- –ö–æ—Ä–æ—Ç–∫–∏–µ, –∂–∏–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ù—É", "–î–∞", "–ö–æ–Ω–µ—á–Ω–æ", "–°–ª—É—à–∞–π—Ç–µ"
- –ë—É–¥—å—Ç–µ –∏—Å–∫—Ä–µ–Ω–Ω–µ–π –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ–π"""

realistic_assistant = VasDomRealisticVoice()

@router.websocket("/realistic-voice/ws")
async def realistic_voice_websocket(websocket: WebSocket):
    """WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞"""
    await websocket.accept()
    logger.info("üé§ Realistic Voice WebSocket connected")
    
    try:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–∏—Å–∞ –∏–∑ VasDom. –†–∞–¥–∞ —Å –≤–∞–º–∏ –ø–æ–æ–±—â–∞—Ç—å—Å—è!"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≥–æ–ª–æ—Å
        audio_response = await generate_realistic_voice(welcome_text, "nova")
        
        await websocket.send_text(json.dumps({
            "type": "voice_message",
            "text": welcome_text,
            "audio_data": audio_response,
            "voice_type": "human_realistic",
            "timestamp": "2024-01-01T00:00:00Z"
        }, ensure_ascii=False))
        
        while True:
            data = await websocket.receive_text()
            
            try:
                message_data = json.loads(data)
                logger.info(f"üé§ Realistic voice received: {message_data}")
                
                if message_data.get("type") == "user_message":
                    user_message = message_data.get("message", "")
                    
                    if user_message.strip():
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Bitrix24
                        bitrix_context = await realistic_assistant.get_company_data(user_message)
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI
                        try:
                            system_prompt = realistic_assistant.create_human_prompt()
                            full_context = f"{system_prompt}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {bitrix_context}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}"
                            
                            user_msg = UserMessage(text=full_context)
                            ai_response = await llm_chat.send_message(user_msg)
                            
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≥–æ–ª–æ—Å
                            audio_data = await generate_realistic_voice(ai_response, "nova")
                            
                            await websocket.send_text(json.dumps({
                                "type": "voice_message",
                                "text": ai_response,
                                "audio_data": audio_data,
                                "bitrix_context": bitrix_context,
                                "voice_type": "human_realistic",
                                "model": "OpenAI TTS + GPT-4o mini",
                                "timestamp": "2024-01-01T00:00:00Z"
                            }, ensure_ascii=False))
                            
                            logger.info(f"üó£Ô∏è Realistic voice response sent: {ai_response[:50]}...")
                            
                        except Exception as ai_error:
                            logger.error(f"‚ùå AI error: {ai_error}")
                            
                            fallback_text = f"–ü–æ–Ω–∏–º–∞—é! {bitrix_context}"
                            audio_data = await generate_realistic_voice(fallback_text, "nova")
                            
                            await websocket.send_text(json.dumps({
                                "type": "voice_message",
                                "text": fallback_text,
                                "audio_data": audio_data,
                                "is_fallback": True,
                                "voice_type": "human_realistic",
                                "timestamp": "2024-01-01T00:00:00Z"
                            }, ensure_ascii=False))
                
                elif message_data.get("type") == "ping":
                    await websocket.send_text(json.dumps({
                        "type": "pong",
                        "timestamp": message_data.get("timestamp")
                    }, ensure_ascii=False))
                    
            except json.JSONDecodeError:
                logger.error(f"‚ùå Invalid JSON received: {data}")
                
    except WebSocketDisconnect:
        logger.info("üîå Realistic Voice WebSocket disconnected")
    except Exception as e:
        logger.error(f"‚ùå Realistic Voice WebSocket error: {e}")

async def generate_realistic_voice(text: str, voice: str = "nova") -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ OpenAI TTS API"""
    try:
        import httpx
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        optimized_text = optimize_russian_text(text)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º emergent LLM key –¥–ª—è OpenAI TTS —á–µ—Ä–µ–∑ HTTP API
        headers = {
            "Authorization": f"Bearer {EMERGENT_LLM_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "tts-1-hd",
            "voice": voice,
            "input": optimized_text,
            "response_format": "mp3"
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(
                "https://api.openai.com/v1/audio/speech",
                headers=headers,
                json=payload,
                timeout=30.0
            )
            
            if response.status_code == 200:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —á–µ—Ä–µ–∑ WebSocket
                audio_base64 = base64.b64encode(response.content).decode('utf-8')
                logger.info(f"üé§ Generated realistic voice: {len(response.content)} bytes")
                return audio_base64
            else:
                logger.error(f"‚ùå OpenAI TTS API error: {response.status_code} - {response.text}")
                return ""
        
    except Exception as e:
        logger.error(f"‚ùå Voice generation error: {e}")
        return ""

def optimize_russian_text(text: str) -> str:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"""
    # –ó–∞–º–µ–Ω—ã –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
    replacements = {
        '—á—Ç–æ': '—à—Ç–æ',
        '–∫–æ–Ω–µ—á–Ω–æ': '–∫–æ–Ω–µ—à–Ω–æ', 
        '—Å–∫—É—á–Ω–æ': '—Å–∫—É—à–Ω–æ',
        '–Ω–∞—Ä–æ—á–Ω–æ': '–Ω–∞—Ä–æ—à–Ω–æ'
    }
    
    optimized = text
    for original, replacement in replacements.items():
        optimized = optimized.replace(original, replacement)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—ã –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    if not optimized.strip().endswith(('.', '!', '?')):
        optimized += '.'
    
    return optimized

@router.get("/realistic-voice/status")
async def realistic_voice_status():
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI TTS
        test_response = openai_client.audio.speech.create(
            model="tts-1",
            voice="nova",
            input="—Ç–µ—Å—Ç",
            response_format="mp3"
        )
        
        openai_status = "active" if len(test_response.content) > 0 else "error"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Bitrix24
        bitrix_status = "connected" if bitrix_service else "unavailable"
        if bitrix_service:
            try:
                deals = await bitrix_service.get_deals()
                houses_count = len(deals)
                bitrix_status = "connected"
            except:
                houses_count = 50
                bitrix_status = "fallback"
        else:
            houses_count = 50
            
        return {
            "status": "active",
            "assistant_name": "–ê–ª–∏—Å–∞",
            "voice_technology": "OpenAI TTS HD",
            "voice_model": "tts-1-hd",
            "voice_type": "nova (–∂–µ–Ω—Å–∫–∏–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)",
            "language": "ru-RU",
            "company": "VasDom",
            "location": "–ö–∞–ª—É–≥–∞",
            "data_sources": {
                "openai_tts": openai_status,
                "bitrix24": bitrix_status,
                "houses_count": houses_count,
                "employees_count": 82,
                "brigades_count": 6
            },
            "capabilities": [
                "–†–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≥–æ–ª–æ—Å OpenAI TTS",
                "–ù–µ–æ—Ç–ª–∏—á–∏–º—ã–π –æ—Ç –∂–∏–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞",
                "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Bitrix24",
                "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ",
                "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—á—å –∏ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏"
            ]
        }
        
    except Exception as e:
        logger.error(f"‚ùå Status check error: {e}")
        return {
            "status": "error",
            "message": str(e)
        }

@router.post("/realistic-voice/test")
async def test_realistic_voice(text: str = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ –ê–ª–∏—Å—ã –∏–∑ VasDom."):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞"""
    try:
        audio_data = await generate_realistic_voice(text, "nova")
        
        if audio_data:
            return {
                "success": True,
                "text": text,
                "audio_base64": audio_data,
                "voice_type": "human_realistic",
                "technology": "OpenAI TTS HD"
            }
        else:
            return {
                "success": False,
                "error": "Failed to generate voice"
            }
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))