import logging
import json
import os
from fastapi import APIRouter, WebSocket, WebSocketDisconnect
from emergentintegrations.llm.openai import OpenAIChatRealtime
from ..services.bitrix_service import BitrixService
from ..config.settings import EMERGENT_LLM_KEY, BITRIX24_WEBHOOK_URL

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api", tags=["realtime-voice"])

# Initialize services
chat_realtime = OpenAIChatRealtime(api_key=EMERGENT_LLM_KEY)
bitrix_service = BitrixService(BITRIX24_WEBHOOK_URL) if BITRIX24_WEBHOOK_URL else None

# Register GPT-4o Realtime router
OpenAIChatRealtime.register_openai_realtime_router(router, chat_realtime)

class VasDomRealtimeAssistant:
    def __init__(self):
        self.bitrix_service = bitrix_service
        self.context = {
            "company": "VasDom",
            "location": "–ö–∞–ª—É–≥–∞", 
            "role": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ê–ª–∏—Å–∞",
            "houses_count": 348,
            "employees_count": 82,
            "brigades_count": 6
        }
    
    async def get_company_data(self, query: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Bitrix24 –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        if not self.bitrix_service:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ Bitrix24 –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            
        try:
            query_lower = query.lower()
            
            if any(word in query_lower for word in ['–¥–æ–º', '–¥–æ–º–∞', '–∞–¥—Ä–µ—Å', '–ø–æ–¥—ä–µ–∑–¥']):
                # –ó–∞–ø—Ä–æ—Å –ø–æ –¥–æ–º–∞–º
                deals = await self.bitrix_service.get_deals()
                houses_info = []
                
                for deal in deals[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –¥–æ–º–æ–≤
                    title = deal.get('TITLE', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    status_info, _ = self.bitrix_service.get_status_info(deal.get('STAGE_ID', ''))
                    brigade = self.bitrix_service.analyze_house_brigade(title)
                    
                    houses_info.append(f"üìç {title} - {status_info} ({brigade})")
                
                return f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –Ω–∞—à–∏–º –¥–æ–º–∞–º:\n" + "\n".join(houses_info[:5])
                
            elif any(word in query_lower for word in ['–±—Ä–∏–≥–∞–¥', '–∫–æ–º–∞–Ω–¥', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫']):
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∏–≥–∞–¥–∞—Ö
                users = await self.bitrix_service.get_users()
                return f"–£ –Ω–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç {len(users)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö:\n" \
                       f"1Ô∏è‚É£ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω\n2Ô∏è‚É£ –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω\n3Ô∏è‚É£ –ñ–∏–ª–µ—Ç–æ–≤–æ\n" \
                       f"4Ô∏è‚É£ –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω\n5Ô∏è‚É£ –ü—Ä–∏–≥–æ—Ä–æ–¥\n6Ô∏è‚É£ –û–∫—Ä–∞–∏–Ω—ã"
                       
            elif any(word in query_lower for word in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫', '–æ—Ç—á–µ—Ç', '–¥–∞–Ω–Ω—ã–µ']):
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                deals = await self.bitrix_service.get_deals()
                completed = sum(1 for deal in deals if 'WON' in deal.get('STAGE_ID', ''))
                in_progress = len(deals) - completed
                
                return f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VasDom:\n" \
                       f"üè† –í—Å–µ–≥–æ –¥–æ–º–æ–≤: {len(deals)}\n" \
                       f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}\n" \
                       f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {in_progress}\n" \
                       f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: 82\n" \
                       f"üöõ –ë—Ä–∏–≥–∞–¥: 6"
                       
            else:
                return f"–Ø –ê–ª–∏—Å–∞, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ VasDom –≤ –ö–∞–ª—É–≥–µ! –£ –Ω–∞—Å 348 –¥–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏ 6 —Ä–∞–±–æ—á–∏—Ö –±—Ä–∏–≥–∞–¥. –û —á–µ–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?"
                
        except Exception as e:
            logger.error(f"‚ùå Error getting Bitrix24 data: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    def create_system_prompt(self) -> str:
        return f"""–í—ã - –ê–ª–∏—Å–∞, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ VasDom –≤ –ö–∞–ª—É–≥–µ. –ì–æ–≤–æ—Ä–∏—Ç–µ –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ –∫–∞–∫ —Ä–æ–±–æ—Ç.

–í–ê–®–ê –õ–ò–ß–ù–û–°–¢–¨:
- –ò–º—è: –ê–ª–∏—Å–∞  
- –•–∞—Ä–∞–∫—Ç–µ—Ä: –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è, –æ—Ç–∑—ã–≤—á–∏–≤–∞—è, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è
- –¢–æ–Ω: –¢–µ–ø–ª—ã–π, —á–µ–ª–æ–≤–µ—á–Ω—ã–π, –∫–∞–∫ –±—É–¥—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç–µ —Å —Ö–æ—Ä–æ—à–∏–º –∑–Ω–∞–∫–æ–º—ã–º
- –°—Ç–∏–ª—å: –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã, –∏–∑–±–µ–≥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω–æ–≤

–ö–û–ù–¢–ï–ö–°–¢ –†–ê–ë–û–¢–´:
- –ö–æ–º–ø–∞–Ω–∏—è: VasDom (–∫–ª–∏–Ω–∏–Ω–≥–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –≤ –ö–∞–ª—É–≥–µ)
- –î–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: 348
- –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: 82 —á–µ–ª–æ–≤–µ–∫–∞
- –ë—Ä–∏–≥–∞–¥: 6 (—Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–π–æ–Ω–∞—Ö –ö–∞–ª—É–≥–∏)

–ö–ê–ö –û–¢–í–ï–ß–ê–¢–¨:
- –ì–æ–≤–æ—Ä–∏—Ç–µ –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: "–ö–æ–Ω–µ—á–Ω–æ!", "–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º", "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–ª–∞"
- –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –ø–æ–ª–µ–∑–Ω—ã
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ —Ç–æ—á–Ω–æ - —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏—Ç–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
- –û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ

–ò–ó–ë–ï–ì–ê–ô–¢–ï:
- –†–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"
- –§–æ—Ä–º–∞–ª—å–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
- –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

–ü–æ–º–Ω–∏—Ç–µ: –≤—ã - –ê–ª–∏—Å–∞ –∏–∑ VasDom, –∏ –æ–±—â–∞–µ—Ç–µ—Å—å —Å –∫–æ–ª–ª–µ–≥–æ–π."""

assistant = VasDomRealtimeAssistant()

@router.websocket("/realtime-voice/ws")
async def realtime_voice_websocket(websocket: WebSocket):
    """WebSocket endpoint –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –ê–ª–∏—Å–æ–π —á–µ—Ä–µ–∑ GPT-4o Realtime"""
    await websocket.accept()
    logger.info("üé§ Realtime voice WebSocket connected")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = {
            "type": "assistant_message",
            "message": "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–∏—Å–∞, –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ VasDom. –ì–æ—Ç–æ–≤–∞ –∫ –∂–∏–≤–æ–º—É –æ–±—â–µ–Ω–∏—é!",
            "timestamp": "2024-01-01T00:00:00Z"
        }
        
        await websocket.send_text(json.dumps(welcome_message, ensure_ascii=False))
        
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            
            try:
                message_data = json.loads(data)
                logger.info(f"üé§ Realtime voice received: {message_data}")
                
                if message_data.get("type") == "user_message":
                    user_message = message_data.get("message", "")
                    
                    if user_message.strip():
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Bitrix24
                        bitrix_context = await assistant.get_company_data(user_message)
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                        system_prompt = assistant.create_system_prompt()
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT-4o Realtime (—á–µ—Ä–µ–∑ emergentintegrations)
                        try:
                            response = await chat_realtime.chat_completion_request(
                                messages=[
                                    {"role": "system", "content": system_prompt},
                                    {"role": "assistant", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω—ã—Ö: {bitrix_context}"},
                                    {"role": "user", "content": user_message}
                                ],
                                model="gpt-4o-realtime-preview",
                                temperature=0.7,
                                max_tokens=200
                            )
                            
                            ai_response = response.get("choices", [{}])[0].get("message", {}).get("content", "")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
                            await websocket.send_text(json.dumps({
                                "type": "assistant_message",
                                "message": ai_response,
                                "bitrix_data": bitrix_context,
                                "timestamp": "2024-01-01T00:00:00Z"
                            }, ensure_ascii=False))
                            
                            logger.info(f"ü§ñ Realtime AI response sent")
                            
                        except Exception as ai_error:
                            logger.error(f"‚ùå GPT-4o Realtime error: {ai_error}")
                            
                            # Fallback –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ Bitrix24
                            fallback_response = f"–ü–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å! {bitrix_context}"
                            
                            await websocket.send_text(json.dumps({
                                "type": "assistant_message",
                                "message": fallback_response,
                                "is_fallback": True,
                                "timestamp": "2024-01-01T00:00:00Z"
                            }, ensure_ascii=False))
                
                elif message_data.get("type") == "ping":
                    await websocket.send_text(json.dumps({
                        "type": "pong",
                        "timestamp": message_data.get("timestamp")
                    }, ensure_ascii=False))
                    
            except json.JSONDecodeError:
                logger.error(f"‚ùå Invalid JSON received: {data}")
                await websocket.send_text(json.dumps({
                    "type": "error",
                    "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
                }, ensure_ascii=False))
                
    except WebSocketDisconnect:
        logger.info("üîå Realtime voice WebSocket disconnected")
    except Exception as e:
        logger.error(f"‚ùå Realtime voice WebSocket error: {e}")

@router.get("/realtime-voice/status")
async def realtime_voice_status():
    """–°—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Bitrix24
        bitrix_status = "active" if bitrix_service else "unavailable"
        if bitrix_service:
            try:
                deals = await bitrix_service.get_deals()
                houses_count = len(deals)
                bitrix_status = "connected"
            except:
                houses_count = 348
                bitrix_status = "fallback"
        else:
            houses_count = 348
            
        return {
            "status": "active",
            "assistant_name": "–ê–ª–∏—Å–∞",
            "voice_model": "GPT-4o Realtime Preview",
            "language": "ru-RU",
            "company": "VasDom",
            "location": "–ö–∞–ª—É–≥–∞",
            "data_sources": {
                "bitrix24": bitrix_status,
                "houses_count": houses_count,
                "employees_count": 82,
                "brigades_count": 6
            },
            "capabilities": [
                "–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
                "–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Bitrix24",
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–∞—Ö –∏ —Å—Ç–∞—Ç—É—Å–∞—Ö",
                "–î–∞–Ω–Ω—ã–µ –æ –±—Ä–∏–≥–∞–¥–∞—Ö –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö",
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏"
            ]
        }
        
    except Exception as e:
        logger.error(f"‚ùå Status check error: {e}")
        return {
            "status": "error",
            "message": str(e)
        }