import logging
import json
from fastapi import APIRouter, WebSocket, WebSocketDisconnect
from typing import Dict, Set
from ..services.ai_service import AIService

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api", tags=["websocket"])

# Initialize AI service
ai_service = AIService()

# Active WebSocket connections
active_connections: Set[WebSocket] = set()
user_connections: Dict[str, WebSocket] = {}

class ConnectionManager:
    def __init__(self):
        self.active_connections: Set[WebSocket] = set()
        self.user_connections: Dict[str, WebSocket] = {}

    async def connect(self, websocket: WebSocket, user_id: str = None):
        await websocket.accept()
        self.active_connections.add(websocket)
        if user_id:
            self.user_connections[user_id] = websocket
        logger.info(f"üí¨ WebSocket connected. Total connections: {len(self.active_connections)}")

    def disconnect(self, websocket: WebSocket, user_id: str = None):
        self.active_connections.discard(websocket)
        if user_id and user_id in self.user_connections:
            del self.user_connections[user_id]
        logger.info(f"üí¨ WebSocket disconnected. Total connections: {len(self.active_connections)}")

    async def send_message(self, websocket: WebSocket, message: dict):
        try:
            await websocket.send_text(json.dumps(message, ensure_ascii=False))
        except Exception as e:
            logger.error(f"‚ùå Error sending WebSocket message: {e}")
            self.disconnect(websocket)

    async def broadcast(self, message: dict):
        disconnected = []
        for connection in self.active_connections:
            try:
                await connection.send_text(json.dumps(message, ensure_ascii=False))
            except Exception as e:
                logger.error(f"‚ùå Error broadcasting to WebSocket: {e}")
                disconnected.append(connection)
        
        # Clean up disconnected connections
        for conn in disconnected:
            self.active_connections.discard(conn)

manager = ConnectionManager()

@router.websocket("/live-chat/ws")
async def websocket_endpoint(websocket: WebSocket):
    user_id = "live_chat_user"  # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ query params –∏–ª–∏ headers
    await manager.connect(websocket, user_id)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await manager.send_message(websocket, {
            "type": "system",
            "message": "üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VasDom AudioBot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        })
        
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            
            try:
                message_data = json.loads(data)
                logger.info(f"üì® WebSocket received: {message_data}")
                
                if message_data.get("type") == "user_message":
                    user_message = message_data.get("message", "")
                    user_id = message_data.get("user_id", "anonymous")
                    
                    if user_message.strip():
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI
                        try:
                            ai_response = await ai_service.process_message(user_message, user_id)
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –∫–ª–∏–µ–Ω—Ç—É
                            await manager.send_message(websocket, {
                                "type": "ai_response",
                                "message": ai_response
                            })
                            
                            logger.info(f"ü§ñ AI response sent via WebSocket")
                            
                        except Exception as ai_error:
                            logger.error(f"‚ùå AI processing error: {ai_error}")
                            await manager.send_message(websocket, {
                                "type": "ai_response",
                                "message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                "error": True
                            })
                
                elif message_data.get("type") == "ping":
                    # –ü–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    await manager.send_message(websocket, {
                        "type": "pong",
                        "timestamp": message_data.get("timestamp")
                    })
                    
            except json.JSONDecodeError:
                logger.error(f"‚ùå Invalid JSON received: {data}")
                await manager.send_message(websocket, {
                    "type": "error",
                    "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
                })
                
    except WebSocketDisconnect:
        logger.info("üîå WebSocket client disconnected")
        manager.disconnect(websocket, user_id)
    except Exception as e:
        logger.error(f"‚ùå WebSocket error: {e}")
        manager.disconnect(websocket, user_id)

@router.get("/live-chat/status")
async def websocket_status():
    """–°—Ç–∞—Ç—É—Å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    return {
        "active_connections": len(manager.active_connections),
        "user_connections": len(manager.user_connections),
        "websocket_available": True,
        "ai_service_status": "active"
    }

@router.post("/live-chat/broadcast")
async def broadcast_message(message: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
    await manager.broadcast({
        "type": "broadcast",
        "message": message.get("text", ""),
        "timestamp": message.get("timestamp")
    })
    
    return {
        "status": "success",
        "recipients": len(manager.active_connections)
    }