import logging
import json
from fastapi import APIRouter, WebSocket, WebSocketDisconnect
from typing import Set

logger = logging.getLogger(__name__)
router = APIRouter(tags=["websocket"])

# Active WebSocket connections
active_connections: Set[WebSocket] = set()

@router.websocket("/api/live-chat/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    active_connections.add(websocket)
    
    try:
        logger.info("üí¨ WebSocket connection accepted")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await websocket.send_text(json.dumps({
            "type": "system",
            "message": "üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VasDom AudioBot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        }, ensure_ascii=False))
        
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            
            try:
                message_data = json.loads(data)
                logger.info(f"üì® WebSocket received: {message_data}")
                
                if message_data.get("type") == "user_message":
                    user_message = message_data.get("message", "")
                    
                    if user_message.strip():
                        # –ü—Ä–æ—Å—Ç–æ–π echo –æ—Ç–≤–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                        ai_response = f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}"
                        
                        await websocket.send_text(json.dumps({
                            "type": "ai_response",
                            "message": ai_response
                        }, ensure_ascii=False))
                        
                        logger.info(f"ü§ñ Echo response sent via WebSocket")
                
                elif message_data.get("type") == "ping":
                    # –ü–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    await websocket.send_text(json.dumps({
                        "type": "pong",
                        "timestamp": message_data.get("timestamp")
                    }, ensure_ascii=False))
                    
            except json.JSONDecodeError:
                logger.error(f"‚ùå Invalid JSON received: {data}")
                await websocket.send_text(json.dumps({
                    "type": "error",
                    "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
                }, ensure_ascii=False))
                
    except WebSocketDisconnect:
        logger.info("üîå WebSocket client disconnected")
        active_connections.discard(websocket)
    except Exception as e:
        logger.error(f"‚ùå WebSocket error: {e}")
        active_connections.discard(websocket)

@router.get("/api/live-chat/status")
async def websocket_status():
    """–°—Ç–∞—Ç—É—Å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    return {
        "active_connections": len(active_connections),
        "websocket_available": True,
        "ai_service_status": "active"
    }