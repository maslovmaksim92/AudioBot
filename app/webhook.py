import time
import os
from fastapi import APIRouter, Request
from loguru import logger
from datetime import datetime

router = APIRouter()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞)
application_logs = []
telegram_messages = []
system_status = {
    "startup_time": datetime.utcnow().isoformat(),
    "total_requests": 0,
    "telegram_updates": 0,
    "errors": 0,
    "last_activity": None
}

def add_log(level: str, message: str, details: dict = None):
    """–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    global application_logs
    log_entry = {
        "timestamp": datetime.utcnow().isoformat(),
        "level": level,
        "message": message,
        "details": details or {}
    }
    application_logs.append(log_entry)
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
    if len(application_logs) > 100:
        application_logs = application_logs[-100:]
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –≤ loguru
    if level == "ERROR":
        logger.error(f"üî¥ {message}")
    elif level == "WARNING":
        logger.warning(f"üü° {message}")
    elif level == "SUCCESS":
        logger.success(f"üü¢ {message}")
    else:  # INFO
        logger.info(f"üîµ {message}")

@router.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    system_status["total_requests"] += 1
    system_status["last_activity"] = datetime.utcnow().isoformat()
    
    add_log("INFO", "–ó–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã", {"endpoint": "/"})
    
    return {
        "message": "ü§ñ AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –í–∞—Å–î–æ–º - –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø PostingFotoTG",
        "status": "‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ Render",
        "company": "–í–∞—Å–î–æ–º - –ö–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
        "version": "3.0.0 (PostingFotoTG Edition)",
        "telegram_bot": "@aitest123432_bot",
        "logs_count": len(application_logs),
        "system_status": system_status,
        "endpoints": {
            "health": "/health",
            "webhook_setup": "/telegram/set-webhook",
            "dashboard": "/dashboard",
            "logs": "/logs"
        }
    }

@router.get("/health")
async def health_check():
    """Health check endpoint —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    system_status["total_requests"] += 1
    system_status["last_activity"] = datetime.utcnow().isoformat()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_check = {
        "TELEGRAM_BOT_TOKEN": bool(os.environ.get("TELEGRAM_BOT_TOKEN")),
        "TELEGRAM_WEBHOOK_URL": bool(os.environ.get("TELEGRAM_WEBHOOK_URL")),
        "BITRIX24_WEBHOOK_URL": bool(os.environ.get("BITRIX24_WEBHOOK_URL")),
        "EMERGENT_LLM_KEY": bool(os.environ.get("EMERGENT_LLM_KEY"))
    }
    
    health_status = {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "service": "VasDom AI Assistant (PostingFotoTG Edition)",
        "version": "3.0.0",
        "deployment": "render",
        "uptime": system_status["startup_time"],
        "environment_variables": env_check,
        "statistics": system_status,
        "logs_available": len(application_logs)
    }
    
    add_log("INFO", "Health check –∑–∞–ø—Ä–æ—Å", health_status)
    
    return health_status

@router.get("/dashboard")
async def get_dashboard():
    """–î–∞—à–±–æ—Ä–¥ —Å –ª–æ–≥–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    system_status["total_requests"] += 1
    system_status["last_activity"] = datetime.utcnow().isoformat()
    
    add_log("INFO", "–ó–∞–ø—Ä–æ—Å –¥–∞—à–±–æ—Ä–¥–∞", {"endpoint": "/dashboard"})
    
    return {
        "success": True,
        "company": "–í–∞—Å–î–æ–º",
        "message": "üéâ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! (PostingFotoTG Edition)",
        "system_status": system_status,
        "telegram_bot": "@aitest123432_bot",
        "recent_logs": application_logs[-20:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–æ–≥–æ–≤
        "telegram_messages": telegram_messages[-10:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        "metrics": {
            "houses": {"–ö–∞–ª—É–≥–∞": 500, "–ö–µ–º–µ—Ä–æ–≤–æ": 100},
            "employees": 100,
            "status": "active",
            "total_requests": system_status["total_requests"],
            "telegram_updates": system_status["telegram_updates"],
            "errors": system_status["errors"]
        },
        "environment": {
            "telegram_configured": bool(os.environ.get("TELEGRAM_BOT_TOKEN")),
            "webhook_configured": bool(os.environ.get("TELEGRAM_WEBHOOK_URL")),
            "bitrix24_configured": bool(os.environ.get("BITRIX24_WEBHOOK_URL")),
            "ai_configured": bool(os.environ.get("EMERGENT_LLM_KEY"))
        }
    }

@router.get("/logs")
async def get_logs():
    """Endpoint –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ª–æ–≥–æ–≤"""
    system_status["total_requests"] += 1
    
    return {
        "total_logs": len(application_logs),
        "logs": application_logs,
        "system_status": system_status,
        "telegram_messages": telegram_messages
    }

@router.get("/telegram/set-webhook")
async def set_telegram_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram webhook - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ó–ê–õ–û–ì–ò–†–û–í–ê–ù–û"""
    system_status["total_requests"] += 1
    system_status["last_activity"] = datetime.utcnow().isoformat()
    
    add_log("INFO", "üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –£–°–¢–ê–ù–û–í–ö–£ TELEGRAM WEBHOOK", {"step": "start"})
    
    try:
        webhook_url = os.environ.get("TELEGRAM_WEBHOOK_URL")
        bot_token = os.environ.get("TELEGRAM_BOT_TOKEN")
        
        add_log("INFO", f"üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è", {
            "webhook_url": webhook_url, 
            "bot_token_configured": bool(bot_token)
        })
        
        if not webhook_url or not bot_token:
            missing = []
            if not webhook_url: missing.append("TELEGRAM_WEBHOOK_URL")
            if not bot_token: missing.append("TELEGRAM_BOT_TOKEN")
            
            error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}"
            add_log("ERROR", error_msg, {"missing_vars": missing})
            system_status["errors"] += 1
            
            return {
                "status": "‚ùå –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ï–ü–û–õ–ù–ê–Ø",
                "missing_variables": missing,
                "required_env_vars": {
                    "TELEGRAM_WEBHOOK_URL": "https://audiobot-qq2.onrender.com/telegram/webhook",
                    "TELEGRAM_BOT_TOKEN": "8327964628:AAHMIgT1XiGEkLc34nogRGZt-Ox-9R0TSn0"
                },
                "instructions": [
                    "1. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Render Environment",
                    "2. –î–æ–∂–¥–∏—Ç–µ—Å—å redeploy (3-5 –º–∏–Ω—É—Ç)",
                    "3. –í—ã–∑–æ–≤–∏—Ç–µ —ç—Ç–æ—Ç endpoint —Å–Ω–æ–≤–∞"
                ],
                "logs": application_logs[-5:]
            }
        
        add_log("INFO", "üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram API", {
            "telegram_url": f"https://api.telegram.org/bot{bot_token[:10]}***/setWebhook",
            "webhook_url": webhook_url
        })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram API
        import httpx
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            telegram_api_url = f"https://api.telegram.org/bot{bot_token}/setWebhook"
            
            payload = {
                "url": webhook_url,
                "drop_pending_updates": True,
                "allowed_updates": ["message", "callback_query"]
            }
            
            add_log("INFO", "üì° –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ Telegram", payload)
            
            response = await client.post(telegram_api_url, json=payload)
            
            add_log("INFO", f"üì• –û—Ç–≤–µ—Ç –æ—Ç Telegram API", {
                "status_code": response.status_code,
                "response_text": response.text[:500]
            })
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    success_msg = f"‚úÖ WEBHOOK –£–°–¢–ê–ù–û–í–õ–ï–ù –£–°–ü–ï–®–ù–û: {webhook_url}"
                    add_log("SUCCESS", success_msg, {
                        "webhook_url": webhook_url,
                        "telegram_response": result
                    })
                    
                    return {
                        "status": "‚úÖ –ü–û–õ–ù–´–ô –£–°–ü–ï–•!",
                        "message": "Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
                        "webhook_url": webhook_url,
                        "bot": "@aitest123432_bot",
                        "telegram_response": result,
                        "next_steps": [
                            "1. –ù–∞–π–¥–∏—Ç–µ @aitest123432_bot –≤ Telegram",
                            "2. –ù–∞–ø–∏—à–∏—Ç–µ /start",
                            "3. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!",
                            "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /dashboard –¥–ª—è –ª–æ–≥–æ–≤"
                        ],
                        "logs": application_logs[-3:]
                    }
                else:
                    error_msg = f"‚ùå TELEGRAM API –û–®–ò–ë–ö–ê: {result.get('description')}"
                    add_log("ERROR", error_msg, {"telegram_response": result})
                    system_status["errors"] += 1
                    
                    return {
                        "status": "‚ùå Telegram API –æ—à–∏–±–∫–∞",
                        "error": result.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
                        "telegram_response": result,
                        "logs": application_logs[-5:]
                    }
            else:
                error_msg = f"‚ùå HTTP –û–®–ò–ë–ö–ê: {response.status_code}"
                add_log("ERROR", error_msg, {
                    "status_code": response.status_code,
                    "response": response.text[:300]
                })
                system_status["errors"] += 1
                
                return {
                    "status": "‚ùå HTTP –æ—à–∏–±–∫–∞",
                    "http_status": response.status_code,
                    "response": response.text[:500],
                    "logs": application_logs[-5:]
                }
                
    except Exception as e:
        error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}"
        add_log("ERROR", error_msg, {"exception": str(e)})
        system_status["errors"] += 1
        
        return {
            "status": "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê",
            "error": str(e),
            "troubleshooting": [
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –¥–æ–º–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –ø—É–±–ª–∏—á–Ω–æ",
                "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ Render –Ω–∞ –æ—à–∏–±–∫–∏"
            ],
            "logs": application_logs[-10:]
        }

@router.post("/telegram/webhook")
async def telegram_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram webhook - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ó–ê–õ–û–ì–ò–†–û–í–ê–ù–û"""
    system_status["total_requests"] += 1
    system_status["telegram_updates"] += 1
    system_status["last_activity"] = datetime.utcnow().isoformat()
    
    try:
        data = await request.json()
        
        add_log("INFO", "ü§ñ –ü–û–õ–£–ß–ï–ù TELEGRAM UPDATE", {
            "update_keys": list(data.keys()),
            "update_id": data.get("update_id"),
            "data_size": len(str(data))
        })
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'message' in data:
            message = data['message']
            chat_id = message.get('chat', {}).get('id')
            text = message.get('text', '')
            user_info = message.get('from', {})
            user_name = user_info.get('first_name', 'Unknown')
            username = user_info.get('username', 'no_username')
            
            message_info = {
                "chat_id": chat_id,
                "user_name": user_name,
                "username": username,
                "text": text,
                "timestamp": datetime.utcnow().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
            telegram_messages.append(message_info)
            if len(telegram_messages) > 50:  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50
                telegram_messages[:] = telegram_messages[-50:]
            
            add_log("SUCCESS", f"üí¨ –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø", message_info)
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Telegram API
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            add_log("SUCCESS", "‚úÖ –°–û–û–ë–©–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ê–ù–û –£–°–ü–ï–®–ù–û", {
                "processed_at": datetime.utcnow().isoformat()
            })
        
        elif 'callback_query' in data:
            callback = data['callback_query']
            add_log("INFO", "üîò –ü–û–õ–£–ß–ï–ù CALLBACK QUERY", {
                "callback_data": callback.get('data', ''),
                "user_id": callback.get('from', {}).get('id')
            })
        
        else:
            add_log("WARNING", "‚ö†Ô∏è –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü UPDATE", {
                "update_keys": list(data.keys())
            })
        
        return {"ok": True}
        
    except Exception as e:
        error_msg = f"‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò WEBHOOK: {str(e)}"
        add_log("ERROR", error_msg, {"exception": str(e)})
        system_status["errors"] += 1
        
        return {"ok": False, "error": str(e)}

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ª–æ–≥
add_log("SUCCESS", "üöÄ WEBHOOK –ú–û–î–£–õ–¨ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù", {
    "timestamp": datetime.utcnow().isoformat(),
    "module": "webhook.py"
})