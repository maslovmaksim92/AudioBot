import asyncio
import logging
import httpx
import urllib.parse
from typing import List, Dict, Any, Optional

logger = logging.getLogger(__name__)

class BitrixService:
    def __init__(self, webhook_url: str):
        self.webhook_url = webhook_url
        logger.info(f"üîó Bitrix24 service initialized")
        
    async def get_deals(self, limit: Optional[int] = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –í–°–ï –¥–æ–º–∞ –∏–∑ Bitrix24 CRM"""
        try:
            logger.info(f"üè† Loading houses from Bitrix24 CRM...")
            
            all_deals = []
            start = 0
            batch_size = 50
            
            while True:
                params = {
                    'select[0]': 'ID',
                    'select[1]': 'TITLE', 
                    'select[2]': 'STAGE_ID',
                    'select[3]': 'DATE_CREATE',
                    'select[4]': 'OPPORTUNITY',
                    'select[5]': 'ASSIGNED_BY_ID',  # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–¥–ª—è –±—Ä–∏–≥–∞–¥)
                    'select[6]': 'COMPANY_ID',      # –ö–æ–º–ø–∞–Ω–∏—è (–£–ö)
                    # –ö–†–ò–¢–ò–ß–ù–´–ï –ü–û–õ–Ø: –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–º–æ–≤
                    'select[7]': 'UF_CRM_1669561599956',   # –ê–¥—Ä–µ—Å –¥–æ–º–∞
                    'select[8]': 'UF_CRM_1669704529022',   # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä
                    'select[9]': 'UF_CRM_1669705507390',   # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—ä–µ–∑–¥–æ–≤
                    'select[10]': 'UF_CRM_1669704631166',  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π
                    'select[11]': 'UF_CRM_1669706387893',  # –¢–∞—Ä–∏—Ñ/–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å
                    # –¢–∏–ø—ã —É–±–æ—Ä–∫–∏ –∏–∑ Bitrix24
                    'select[12]': 'UF_CRM_1741592855565',  # –¢–∏–ø —É–±–æ—Ä–∫–∏ 1 | –°–µ–Ω—Ç—è–±—Ä—å 2025
                    'select[13]': 'UF_CRM_1741592945060',  # –¢–∏–ø —É–±–æ—Ä–∫–∏ 2 | –°–µ–Ω—Ç—è–±—Ä—å 2025
                    'select[14]': 'UF_CRM_1741592774017',  # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 1 | –°–µ–Ω—Ç—è–±—Ä—å 2025
                    'select[15]': 'UF_CRM_1741592892232',  # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 2 | –°–µ–Ω—Ç—è–±—Ä—å 2025
                    'filter[CATEGORY_ID]': '34',  # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (490 –¥–æ–º–æ–≤)
                    'order[DATE_CREATE]': 'DESC',
                    'start': str(start)
                }
                
                query_string = urllib.parse.urlencode(params)
                url = f"{self.webhook_url}crm.deal.list.json?{query_string}"
                
                async with httpx.AsyncClient() as client:
                    response = await client.get(url, timeout=30)
                    
                    if response.status_code == 200:
                        data = response.json()
                        
                        if data.get('result') and len(data['result']) > 0:
                            batch_deals = data['result']
                            all_deals.extend(batch_deals)
                            
                            logger.info(f"üì¶ Loaded batch {start//batch_size + 1}: {len(batch_deals)} houses, total: {len(all_deals)}")
                            
                            if len(batch_deals) < batch_size:
                                logger.info(f"‚úÖ All houses loaded: {len(all_deals)} from Bitrix24")
                                break
                                
                            start += batch_size
                            
                            if len(all_deals) >= 600:
                                logger.info(f"üõë Loaded {len(all_deals)} houses limit reached")
                                break
                                
                            await asyncio.sleep(0.2)
                        else:
                            break
                    else:
                        logger.error(f"‚ùå Bitrix24 HTTP error: {response.status_code}")
                        break
            
            if all_deals:
                logger.info(f"‚úÖ CRM dataset loaded: {len(all_deals)} deals from Bitrix24")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–º–æ–≤
                processed_deals = []
                for deal in all_deals:
                    processed_deal = self._extract_house_data(deal)
                    processed_deals.append(processed_deal)
                
                # –û–±–æ–≥–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏
                enriched_deals = await self._enrich_with_management_companies(processed_deals)
                
                logger.info(f"‚úÖ Processed and enriched {len(enriched_deals)} houses")
                return enriched_deals
            else:
                logger.warning("‚ö†Ô∏è No deals from Bitrix24, using fallback")
                return self._get_mock_data(limit or 50)
            
        except Exception as e:
            logger.error(f"‚ùå Bitrix24 load error: {e}")
            return self._get_mock_data(limit or 50)
    
    def _get_mock_data(self, limit: int) -> List[Dict[str, Any]]:
        """–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM –¥–ª—è fallback —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
        real_houses = [
            {
                "ID": "112", "TITLE": "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 112/1", "STAGE_ID": "C2:APOLOGY",
                "apartments_count": 75, "entrances_count": 3, "floors_count": 5,
                "management_company": "–û–û–û '–£–ö –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥'", "house_address": "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 112/1"
            },
            {
                "ID": "122", "TITLE": "–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ 18", "STAGE_ID": "C2:APOLOGY",
                "apartments_count": 48, "entrances_count": 2, "floors_count": 9,
                "management_company": "–û–û–û '–ñ–∏–ª–∫–æ–º—Å–µ—Ä–≤–∏—Å'", "house_address": "–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ 18"
            },
            {
                "ID": "200", "TITLE": "–ñ—É–∫–æ–≤–∞ 25", "STAGE_ID": "C2:APOLOGY",
                "apartments_count": 96, "entrances_count": 4, "floors_count": 9,
                "management_company": "–û–û–û '–ü—Ä–µ–º–∏—É–º-–£–ö'", "house_address": "–ñ—É–∫–æ–≤–∞ 25"
            },
            {
                "ID": "240", "TITLE": "–ì—Ä–∞–±—Ü–µ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ 158", "STAGE_ID": "C2:APOLOGY",
                "apartments_count": 120, "entrances_count": 5, "floors_count": 9,
                "management_company": "–£–ö '–î–æ–º–∞—à–Ω–∏–π —É—é—Ç'", "house_address": "–ì—Ä–∞–±—Ü–µ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ 158"
            },
            {
                "ID": "12782", "TITLE": "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è 54", "STAGE_ID": "C2:FINAL_INVOICE",
                "apartments_count": 60, "entrances_count": 3, "floors_count": 5,
                "management_company": "–û–û–û '–£–ö –ú–ñ–î –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –æ–∫—Ä—É–≥–∞ –≥.–ö–∞–ª—É–≥–∏'", "house_address": "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è 54"
            },
            {
                "ID": "12774", "TITLE": "–ì–≤–∞—Ä–¥–µ–π—Å–∫–∞—è 4", "STAGE_ID": "C2:UC_6COC3G",
                "apartments_count": 36, "entrances_count": 2, "floors_count": 9,
                "management_company": "–û–û–û '–£–ö –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥'", "house_address": "–ì–≤–∞—Ä–¥–µ–π—Å–∫–∞—è 4"
            },
            {
                "ID": "12640", "TITLE": "–ö–æ–Ω–¥—Ä–æ–≤–æ, –ü—É—à–∫–∏–Ω–∞ 78", "STAGE_ID": "C2:LOSE",
                "apartments_count": 84, "entrances_count": 4, "floors_count": 7,
                "management_company": "–û–û–û '–ñ–∏–ª–∫–æ–º—Å–µ—Ä–≤–∏—Å'", "house_address": "–ö–æ–Ω–¥—Ä–æ–≤–æ, –ü—É—à–∫–∏–Ω–∞ 78"
            },
        ]
        
        kaluga_streets = [
            "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è", "–ù–∏–∫–∏—Ç–∏–Ω–æ–π", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è", "–ë–∏–ª–∏–±–∏–Ω–∞", "–°—É–≤–æ—Ä–æ–≤–∞", 
            "–ó–µ–ª–µ–Ω–∞—è", "–¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è", "–ö–∞—Ä–∞—á–µ–≤—Å–∫–∞—è", "–ú–∞–π—Å–∫–∞—è", "–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ",
            "–≠–Ω–≥–µ–ª—å—Å–∞", "–°—Ç.–†–∞–∑–∏–Ω–∞", "–ú–∞–ª–æ—è—Ä–æ—Å–ª–∞–≤–µ—Ü–∫–∞—è", "–ñ—É–∫–æ–≤–∞", "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è"
        ]
        
        management_companies = [
            "–û–û–û '–£–ö –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥'", "–û–û–û '–ñ–∏–ª–∫–æ–º—Å–µ—Ä–≤–∏—Å'", "–û–û–û '–ü—Ä–µ–º–∏—É–º-–£–ö'",
            "–£–ö '–î–æ–º–∞—à–Ω–∏–π —É—é—Ç'", "–û–û–û '–£–ö –ú–ñ–î –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –æ–∫—Ä—É–≥–∞ –≥.–ö–∞–ª—É–≥–∏'"
        ]
        
        extended = list(real_houses)
        for i in range(len(real_houses), limit):
            street = kaluga_streets[i % len(kaluga_streets)]
            house_num = 10 + (i % 150)
            title = f"{street} {house_num}"
            
            extended.append({
                "ID": str(300 + i),
                "TITLE": title,
                "STAGE_ID": ["C2:WON", "C2:APOLOGY", "C2:NEW"][i % 3],
                "apartments_count": 30 + (i % 120),  # 30-150 –∫–≤–∞—Ä—Ç–∏—Ä
                "entrances_count": 1 + (i % 5),      # 1-5 –ø–æ–¥—ä–µ–∑–¥–æ–≤
                "floors_count": 5 + (i % 7),         # 5-12 —ç—Ç–∞–∂–µ–π
                "management_company": management_companies[i % len(management_companies)],
                "house_address": title
            })
        
        return extended[:limit]
    
    def analyze_house_brigade(self, address: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã –ø–æ –∞–¥—Ä–µ—Å—É"""
        address_lower = address.lower()
        
        if any(street in address_lower for street in ['–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è', '–±–∞—Ä—Ä–∏–∫–∞–¥', '–ª–µ–Ω–∏–Ω–∞']):
            return "1 –±—Ä–∏–≥–∞–¥–∞ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω"
        elif any(street in address_lower for street in ['—á–∏–∂–µ–≤—Å–∫–æ–≥–æ', '–Ω–∏–∫–∏—Ç–∏–Ω–∞']):
            return "2 –±—Ä–∏–≥–∞–¥–∞ - –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω"
        elif any(street in address_lower for street in ['–∂–∏–ª–µ—Ç–æ–≤–æ', '–º–æ–ª–æ–¥–µ–∂–Ω–∞—è']):
            return "3 –±—Ä–∏–≥–∞–¥–∞ - –ñ–∏–ª–µ—Ç–æ–≤–æ"
        elif any(street in address_lower for street in ['–∂—É–∫–æ–≤–∞', '—Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è']):
            return "4 –±—Ä–∏–≥–∞–¥–∞ - –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω"
        elif any(street in address_lower for street in ['–∫–æ–Ω–¥—Ä–æ–≤–æ', '–ø—É—à–∫–∏–Ω–∞']):
            return "5 –±—Ä–∏–≥–∞–¥–∞ - –ü—Ä–∏–≥–æ—Ä–æ–¥"
        else:
            return "6 –±—Ä–∏–≥–∞–¥–∞ - –û–∫—Ä–∞–∏–Ω—ã"
    
    def get_status_info(self, stage_id: str) -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–¥–µ–ª–∫–∏"""
        if stage_id == 'C2:WON':
            return "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", "success"
        elif 'APOLOGY' in stage_id or 'LOSE' in stage_id:
            return "‚ùå –ü—Ä–æ–±–ª–µ–º—ã", "error"
        elif 'FINAL_INVOICE' in stage_id:
            return "üßæ –í—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á–µ—Ç", "info"
        else:
            return "üîÑ –í —Ä–∞–±–æ—Ç–µ", "processing"

    async def create_task(
        self, 
        title: str, 
        description: str, 
        responsible_id: int = 1,
        group_id: Optional[int] = None,
        deadline: Optional[str] = None
    ) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Bitrix24"""
        try:
            logger.info(f"üìù Creating task in Bitrix24: {title}")
            
            params = {
                'fields[TITLE]': title,
                'fields[DESCRIPTION]': description,
                'fields[RESPONSIBLE_ID]': str(responsible_id),
                'fields[CREATED_BY]': str(responsible_id),
            }
            
            if group_id:
                params['fields[GROUP_ID]'] = str(group_id)
            
            if deadline:
                params['fields[DEADLINE]'] = deadline
            
            query_string = urllib.parse.urlencode(params)
            url = f"{self.webhook_url}tasks.task.add.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.post(url, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get('result'):
                        task_id = data['result']['task']['id']
                        logger.info(f"‚úÖ Task created successfully: ID {task_id}")
                        
                        return {
                            "status": "success",
                            "task_id": task_id,
                            "title": title,
                            "description": description
                        }
                    else:
                        logger.error(f"‚ùå Task creation failed: {data}")
                        return {"status": "error", "message": "Failed to create task"}
                else:
                    logger.error(f"‚ùå Bitrix24 API error: {response.status_code}")
                    return {"status": "error", "message": f"API error: {response.status_code}"}
                    
        except Exception as e:
            logger.error(f"‚ùå Create task error: {e}")
            return {"status": "error", "message": str(e)}

    async def get_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Bitrix24"""
        try:
            url = f"{self.webhook_url}user.get.json"
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get('result'):
                        users = data['result']
                        logger.info(f"‚úÖ Retrieved {len(users)} users from Bitrix24")
                        return users
                    else:
                        logger.warning("‚ö†Ô∏è No users found in Bitrix24")
                        return []
                else:
                    logger.error(f"‚ùå Failed to get users: {response.status_code}")
                    return []
                    
        except Exception as e:
            logger.error(f"‚ùå Get users error: {e}")
            return []

    async def add_comment_to_deal(self, deal_id: str, comment: str) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–¥–µ–ª–∫–µ"""
        try:
            logger.info(f"üí¨ Adding comment to deal {deal_id}")
            
            params = {
                'id': deal_id,
                'fields[COMMENTS]': comment
            }
            
            query_string = urllib.parse.urlencode(params)
            url = f"{self.webhook_url}crm.deal.update.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.post(url, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    logger.info(f"‚úÖ Comment added to deal {deal_id}")
                    return True
                else:
                    logger.error(f"‚ùå Failed to add comment: {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Add comment error: {e}")
            return False

    def _extract_house_data(self, deal: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–º–∞ –∏–∑ Bitrix24"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            house_data = {
                'ID': deal.get('ID', ''),
                'TITLE': deal.get('TITLE', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                'STAGE_ID': deal.get('STAGE_ID', ''),
                'DATE_CREATE': deal.get('DATE_CREATE', ''),
                'OPPORTUNITY': deal.get('OPPORTUNITY', ''),
                'ASSIGNED_BY_ID': deal.get('ASSIGNED_BY_ID', ''),
                'COMPANY_ID': deal.get('COMPANY_ID', ''),
            }
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                apartments = deal.get('UF_CRM_1669704529022', 0)
                house_data['apartments_count'] = int(apartments) if apartments and str(apartments).isdigit() else 0
            except (ValueError, TypeError):
                house_data['apartments_count'] = 0
                
            try:
                entrances = deal.get('UF_CRM_1669705507390', 0)
                house_data['entrances_count'] = int(entrances) if entrances and str(entrances).isdigit() else 0
            except (ValueError, TypeError):
                house_data['entrances_count'] = 0
                
            try:
                floors = deal.get('UF_CRM_1669704631166', 0)
                house_data['floors_count'] = int(floors) if floors and str(floors).isdigit() else 0
            except (ValueError, TypeError):
                house_data['floors_count'] = 0
            
            # –ê–¥—Ä–µ—Å –¥–æ–º–∞
            house_data['house_address'] = deal.get('UF_CRM_1669561599956', house_data['TITLE'])
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤ —É–±–æ—Ä–∫–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            cleaning_type_1_raw = deal.get('UF_CRM_1741592855565', '')
            cleaning_type_2_raw = deal.get('UF_CRM_1741592945060', '')
            
            cleaning_type_1 = self._get_cleaning_type_name(cleaning_type_1_raw)
            cleaning_type_2 = self._get_cleaning_type_name(cleaning_type_2_raw)
            
            logger.debug(f"üßπ House {house_data['ID']}: Type1 {cleaning_type_1_raw} -> {cleaning_type_1[:30]}...")
            logger.debug(f"üßπ House {house_data['ID']}: Type2 {cleaning_type_2_raw} -> {cleaning_type_2[:30]}...")
            
            # –î–∞—Ç—ã —É–±–æ—Ä–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
            cleaning_dates_1 = self._parse_bitrix_dates(deal.get('UF_CRM_1741592774017', []))
            cleaning_dates_2 = self._parse_bitrix_dates(deal.get('UF_CRM_1741592892232', []))
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–±–æ—Ä–æ–∫
            house_data['september_schedule'] = {
                'cleaning_type_1': cleaning_type_1,
                'cleaning_date_1': cleaning_dates_1,
                'cleaning_type_2': cleaning_type_2,
                'cleaning_date_2': cleaning_dates_2,
                'has_schedule': bool(cleaning_dates_1 or cleaning_dates_2)
            }
            
            # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            house_data['cleaning_type_1'] = cleaning_type_1
            house_data['cleaning_type_2'] = cleaning_type_2
            house_data['cleaning_date_1'] = cleaning_dates_1
            house_data['cleaning_date_2'] = cleaning_dates_2
            
            return house_data
            
        except Exception as e:
            logger.error(f"‚ùå Error extracting house data: {e}")
            return deal

    def _get_cleaning_type_name(self, type_id: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ID —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏ –≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"""
        if not type_id:
            return "–ù–µ —É–∫–∞–∑–∞–Ω"
            
        # –†–µ–∞–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —É–±–æ—Ä–∫–∏ –∏–∑ Bitrix24 CRM (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô)
        cleaning_types = {
            '2468': '–ü–æ–¥–º–µ—Ç–∞–Ω–∏–µ –ª–µ—Å—Ç–Ω–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –∏ –º–∞—Ä—à–µ–π –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π, –≤–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ 1 —ç—Ç–∞–∂–∞ –∏ –ª–∏—Ñ—Ç–∞ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏); –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –ú–û–ü',
            '2469': '–í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ –ª–µ—Å—Ç–Ω–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π –∏ –ª–∏—Ñ—Ç–∞ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏); –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –ú–û–ü',
            '2470': '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ –ú–û–ü', 
            '2472': '–°–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞',
            '2466': '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —É–±–æ—Ä–∫–∞',
            '2474': '–ú—ã—Ç—å–µ –æ–∫–æ–Ω',
            '2471': '–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞',
            '2475': '–£–±–æ—Ä–∫–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏',
            '2473': '–î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è'
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "–¢–∏–ø 2468"
        import re
        match = re.search(r'\d+', str(type_id))
        if match:
            type_num = match.group()
            description = cleaning_types.get(type_num, f"–¢–∏–ø —É–±–æ—Ä–∫–∏ {type_num}")
            logger.info(f"üßπ Cleaning type {type_num} -> {description[:50]}...")
            return description
        
        return str(type_id)

    def _parse_bitrix_dates(self, dates_data) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç –∏–∑ Bitrix24"""
        if not dates_data:
            return []
            
        try:
            if isinstance(dates_data, list):
                return [str(date) for date in dates_data if date]
            elif isinstance(dates_data, str):
                return [dates_data]
            else:
                return []
        except Exception as e:
            logger.error(f"‚ùå Error parsing dates: {e}")
            return []

    async def _enrich_with_management_companies(self, deals: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –†–ï–ê–õ–¨–ù–´–ú–ò —É–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –∏–∑ Bitrix24"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –∫–æ–º–ø–∞–Ω–∏–π
            company_ids = set()
            for deal in deals:
                company_id = deal.get('COMPANY_ID')
                if company_id and str(company_id).isdigit() and str(company_id) != '0':
                    company_ids.add(str(company_id))
            
            logger.info(f"üè¢ Found {len(company_ids)} unique company IDs: {list(company_ids)[:10]}...")
            
            if not company_ids:
                logger.warning("üìã No valid company IDs found in deals - using fallback")
                for deal in deals:
                    deal['management_company'] = "–£–ö –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ CRM"
                return deals
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ Bitrix24 –ê–ì–†–ï–°–°–ò–í–ù–û —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            companies_data = {}
            success_count = 0
            
            for company_id in list(company_ids)[:100]:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 100
                for attempt in range(2):  # 2 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
                    try:
                        params = {
                            'id': company_id,
                            'select[0]': 'TITLE',
                            'select[1]': 'COMPANY_TYPE'
                        }
                        query_string = urllib.parse.urlencode(params)
                        url = f"{self.webhook_url}crm.company.get.json?{query_string}"
                        
                        async with httpx.AsyncClient() as client:
                            response = await client.get(url, timeout=20)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
                            if response.status_code == 200:
                                data = response.json()
                                result = data.get('result')
                                if result and result.get('TITLE'):
                                    company_title = result['TITLE'].strip()
                                    if company_title and len(company_title) > 1:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                                        companies_data[company_id] = company_title
                                        success_count += 1
                                        logger.info(f"‚úÖ Company {company_id}: {company_title}")
                                        break  # –£—Å–ø–µ—Ö - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–ø—ã—Ç–æ–∫
                                    else:
                                        logger.warning(f"‚ö†Ô∏è Company {company_id}: empty TITLE")
                                else:
                                    logger.warning(f"‚ö†Ô∏è Company {company_id}: no result data")
                            else:
                                logger.error(f"‚ùå Company {company_id}: HTTP {response.status_code}")
                                
                        await asyncio.sleep(0.2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        
                    except Exception as e:
                        logger.error(f"‚ùå Error loading company {company_id} (attempt {attempt+1}): {e}")
                        if attempt == 0:  # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞ - –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                            await asyncio.sleep(0.5)
                        continue
            
            logger.info(f"üè¢ Successfully loaded {success_count}/{len(company_ids)} companies from Bitrix24")
            
            # –û–±–æ–≥–∞—â–∞–µ–º —Å–¥–µ–ª–∫–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏–π
            enriched_count = 0
            fallback_count = 0
            
            for deal in deals:
                company_id = str(deal.get('COMPANY_ID', ''))
                if company_id and company_id in companies_data:
                    deal['management_company'] = companies_data[company_id]
                    enriched_count += 1
                else:
                    # –ï—Å–ª–∏ –£–ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ —á–µ—Ç–∫–æ
                    if company_id and company_id != '0':
                        deal['management_company'] = f"–£–ö ID:{company_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    else:
                        deal['management_company'] = "–£–ö –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ CRM"
                    fallback_count += 1
            
            logger.info(f"‚úÖ Final result: {enriched_count} real –£–ö, {fallback_count} fallback –£–ö")
            logger.info(f"üè¢ Real –£–ö samples: {list(companies_data.values())[:3]}...")
            
            return deals
            
        except Exception as e:
            logger.error(f"‚ùå CRITICAL ERROR enriching companies: {e}")
            # –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ - —É–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            for deal in deals:
                deal['management_company'] = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –£–ö: {str(e)[:50]}"
            return deals

    def _get_fallback_management_company(self) -> str:
        """Fallback —É–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è"""
        import random
        companies = [
            '–û–û–û "–£–ö –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥"',
            '–û–û–û "–ñ–∏–ª–∫–æ–º—Å–µ—Ä–≤–∏—Å"', 
            '–û–û–û "–ü—Ä–µ–º–∏—É–º-–£–ö"',
            '–£–ö "–î–æ–º–∞—à–Ω–∏–π —É—é—Ç"',
            '–û–û–û "–£–ö –ú–ñ–î –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –æ–∫—Ä—É–≥–∞ –≥.–ö–∞–ª—É–≥–∏"'
        ]
        return random.choice(companies)