"""
–û—Å–Ω–æ–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ VasDom AudioBot —Å –º–æ–¥—É–ª–µ–º —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ AI
"""
from fastapi import FastAPI, APIRouter, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import logging
import os

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
from app.config.database import database, DATABASE_AVAILABLE
from app.config.settings import get_settings
from app.routers import voice

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
from motor.motor_asyncio import AsyncIOMotorClient
from pydantic import BaseModel, Field
from typing import List
import uuid
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
settings = get_settings()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# MongoDB –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
if hasattr(settings, 'MONGO_URL') and settings.MONGO_URL:
    mongo_client = AsyncIOMotorClient(settings.MONGO_URL)
    mongo_db = mongo_client[settings.DB_NAME]
else:
    mongo_client = None
    mongo_db = None
    logger.warning("MongoDB –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ä–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ —Å PostgreSQL")

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ VasDom AudioBot —Å –º–æ–¥—É–ª–µ–º —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –¥–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
    try:
        if database is not None:
            await database.connect()
            logger.info("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è")
        else:
            logger.warning("‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {str(e)}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    try:
        from app.services.ai_service import ai_service
        from app.services.embedding_service import embedding_service
        logger.info("‚úÖ AI –∏ Embedding —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {str(e)}")
    
    yield
    
    # Shutdown
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã VasDom AudioBot")
    try:
        if database is not None:
            await database.disconnect()
        if mongo_client:
            mongo_client.close()
        logger.info("‚úÖ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {str(e)}")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="VasDom AudioBot API",
    description="AI-—Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π —Å –º–æ–¥—É–ª–µ–º —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è",
    version="2.0.0",
    lifespan=lifespan
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=settings.CORS_ORIGINS.split(',') if settings.CORS_ORIGINS != "*" else ["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# –†–æ—É—Ç–µ—Ä –¥–ª—è API
api_router = APIRouter(prefix="/api")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
api_router.include_router(voice.router)

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
class StatusCheck(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    client_name: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class StatusCheckCreate(BaseModel):
    client_name: str

@api_router.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "VasDom AudioBot API v2.0 —Å –º–æ–¥—É–ª–µ–º —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è",
        "features": [
            "AI –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫",
            "–°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è",
            "–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤",
            "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞"
        ],
        "endpoints": {
            "voice_chat": "/api/voice/process",
            "feedback": "/api/voice/feedback", 
            "learning_status": "/api/voice/self-learning/status",
            "health": "/api/voice/health"
        }
    }

@api_router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components = {
            "api": True,
            "postgres": DATABASE_AVAILABLE and database is not None and database.is_connected,
            "mongo": mongo_client is not None,
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
        try:
            from app.services.ai_service import ai_service
            from app.services.embedding_service import embedding_service
            components.update({
                "ai_service": ai_service.emergent_client is not None,
                "embedding_service": embedding_service.model is not None
            })
        except:
            components.update({
                "ai_service": False,
                "embedding_service": False
            })
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        all_critical_healthy = components["api"] and components["postgres"]
        status = "healthy" if all_critical_healthy else "degraded"
        
        return {
            "status": status,
            "components": components,
            "version": "2.0.0",
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {str(e)}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - status endpoints
if mongo_db is not None:
    @api_router.post("/status", response_model=StatusCheck)
    async def create_status_check(input: StatusCheckCreate):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å MongoDB)"""
        try:
            status_dict = input.dict()
            status_obj = StatusCheck(**status_dict)
            await mongo_db.status_checks.insert_one(status_obj.dict())
            return status_obj
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è status check: {str(e)}")
            raise HTTPException(status_code=500, detail=str(e))

    @api_router.get("/status", response_model=List[StatusCheck])
    async def get_status_checks():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å—Ç–∞—Ç—É—Å–∞ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å MongoDB)"""
        try:
            status_checks = await mongo_db.status_checks.find().to_list(1000)
            return [StatusCheck(**status_check) for status_check in status_checks]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è status checks: {str(e)}")
            raise HTTPException(status_code=500, detail=str(e))

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–µ—Ä–∞
app.include_router(api_router)

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
@app.get("/")
async def root_redirect():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ"""
    return {
        "name": "VasDom AudioBot",
        "version": "2.0.0", 
        "description": "AI-—Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π —Å –º–æ–¥—É–ª–µ–º —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è",
        "documentation": "/docs",
        "api_prefix": "/api",
        "features": {
            "self_learning": True,
            "voice_processing": True,
            "embedding_search": True,
            "user_feedback": True,
            "automatic_retraining": True
        }
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8001,
        reload=True,
        log_level="info"
    )