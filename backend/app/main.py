"""
VasDom AudioBot —Å –º–æ–¥—É–ª–µ–º —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è - Cloud Native –¥–ª—è Render
–£–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç MongoDB, —Ç–æ–ª—å–∫–æ PostgreSQL
"""
from fastapi import FastAPI, APIRouter, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import logging
import os

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
from app.config.database import database, DATABASE_AVAILABLE
from app.config.settings import get_settings
from app.routers import voice

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ (–±–µ–∑ MongoDB)
from pydantic import BaseModel, Field
from typing import List
import uuid
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
settings = get_settings()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ PostgreSQL"""
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ VasDom AudioBot —Å —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ–º –Ω–∞ Render")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Render PostgreSQL
    try:
        if database is not None:
            await database.connect()
            logger.info("‚úÖ Render PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è")
        else:
            logger.warning("‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∑–∞–ø—É—Å–∫ –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {str(e)}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
    try:
        from app.services.ai_service import ai_service
        from app.services.embedding_service import embedding_service
        logger.info("‚úÖ AI –∏ Embedding —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {str(e)}")
    
    yield
    
    # Shutdown
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã VasDom AudioBot")
    try:
        if database is not None:
            await database.disconnect()
        logger.info("‚úÖ PostgreSQL –æ—Ç–∫–ª—é—á–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {str(e)}")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="VasDom AudioBot API",
    description="AI-—Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π —Å —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ–º –Ω–∞ Render",
    version="2.0.0",
    lifespan=lifespan
)

# CORS –¥–ª—è Render
app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=settings.CORS_ORIGINS.split(',') if settings.CORS_ORIGINS != "*" else ["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# –†–æ—É—Ç–µ—Ä –¥–ª—è API
api_router = APIRouter(prefix="/api")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
api_router.include_router(voice.router)

# –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@api_router.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–∏"""
    return {
        "message": "VasDom AudioBot API v2.0 —Å –º–æ–¥—É–ª–µ–º —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –Ω–∞ Render",
        "platform": "Render Cloud",
        "database": "PostgreSQL" if DATABASE_AVAILABLE else "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        "features": [
            "AI –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ —Å Emergent LLM",
            "–°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è",
            "–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏",
            "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (1-5 –∑–≤–µ–∑–¥)",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞",
            "Fine-tuning –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"
        ],
        "endpoints": {
            "voice_chat": "/api/voice/process",
            "feedback": "/api/voice/feedback", 
            "learning_status": "/api/voice/self-learning/status",
            "health": "/api/voice/health"
        }
    }

@api_router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞ Render"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components = {
            "api": True,
            "postgres": DATABASE_AVAILABLE and database is not None and database.is_connected,
            "render_platform": True,  # –ú—ã –Ω–∞ Render
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
        try:
            from app.services.ai_service import ai_service
            from app.services.embedding_service import embedding_service
            components.update({
                "ai_service": ai_service.emergent_client is not None,
                "embedding_service": embedding_service.model is not None,
                "emergent_llm": bool(settings.EMERGENT_LLM_KEY)
            })
        except:
            components.update({
                "ai_service": False,
                "embedding_service": False,
                "emergent_llm": False
            })
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        critical_components = ["api", "postgres", "emergent_llm"]
        critical_healthy = all(components.get(comp, False) for comp in critical_components)
        status = "healthy" if critical_healthy else "degraded"
        
        return {
            "status": status,
            "platform": "Render",
            "components": components,
            "version": "2.0.0",
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {str(e)}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "platform": "Render",
            "timestamp": datetime.utcnow().isoformat()
        }

# –ü—Ä–æ—Å—Ç—ã–µ status endpoints –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–±–µ–∑ MongoDB)
class StatusCheck(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    client_name: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    platform: str = "Render"

class StatusCheckCreate(BaseModel):
    client_name: str

# In-memory storage –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–≤ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±—ã PostgreSQL)
status_checks = []

@api_router.post("/status", response_model=StatusCheck)
async def create_status_check(input: StatusCheckCreate):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (in-memory –¥–ª—è –¥–µ–º–æ)"""
    try:
        status_obj = StatusCheck(**input.dict())
        status_checks.append(status_obj)
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–æ—Å—å –±—ã –≤ PostgreSQL
        return status_obj
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è status check: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@api_router.get("/status", response_model=List[StatusCheck])
async def get_status_checks():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)"""
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        return status_checks[-10:]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è status checks: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–µ—Ä–∞
app.include_router(api_router)

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
@app.get("/")
async def root_redirect():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ –Ω–∞ Render"""
    return {
        "name": "VasDom AudioBot",
        "version": "2.0.0", 
        "description": "AI-—Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π —Å –º–æ–¥—É–ª–µ–º —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è",
        "platform": "Render Cloud",
        "documentation": "/docs",
        "api_prefix": "/api",
        "github": "https://github.com/maslovmaksim92/AudioBot",
        "features": {
            "self_learning": True,
            "voice_processing": True,
            "embedding_search": True,
            "user_feedback": True,
            "automatic_retraining": True,
            "cloud_native": True
        },
        "infrastructure": {
            "hosting": "Render",
            "database": "Render PostgreSQL",
            "ai_provider": "Emergent LLM"
        }
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=int(os.getenv("PORT", 8001)),
        reload=False,  # –í production –æ—Ç–∫–ª—é—á–∞–µ–º reload
        log_level="info"
    )