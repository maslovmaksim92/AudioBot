"""
Webhook –æ—Ç Bitrix24 –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤
"""
from fastapi import APIRouter, BackgroundTasks, Request
from typing import Dict, Any
import logging

from backend.app.services.bitrix_calls_service import BitrixCallsService

router = APIRouter(prefix="/bitrix-webhook", tags=["Bitrix24 Webhook"])
logger = logging.getLogger(__name__)

bitrix_calls_service = BitrixCallsService()

@router.post("/call-finished")
async def bitrix_call_finished_webhook(
    request: Request,
    background_tasks: BackgroundTasks
):
    """
    Webhook –æ—Ç Bitrix24 –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç —Å–∞–º–º–∞—Ä–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Bitrix24
        data = await request.json()
        
        logger.info(f"üìû Received call webhook from Bitrix24: {data}")
        
        # Bitrix24 –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        # {
        #   "event": "ONVOXIMPLANTCALLEND",
        #   "data": {
        #     "CALL_ID": "...",
        #     "CALL_TYPE": "1" (1=–≤—Ö–æ–¥—è—â–∏–π, 2=–∏—Å—Ö–æ–¥—è—â–∏–π),
        #     "PHONE_NUMBER": "+7...",
        #     "CALL_DURATION": "123",
        #     "CALL_START_DATE": "...",
        #     "RECORD_FILE_ID": "123" (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å)
        #   }
        # }
        
        event = data.get("event")
        call_data = data.get("data", {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
        if event != "ONVOXIMPLANTCALLEND":
            logger.info(f"‚è≠Ô∏è Ignoring event: {event}")
            return {"status": "ignored", "reason": "not_call_end_event"}
        
        call_id = call_data.get("CALL_ID")
        record_file_id = call_data.get("RECORD_FILE_ID")
        call_duration = int(call_data.get("CALL_DURATION", 0))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥
        if not record_file_id:
            logger.info(f"‚è≠Ô∏è No recording for call {call_id}")
            return {"status": "skipped", "reason": "no_recording"}
        
        if call_duration < 10:
            logger.info(f"‚è≠Ô∏è Call too short: {call_duration} seconds")
            return {"status": "skipped", "reason": "call_too_short"}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        background_tasks.add_task(
            process_bitrix_call,
            call_id,
            call_data
        )
        
        logger.info(f"‚úÖ Call {call_id} queued for processing")
        
        return {
            "status": "accepted",
            "call_id": call_id,
            "message": "Call queued for processing"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error processing Bitrix webhook: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return {"status": "error", "message": str(e)}

async def process_bitrix_call(call_id: str, call_data: Dict[str, Any]):
    """
    –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞ –∏–∑ Bitrix24
    """
    try:
        logger.info(f"üéôÔ∏è Processing Bitrix call: {call_id}")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–≤–æ–Ω–∫–∞
        call_details = await bitrix_calls_service.get_call_details(call_id)
        
        if not call_details:
            logger.error(f"‚ùå Failed to get call details for {call_id}")
            return
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å
        recording_url = await bitrix_calls_service.get_call_recording(call_id)
        
        if not recording_url:
            logger.error(f"‚ùå Failed to get recording URL for {call_id}")
            return
        
        logger.info(f"‚úÖ Got recording URL for {call_id}")
        
        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        from backend.app.routers.call_summary import process_call_recording
        
        webhook_data = {
            "call_id": call_id,
            "caller": call_data.get("PHONE_NUMBER", ""),
            "called": "",  # Bitrix –Ω–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç
            "direction": "in" if call_data.get("CALL_TYPE") == "1" else "out",
            "duration": int(call_data.get("CALL_DURATION", 0)),
            "status": "answered",
            "record_url": recording_url,
            "timestamp": call_data.get("CALL_START_DATE")
        }
        
        # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º (—Å–æ–∑–¥–∞—ë–º —Å–∞–º–º–∞—Ä–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î)
        await process_call_recording(webhook_data, None)
        
        logger.info(f"‚úÖ Successfully processed call {call_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error processing Bitrix call {call_id}: {e}")
        import traceback
        logger.error(traceback.format_exc())

@router.get("/test")
async def test_webhook():
    """
    –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã webhook
    """
    return {
        "status": "ok",
        "message": "Bitrix webhook endpoint is working",
        "webhook_url": "/api/bitrix-webhook/call-finished"
    }
