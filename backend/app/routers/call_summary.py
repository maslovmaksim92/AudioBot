"""
API —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Å–∞–º–º–∞—Ä–∏ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ –ù–æ–≤–æ—Ñ–æ–Ω
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
"""
from fastapi import APIRouter, Depends, HTTPException, BackgroundTasks
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, insert
from pydantic import BaseModel
from typing import Optional, List
from datetime import datetime
import logging
import httpx
import os

from backend.app.config.database import get_db

router = APIRouter(prefix="/call-summary", tags=["Call Summary"])
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_TARGET_CHAT_ID = os.getenv("TELEGRAM_TARGET_CHAT_ID", "-1002384210149")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BITRIX24_WEBHOOK_URL = os.getenv("BITRIX24_WEBHOOK_URL")

class NovofonWebhook(BaseModel):
    """Webhook –æ—Ç –ù–æ–≤–æ—Ñ–æ–Ω –æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–º –∑–≤–æ–Ω–∫–µ"""
    call_id: str
    caller: str  # –ù–æ–º–µ—Ä –∑–≤–æ–Ω—è—â–µ–≥–æ
    called: str  # –ù–æ–º–µ—Ä –∫—É–¥–∞ –∑–≤–æ–Ω–∏–ª–∏
    direction: str  # "in" –∏–ª–∏ "out"
    duration: int  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    status: str  # "answered", "busy", "noanswer"
    record_url: Optional[str] = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
    timestamp: Optional[str] = None

class CallSummaryResponse(BaseModel):
    call_id: str
    transcription: str
    summary: str
    key_points: List[str]
    action_items: List[str]
    sentiment: str
    created_at: datetime

@router.post("/webhook/novofon")
async def novofon_webhook(
    webhook: NovofonWebhook,
    background_tasks: BackgroundTasks,
    db: AsyncSession = Depends(get_db)
):
    """
    Webhook –æ—Ç –ù–æ–≤–æ—Ñ–æ–Ω –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç —Å–∞–º–º–∞—Ä–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram + Bitrix24
    """
    try:
        logger.info(f"üìû Received call webhook: {webhook.call_id}, status: {webhook.status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–≤–æ–Ω–æ–∫ –±—ã–ª –æ—Ç–≤–µ—á–µ–Ω –∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å
        if webhook.status != "answered" or not webhook.record_url:
            logger.info(f"‚è≠Ô∏è Skipping call {webhook.call_id}: status={webhook.status}, has_record={bool(webhook.record_url)}")
            return {"status": "skipped", "reason": "no_recording_or_not_answered"}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        background_tasks.add_task(
            process_call_recording,
            webhook.dict(),
            db
        )
        
        return {"status": "accepted", "call_id": webhook.call_id}
        
    except Exception as e:
        logger.error(f"‚ùå Error processing webhook: {e}")
        raise HTTPException(status_code=500, detail=str(e))

async def process_call_recording(webhook_data: dict, db: AsyncSession):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–∞
    1. –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ
    2. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Whisper
    3. –°–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ —á–µ—Ä–µ–∑ GPT
    4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
    5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
    6. –î–æ–±–∞–≤–∏—Ç—å –≤ Bitrix24
    """
    call_id = webhook_data["call_id"]
    
    try:
        logger.info(f"üéôÔ∏è Processing call recording: {call_id}")
        
        # 1. –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ –∑–∞–ø–∏—Å—å
        audio_data = await download_call_recording(webhook_data["record_url"])
        if not audio_data:
            logger.error(f"‚ùå Failed to download recording for {call_id}")
            return
        
        # 2. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ OpenAI Whisper
        transcription = await transcribe_audio(audio_data)
        if not transcription:
            logger.error(f"‚ùå Failed to transcribe call {call_id}")
            return
        
        logger.info(f"‚úÖ Transcription completed for {call_id}: {len(transcription)} chars")
        
        # 3. –°–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ —á–µ—Ä–µ–∑ GPT-5
        summary_data = await create_call_summary(transcription, webhook_data)
        
        # 4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        call_summary_id = await save_to_database(
            db,
            call_id,
            webhook_data,
            transcription,
            summary_data
        )
        
        # 5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
        await send_to_telegram(webhook_data, summary_data)
        
        # 6. –î–æ–±–∞–≤–∏—Ç—å –≤ Bitrix24
        await add_to_bitrix24(webhook_data, summary_data)
        
        logger.info(f"‚úÖ Call {call_id} processed successfully!")
        
    except Exception as e:
        logger.error(f"‚ùå Error processing call {call_id}: {e}")
        import traceback
        logger.error(traceback.format_exc())

async def download_call_recording(record_url: str) -> Optional[bytes]:
    """–°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞"""
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.get(record_url)
            
            if response.status_code == 200:
                return response.content
            else:
                logger.error(f"Failed to download recording: {response.status_code}")
                return None
                
    except Exception as e:
        logger.error(f"Error downloading recording: {e}")
        return None

async def transcribe_audio(audio_data: bytes) -> Optional[str]:
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ OpenAI Whisper"""
    try:
        from openai import AsyncOpenAI
        
        client = AsyncOpenAI(api_key=OPENAI_API_KEY)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
        temp_file = "/tmp/call_recording.mp3"
        with open(temp_file, "wb") as f:
            f.write(audio_data)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
        with open(temp_file, "rb") as audio_file:
            transcription = await client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                language="ru"
            )
        
        return transcription.text
        
    except Exception as e:
        logger.error(f"Error transcribing audio: {e}")
        return None

async def create_call_summary(transcription: str, webhook_data: dict) -> dict:
    """–°–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —á–µ—Ä–µ–∑ GPT-5"""
    try:
        from openai import AsyncOpenAI
        
        client = AsyncOpenAI(api_key=OPENAI_API_KEY)
        
        direction = "–≤—Ö–æ–¥—è—â–∏–π" if webhook_data["direction"] == "in" else "–∏—Å—Ö–æ–¥—è—â–∏–π"
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π {direction} —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏.

–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:
{transcription}

–°–æ–∑–¥–∞–π JSON —Å –ø–æ–ª—è–º–∏:
{{
  "summary": "–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "key_points": ["–ö–ª—é—á–µ–≤–æ–π –ø—É–Ω–∫—Ç 1", "–ö–ª—é—á–µ–≤–æ–π –ø—É–Ω–∫—Ç 2", ...],
  "action_items": ["–ó–∞–¥–∞—á–∞ 1", "–ó–∞–¥–∞—á–∞ 2", ...],
  "sentiment": "positive/neutral/negative",
  "client_request": "–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞",
  "next_steps": "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"
}}

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""

        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —Å–æ–∑–¥–∞—ë—à—å —Å–∞–º–º–∞—Ä–∏ –∑–≤–æ–Ω–∫–æ–≤."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            response_format={"type": "json_object"}
        )
        
        import json
        summary_data = json.loads(response.choices[0].message.content)
        
        return summary_data
        
    except Exception as e:
        logger.error(f"Error creating summary: {e}")
        return {
            "summary": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏",
            "key_points": [],
            "action_items": [],
            "sentiment": "neutral",
            "client_request": "",
            "next_steps": ""
        }

async def save_to_database(
    db: AsyncSession,
    call_id: str,
    webhook_data: dict,
    transcription: str,
    summary_data: dict
) -> str:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ –≤ –ë–î"""
    try:
        from uuid import uuid4
        
        call_summary_id = str(uuid4())
        
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await db.execute("""
            CREATE TABLE IF NOT EXISTS call_summaries (
                id VARCHAR PRIMARY KEY,
                call_id VARCHAR UNIQUE,
                caller VARCHAR,
                called VARCHAR,
                direction VARCHAR,
                duration INTEGER,
                transcription TEXT,
                summary TEXT,
                key_points JSONB,
                action_items JSONB,
                sentiment VARCHAR,
                client_request TEXT,
                next_steps TEXT,
                created_at TIMESTAMP DEFAULT NOW()
            )
        """)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await db.execute(
            """
            INSERT INTO call_summaries (
                id, call_id, caller, called, direction, duration,
                transcription, summary, key_points, action_items,
                sentiment, client_request, next_steps
            ) VALUES (
                :id, :call_id, :caller, :called, :direction, :duration,
                :transcription, :summary, :key_points, :action_items,
                :sentiment, :client_request, :next_steps
            )
            """,
            {
                "id": call_summary_id,
                "call_id": call_id,
                "caller": webhook_data["caller"],
                "called": webhook_data["called"],
                "direction": webhook_data["direction"],
                "duration": webhook_data["duration"],
                "transcription": transcription,
                "summary": summary_data.get("summary", ""),
                "key_points": summary_data.get("key_points", []),
                "action_items": summary_data.get("action_items", []),
                "sentiment": summary_data.get("sentiment", "neutral"),
                "client_request": summary_data.get("client_request", ""),
                "next_steps": summary_data.get("next_steps", "")
            }
        )
        
        await db.commit()
        logger.info(f"‚úÖ Saved to database: {call_summary_id}")
        
        return call_summary_id
        
    except Exception as e:
        logger.error(f"Error saving to database: {e}")
        return ""

async def send_to_telegram(webhook_data: dict, summary_data: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ –≤ Telegram"""
    try:
        direction_emoji = "üìû" if webhook_data["direction"] == "in" else "üì±"
        direction_text = "–í—Ö–æ–¥—è—â–∏–π" if webhook_data["direction"] == "in" else "–ò—Å—Ö–æ–¥—è—â–∏–π"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration = webhook_data["duration"]
        minutes = duration // 60
        seconds = duration % 60
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
{direction_emoji} <b>{direction_text} –∑–≤–æ–Ω–æ–∫</b>

üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –û—Ç: {webhook_data['caller']}
‚Ä¢ –ö–æ–º—É: {webhook_data['called']}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes}–º {seconds}—Å

üìù <b>–°–∞–º–º–∞—Ä–∏:</b>
{summary_data.get('summary', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏')}

üéØ <b>–ö–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã:</b>
{chr(10).join([f"‚Ä¢ {point}" for point in summary_data.get('key_points', [])])}

‚úÖ <b>–ó–∞–¥–∞—á–∏:</b>
{chr(10).join([f"‚Ä¢ {task}" for task in summary_data.get('action_items', [])])}

üí¨ <b>–ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞:</b>
{summary_data.get('client_request', '–ù–µ —É–∫–∞–∑–∞–Ω')}

‚û°Ô∏è <b>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>
{summary_data.get('next_steps', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}

üìä <b>–¢–æ–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:</b> {summary_data.get('sentiment', 'neutral')}
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                json={
                    "chat_id": TELEGRAM_TARGET_CHAT_ID,
                    "text": message,
                    "parse_mode": "HTML"
                }
            )
            
            if response.status_code == 200:
                logger.info(f"‚úÖ Sent to Telegram chat {TELEGRAM_TARGET_CHAT_ID}")
            else:
                logger.error(f"Failed to send to Telegram: {response.text}")
                
    except Exception as e:
        logger.error(f"Error sending to Telegram: {e}")

async def add_to_bitrix24(webhook_data: dict, summary_data: dict):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ –≤ Bitrix24 (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–¥–µ–ª–∫–µ/–∫–æ–Ω—Ç–∞–∫—Ç—É)"""
    try:
        if not BITRIX24_WEBHOOK_URL:
            logger.warning("Bitrix24 webhook URL not configured")
            return
        
        # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        phone = webhook_data["caller"] if webhook_data["direction"] == "in" else webhook_data["called"]
        
        async with httpx.AsyncClient() as client:
            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            search_response = await client.post(
                f"{BITRIX24_WEBHOOK_URL}crm.contact.list",
                json={
                    "filter": {"PHONE": phone}
                }
            )
            
            if search_response.status_code == 200:
                contacts = search_response.json().get("result", [])
                
                if contacts:
                    contact_id = contacts[0]["ID"]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    comment_text = f"""–°–∞–º–º–∞—Ä–∏ –∑–≤–æ–Ω–∫–∞:
{summary_data.get('summary', '')}

–ö–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã:
{chr(10).join([f"‚Ä¢ {point}" for point in summary_data.get('key_points', [])])}

–ó–∞–¥–∞—á–∏:
{chr(10).join([f"‚Ä¢ {task}" for task in summary_data.get('action_items', [])])}
"""
                    
                    await client.post(
                        f"{BITRIX24_WEBHOOK_URL}crm.timeline.comment.add",
                        json={
                            "fields": {
                                "ENTITY_ID": contact_id,
                                "ENTITY_TYPE": "contact",
                                "COMMENT": comment_text
                            }
                        }
                    )
                    
                    logger.info(f"‚úÖ Added to Bitrix24 contact {contact_id}")
                else:
                    logger.warning(f"No Bitrix24 contact found for phone {phone}")
                    
    except Exception as e:
        logger.error(f"Error adding to Bitrix24: {e}")

@router.get("/history")
async def get_call_history(
    limit: int = 50,
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–∞–º–º–∞—Ä–∏ –∑–≤–æ–Ω–∫–æ–≤"""
    try:
        from sqlalchemy import text
        
        result = await db.execute(
            text("""
                SELECT * FROM call_summaries
                ORDER BY created_at DESC
                LIMIT :limit
            """),
            {"limit": limit}
        )
        
        calls = result.fetchall()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        calls_list = []
        for row in calls:
            call_dict = dict(row._mapping)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
            if 'created_at' in call_dict and call_dict['created_at']:
                call_dict['created_at'] = call_dict['created_at'].isoformat()
            if 'updated_at' in call_dict and call_dict['updated_at']:
                call_dict['updated_at'] = call_dict['updated_at'].isoformat()
            calls_list.append(call_dict)
        
        return {
            "total": len(calls_list),
            "calls": calls_list
        }
        
    except Exception as e:
        logger.error(f"Error fetching call history: {e}")
        import traceback
        logger.error(traceback.format_exc())
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        return {
            "total": 0,
            "calls": []
        }

@router.post("/manual/{call_id}")
async def create_manual_summary(
    call_id: str,
    background_tasks: BackgroundTasks,
    db: AsyncSession = Depends(get_db)
):
    """–†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∑–≤–æ–Ω–∫–∞"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏
    return {"status": "not_implemented"}
