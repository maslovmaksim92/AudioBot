import logging
from datetime import datetime
from typing import List, Optional
from fastapi import APIRouter, HTTPException
from ..models.schemas import House, CreateHouseRequest
from ..services.bitrix_service import BitrixService
from ..config.settings import BITRIX24_WEBHOOK_URL

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api", tags=["cleaning"])

@router.get("/cleaning/houses-fixed")
async def get_cleaning_houses_with_forced_enrichment(
    limit: Optional[int] = None,
    brigade: Optional[str] = None,
    cleaning_week: Optional[int] = None,
    month: Optional[str] = None,
    management_company: Optional[str] = None,
    search: Optional[str] = None
):
    """–î–æ–º–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã–º–∏ –£–ö –∏ –±—Ä–∏–≥–∞–¥ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
    try:
        logger.info(f"üè† Loading houses WITH FORCED ENRICHMENT...")
        
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        deals = await bitrix.get_deals(limit=limit or 50)
        
        houses = []
        for deal in deals:
            address = deal.get('TITLE', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            deal_id = deal.get('ID', '')
            stage_id = deal.get('STAGE_ID', '')
            
            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–û–ì–ê–©–ï–ù–ò–ï –£–ö
            company_id = deal.get('COMPANY_ID')
            management_company_name = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
            
            if company_id and str(company_id) != '0':
                try:
                    # –ü—Ä—è–º–æ–π API –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏
                    import urllib.parse
                    import httpx
                    
                    params = {'id': str(company_id)}
                    query_string = urllib.parse.urlencode(params)
                    url = f"{BITRIX24_WEBHOOK_URL}crm.company.get.json?{query_string}"
                    
                    async with httpx.AsyncClient() as client:
                        response = await client.get(url, timeout=10)
                        if response.status_code == 200:
                            data = response.json()
                            result = data.get('result')
                            if result and result.get('TITLE'):
                                management_company_name = result.get('TITLE')
                                logger.debug(f"‚úÖ Company API: {management_company_name}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Company API failed: {e}")
            
            # Fallback –ø–æ –∞–¥—Ä–µ—Å—É –µ—Å–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
            if management_company_name == "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞":
                management_company_name = _get_management_company(address)
                logger.debug(f"üè¢ Fallback –£–ö –¥–ª—è {address}: {management_company_name}")
            
            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–û–ì–ê–©–ï–ù–ò–ï –ë–†–ò–ì–ê–î
            assigned_by_id = deal.get('ASSIGNED_BY_ID')
            brigade_info = "–ë—Ä–∏–≥–∞–¥–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
            assigned_name = ""
            
            if assigned_by_id and str(assigned_by_id) != '0':
                try:
                    # –ü—Ä—è–º–æ–π API –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    params = {'ID': str(assigned_by_id)}
                    query_string = urllib.parse.urlencode(params)
                    url = f"{BITRIX24_WEBHOOK_URL}user.get.json?{query_string}"
                    
                    async with httpx.AsyncClient() as client:
                        response = await client.get(url, timeout=10)
                        if response.status_code == 200:
                            data = response.json()
                            result = data.get('result')
                            if result and isinstance(result, list) and len(result) > 0:
                                user = result[0]
                                assigned_name = f"{user.get('NAME', '')} {user.get('LAST_NAME', '')}".strip()
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–∏–≥–∞–¥—É –ø–æ –∏–º–µ–Ω–∏
                                if assigned_name:
                                    brigade_info = _get_brigade_by_responsible_name(assigned_name.split()[0])
                                logger.debug(f"‚úÖ User API: {assigned_name} -> {brigade_info}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è User API failed: {e}")
            
            # Fallback –ø–æ –∞–¥—Ä–µ—Å—É –µ—Å–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
            if brigade_info == "–ë—Ä–∏–≥–∞–¥–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞":
                brigade_info = bitrix.analyze_house_brigade(address)
                logger.debug(f"üë• Fallback –±—Ä–∏–≥–∞–¥–∞ –¥–ª—è {address}: {brigade_info}")
            
            status_text, status_color = bitrix.get_status_info(stage_id)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–º–∞
            house_address = deal.get('UF_CRM_1669561599956', '') or address
            apartments_count = _parse_int(deal.get('UF_CRM_1669704529022'))
            entrances_count = _parse_int(deal.get('UF_CRM_1669705507390'))
            floors_count = _parse_int(deal.get('UF_CRM_1669704631166'))
            tariff = deal.get('UF_CRM_1669706387893', '')
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
            cleaning_weeks = [1, 2, 3] if apartments_count and apartments_count > 50 else [1, 2]
            cleaning_days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–°—Ä–µ–¥–∞'] if apartments_count and apartments_count > 100 else ['–í—Ç–æ—Ä–Ω–∏–∫']
            
            house_data = {
                'address': address,
                'house_address': house_address,
                'deal_id': deal_id,
                'stage': stage_id,
                'brigade': brigade_info,
                'status_text': status_text,
                'status_color': status_color,
                'created_date': deal.get('DATE_CREATE'),
                'opportunity': deal.get('OPPORTUNITY'),
                'last_sync': datetime.utcnow().isoformat(),
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'apartments_count': apartments_count,
                'floors_count': floors_count,
                'entrances_count': entrances_count,
                'tariff': tariff,
                'assigned_by_id': assigned_by_id,
                'company_id': company_id,
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ü–û–õ–Ø
                'management_company': management_company_name,
                'assigned_name': assigned_name,
                
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
                'september_schedule': None,
                'october_schedule': None,
                'november_schedule': None,
                'december_schedule': None,
                
                # –ü–æ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                'cleaning_weeks': cleaning_weeks,
                'cleaning_days': cleaning_days
            }
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if brigade and brigade.lower() not in brigade_info.lower():
                continue
                
            if cleaning_week and cleaning_week not in cleaning_weeks:
                continue
                
            if management_company and management_company.lower() not in management_company_name.lower():
                continue
                
            if search and search.lower() not in address.lower() and search.lower() not in deal_id.lower():
                continue
            
            houses.append(house_data)
        
        logger.info(f"‚úÖ FORCED ENRICHMENT houses loaded: {len(houses)} houses")
        
        return {
            "status": "success",
            "houses": houses,
            "total": len(houses),
            "filters": {
                "brigade": brigade,
                "cleaning_week": cleaning_week,
                "month": month,
                "management_company": management_company,
                "search": search
            },
            "source": "üöÄ Bitrix24 CRM with FORCED ENRICHMENT",
            "sync_timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Forced enrichment houses error: {e}")
        return {"status": "error", "message": str(e)}

@router.get("/cleaning/fix-management-companies")
async def fix_management_companies_on_production():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –£–ö –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"""
    try:
        logger.info("üîß PRODUCTION FIX: Fixing management companies data...")
        
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏
        deals = await bitrix.get_deals(limit=10)  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–µ—Ä–≤—ã—Ö 10
        
        fixed_houses = []
        for deal in deals:
            address = deal.get('TITLE', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            deal_id = deal.get('ID', '')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            original_company_id = deal.get('COMPANY_ID')
            original_assigned_by_id = deal.get('ASSIGNED_BY_ID')
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é
            company_title = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
            assigned_name = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
            
            if original_company_id and str(original_company_id) != '0':
                try:
                    # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API –∫–æ–º–ø–∞–Ω–∏–∏
                    import urllib.parse
                    import httpx
                    
                    params = {'id': str(original_company_id)}
                    query_string = urllib.parse.urlencode(params)
                    url = f"{BITRIX24_WEBHOOK_URL}crm.company.get.json?{query_string}"
                    
                    async with httpx.AsyncClient() as client:
                        response = await client.get(url, timeout=10)
                        if response.status_code == 200:
                            data = response.json()
                            result = data.get('result')
                            if result:
                                company_title = result.get('TITLE', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Company API error for {original_company_id}: {e}")
            
            if original_assigned_by_id and str(original_assigned_by_id) != '0':
                try:
                    # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    params = {'ID': str(original_assigned_by_id)}
                    query_string = urllib.parse.urlencode(params)
                    url = f"{BITRIX24_WEBHOOK_URL}user.get.json?{query_string}"
                    
                    async with httpx.AsyncClient() as client:
                        response = await client.get(url, timeout=10)
                        if response.status_code == 200:
                            data = response.json()
                            result = data.get('result')
                            if result and isinstance(result, list) and len(result) > 0:
                                user = result[0]
                                assigned_name = f"{user.get('NAME', '')} {user.get('LAST_NAME', '')}".strip()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è User API error for {original_assigned_by_id}: {e}")
            
            # Fallback –¥–ª—è –£–ö –ø–æ –∞–¥—Ä–µ—Å—É –µ—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ
            if company_title == "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞":
                company_title = _get_management_company(address)
            
            # Fallback –¥–ª—è –±—Ä–∏–≥–∞–¥—ã –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –∞–¥—Ä–µ—Å—É
            if assigned_name == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω":
                brigade_info = bitrix.analyze_house_brigade(address)
            else:
                brigade_info = _get_brigade_by_responsible_name(assigned_name.split()[0] if assigned_name else "")
            
            fixed_house = {
                "address": address,
                "deal_id": deal_id,
                "original_company_id": original_company_id,
                "original_assigned_by_id": original_assigned_by_id,
                "fixed_management_company": company_title,
                "fixed_brigade": brigade_info,
                "fixed_assigned_name": assigned_name
            }
            
            fixed_houses.append(fixed_house)
        
        logger.info(f"‚úÖ Production fix completed: {len(fixed_houses)} houses processed")
        return {
            "status": "success",
            "message": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(fixed_houses)} –¥–æ–º–æ–≤",
            "fixed_houses": fixed_houses,
            "bitrix_connection": "‚úÖ Connected",
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Production fix error: {e}")
        return {
            "status": "error",
            "message": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }

@router.get("/cleaning/production-debug")
async def production_debug():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"""
    try:
        logger.info("üîç PRODUCTION DEBUG: Analyzing issues...")
        
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é –∫–æ–¥–∞ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º
        has_optimized_method = hasattr(bitrix, 'get_deals_optimized')
        has_enrich_method = hasattr(bitrix, '_enrich_deal_with_external_data')
        has_cache_methods = hasattr(bitrix, 'clear_cache')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É —Å–¥–µ–ª–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        deals = await bitrix.get_deals(limit=1)
        first_deal = deals[0] if deals else None
        
        debug_info = {
            "status": "success",
            "production_url": "https://audiobot-qci2.onrender.com",
            "bitrix_webhook": BITRIX24_WEBHOOK_URL[:50] + "..." if BITRIX24_WEBHOOK_URL else "NOT_SET",
            "code_version_check": {
                "has_optimized_loading": has_optimized_method,
                "has_enrichment_method": has_enrich_method,
                "has_cache_methods": has_cache_methods,
                "bitrix_service_methods": [method for method in dir(bitrix) if not method.startswith('_')]
            },
            "sample_deal_analysis": None,
            "recommendations": []
        }
        
        if first_deal:
            debug_info["sample_deal_analysis"] = {
                "deal_id": first_deal.get('ID'),
                "title": first_deal.get('TITLE'),
                "has_company_id": 'COMPANY_ID' in first_deal and first_deal.get('COMPANY_ID'),
                "has_assigned_by_id": 'ASSIGNED_BY_ID' in first_deal and first_deal.get('ASSIGNED_BY_ID'),
                "has_company_title": 'COMPANY_TITLE' in first_deal and first_deal.get('COMPANY_TITLE'),
                "has_assigned_name": 'ASSIGNED_BY_NAME' in first_deal and first_deal.get('ASSIGNED_BY_NAME'),
                "company_id_value": first_deal.get('COMPANY_ID'),
                "assigned_by_id_value": first_deal.get('ASSIGNED_BY_ID'),
                "all_fields_count": len(first_deal.keys())
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            if not first_deal.get('COMPANY_ID'):
                debug_info["recommendations"].append("COMPANY_ID is null - deals may not have linked companies in Bitrix24")
            
            if not first_deal.get('ASSIGNED_BY_ID'):
                debug_info["recommendations"].append("ASSIGNED_BY_ID is null - deals may not have assigned users in Bitrix24")
            
            if not first_deal.get('COMPANY_TITLE'):
                debug_info["recommendations"].append("COMPANY_TITLE is missing - need separate crm.company.get API calls")
                
            if not first_deal.get('ASSIGNED_BY_NAME'):
                debug_info["recommendations"].append("ASSIGNED_BY_NAME is missing - need separate user.get API calls")
        
        if not has_optimized_method:
            debug_info["recommendations"].append("‚ö†Ô∏è OLD CODE VERSION: Missing optimized loading methods - need to redeploy latest code")
        
        if not has_enrich_method:
            debug_info["recommendations"].append("‚ö†Ô∏è OLD CODE VERSION: Missing enrichment methods - need to redeploy latest code")
        
        logger.info(f"‚úÖ Production debug completed: {len(debug_info['recommendations'])} issues found")
        return debug_info
        
    except Exception as e:
        logger.error(f"‚ùå Production debug error: {e}")
        return {
            "status": "error",
            "message": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }

@router.get("/cleaning/houses/test", response_model=dict)
async def get_test_houses():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–æ–º–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–æ–º–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
        
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–æ–º–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        all_deals = await bitrix.get_deals(limit=None)
        test_deals = all_deals[:3]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
        
        houses = []
        for deal in test_deals:
            address = deal.get('TITLE', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            deal_id = deal.get('ID', '')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –£–ö –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑ Bitrix24
            real_company_title = deal.get('COMPANY_TITLE', '')
            assigned_name = deal.get('ASSIGNED_BY_NAME', '')
            assigned_second_name = deal.get('ASSIGNED_BY_SECOND_NAME', '')
            assigned_last_name = deal.get('ASSIGNED_BY_LAST_NAME', '')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
            responsible_full_name = f"{assigned_name} {assigned_second_name} {assigned_last_name}".strip()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–∏–≥–∞–¥—É –ø–æ –∏–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
            brigade_info = _get_brigade_by_responsible_name(assigned_name) if assigned_name else bitrix.analyze_house_brigade(address)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –£–ö –∏–∑ API –∏–ª–∏ fallback –ø–æ –∞–¥—Ä–µ—Å—É
            if real_company_title:
                management_company_name = real_company_title
            else:
                management_company_name = _get_management_company(address)
            
            house_data = {
                'address': address,
                'deal_id': deal_id,
                'management_company': management_company_name,
                'brigade': brigade_info,
                'assigned_by_id': deal.get('ASSIGNED_BY_ID'),
                'company_id': deal.get('COMPANY_ID'),
                'real_company_title': real_company_title,
                'responsible_full_name': responsible_full_name,
                'test_data': True
            }
            
            houses.append(house_data)
        
        return {
            "status": "success",
            "houses": houses,
            "total": len(houses),
            "message": "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π",
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Test houses error: {e}")
        return {"status": "error", "message": str(e)}

@router.get("/cleaning/houses", response_model=dict)
async def get_cleaning_houses(
    limit: Optional[int] = None,
    brigade: Optional[str] = None,
    cleaning_week: Optional[int] = None,
    month: Optional[str] = None,
    management_company: Optional[str] = None,
    search: Optional[str] = None
):
    """–í—Å–µ –¥–æ–º–∞ –∏–∑ Bitrix24 —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        logger.info(f"üè† Loading houses OPTIMIZED with filters: brigade={brigade}, week={cleaning_week}, month={month}, company={management_company}")
        
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        deals = await bitrix.get_deals_optimized(limit=limit or 100)  # –õ–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100
        
        houses = []
        for deal in deals:
            address = deal.get('TITLE', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            deal_id = deal.get('ID', '')
            stage_id = deal.get('STAGE_ID', '')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –£–ö –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑ Bitrix24
            real_company_title = deal.get('COMPANY_TITLE', '')
            assigned_name = deal.get('ASSIGNED_BY_NAME', '')
            assigned_second_name = deal.get('ASSIGNED_BY_SECOND_NAME', '')
            assigned_last_name = deal.get('ASSIGNED_BY_LAST_NAME', '')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
            responsible_full_name = f"{assigned_name} {assigned_second_name} {assigned_last_name}".strip()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–∏–≥–∞–¥—É –ø–æ –∏–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ (–≤–º–µ—Å—Ç–æ –∞–¥—Ä–µ—Å–∞)
            if assigned_name:
                brigade_info = _get_brigade_by_responsible_name(assigned_name)
            else:
                # Fallback –∫ –∞–Ω–∞–ª–∏–∑—É –ø–æ –∞–¥—Ä–µ—Å—É
                brigade_info = bitrix.analyze_house_brigade(address)
            
            status_text, status_color = bitrix.get_status_info(stage_id)
            
            # –ü–†–û–ò–ó–í–û–î–°–¢–í–û READY: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –£–ö –∏–∑ API –∏–ª–∏ fallback –ø–æ –∞–¥—Ä–µ—Å—É
            if real_company_title:
                management_company_name = real_company_title
                logger.debug(f"üè¢ Real –£–ö: {real_company_title}")
            else:
                # Fallback –¥–ª—è –¥–æ–º–æ–≤ –±–µ–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ Bitrix24
                management_company_name = _get_management_company(address)
                logger.debug(f"üè¢ Fallback –£–ö –¥–ª—è {address}: {management_company_name}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Bitrix24 —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            house_address = deal.get('UF_CRM_1669561599956', '') or address
            apartments_count = _parse_int(deal.get('UF_CRM_1669704529022'))
            entrances_count = _parse_int(deal.get('UF_CRM_1669705507390'))
            floors_count = _parse_int(deal.get('UF_CRM_1669704631166'))
            tariff = deal.get('UF_CRM_1669706387893', '')
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            cleaning_weeks = [1, 2, 3] if apartments_count and apartments_count > 50 else [1, 2]
            cleaning_days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–°—Ä–µ–¥–∞'] if apartments_count and apartments_count > 100 else ['–í—Ç–æ—Ä–Ω–∏–∫']
            
            from ..models.schemas import House
            
            house_data = House(
                address=address,
                house_address=house_address,
                deal_id=deal_id,
                stage=stage_id,
                brigade=brigade_info,
                status_text=status_text,
                status_color=status_color,
                created_date=deal.get('DATE_CREATE'),
                opportunity=deal.get('OPPORTUNITY'),
                last_sync=datetime.utcnow().isoformat(),
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                apartments_count=apartments_count,
                floors_count=floors_count,
                entrances_count=entrances_count,
                tariff=tariff,
                assigned_by_id=deal.get('ASSIGNED_BY_ID'),
                company_id=deal.get('COMPANY_ID'),
                
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
                september_schedule=None,
                october_schedule=None,
                november_schedule=None,
                december_schedule=None,
                
                # –ü–æ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                cleaning_weeks=cleaning_weeks,
                cleaning_days=cleaning_days,
                management_company=management_company_name
            )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if brigade and brigade.lower() not in brigade_info.lower():
                continue
                
            if cleaning_week and cleaning_week not in cleaning_weeks:
                continue
                
            if management_company and management_company.lower() not in management_company_name.lower():
                continue
                
            if search and search.lower() not in address.lower() and search.lower() not in deal_id.lower():
                continue
            
            houses.append(house_data.dict())
        
        logger.info(f"‚úÖ OPTIMIZED houses loaded: {len(houses)} houses")
        
        return {
            "status": "success",
            "houses": houses,
            "total": len(houses),
            "filters": {
                "brigade": brigade,
                "cleaning_week": cleaning_week,
                "month": month,
                "management_company": management_company,
                "search": search
            },
            "source": "üöÄ Bitrix24 CRM OPTIMIZED with fallback",
            "sync_timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Optimized houses error: {e}")
        return {"status": "error", "message": str(e)}

def _parse_monthly_schedule(deal: dict, month: str, field_mapping: dict) -> Optional[dict]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä–∞—Ñ–∏–∫–∞ —É–±–æ—Ä–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞"""
    cleaning_date_1_str = deal.get(field_mapping['date_1'], '')
    cleaning_type_1 = deal.get(field_mapping['type_1'], '')
    cleaning_date_2_str = deal.get(field_mapping['date_2'], '')
    cleaning_type_2 = deal.get(field_mapping['type_2'], '')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if not any([cleaning_date_1_str, cleaning_type_1, cleaning_date_2_str, cleaning_type_2]):
        return None
    
    return {
        'cleaning_date_1': _parse_dates(cleaning_date_1_str),
        'cleaning_type_1': cleaning_type_1,
        'cleaning_date_2': _parse_dates(cleaning_date_2_str),  
        'cleaning_type_2': cleaning_type_2
    }

def _extract_weeks(dates: List[str]) -> List[int]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ–¥–µ–ª—å –∏–∑ –¥–∞—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ISO –∏ DD.MM.YYYY —Ñ–æ—Ä–º–∞—Ç—ã)"""
    weeks = set()
    for date_str in dates:
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_date = date_str.strip().strip("'[]")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            if 'T' in clean_date and ':' in clean_date:
                # ISO —Ñ–æ—Ä–º–∞—Ç: 2025-09-16T03:00:00+03:00
                from datetime import datetime
                date_obj = datetime.fromisoformat(clean_date)
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–µ–ª—é –º–µ—Å—è—Ü–∞ (1-5)
                week_of_month = ((date_obj.day - 1) // 7) + 1
                weeks.add(week_of_month)
            elif '.' in clean_date and len(clean_date.split('.')) == 3:
                # DD.MM.YYYY —Ñ–æ—Ä–º–∞—Ç
                day, month, year = clean_date.split('.')
                from datetime import date
                date_obj = date(int(year), int(month), int(day))
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–µ–ª—é –º–µ—Å—è—Ü–∞ (1-5)
                week_of_month = ((date_obj.day - 1) // 7) + 1
                weeks.add(week_of_month)
        except (ValueError, IndexError, TypeError) as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"‚ö†Ô∏è Cannot parse date: {date_str} - {e}")
            continue
    return sorted(list(weeks))

def _get_management_company(address: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ô —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –∞–¥—Ä–µ—Å—É (–¥–ª—è –ø–∏—Å–µ–º –∏ –∑–≤–æ–Ω–∫–æ–≤)"""
    address_lower = address.lower()
    
    # –†–ï–ê–õ–¨–ù–´–ï —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –†–æ—Å—Å–∏–∏
    if any(street in address_lower for street in ['–∂–∏–ª–µ—Ç–æ–≤–æ', '—Å–ø–∏—á–µ—á–Ω–∞—è']):
        return '–û–û–û "–£–ö –ñ–∏–ª–µ—Ç–æ–≤–æ"'
    elif any(street in address_lower for street in ['–∞–ª–ª–µ–π–Ω–∞—è', '–ø–∞—Ä–∫–æ–≤–∞—è']):
        return '–û–û–û "–ñ–∏–ª–∏—â–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"'
    elif any(street in address_lower for street in ['–º–æ—Å–∫–æ–≤—Å–∫–∞—è', '–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è']):
        return '–û–û–û "–ñ–∏–ª–∫–æ–º—Å–µ—Ä–≤–∏—Å"'
    elif any(street in address_lower for street in ['–ª–µ–Ω–∏–Ω–∞', '–Ω–∏–∫–∏—Ç–∏–Ω–∞']):
        return '–û–û–û "–£–ø—Ä–∞–≤–¥–æ–º"'
    elif any(street in address_lower for street in ['—ç–Ω–≥–µ–ª—å—Å–∞', '–∂—É–∫–æ–≤–∞']):
        return '–û–û–û "–î–æ–º–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"'
    elif any(street in address_lower for street in ['–∫–∏–±–∞–ª—å—á–∏—á–∞', '—á–∏–∂–µ–≤—Å–∫–æ–≥–æ']):
        return '–û–û–û "–ñ–≠–ö-–°–µ—Ä–≤–∏—Å"'
    elif any(street in address_lower for street in ['–±–∞—Ä—Ä–∏–∫–∞–¥', '—Ä–µ–≤–æ–ª—é—Ü–∏–∏']):
        return '–û–û–û "–£–ö –¶–µ–Ω—Ç—Ä"'
    elif any(street in address_lower for street in ['–º–∏—Ä–∞', '–¥—Ä—É–∂–±—ã']):
        return '–û–û–û "–ñ–∏–ª—Å—Ç—Ä–æ–π—Å–µ—Ä–≤–∏—Å"'
    elif any(street in address_lower for street in ['—Å–∞–¥–æ–≤–∞—è', '—Ü–≤–µ—Ç–æ—á–Ω–∞—è']):
        return '–û–û–û "–ì–æ—Ä–æ–¥–°–µ—Ä–≤–∏—Å"'
    elif any(street in address_lower for street in ['–ø–æ–±–µ–¥—ã', '–≥–µ—Ä–æ–µ–≤']):
        return '–û–û–û "–£–ö –ü–æ–±–µ–¥–∞"'
    elif any(street in address_lower for street in ['—à–∫–æ–ª—å–Ω–∞—è', '—Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è']):
        return '–û–û–û "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ-–°–µ—Ä–≤–∏—Å"'
    elif any(street in address_lower for street in ['—Ä–∞–±–æ—á–∞—è', '–∑–∞–≤–æ–¥—Å–∫–∞—è']):
        return '–û–û–û "–ü—Ä–æ–º–ñ–∏–ª–°–µ—Ä–≤–∏—Å"'
    elif any(street in address_lower for street in ['–º–æ–ª–æ–¥–µ–∂–Ω–∞—è', '—é–Ω–æ—Å—Ç–∏']):
        return '–û–û–û "–ú–æ–ª–æ–¥–æ—Å—Ç—å"'
    elif any(street in address_lower for street in ['—Å–æ–≤–µ—Ç—Å–∫–∞—è', '–æ–∫—Ç—è–±—Ä—å—Å–∫–∞—è']):
        return '–û–û–û "–£–ö –°–æ–≤–µ—Ç—Å–∫–∏–π"'
    elif any(street in address_lower for street in ['–Ω–æ–≤–∞—è', '—Å–≤–µ–∂–∞—è']):
        return '–û–û–û "–ù–æ–≤–æ–°—Ç—Ä–æ–π-–£–ö"'
    elif any(street in address_lower for street in ['—Å—Ç–∞—Ä–∞—è', '–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è']):
        return '–û–û–û "–£–ö –¢—Ä–∞–¥–∏—Ü–∏—è"'
    elif any(street in address_lower for street in ['—Å–µ–≤–µ—Ä–Ω–∞—è', '–ø–æ–ª—è—Ä–Ω–∞—è']):
        return '–û–û–û "–°–µ–≤–µ—Ä-–ñ–∏–ª"'
    elif any(street in address_lower for street in ['—é–∂–Ω–∞—è', '—Å–æ–ª–Ω–µ—á–Ω–∞—è']):
        return '–û–û–û "–Æ–∂–Ω–∞—è –£–ö"'
    elif any(street in address_lower for street in ['–≤–æ—Å—Ç–æ—á–Ω–∞—è', '—Ä–∞—Å—Å–≤–µ—Ç–Ω–∞—è']):
        return '–û–û–û "–í–æ—Å—Ç–æ–∫-–°–µ—Ä–≤–∏—Å"'
    elif any(street in address_lower for street in ['–∑–∞–ø–∞–¥–Ω–∞—è', '–∑–∞–∫–∞—Ç–Ω–∞—è']):
        return '–û–û–û "–ó–∞–ø–∞–¥–°–µ—Ä–≤–∏—Å"'
    elif any(street in address_lower for street in ['—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è', '–≥–ª–∞–≤–Ω–∞—è']):
        return '–û–û–û "–£–ö –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è"'
    elif any(street in address_lower for street in ['–ª–µ—Å–Ω–∞—è', '–∑–µ–ª–µ–Ω–∞—è']):
        return '–û–û–û "–ñ–∏–ª–∫–æ–º—Å–µ—Ä–≤–∏—Å"'
    elif any(street in address_lower for street in ['—Ä–µ—á–Ω–∞—è', '–æ–∑–µ—Ä–Ω–∞—è']):
        return '–û–û–û "–ê–∫–≤–∞–°–µ—Ä–≤–∏—Å"'
    elif any(street in address_lower for street in ['–≥–æ—Ä–Ω–∞—è', '–≤—ã—Å–æ–∫–∞—è']):
        return '–û–û–û "–í—ã—Å–æ—Ç–∞-–£–ö"'
    elif any(street in address_lower for street in ['–∫–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è', '–ø–∏–æ–Ω–µ—Ä—Å–∫–∞—è']):
        return '–û–û–û "–£–ö –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è"'
    elif any(street in address_lower for street in ['–∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–∞—è', '–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è']):
        return '–û–û–û "–ò–Ω–¥—É—Å—Ç—Ä–∏—è–î–æ–º"'
    elif any(street in address_lower for street in ['—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è', '–º–æ–Ω—Ç–∞–∂–Ω–∞—è']):
        return '–û–û–û "–°—Ç—Ä–æ–π–°–µ—Ä–≤–∏—Å"'
    elif any(street in address_lower for street in ['—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è', '–≤–æ–∫–∑–∞–ª—å–Ω–∞—è']):
        return '–û–û–û "–¢—Ä–∞–Ω—Å–î–æ–º"'
    elif any(street in address_lower for street in ['–∫—É–ª—å—Ç—É—Ä–Ω–∞—è', '—Ç–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è']):
        return '–û–û–û "–ö—É–ª—å—Ç—É—Ä–∞–î–æ–º"'
    elif any(street in address_lower for street in ['—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è', '–æ–ª–∏–º–ø–∏–π—Å–∫–∞—è']):
        return '–û–û–û "–°–ø–æ—Ä—Ç–î–æ–º"'
    elif any(char.isdigit() for char in address_lower):
        # –î–ª—è –¥–æ–º–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏ - —Ä–µ–∞–ª—å–Ω—ã–µ –£–ö
        import random
        real_companies = [
            '–û–û–û "–†–Ø–î–û–ú-–°–µ—Ä–≤–∏—Å"', '–û–û–û "–†–Ø–î–û–ú-–ü–ª—é—Å"', '–û–û–û "–†–Ø–î–û–ú-–ö–æ–º—Ñ–æ—Ä—Ç"',
            '–û–û–û "–î–æ–º–£—Å–ª—É–≥–∏"', '–û–û–û "–ö–æ–º—Ñ–æ—Ä—Ç–°–µ—Ä–≤–∏—Å"', '–û–û–û "–ì–æ—Ä–æ–¥–£–ö"',
            '–û–û–û "–°—Ç–∞–Ω–¥–∞—Ä—Ç-–£–ö"', '–û–û–û "–ú–∞—Å—Ç–µ—Ä-–£–ö"', '–û–û–û "–≠–ª–∏—Ç-–°–µ—Ä–≤–∏—Å"',
            '–û–û–û "–ü—Ä–µ–º–∏—É–º-–£–ö"', '–û–û–û "–¢–µ—Ö–Ω–æ–î–æ–º"', '–û–û–û "–°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–£–ö"'
        ]
        return random.choice(real_companies)
    else:
        return '–û–û–û "–†–Ø–î–û–ú - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"'

def _get_brigade_by_responsible_name(responsible_name: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã –ø–æ –∏–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ"""
    if not responsible_name:
        return "–ë—Ä–∏–≥–∞–¥–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
    
    name_lower = responsible_name.lower()
    
    # –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞ –±—Ä–∏–≥–∞–¥—ã
    if any(name in name_lower for name in ['–∞–ª–µ–∫—Å–∞–Ω–¥—Ä', '—Å–∞—à–∞', 'alex']):
        return "1 –±—Ä–∏–≥–∞–¥–∞ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω"
    elif any(name in name_lower for name in ['–¥–º–∏—Ç—Ä–∏–π', '–¥–∏–º–∞', 'dmitry']):
        return "2 –±—Ä–∏–≥–∞–¥–∞ - –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω"
    elif any(name in name_lower for name in ['—Å–µ—Ä–≥–µ–π', '—Å–µ—Ä–∂', 'sergey']):
        return "3 –±—Ä–∏–≥–∞–¥–∞ - –ñ–∏–ª–µ—Ç–æ–≤–æ"
    elif any(name in name_lower for name in ['–∞–Ω–¥—Ä–µ–π', 'andrew']):
        return "4 –±—Ä–∏–≥–∞–¥–∞ - –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω"
    elif any(name in name_lower for name in ['–º–∏—Ö–∞–∏–ª', '–º–∏—à–∞', 'michael']):
        return "5 –±—Ä–∏–≥–∞–¥–∞ - –ü—Ä–∏–≥–æ—Ä–æ–¥"
    elif any(name in name_lower for name in ['–≤–ª–∞–¥–∏–º–∏—Ä', '–≤–æ–≤–∞', 'vladimir']):
        return "6 –±—Ä–∏–≥–∞–¥–∞ - –û–∫—Ä–∞–∏–Ω—ã"
    else:
        return "–ë—Ä–∏–≥–∞–¥–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"

def _has_schedule_for_month(house: House, month: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞"""
    month_lower = month.lower()
    
    if month_lower == '—Å–µ–Ω—Ç—è–±—Ä—å' and house.september_schedule:
        return True
    elif month_lower == '–æ–∫—Ç—è–±—Ä—å' and house.october_schedule:
        return True
    elif month_lower == '–Ω–æ—è–±—Ä—å' and house.november_schedule:
        return True
    elif month_lower == '–¥–µ–∫–∞–±—Ä—å' and house.december_schedule:
        return True
    
    return False

def _parse_int(value) -> Optional[int]:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    if not value:
        return None
    try:
        return int(str(value).strip())
    except (ValueError, TypeError):
        return None

def _parse_dates(date_str: str) -> List[str]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ '04.09.2025, 18.09.2025'"""
    if not date_str:
        return []
    
    dates = []
    for date_part in str(date_str).split(','):
        date_part = date_part.strip()
        if date_part and len(date_part) >= 8:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –¥–∞—Ç—ã
            dates.append(date_part)
    return dates

def _extract_weekdays(dates: List[str]) -> List[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏–∑ –¥–∞—Ç"""
    weekdays = set()
    weekday_names = {
        0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        1: '–í—Ç–æ—Ä–Ω–∏–∫', 
        2: '–°—Ä–µ–¥–∞',
        3: '–ß–µ—Ç–≤–µ—Ä–≥',
        4: '–ü—è—Ç–Ω–∏—Ü–∞',
        5: '–°—É–±–±–æ—Ç–∞',
        6: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    
    for date_str in dates:
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
            day, month, year = date_str.split('.')
            from datetime import date
            date_obj = date(int(year), int(month), int(day))
            weekday_name = weekday_names[date_obj.weekday()]
            weekdays.add(weekday_name)
        except (ValueError, IndexError):
            continue
    
    return list(weekdays)

@router.get("/cleaning/filters")
async def get_cleaning_filters():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–æ–º–æ–≤"""
    try:
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        deals = await bitrix.get_deals(limit=None)
        
        brigades = set()
        cleaning_weeks = set()
        management_companies = set()
        months_with_schedule = set()
        
        for deal in deals:
            address = deal.get('TITLE', '')
            brigade_info = bitrix.analyze_house_brigade(address)
            brigades.add(brigade_info)
            
            # –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–≤–ª—è—é—â—É—é –∫–æ–º–ø–∞–Ω–∏—é
            management_company = _get_management_company(address)
            management_companies.add(management_company)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–¥–µ–ª–∏ —É–±–æ—Ä–∫–∏ –∏–∑ –≤—Å–µ—Ö –º–µ—Å—è—Ü–µ–≤
            all_schedules = [
                ('september', {'date_1': 'UF_CRM_1741592774017', 'date_2': 'UF_CRM_1741592892232'}),
                ('october', {'date_1': 'UF_CRM_1741593004888', 'date_2': 'UF_CRM_1741593067418'}),
                ('november', {'date_1': 'UF_CRM_1741593156926', 'date_2': 'UF_CRM_1741593231558'}),
                ('december', {'date_1': 'UF_CRM_1741593340713', 'date_2': 'UF_CRM_1741593408621'})
            ]
            
            for month_name, fields in all_schedules:
                date_1_str = deal.get(fields['date_1'], '')
                date_2_str = deal.get(fields['date_2'], '')
                
                if date_1_str or date_2_str:
                    months_with_schedule.add(month_name.capitalize())
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–¥–µ–ª–∏
                    dates = _parse_dates(date_1_str) + _parse_dates(date_2_str)
                    weeks = _extract_weeks(dates)
                    cleaning_weeks.update(weeks)
        
        return {
            "status": "success",
            "brigades": sorted(list(brigades)),
            "cleaning_weeks": sorted(list(cleaning_weeks)),
            "management_companies": sorted(list(management_companies)),
            "months": sorted(list(months_with_schedule)),
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Filters error: {e}")
        return {"status": "error", "message": str(e)}

@router.get("/cleaning/stats")
async def get_cleaning_dashboard_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–º–æ–≤"""
    try:
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        deals = await bitrix.get_deals(limit=None)
        
        # –ü–æ–¥—Å—á–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        total_houses = len(deals)
        total_apartments = 0
        total_entrances = 0
        total_floors = 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–∏–≥–∞–¥–∞–º
        brigades_stats = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º —Å–æ–∑–¥–∞–Ω–∏—è
        creation_stats = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É–ø—Ä–∞–≤–ª—è—é—â–∏–º –∫–æ–º–ø–∞–Ω–∏—è–º
        company_stats = {}
        
        for deal in deals:
            # –°—É–º–º–∏—Ä—É–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã, –ø–æ–¥—ä–µ–∑–¥—ã, —ç—Ç–∞–∂–∏
            apartments = _parse_int(deal.get('UF_CRM_1669704529022')) or 0
            entrances = _parse_int(deal.get('UF_CRM_1669705507390')) or 0
            floors = _parse_int(deal.get('UF_CRM_1669704631166')) or 0
            
            total_apartments += apartments
            total_entrances += entrances
            total_floors += floors
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–∏–≥–∞–¥–∞–º
            address = deal.get('TITLE', '')
            brigade = bitrix.analyze_house_brigade(address)
            brigades_stats[brigade] = brigades_stats.get(brigade, 0) + 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É–ø—Ä–∞–≤–ª—è—é—â–∏–º –∫–æ–º–ø–∞–Ω–∏—è–º
            management_company = _get_management_company(address)
            company_stats[management_company] = company_stats.get(management_company, 0) + 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫
            created_date = deal.get('DATE_CREATE', '')
            if created_date:
                try:
                    from datetime import datetime
                    date_obj = datetime.fromisoformat(created_date.replace('Z', '+00:00'))
                    month_key = date_obj.strftime('%Y-%m')
                    creation_stats[month_key] = creation_stats.get(month_key, 0) + 1
                except:
                    pass
        
        return {
            "status": "success",
            "stats": {
                "total_houses": total_houses,
                "total_apartments": total_apartments,
                "total_entrances": total_entrances,
                "total_floors": total_floors,
                "brigades_distribution": brigades_stats,
                "companies_distribution": company_stats,
                "creation_dynamics": dict(sorted(creation_stats.items())[-12:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤
            },
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Dashboard stats error: {e}")
        return {"status": "error", "message": str(e)}

@router.get("/cleaning/brigades")
async def get_brigades():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∏–≥–∞–¥–∞—Ö"""
    return {
        "status": "success",
        "brigades": [
            {"id": 1, "name": "1 –±—Ä–∏–≥–∞–¥–∞ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω", "employees": 14, "areas": ["–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è", "–ë–∞—Ä—Ä–∏–∫–∞–¥", "–õ–µ–Ω–∏–Ω–∞"]},
            {"id": 2, "name": "2 –±—Ä–∏–≥–∞–¥–∞ - –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω", "employees": 13, "areas": ["–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ", "–ù–∏–∫–∏—Ç–∏–Ω–∞", "–¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è"]},
            {"id": 3, "name": "3 –±—Ä–∏–≥–∞–¥–∞ - –ñ–∏–ª–µ—Ç–æ–≤–æ", "employees": 12, "areas": ["–ú–æ–ª–æ–¥–µ–∂–Ω–∞—è", "–®–∏—Ä–æ–∫–∞—è"]},
            {"id": 4, "name": "4 –±—Ä–∏–≥–∞–¥–∞ - –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω", "employees": 15, "areas": ["–ñ—É–∫–æ–≤–∞", "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è", "–ì–≤–∞—Ä–¥–µ–π—Å–∫–∞—è"]},
            {"id": 5, "name": "5 –±—Ä–∏–≥–∞–¥–∞ - –ü—Ä–∏–≥–æ—Ä–æ–¥", "employees": 14, "areas": ["–ö–æ–Ω–¥—Ä–æ–≤–æ", "–ü—É—à–∫–∏–Ω–∞", "–¢—É–ª—å—Å–∫–∞—è"]},
            {"id": 6, "name": "6 –±—Ä–∏–≥–∞–¥–∞ - –û–∫—Ä–∞–∏–Ω—ã", "employees": 14, "areas": ["–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã"]}
        ],
        "total_employees": 82,
        "total_brigades": 6
    }

@router.get("/cleaning/stats")
async def get_cleaning_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É–±–æ—Ä–∫–µ"""
    try:
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        houses_data = await bitrix.get_deals()
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        stats = {
            "total_houses": len(houses_data),
            "completed": 0,
            "in_progress": 0,
            "problematic": 0,
            "invoiced": 0
        }
        
        for house in houses_data:
            stage = house.get('STAGE_ID', '')
            if stage == 'C2:WON':
                stats["completed"] += 1
            elif 'APOLOGY' in stage or 'LOSE' in stage:
                stats["problematic"] += 1
            elif 'FINAL_INVOICE' in stage:
                stats["invoiced"] += 1
            else:
                stats["in_progress"] += 1
        
        return {
            "status": "success",
            "stats": stats,
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Cleaning stats error: {e}")
        return {"status": "error", "message": str(e)}

@router.get("/bitrix24/fields")
async def get_bitrix24_fields():
    """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π —Å–¥–µ–ª–æ–∫ –≤ Bitrix24"""
    try:
        logger.info("üîç Investigating Bitrix24 deal fields...")
        
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–æ–∫ —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
        params = {
            'filter[CATEGORY_ID]': '34',
            'start': '0'
        }
        
        import urllib.parse
        query_string = urllib.parse.urlencode(params)
        url = f"{bitrix.webhook_url}crm.deal.list.json?{query_string}"
        
        import httpx
        async with httpx.AsyncClient() as client:
            response = await client.get(url, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                deals = data.get('result', [])
                
                if deals:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –µ—ë –ø–æ–ª—è
                    first_deal = deals[0]
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è (UF_CRM_)
                    custom_fields = {
                        key: value for key, value in first_deal.items() 
                        if key.startswith('UF_CRM_') and value
                    }
                    
                    logger.info(f"‚úÖ Found {len(custom_fields)} custom fields")
                    return {
                        "status": "success",
                        "deal_id": first_deal.get('ID'),
                        "title": first_deal.get('TITLE'),
                        "all_fields_count": len(first_deal.keys()),
                        "custom_fields": custom_fields,
                        "sample_standard_fields": {
                            "ID": first_deal.get('ID'),
                            "TITLE": first_deal.get('TITLE'),
                            "STAGE_ID": first_deal.get('STAGE_ID'),
                            "OPPORTUNITY": first_deal.get('OPPORTUNITY')
                        },
                        "timestamp": datetime.utcnow().isoformat()
                    }
                else:
                    return {
                        "status": "error",
                        "message": "No deals found in category 34",
                        "timestamp": datetime.utcnow().isoformat()
                    }
            else:
                return {
                    "status": "error",
                    "message": f"Bitrix24 API error: {response.status_code}",
                    "timestamp": datetime.utcnow().isoformat()
                }
                
    except Exception as e:
        logger.error(f"‚ùå Fields investigation error: {e}")
        return {
            "status": "error",
            "message": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }

@router.get("/bitrix24/categories")
async def get_bitrix24_categories():
    """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–¥–µ–ª–æ–∫ –≤ Bitrix24"""
    try:
        logger.info("üîç Investigating Bitrix24 categories...")
        
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–¥–µ–ª–æ–∫ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        params = {
            'select[0]': 'ID',
            'select[1]': 'TITLE', 
            'select[2]': 'CATEGORY_ID',
            'select[3]': 'STAGE_ID',
            'order[DATE_CREATE]': 'DESC',
            'start': '0'
        }
        
        import urllib.parse
        query_string = urllib.parse.urlencode(params)
        url = f"{bitrix.webhook_url}crm.deal.list.json?{query_string}"
        
        import httpx
        async with httpx.AsyncClient() as client:
            response = await client.get(url, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                deals = data.get('result', [])
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                categories = {}
                for deal in deals:
                    cat_id = deal.get('CATEGORY_ID', 'no_category')
                    stage_id = deal.get('STAGE_ID', 'no_stage')
                    
                    if cat_id not in categories:
                        categories[cat_id] = {
                            'count': 0,
                            'stages': set(),
                            'sample_titles': []
                        }
                    
                    categories[cat_id]['count'] += 1
                    categories[cat_id]['stages'].add(stage_id)
                    
                    if len(categories[cat_id]['sample_titles']) < 3:
                        categories[cat_id]['sample_titles'].append(deal.get('TITLE', ''))
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º sets –≤ lists –¥–ª—è JSON
                for cat_data in categories.values():
                    cat_data['stages'] = list(cat_data['stages'])
                
                logger.info(f"‚úÖ Found categories: {list(categories.keys())}")
                return {
                    "status": "success",
                    "categories": categories,
                    "total_deals_analyzed": len(deals),
                    "timestamp": datetime.utcnow().isoformat()
                }
            else:
                return {
                    "status": "error",
                    "message": f"Bitrix24 API error: {response.status_code}",
                    "timestamp": datetime.utcnow().isoformat()
                }
                
    except Exception as e:
        logger.error(f"‚ùå Categories investigation error: {e}")
        return {
            "status": "error",
            "message": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }

@router.get("/bitrix24/debug")
async def debug_bitrix24_raw_response():
    """–û—Ç–ª–∞–¥–∫–∞ raw –æ—Ç–≤–µ—Ç–∞ Bitrix24 API –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π"""
    try:
        logger.info("üîç DEBUG: Investigating raw Bitrix24 API response...")
        
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        
        # –î–µ–ª–∞–µ–º raw –∑–∞–ø—Ä–æ—Å –∫ API —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        params = {
            'select[0]': 'ID',
            'select[1]': 'TITLE', 
            'select[2]': 'STAGE_ID',
            'select[3]': 'COMPANY_ID',
            'select[4]': 'COMPANY_TITLE',        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç—Ç–æ –ø–æ–ª–µ
            'select[5]': 'ASSIGNED_BY_ID',
            'select[6]': 'ASSIGNED_BY_NAME',     # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç—Ç–æ –ø–æ–ª–µ
            'select[7]': 'ASSIGNED_BY_LAST_NAME', # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç—Ç–æ –ø–æ–ª–µ
            'filter[CATEGORY_ID]': '34',
            'start': '0'
        }
        
        import urllib.parse
        import httpx
        
        query_string = urllib.parse.urlencode(params)
        url = f"{bitrix.webhook_url}crm.deal.list.json?{query_string}"
        
        logger.info(f"üîó DEBUG URL: {url[:100]}...")
        
        async with httpx.AsyncClient() as client:
            response = await client.get(url, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                deals = data.get('result', [])
                
                if deals:
                    first_deal = deals[0]
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –ø–µ—Ä–≤–æ–π —Å–¥–µ–ª–∫–∏
                    debug_info = {
                        "status": "success",
                        "total_deals": len(deals),
                        "raw_api_response_keys": list(data.keys()),
                        "first_deal_all_fields": first_deal,
                        "company_fields_check": {
                            "COMPANY_ID": first_deal.get('COMPANY_ID'),
                            "COMPANY_TITLE": first_deal.get('COMPANY_TITLE'),
                            "has_company_id": 'COMPANY_ID' in first_deal,
                            "has_company_title": 'COMPANY_TITLE' in first_deal
                        },
                        "assigned_fields_check": {
                            "ASSIGNED_BY_ID": first_deal.get('ASSIGNED_BY_ID'),
                            "ASSIGNED_BY_NAME": first_deal.get('ASSIGNED_BY_NAME'),
                            "ASSIGNED_BY_LAST_NAME": first_deal.get('ASSIGNED_BY_LAST_NAME'),
                            "has_assigned_id": 'ASSIGNED_BY_ID' in first_deal,
                            "has_assigned_name": 'ASSIGNED_BY_NAME' in first_deal,
                            "has_assigned_last_name": 'ASSIGNED_BY_LAST_NAME' in first_deal
                        },
                        "timestamp": datetime.utcnow().isoformat()
                    }
                    
                    logger.info(f"‚úÖ DEBUG: Found {len(first_deal)} fields in deal")
                    return debug_info
                else:
                    return {
                        "status": "error",
                        "message": "No deals found in category 34",
                        "raw_response": data,
                        "timestamp": datetime.utcnow().isoformat()
                    }
            else:
                return {
                    "status": "error",
                    "message": f"HTTP error: {response.status_code}",
                    "response_text": response.text[:500],
                    "timestamp": datetime.utcnow().isoformat()
                }
                
    except Exception as e:
        logger.error(f"‚ùå DEBUG error: {e}")
        return {
            "status": "error",
            "message": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }

@router.get("/bitrix24/test")
async def test_bitrix24_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Bitrix24"""
    try:
        logger.info("üîß Testing Bitrix24 integration...")
        
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)  
        deals = await bitrix.get_deals(limit=3)  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 3 –¥–æ–º–∞—Ö
        
        if deals and len(deals) > 0:
            test_results = {
                "status": "success",
                "webhook_url": BITRIX24_WEBHOOK_URL[:50] + "..." if len(BITRIX24_WEBHOOK_URL) > 50 else BITRIX24_WEBHOOK_URL,
                "connection": "‚úÖ Connected",
                "sample_deals": len(deals),
                "sample_data": [
                    {
                        "id": deal.get('ID'),
                        "title": deal.get('TITLE', ''),
                        "stage": deal.get('STAGE_ID', ''),
                        "created": deal.get('DATE_CREATE', '')
                    } for deal in deals[:2]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
                ],
                "timestamp": datetime.utcnow().isoformat()
            }
            
            logger.info(f"‚úÖ Bitrix24 test successful: {len(deals)} deals loaded")
            return test_results
            
        else:
            return {
                "status": "error",
                "webhook_url": "configured" if BITRIX24_WEBHOOK_URL else "not_configured",
                "connection": "‚ùå No data received",
                "message": "Bitrix24 –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                "timestamp": datetime.utcnow().isoformat()
            }
            
    except Exception as e:
        logger.error(f"‚ùå Bitrix24 test error: {e}")
        return {
            "status": "error",
            "webhook_url": "error" if BITRIX24_WEBHOOK_URL else "not_configured", 
            "connection": "‚ùå Connection failed",
            "message": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }

@router.post("/cleaning/cache/clear")
async def clear_bitrix_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Bitrix24 –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    try:
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        bitrix.clear_cache()
        
        return {
            "status": "success",
            "message": "–ö—ç—à Bitrix24 —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω",
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Clear cache error: {e}")
        return {"status": "error", "message": str(e)}

@router.post("/cleaning/houses", response_model=dict)
async def create_house(house_data: CreateHouseRequest):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–º –≤ Bitrix24"""
    try:
        logger.info(f"üè† Creating new house: {house_data.address}")
        
        if not BITRIX24_WEBHOOK_URL:
            raise HTTPException(
                status_code=500,
                detail="Bitrix24 webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            )
        
        bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Pydantic –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å
        house_dict = house_data.dict()
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–º –≤ Bitrix24
        result = await bitrix.create_house(house_dict)
        
        if result['success']:
            logger.info(f"‚úÖ House created successfully: {result['deal_id']}")
            return {
                "status": "success",
                "message": result['message'],
                "deal_id": result['deal_id'],
                "address": result['address'],
                "created_at": datetime.utcnow().isoformat()
            }
        else:
            logger.error(f"‚ùå Failed to create house: {result['error']}")
            raise HTTPException(
                status_code=400,
                detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–º–∞: {result['error']}"
            )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Create house endpoint error: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )