"""
API —Ä–æ—É—Ç–µ—Ä –¥–ª—è Telegram Bot - webhook –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å Brain integration
"""
from fastapi import APIRouter, Request, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from pydantic import BaseModel
from typing import Optional, Dict, Any
import logging

from backend.app.config.database import get_db
from backend.app.services.telegram_service import telegram_service
from backend.app.services.brain_router import try_fast_answer
from backend.app.models.log import Log, LogLevel, LogCategory
from uuid import uuid4
from datetime import datetime

logger = logging.getLogger(__name__)


import os
import httpx


router = APIRouter(prefix="/telegram", tags=["Telegram"])


# ============= Webhook Management =============

@router.get("/webhook/info")
async def get_webhook_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook"""
    try:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            return {"error": "TELEGRAM_BOT_TOKEN not configured"}
        
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"https://api.telegram.org/bot{bot_token}/getWebhookInfo"
            )
            data = response.json()
            logger.info(f"üîç Webhook info: {data}")
            return data
    except Exception as e:
        logger.error(f"Error getting webhook info: {e}")
        return {"error": str(e)}

@router.post("/webhook/set")
async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –¥–ª—è –±–æ—Ç–∞"""
    try:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        webhook_url = os.getenv('TELEGRAM_WEBHOOK_URL')
        
        if not bot_token or not webhook_url:
            return {"error": "TELEGRAM_BOT_TOKEN or TELEGRAM_WEBHOOK_URL not configured"}
        
        logger.info(f"üîß Setting webhook to: {webhook_url}")
        
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"https://api.telegram.org/bot{bot_token}/setWebhook",
                json={
                    "url": webhook_url,
                    "drop_pending_updates": True
                }
            )
            data = response.json()
            logger.info(f"‚úÖ Webhook set result: {data}")
            return data
    except Exception as e:
        logger.error(f"Error setting webhook: {e}")
        return {"error": str(e)}

@router.post("/webhook/delete")
async def delete_webhook():
    """–£–¥–∞–ª–∏—Ç—å webhook"""
    try:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            return {"error": "TELEGRAM_BOT_TOKEN not configured"}
        
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"https://api.telegram.org/bot{bot_token}/deleteWebhook",
                json={"drop_pending_updates": True}
            )
            data = response.json()
            logger.info(f"üóëÔ∏è Webhook deleted: {data}")
            return data
    except Exception as e:
        logger.error(f"Error deleting webhook: {e}")
        return {"error": str(e)}

@router.get("/test/send")
async def test_send_message(chat_id: str, text: str = "Test message"):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        logger.info(f"üß™ Testing message send to {chat_id}: {text}")
        success = await telegram_service.send_message(chat_id=chat_id, text=text)
        return {"success": success, "chat_id": chat_id, "text": text}
    except Exception as e:
        logger.error(f"Error in test send: {e}")
        return {"error": str(e)}

# ============= Webhook Handler =============



class TelegramUpdate(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
    update_id: int
    message: Optional[Dict[str, Any]] = None
    callback_query: Optional[Dict[str, Any]] = None

@router.post("/webhook")
async def telegram_webhook(
    request: Request,
    db: AsyncSession = Depends(get_db)
):
    """
    Webhook –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
    - –§–æ—Ç–æ –æ—Ç –±—Ä–∏–≥–∞–¥
    - –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    - Callback query –æ—Ç –∫–Ω–æ–ø–æ–∫
    """
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º RAW body –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        body = await request.body()
        logger.info(f"üì• TELEGRAM WEBHOOK RECEIVED")
        logger.info(f"üìã Raw body: {body.decode('utf-8')}")
        
        # –ü–∞—Ä—Å–∏–º JSON
        import json
        data = json.loads(body)
        logger.info(f"üì¶ Parsed data: {json.dumps(data, indent=2, ensure_ascii=False)}")
        
        # –°–æ–∑–¥–∞–µ–º update object
        update = TelegramUpdate(**data)
        logger.info(f"‚úÖ Update parsed successfully. Update ID: {update.update_id}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.message:
            logger.info(f"üí¨ Processing message from update {update.update_id}")
            logger.info(f"üìù Message data: {update.message}")
            await handle_message(update.message, db)
        else:
            logger.warning(f"‚ö†Ô∏è No message in update {update.update_id}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
        if update.callback_query:
            logger.info(f"üîò Processing callback query from update {update.update_id}")
            await handle_callback_query(update.callback_query, db)
        
        logger.info(f"‚úÖ Webhook processed successfully for update {update.update_id}")
        return {"status": "ok"}
        
    except Exception as e:
        logger.error(f"‚ùå ERROR in webhook handler: {e}")
        import traceback
        logger.error(f"üìç Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

async def handle_message(message: Dict[str, Any], db: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    chat_id = message.get("chat", {}).get("id")
    message_id = message.get("message_id")
    from_user = message.get("from", {})
    user_name = from_user.get("first_name", "Unknown")
    user_username = from_user.get("username", "")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    if "photo" in message:
        await handle_photo(message, chat_id, user_name, user_username, db)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    elif "text" in message:
        await handle_text(message, chat_id, user_name, user_username, db)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ timezone –¥–ª—è PostgreSQL TIMESTAMP WITHOUT TIME ZONE)
    log = Log(
        id=str(uuid4()),
        level=LogLevel.INFO,
        category=LogCategory.INTEGRATION,
        message=f"Telegram message from {user_name} (@{user_username})",
        extra_data={
            "chat_id": chat_id,
            "message_id": message_id,
            "user_id": from_user.get("id")
        },
        created_at=datetime.utcnow()
    )
    
    db.add(log)
    await db.commit()

async def handle_photo(
    message: Dict[str, Any],
    chat_id: int,
    user_name: str,
    user_username: str,
    db: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –±—Ä–∏–≥–∞–¥"""
    
    logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {user_name} (@{user_username})")
    
    # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
    photos = message.get("photo", [])
    if not photos:
        return
    
    largest_photo = photos[-1]
    file_id = largest_photo.get("file_id")
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    caption = message.get("caption", "")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    sender_info = f"–ë—Ä–∏–≥–∞–¥–∞: {user_name}"
    if user_username:
        sender_info += f" (@{user_username})"
    
    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É
    success = await telegram_service.forward_photo_to_channel(
        photo_file_id=file_id,
        caption=caption,
        sender_info=sender_info
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
    if success:
        await telegram_service.send_message(
            chat_id=str(chat_id),
            text="‚úÖ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –≥—Ä—É–ø–ø–µ!"
        )
    else:
        await telegram_service.send_message(
            chat_id=str(chat_id),
            text="‚ö†Ô∏è –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ"
        )
    
    # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –¥–æ–º—É)
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ–º–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é

async def handle_text(
    message: Dict[str, Any],
    chat_id: int,
    user_name: str,
    user_username: str,
    db: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    text = message.get("text", "").strip()
    from_user = message.get("from", {})
    user_id = from_user.get("id")
    
    logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}: {text[:50]}...")
    
    # –ö–æ–º–∞–Ω–¥–∞ /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if text == "/start":
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (@{user_username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞. Chat ID: {chat_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .env –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        phone = from_user.get("phone_number")
        
        welcome_msg = f"""üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!

–Ø –±–æ—Ç VasDom AudioBot.

üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ Chat ID: <code>{chat_id}</code>
‚Ä¢ User ID: {user_id}
‚Ä¢ Username: @{user_username if user_username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}

‚úÖ –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!

‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:
‚Ä¢ 8:25 - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞–Ω–µ—Ä–∫–µ
‚Ä¢ 16:55 - AI –∑–≤–æ–Ω–æ–∫ –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏"""
        
        await telegram_service.send_message(
            chat_id=str(chat_id),
            text=welcome_msg
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º chat_id –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        logger.warning(f"üîë IMPORTANT: Chat ID for @{user_username}: {chat_id}")
        return
    
    # –ö–æ–º–∞–Ω–¥—ã
    if text.startswith("/"):
        await handle_command(text, chat_id, user_name, user_username, db)
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Brain –¥–ª—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        await handle_brain_message(text, chat_id, user_name, user_username, db)

async def handle_brain_message(
    text: str,
    chat_id: int,
    user_name: str,
    user_username: str,
    db: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Brain (–µ–¥–∏–Ω—ã–π –º–æ–∑–≥)"""
    
    logger.info(f"üß† Brain processing message: {text[:50]}...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Brain
        ans = await try_fast_answer(text, db=db, return_debug=False)
        
        if ans and ans.get('success'):
            # Brain —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª!
            reply = ans.get('answer') or ans.get('response') or '–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å!'
            rule = ans.get('rule', 'unknown')
            
            logger.info(f"‚úÖ Brain answered with rule: {rule}")
            
            await telegram_service.send_message(
                chat_id=str(chat_id),
                text=reply
            )
        else:
            # Brain –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å - –¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            error_type = ans.get('error') if ans else 'unknown'
            logger.warning(f"‚ö†Ô∏è Brain couldn't answer. Error: {error_type}")
            
            hints_map = {
                'no_address': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: "–ì—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ –ö–∏–±–∞–ª—å—á–∏—á–∞ 5 –æ–∫—Ç—è–±—Ä—å"',
                'no_month': '–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—è—Ü (–æ–∫—Ç—è–±—Ä—å, –Ω–æ—è–±—Ä—å –∏–ª–∏ –¥–µ–∫–∞–±—Ä—å).',
                'house_not_found': '–î–æ–º –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞.',
            }
            
            default_msg = hints_map.get(error_type, 
                f"–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ –ö–∏–±–∞–ª—å—á–∏—á–∞ 5 –æ–∫—Ç—è–±—Ä—å\n"
                f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ç–∞—Ä—à–µ–≥–æ –ë–∏–ª–∏–±–∏–Ω–∞ 6\n"
                f"‚Ä¢ –§–∏–Ω–∞–Ω—Å—ã –∫–æ–º–ø–∞–Ω–∏–∏\n"
                f"‚Ä¢ –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –¥–æ–º–æ–≤?"
            )
            
            await telegram_service.send_message(
                chat_id=str(chat_id),
                text=default_msg
            )
    
    except Exception as e:
        logger.error(f"‚ùå Error in Brain processing: {e}")
        await telegram_service.send_message(
            chat_id=str(chat_id),
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )


async def handle_command(
    command: str,
    chat_id: int,
    user_name: str,
    user_username: str,
    db: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
    
    cmd = command.lower().split()[0]
    
    if cmd == "/start":
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!

–Ø –±–æ—Ç VasDom AudioBot.

üì∏ –û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ —Ñ–æ—Ç–æ —Å –æ–±—ä–µ–∫—Ç–æ–≤ - —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫—É—é –∏—Ö –≤ –≥—Ä—É–ø–ø–µ.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–º–æ—â—å
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        """
        await telegram_service.send_message(str(chat_id), welcome_text)
    
    elif cmd == "/help":
        help_text = """
üìñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

<b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ:</b>
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (–∞–¥—Ä–µ—Å –¥–æ–º–∞ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        await telegram_service.send_message(str(chat_id), help_text)
    
    elif cmd == "/status":
        # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        status_text = """
‚úÖ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
üì∏ –§–æ—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è
üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞

üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è:
‚Ä¢ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ: ~0
‚Ä¢ –§–æ—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ~0
        """
        await telegram_service.send_message(str(chat_id), status_text)

async def handle_callback_query(callback: Dict[str, Any], db: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    
    query_id = callback.get("id")
    data = callback.get("data", "")
    chat_id = callback.get("message", {}).get("chat", {}).get("id")
    
    logger.info(f"üîò Callback query: {data}")
    
    # TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∫–Ω–æ–ø–∫–∞–º
    # –ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞—á, –≤—ã–±–æ—Ä –¥–æ–º–∞ –∏ —Ç.–¥.

@router.get("/webhook-info")
async def get_webhook_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook"""
    
    info = await telegram_service.get_webhook_info()
    return info

@router.post("/set-webhook")
async def set_webhook(webhook_url: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞"""
    
    success = await telegram_service.set_webhook(webhook_url)
    
    if success:
        return {"message": "Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "url": webhook_url}
    else:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")

@router.post("/send-notification")
async def send_notification(
    chat_id: str,
    text: str,
    parse_mode: str = "HTML"
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    
    success = await telegram_service.send_message(chat_id, text, parse_mode)
    
    if success:
        return {"message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}
    else:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
