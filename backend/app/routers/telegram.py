import logging
from fastapi import APIRouter, HTTPException, Depends
from ..models.telegram import TelegramUpdate
from ..services.telegram_service import TelegramService
from ..services.ai_service import AIService
from ..services.bitrix_service import BitrixService
from ..security import telegram_security_check, optional_auth
from ..config.settings import TELEGRAM_BOT_TOKEN, TELEGRAM_WEBHOOK_URL, BITRIX24_WEBHOOK_URL

logger = logging.getLogger(__name__)
router = APIRouter(tags=["telegram"])

# Initialize services
telegram_service = TelegramService()
ai_service = AIService()
bitrix_service = BitrixService(BITRIX24_WEBHOOK_URL)

@router.post("/telegram/webhook")
@router.post("/api/telegram/webhook")
async def telegram_webhook(
    update: TelegramUpdate,  # –ó–∞–º–µ–Ω–∏–ª dict –Ω–∞ TelegramUpdate –º–æ–¥–µ–ª—å
    _security: bool = Depends(telegram_security_check)
):
    """Telegram webhook endpoint —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–¥–∞—á –¥–ª—è Bitrix24"""
    try:
        logger.info(f"üì± Telegram webhook received: {update.update_id}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not update.has_text_message():
            raise HTTPException(
                status_code=400, 
                detail="Invalid update: missing message or text content"
            )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = update.extract_message_data()
        if not message_data:
            raise HTTPException(
                status_code=400,
                detail="Invalid update: cannot extract message data"
            )
        
        chat_id = message_data["chat_id"]
        text = message_data["text"]
        user_name = message_data["user_name"]
        
        logger.info(f"üí¨ Message from {user_name} (chat {chat_id}): {text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –≤ Bitrix24
        if text.lower().startswith('/–∑–∞–¥–∞—á–∞ ') or text.lower().startswith('/task '):
            return await handle_bitrix_task_creation(text, chat_id, user_name)
        
        # –û–±—ã—á–Ω—ã–π AI –æ—Ç–≤–µ—Ç
        ai_response = await ai_service.process_message(text, f"telegram_{chat_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram
        if chat_id:
            success = await telegram_service.send_message(chat_id, ai_response)
            if not success:
                logger.error(f"‚ùå Failed to send response to Telegram chat {chat_id}")
                return {
                    "status": "failed",
                    "message": "Message processed but failed to send response",
                    "error": "Telegram API error",
                    "chat_id": chat_id
                }
            
            logger.info(f"‚úÖ Response sent to Telegram chat {chat_id}")
                
        return {
            "status": "processed",
            "message": "Message processed and response sent",
            "chat_id": chat_id,
            "user_message": text,
            "ai_response": ai_response[:100] + "..." if len(ai_response) > 100 else ai_response
        }
        
    except HTTPException:
        raise  # Re-raise HTTP exceptions
    except Exception as e:
        logger.error(f"‚ùå Telegram webhook error: {e}")
        return {
            "status": "failed", 
            "message": "Internal server error",
            "error": str(e)
        }

async def handle_bitrix_task_creation(text: str, chat_id: int, user_name: str) -> dict:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –≤ Bitrix24 —á–µ—Ä–µ–∑ Telegram"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
        if text.lower().startswith('/–∑–∞–¥–∞—á–∞ '):
            task_text = text[8:].strip()  # –£–±–∏—Ä–∞–µ–º '/–∑–∞–¥–∞—á–∞ '
        elif text.lower().startswith('/task '):
            task_text = text[6:].strip()  # –£–±–∏—Ä–∞–µ–º '/task '
        else:
            task_text = text.strip()
        
        if not task_text:
            await telegram_service.send_message(
                chat_id, 
                "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.\n–ü—Ä–∏–º–µ—Ä: /–∑–∞–¥–∞—á–∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–±–æ—Ä–∫—É –≤ –¥–æ–º–µ –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 112"
            )
            return {"status": "failed", "message": "Empty task text"}
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Bitrix24
        success = await create_bitrix_task(task_text, user_name)
        
        if success:
            response_text = f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Bitrix24!\n\nüìù –¢–µ–∫—Å—Ç: {task_text}\nüë§ –ê–≤—Ç–æ—Ä: {user_name}"
            await telegram_service.send_message(chat_id, response_text)
            
            return {
                "status": "processed",
                "message": "Bitrix24 task created successfully",
                "task_text": task_text,
                "chat_id": chat_id
            }
        else:
            await telegram_service.send_message(
                chat_id, 
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ Bitrix24. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return {"status": "failed", "message": "Failed to create Bitrix24 task"}
            
    except Exception as e:
        logger.error(f"‚ùå Bitrix task creation error: {e}")
        await telegram_service.send_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bitrix24."
        )
        return {"status": "failed", "message": str(e)}

async def create_bitrix_task(task_text: str, user_name: str) -> bool:
    """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Bitrix24 –∏–∑ Telegram"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ —Ç–µ–∫—Å—Ç—É –∑–∞–¥–∞—á–∏
        responsible_id = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ –∞–¥—Ä–µ—Å—É
        if "–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è" in task_text.lower() or "—Ü–µ–Ω—Ç—Ä" in task_text.lower():
            responsible_id = 1  # 1 –±—Ä–∏–≥–∞–¥–∞
        elif "—á–∏–∂–µ–≤—Å–∫–æ–≥–æ" in task_text.lower() or "–Ω–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π" in task_text.lower():
            responsible_id = 2  # 2 –±—Ä–∏–≥–∞–¥–∞
        # –∏ —Ç.–¥.
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        title = f"Telegram: {task_text[:50]}{'...' if len(task_text) > 50 else ''}"
        description = f"–ó–∞–¥–∞—á–∞ –æ—Ç {user_name} —á–µ—Ä–µ–∑ Telegram:\n\n{task_text}"
        
        result = await bitrix_service.create_task(
            title=title,
            description=description,
            responsible_id=responsible_id
        )
        
        return result.get("status") == "success"
        
    except Exception as e:
        logger.error(f"‚ùå Create Bitrix task error: {e}")
        return False

@router.get("/api/telegram/status")
async def telegram_status():
    """Telegram bot status —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    status = {
        "status": "configured" if TELEGRAM_BOT_TOKEN else "missing_token",
        "bot_token": "present" if TELEGRAM_BOT_TOKEN else "missing",
        "webhook_url": TELEGRAM_WEBHOOK_URL or 'not_configured',
        "message": "Telegram bot –≥–æ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
        "features": {
            "ai_chat": True,
            "bitrix_tasks": True if BITRIX24_WEBHOOK_URL else False
        }
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
    if TELEGRAM_BOT_TOKEN:
        bot_info = await telegram_service.get_bot_info()
        if bot_info:
            status["bot_info"] = bot_info
            status["connection"] = "‚úÖ Connected to Telegram API"
            logger.info(f"‚úÖ Telegram bot connected: @{bot_info.get('username')}")
        else:
            status["connection"] = "‚ùå Connection failed"
    
    return status

async def handle_brigades_info(chat_id: int) -> dict:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∏–≥–∞–¥–∞—Ö"""
    try:
        brigades_info = """
üè¢ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∏–≥–∞–¥–∞—Ö**

üë• **1-—è –±—Ä–∏–≥–∞–¥–∞ (–¶–µ–Ω—Ç—Ä)**
‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: –ò–≤–∞–Ω–æ–≤ –ò.–ò.
‚Ä¢ –†–∞–π–æ–Ω: –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è, –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX

üë• **2-—è –±—Ä–∏–≥–∞–¥–∞ (–ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π)**
‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: –ü–µ—Ç—Ä–æ–≤ –ü.–ü.
‚Ä¢ –†–∞–π–æ–Ω: –ß–∏–∂–µ–≤—Å–∫–æ–≥–æ, –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX

üìû **–î–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–∞—è**: +7 (XXX) XXX-XX-XX
        """
        
        await telegram_service.send_message(chat_id, brigades_info)
        return {"status": "processed", "message": "Brigades info sent"}
        
    except Exception as e:
        logger.error(f"‚ùå Brigades info error: {e}")
        await telegram_service.send_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∏–≥–∞–¥–∞—Ö."
        )
        return {"status": "failed", "message": str(e)}

async def handle_statistics(chat_id: int) -> dict:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        stats_info = """
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü**

‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏**: 45
‚è≥ **–í —Ä–∞–±–æ—Ç–µ**: 12
üìã **–í—Å–µ–≥–æ –∑–∞–¥–∞—á**: 57

üè† **–ü–æ –¥–æ–º–∞–º**:
‚Ä¢ –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è: 23 –∑–∞–¥–∞—á–∏
‚Ä¢ –ß–∏–∂–µ–≤—Å–∫–æ–≥–æ: 18 –∑–∞–¥–∞—á
‚Ä¢ –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π: 16 –∑–∞–¥–∞—á

üìà **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**: 89%
        """
        
        await telegram_service.send_message(chat_id, stats_info)
        return {"status": "processed", "message": "Statistics sent"}
        
    except Exception as e:
        logger.error(f"‚ùå Statistics error: {e}")
        await telegram_service.send_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        )
        return {"status": "failed", "message": str(e)}

async def handle_houses_list(chat_id: int) -> dict:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–º–æ–≤"""
    try:
        houses_info = """
üè† **–°–ø–∏—Å–æ–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–æ–≤**

üè¢ **–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω**:
‚Ä¢ –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 112
‚Ä¢ –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 114
‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è 45

üè¢ **–ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω**:
‚Ä¢ –ß–∏–∂–µ–≤—Å–∫–æ–≥–æ 23
‚Ä¢ –ß–∏–∂–µ–≤—Å–∫–æ–≥–æ 25
‚Ä¢ –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π 67
‚Ä¢ –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π 69

üìû –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–º–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
        """
        
        await telegram_service.send_message(chat_id, houses_info)
        return {"status": "processed", "message": "Houses list sent"}
        
    except Exception as e:
        logger.error(f"‚ùå Houses list error: {e}")
        await telegram_service.send_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–º–æ–≤."
        )
        return {"status": "failed", "message": str(e)}