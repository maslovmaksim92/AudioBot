"""
–†–æ—É—Ç–µ—Ä –¥–ª—è Telegram webhook - –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è
"""
from fastapi import APIRouter, Request, HTTPException
from typing import Dict, Any
import logging
import json
import os

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/telegram-webhook", tags=["Telegram"])

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ –ë–î)
telegram_commands = {}

@router.post("/")
async def telegram_webhook(request: Request):
    """
    Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
    """
    try:
        data = await request.json()
        logger.info(f"üì± Telegram webhook received: {json.dumps(data, ensure_ascii=False)}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'message' in data:
            message = data['message']
            chat_id = message.get('chat', {}).get('id')
            text = message.get('text', '')
            from_user = message.get('from', {})
            user_id = from_user.get('id')
            
            logger.info(f"üí¨ Message from {from_user.get('username', 'unknown')}: {text}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–¥–ª—è –±—Ä–∏–≥–∞–¥)
            if 'photo' in message:
                await handle_telegram_photo(chat_id, user_id, message['photo'], from_user)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            elif text.startswith('/'):
                await handle_telegram_command(chat_id, user_id, text, from_user)
            else:
                await handle_telegram_message(chat_id, text, from_user)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (inline buttons)
        elif 'callback_query' in data:
            callback = data['callback_query']
            chat_id = callback.get('message', {}).get('chat', {}).get('id')
            user_id = callback.get('from', {}).get('id')
            callback_data = callback.get('data', '')
            callback_query_id = callback.get('id')
            
            logger.info(f"üîò Callback from user {user_id}: {callback_data}")
            
            await handle_telegram_callback(chat_id, user_id, callback_data, callback_query_id)
        
        return {"ok": True}
    
    except Exception as e:
        logger.error(f"‚ùå Error processing telegram webhook: {e}")
        raise HTTPException(status_code=500, detail=str(e))


async def handle_telegram_command(chat_id: int, user_id: int, command: str, user: Dict[str, Any]):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—Ä–∏–≥–∞–¥:
    - /start - –°–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    - /done - –ó–∞–≤–µ—Ä—à–∏—Ç—å —É–±–æ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    
    –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
    - /help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    - /agents - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    - /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    """
    import httpx
    from backend.app.services.telegram_cleaning_bot import (
        handle_start_command,
        handle_done_command
    )
    
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        return
    
    response_text = ""
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±—Ä–∏–≥–∞–¥
    if command.startswith('/start'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if command.startswith('/start AUTH_'):
            # –≠—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            auth_code = command.replace('/start AUTH_', '').strip()
            await handle_auth_request(chat_id, user_id, auth_code, user)
            return
        else:
            # –û–±—ã—á–Ω—ã–π /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤
            await handle_start_command(chat_id, user_id, db_session=None)
            return
    
    elif command == '/done':
        await handle_done_command(chat_id, user_id, db_session=None)
        return
    
    # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    elif command == '/help':
        response_text = """üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/agents - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∫–æ–º–∞–Ω–¥–µ! üì®"""
    
    elif command == '/agents':
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
        try:
            import asyncpg
            db_url = os.environ.get('DATABASE_URL', '').replace('postgresql+asyncpg://', 'postgresql://')
            conn = await asyncpg.connect(db_url)
            
            rows = await conn.fetch("SELECT name, status, type FROM agents WHERE status = 'active' LIMIT 5")
            await conn.close()
            
            if rows:
                response_text = "ü§ñ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:\n\n"
                for row in rows:
                    response_text += f"‚Ä¢ {row['name']} ({row['type']})\n"
            else:
                response_text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"
        except Exception as e:
            response_text = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}"
    
    elif command == '/status':
        response_text = "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚Ä¢ Backend: OK\n‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK\n‚Ä¢ Scheduler: OK"
    
    elif command == '/ping':
        response_text = "üèì Pong!"
    
    else:
        response_text = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}\n\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    if response_text:
        try:
            async with httpx.AsyncClient() as client:
                await client.post(
                    f"https://api.telegram.org/bot{bot_token}/sendMessage",
                    json={
                        'chat_id': chat_id,
                        'text': response_text,
                        'parse_mode': 'HTML'
                    }
                )
        except Exception as e:
            logger.error(f"‚ùå Error sending telegram response: {e}")


async def handle_telegram_message(chat_id: int, text: str, user: Dict[str, Any]):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥)
    """
    import httpx
    
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info(f"üìù Regular message from {user.get('username')}: {text}")
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å AI –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    response_text = f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø –ø–µ—Ä–µ–¥–∞–ª –µ–≥–æ –∫–æ–º–∞–Ω–¥–µ. üì¨"
    
    try:
        async with httpx.AsyncClient() as client:
            await client.post(
                f"https://api.telegram.org/bot{bot_token}/sendMessage",
                json={
                    'chat_id': chat_id,
                    'text': response_text
                }
            )
    except Exception as e:
        logger.error(f"‚ùå Error sending telegram response: {e}")


@router.post("/set-webhook")
async def set_telegram_webhook():
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –¥–ª—è Telegram –±–æ—Ç–∞
    """
    try:
        import httpx
        
        bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            raise HTTPException(status_code=500, detail="TELEGRAM_BOT_TOKEN not configured")
        
        # URL webhook –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ Render)
        webhook_url = os.environ.get('WEBHOOK_URL', 'https://audiobot-qci2.onrender.com')
        full_webhook_url = f"{webhook_url}/api/telegram-webhook/"
        
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"https://api.telegram.org/bot{bot_token}/setWebhook",
                json={'url': full_webhook_url}
            )
            
            result = response.json()
            
            if result.get('ok'):
                logger.info(f"‚úÖ Telegram webhook set to: {full_webhook_url}")
                return {
                    "success": True,
                    "message": "Webhook registered successfully",
                    "webhook_url": full_webhook_url
                }
            else:
                logger.error(f"‚ùå Failed to set webhook: {result}")
                raise HTTPException(status_code=500, detail=result.get('description'))
    
    except Exception as e:
        logger.error(f"‚ùå Error setting webhook: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/webhook-info")
async def get_webhook_info():
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook
    """
    try:
        import httpx
        
        bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            raise HTTPException(status_code=500, detail="TELEGRAM_BOT_TOKEN not configured")
        
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"https://api.telegram.org/bot{bot_token}/getWebhookInfo"
            )
            
            return response.json()
    
    except Exception as e:
        logger.error(f"‚ùå Error getting webhook info: {e}")
        raise HTTPException(status_code=500, detail=str(e))



async def handle_telegram_callback(chat_id: int, user_id: int, callback_data: str, callback_query_id: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (inline buttons)
    """
    from backend.app.services.telegram_cleaning_bot import handle_house_selection
    
    logger.info(f"[telegram_webhook] Callback: {callback_data} from user {user_id}")
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–º–∞
        if callback_data.startswith('house_'):
            house_id = callback_data.replace('house_', '')
            await handle_house_selection(chat_id, user_id, house_id, callback_query_id, db_session=None)
        else:
            logger.warning(f"Unknown callback_data: {callback_data}")
    
    except Exception as e:
        logger.error(f"[telegram_webhook] Error in handle_telegram_callback: {e}")


async def handle_telegram_photo(chat_id: int, user_id: int, photos: list, user: Dict[str, Any]):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –±—Ä–∏–≥–∞–¥
    """
    from backend.app.services.telegram_cleaning_bot import handle_photo
    
    try:
        # –ë–µ—Ä—ë–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        largest_photo = max(photos, key=lambda p: p.get('file_size', 0))
        file_id = largest_photo.get('file_id')
        
        logger.info(f"[telegram_webhook] Photo received from user {user_id}, file_id: {file_id}")
        
        await handle_photo(chat_id, user_id, file_id)
    
    except Exception as e:
        logger.error(f"[telegram_webhook] Error in handle_telegram_photo: {e}")

