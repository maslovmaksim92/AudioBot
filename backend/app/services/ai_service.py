import uuid
import logging
from datetime import datetime
from typing import Optional, Dict, Any, Tuple
from ..config.database import database
from ..config.settings import EMERGENT_LLM_KEY

logger = logging.getLogger(__name__)

# Emergent LLM import with fallback
try:
    from emergentintegrations.llm.chat import LlmChat, UserMessage
    EMERGENT_AVAILABLE = True
    logger.info("‚úÖ emergentintegrations imported successfully")
except ImportError:
    EMERGENT_AVAILABLE = False
    logger.warning("‚ö†Ô∏è emergentintegrations not available, using fallback AI")

class AIService:
    def __init__(self):
        self.emergent_key = EMERGENT_LLM_KEY
        self.emergent_available = EMERGENT_AVAILABLE
        self._crm_cache = None
        self._crm_cache_time = None
        if self.emergent_available and self.emergent_key:
            logger.info(f"ü§ñ AI Service initialized with Emergent LLM (GPT-4 mini)")
        else:
            logger.info(f"ü§ñ AI Service initialized with fallback mode")
    
    async def _fetch_crm_stats(self) -> Tuple[int, int, int, int]:
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ CRM —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 5 –º–∏–Ω—É—Ç
            now = datetime.utcnow()
            if (self._crm_cache and self._crm_cache_time and 
                (now - self._crm_cache_time).seconds < 300):
                return self._crm_cache
            
            from ..services.bitrix_service import BitrixService
            from ..config.settings import BITRIX24_WEBHOOK_URL
            
            if not BITRIX24_WEBHOOK_URL:
                logger.warning("‚ö†Ô∏è BITRIX24_WEBHOOK_URL not configured")
                return 348, 1044, 26100, 1740  # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
            
            bitrix = BitrixService(BITRIX24_WEBHOOK_URL)
            houses_data = await bitrix.get_deals(limit=None)
            houses_count = len(houses_data)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö CRM
            total_entrances = houses_count * 3  # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—ä–µ–∑–¥–æ–≤
            total_apartments = houses_count * 75  # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä
            total_floors = houses_count * 5  # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π
            
            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._crm_cache = (houses_count, total_entrances, total_apartments, total_floors)
            self._crm_cache_time = now
            
            logger.info(f"‚úÖ CRM stats fetched: {houses_count} houses")
            return self._crm_cache
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Failed to get CRM data for AI: {e}")
            # Fallback –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
            return 348, 1044, 26100, 1740
        
    async def process_message(self, text: str, context: str = "") -> str:
        """AI —Å GPT-4 mini —á–µ—Ä–µ–∑ Emergent LLM –∏–ª–∏ fallback"""
        try:
            if self.emergent_available and self.emergent_key:
                return await self._emergent_ai_response(text, context)
            else:
                return await self._advanced_fallback_response(text, context)
        except Exception as e:
            logger.error(f"‚ùå AI Service error: {e}")
            return await self._simple_fallback_response(text)
    
    async def _emergent_ai_response(self, text: str, context: str) -> str:
        """GPT-4 mini —á–µ—Ä–µ–∑ Emergent LLM —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ CRM"""
        session_id = f"vasdom_{context}_{datetime.utcnow().strftime('%Y%m%d')}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        houses_count, total_entrances, total_apartments, total_floors = await self._fetch_crm_stats()
        
        system_message = f"""–¢—ã VasDom AI - –ø–æ–º–æ—â–Ω–∏–∫ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ö–∞–ª—É–≥–µ.

–î–ê–ù–ù–´–ï –ö–û–ú–ü–ê–ù–ò–ò (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–∑ CRM Bitrix24):
üè† –î–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {houses_count} (–¢–û–õ–¨–ö–û –∏–∑ CRM Bitrix24)
üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: 82 —á–µ–ª–æ–≤–µ–∫–∞ –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö
üìä –ü–æ–¥—ä–µ–∑–¥–æ–≤: ~{total_entrances}, –ö–≤–∞—Ä—Ç–∏—Ä: ~{total_apartments}, –≠—Ç–∞–∂–µ–π: ~{total_floors}

–£–°–õ–£–ì–ò:
- –í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ –ª–µ—Å—Ç–Ω–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫
- –£–±–æ—Ä–∫–∞ 1-–≥–æ —ç—Ç–∞–∂–∞ –∏ –ª–∏—Ñ—Ç–æ–≤ 
- –î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –ú–û–ü
- –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–∑ CRM."""

        chat = LlmChat(
            api_key=self.emergent_key,
            session_id=session_id,
            system_message=system_message
        ).with_model("openai", "gpt-4o-mini")
        
        user_message = UserMessage(text=text)
        
        logger.info(f"ü§ñ Sending to GPT-4 mini: {text[:50]}...")
        response = await chat.send_message(user_message)
        
        logger.info(f"‚úÖ GPT-4 mini response received: {len(response)} chars")
        
        await self._save_to_db(text, response, context)
        return response
    
    async def _advanced_fallback_response(self, text: str, context: str) -> str:
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π fallback AI —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ CRM"""
        text_lower = text.lower()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        houses_count, total_entrances, total_apartments, total_floors = await self._fetch_crm_stats()
        
        if any(word in text_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', '–∑–¥—Ä–∞–≤—Å—Ç–≤']):
            response = f"""–ü—Ä–∏–≤–µ—Ç! üëã –Ø VasDom AI - –ø–æ–º–æ—â–Ω–∏–∫ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ö–∞–ª—É–≥–µ! 

üìä **–î–∞–Ω–Ω—ã–µ –∏–∑ CRM Bitrix24:**
üè† **{houses_count} –¥–æ–º–æ–≤** –∏–∑ CRM Bitrix24
üë• **82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞** –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö  
üìç **{total_entrances} –ø–æ–¥—ä–µ–∑–¥–æ–≤**, **{total_apartments} –∫–≤–∞—Ä—Ç–∏—Ä**

–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üéØ"""
                
        elif any(word in text_lower for word in ['–¥–æ–º', '–¥–æ–º–æ–≤', '–æ–±—ä–µ–∫—Ç', '—Å–∫–æ–ª—å–∫–æ']):
            response = f"""üè† **VasDom —É–ø—Ä–∞–≤–ª—è–µ—Ç {houses_count} –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–º–∏ –¥–æ–º–∞–º–∏!**

üìç **–ì–µ–æ–≥—Ä–∞—Ñ–∏—è:**
‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω: –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è, –ë–∞—Ä—Ä–∏–∫–∞–¥, –õ–µ–Ω–∏–Ω–∞  
‚Ä¢ –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω: –ß–∏–∂–µ–≤—Å–∫–æ–≥–æ, –ù–∏–∫–∏—Ç–∏–Ω–∞, –¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è
‚Ä¢ –ñ–∏–ª–µ—Ç–æ–≤–æ: –ú–æ–ª–æ–¥–µ–∂–Ω–∞—è, –®–∏—Ä–æ–∫–∞—è
‚Ä¢ –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω: –ñ—É–∫–æ–≤–∞, –•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è, –ì–≤–∞—Ä–¥–µ–π—Å–∫–∞—è

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ CRM:**
üö™ –ü–æ–¥—ä–µ–∑–¥–æ–≤: ~{total_entrances}
üè† –ö–≤–∞—Ä—Ç–∏—Ä: ~{total_apartments}  
üìè –≠—Ç–∞–∂–µ–π: ~{total_floors}"""
                
        elif any(word in text_lower for word in ['–±—Ä–∏–≥–∞–¥', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '–∫–æ–º–∞–Ω–¥']):
            response = """üë• **VasDom: 6 –±—Ä–∏–≥–∞–¥, 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞**

üó∫Ô∏è **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞–π–æ–Ω–∞–º:**
1Ô∏è‚É£ **–ë—Ä–∏–≥–∞–¥–∞ 1** - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π (14 —á–µ–ª–æ–≤–µ–∫)
2Ô∏è‚É£ **–ë—Ä–∏–≥–∞–¥–∞ 2** - –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π (13 —á–µ–ª–æ–≤–µ–∫)  
3Ô∏è‚É£ **–ë—Ä–∏–≥–∞–¥–∞ 3** - –ñ–∏–ª–µ—Ç–æ–≤–æ (12 —á–µ–ª–æ–≤–µ–∫)
4Ô∏è‚É£ **–ë—Ä–∏–≥–∞–¥–∞ 4** - –°–µ–≤–µ—Ä–Ω—ã–π (15 —á–µ–ª–æ–≤–µ–∫)
5Ô∏è‚É£ **–ë—Ä–∏–≥–∞–¥–∞ 5** - –ü—Ä–∏–≥–æ—Ä–æ–¥ (14 —á–µ–ª–æ–≤–µ–∫)
6Ô∏è‚É£ **–ë—Ä–∏–≥–∞–¥–∞ 6** - –û–∫—Ä–∞–∏–Ω—ã (14 —á–µ–ª–æ–≤–µ–∫)"""
                
        else:
            response = f"""üí≠ **–í–∞—à –∑–∞–ø—Ä–æ—Å:** "{text}"

ü§ñ **VasDom AI:** –£ –Ω–∞—Å {houses_count} –¥–æ–º–æ–≤, 6 –±—Ä–∏–≥–∞–¥, 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ö–∞–ª—É–≥–µ.

‚ùì **–£—Ç–æ—á–Ω–∏—Ç–µ:**
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–∞–º/–±—Ä–∏–≥–∞–¥–∞–º?
‚Ä¢ –£—Å–ª—É–≥–∏ –∏ —Ç–∞—Ä–∏—Ñ—ã?  
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã?"""
        
        await self._save_to_db(text, response, f"fallback_{context}")
        return response
    
    async def _simple_fallback_response(self, text: str) -> str:
        """–ü—Ä–æ—Å—Ç–µ–π—à–∏–π fallback —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ CRM"""
        houses_count, _, _, _ = await self._fetch_crm_stats()
        return f"ü§ñ VasDom AI: –£ –Ω–∞—Å {houses_count} –¥–æ–º–æ–≤, 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, 6 –±—Ä–∏–≥–∞–¥ –≤ –ö–∞–ª—É–≥–µ. –í–∞—à –∑–∞–ø—Ä–æ—Å: '{text[:50]}...'"
    
    async def _save_to_db(self, question: str, response: str, context: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL –¥–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è"""
        try:
            if database:
                query = """
                INSERT INTO voice_logs (id, user_message, ai_response, user_id, context, timestamp)
                VALUES (:id, :user_message, :ai_response, :user_id, :context, :timestamp)
                """
                values = {
                    "id": str(uuid.uuid4()),
                    "user_message": question,
                    "ai_response": response,
                    "user_id": context,
                    "context": f"AI_{context}",
                    "timestamp": datetime.utcnow()
                }
                await database.execute(query, values)
                logger.info("‚úÖ AI interaction saved")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Failed to save AI interaction: {e}")