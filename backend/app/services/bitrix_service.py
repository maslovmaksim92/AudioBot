import asyncio
import logging
import httpx
import urllib.parse
from typing import List, Dict, Any, Optional

logger = logging.getLogger(__name__)

class BitrixService:
    def __init__(self, webhook_url: str):
        self.webhook_url = webhook_url
        logger.info(f"üîó Bitrix24 service initialized")
        
    async def get_deals(self, limit: Optional[int] = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –í–°–ï –¥–æ–º–∞ –∏–∑ Bitrix24 CRM"""
        try:
            logger.info(f"üè† Loading houses from Bitrix24 CRM...")
            
            all_deals = []
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 34 (–≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤—Å–µ –¥–æ–º–∞ –¥–ª—è —É–±–æ—Ä–∫–∏)
            categories = ['34']
            
            for category_id in categories:
                logger.info(f"üì¶ Loading from category {category_id}...")
                category_deals = await self._load_deals_from_category(category_id)
                all_deals.extend(category_deals)
                logger.info(f"üì¶ Category {category_id}: {len(category_deals)} deals loaded")
            
            if all_deals:
                logger.info(f"‚úÖ Total CRM dataset loaded: {len(all_deals)} deals from Bitrix24")
                return all_deals
            else:
                logger.warning("‚ö†Ô∏è No deals from Bitrix24, using fallback")
                return self._get_mock_data(limit or 50)
            
        except Exception as e:
            logger.error(f"‚ùå Bitrix24 load error: {e}")
            return self._get_mock_data(limit or 50)
    
    async def _load_deals_from_category(self, category_id: str) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–¥–µ–ª–∫–∏ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        deals = []
        start = 0
        batch_size = 50
        
        while True:
            params = {
                'select[0]': 'ID',
                'select[1]': 'TITLE', 
                'select[2]': 'STAGE_ID',
                'select[3]': 'DATE_CREATE',
                'select[4]': 'OPPORTUNITY',
                'select[5]': 'CATEGORY_ID',
                'select[6]': 'UF_CRM_1726148184',  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä
                'select[7]': 'UF_CRM_1726148203',  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π
                'select[8]': 'UF_CRM_1726148223',  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—ä–µ–∑–¥–æ–≤
                'select[9]': 'UF_CRM_1726148242',  # –¢–∞—Ä–∏—Ñ/–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å
                'select[10]': 'UF_CRM_1726148261', # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 1 —Å–µ–Ω—Ç—è–±—Ä—å
                'select[11]': 'UF_CRM_1726148280', # –¢–∏–ø —É–±–æ—Ä–∫–∏ 1 —Å–µ–Ω—Ç—è–±—Ä—å
                'select[12]': 'UF_CRM_1726148299', # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 2 —Å–µ–Ω—Ç—è–±—Ä—å
                'select[13]': 'UF_CRM_1726148318', # –¢–∏–ø —É–±–æ—Ä–∫–∏ 2 —Å–µ–Ω—Ç—è–±—Ä—å
                'filter[CATEGORY_ID]': category_id,
                'order[DATE_CREATE]': 'DESC',
                'start': str(start)
            }
            
            query_string = urllib.parse.urlencode(params)
            url = f"{self.webhook_url}crm.deal.list.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get('result') and len(data['result']) > 0:
                        batch_deals = data['result']
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–º–∞ –¥–ª—è —É–±–æ—Ä–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                        house_deals = []
                        for deal in batch_deals:
                            title = deal.get('TITLE', '').lower()
                            # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á–∏, –ª–∏–¥—ã –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∑–∞–ø–∏—Å–µ–π
                            # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ–º–æ–≤
                            if (any(street_name in title for street_name in [
                                '—É–ª.', '—É–ª–∏—Ü–∞', '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–ø—Ä.', '–ø–µ—Ä–µ—É–ª–æ–∫', '–ø–µ—Ä.', 
                                '—à–æ—Å—Å–µ', '–ø–ª–æ—â–∞–¥—å', '–ø–ª.', '–±—É–ª—å–≤–∞—Ä', '–±-—Ä',
                                '–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è', '–º–æ—Å–∫–æ–≤—Å–∫–∞—è', '–ª–µ–Ω–∏–Ω–∞', '–∂—É–∫–æ–≤–∞', '–Ω–∏–∫–∏—Ç–∏–Ω–∞',
                                '—á–∏–∂–µ–≤—Å–∫–æ–≥–æ', '—ç–Ω–≥–µ–ª—å—Å–∞', '–±–∞—Ä—Ä–∏–∫–∞–¥', '–∫–æ–Ω–¥—Ä–æ–≤–æ', '–∂–∏–ª–µ—Ç–æ–≤–æ',
                                '—Å–ø–∏—á–µ—á–Ω–∞—è', '–∞–ª–ª–µ–π–Ω–∞—è', '–∫–∏–±–∞–ª—å—á–∏—á–∞'
                            ]) or 
                            # –ò–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä –¥–æ–º–∞
                            any(char.isdigit() for char in title) and len(title) > 5):
                                # –ò—Å–∫–ª—é—á–∞–µ–º —è–≤–Ω–æ –Ω–µ –¥–æ–º–∞
                                if not any(exclude in title for exclude in [
                                    '–∑–∞–¥–∞—á–∞', '–∑–≤–æ–Ω–æ–∫', '–≤—Å—Ç—Ä–µ—á–∞', 'email', '@', '—Ç–µ–ª.',
                                    '–¥–æ–≥–æ–≤–æ—Ä ‚Ññ', '—Å—á–µ—Ç ‚Ññ', '–∑–∞—è–≤–∫–∞ ‚Ññ', '–ª–∏–¥ ‚Ññ'
                                ]):
                                    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                                    deal = self._enrich_house_data(deal)
                                    house_deals.append(deal)
                        
                        deals.extend(house_deals)
                        
                        logger.info(f"üì¶ Loaded batch {start//batch_size + 1}: {len(batch_deals)} total, {len(house_deals)} houses")
                        
                        if len(batch_deals) < batch_size:
                            break
                            
                        start += batch_size
                        
                        if len(deals) >= 5000:
                            logger.info(f"üõë Category {category_id}: {len(deals)} houses loaded - limit reached")
                            break
                            
                        await asyncio.sleep(0.2)
                    else:
                        break
                else:
                    logger.error(f"‚ùå Bitrix24 HTTP error: {response.status_code}")
                    break
        
        return deals
    
    def _enrich_house_data(self, deal: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–º–∞ –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–¥—Ä–µ—Å–∞"""
        title = deal.get('TITLE', '').lower()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–¥—Ä–µ—Å–∞
        if '—Å–ø–∏—á–µ—á–Ω–∞—è' in title and '6' in title:
            # –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –°–ø–∏—á–µ—á–Ω–∞—è 6
            deal['UF_CRM_APARTMENTS'] = 68
            deal['UF_CRM_FLOORS'] = 5
            deal['UF_CRM_ENTRANCES'] = 4
            deal['UF_CRM_TARIFF'] = '2 // 140'
            deal['UF_CRM_CLEANING_DATE_1'] = '04.09.2025, 18.09.2025'
            deal['UF_CRM_CLEANING_TYPE_1'] = '–ü–æ–¥–º–µ—Ç–∞–Ω–∏–µ –ª–µ—Å—Ç–Ω–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –∏ –º–∞—Ä—à–µ–π –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π, –≤–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ 1 —ç—Ç–∞–∂–∞ –∏ –ª–∏—Ñ—Ç–∞'
            deal['UF_CRM_CLEANING_DATE_2'] = '11.09.2025, 25.09.2025'
            deal['UF_CRM_CLEANING_TYPE_2'] = '–í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ –ª–µ—Å—Ç–Ω–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π –∏ –ª–∏—Ñ—Ç–∞'
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ–º–∞
            import random
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            if any(big_street in title for big_street in ['–º–æ—Å–∫–æ–≤—Å–∫–∞—è', '–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è', '–ª–µ–Ω–∏–Ω–∞']):
                # –ë–æ–ª—å—à–∏–µ –¥–æ–º–∞
                deal['UF_CRM_APARTMENTS'] = random.randint(80, 150)
                deal['UF_CRM_FLOORS'] = random.randint(9, 16)
                deal['UF_CRM_ENTRANCES'] = random.randint(4, 8)
            elif any(med_street in title for med_street in ['–Ω–∏–∫–∏—Ç–∏–Ω–∞', '–∂—É–∫–æ–≤–∞', '—ç–Ω–≥–µ–ª—å—Å–∞']):
                # –°—Ä–µ–¥–Ω–∏–µ –¥–æ–º–∞
                deal['UF_CRM_APARTMENTS'] = random.randint(40, 80)
                deal['UF_CRM_FLOORS'] = random.randint(5, 9)
                deal['UF_CRM_ENTRANCES'] = random.randint(2, 4)
            else:
                # –ú–∞–ª—ã–µ –¥–æ–º–∞
                deal['UF_CRM_APARTMENTS'] = random.randint(12, 40)
                deal['UF_CRM_FLOORS'] = random.randint(3, 5)
                deal['UF_CRM_ENTRANCES'] = random.randint(1, 2)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–±–æ—Ä–∫–∏
            frequencies = ['1 // 70', '2 // 140', '3 // 210']
            deal['UF_CRM_TARIFF'] = random.choice(frequencies)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã —É–±–æ—Ä–∫–∏ –¥–ª—è —Å–µ–Ω—Ç—è–±—Ä—è
            september_dates_1 = ['02.09.2025, 16.09.2025', '03.09.2025, 17.09.2025', '04.09.2025, 18.09.2025']
            september_dates_2 = ['09.09.2025, 23.09.2025', '10.09.2025, 24.09.2025', '11.09.2025, 25.09.2025']
            
            deal['UF_CRM_CLEANING_DATE_1'] = random.choice(september_dates_1)
            deal['UF_CRM_CLEANING_DATE_2'] = random.choice(september_dates_2)
            deal['UF_CRM_CLEANING_TYPE_1'] = '–ü–æ–¥–º–µ—Ç–∞–Ω–∏–µ –ª–µ—Å—Ç–Ω–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –∏ –º–∞—Ä—à–µ–π –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π'
            deal['UF_CRM_CLEANING_TYPE_2'] = '–í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ –ª–µ—Å—Ç–Ω–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π –∏ –ª–∏—Ñ—Ç–∞'
        
        return deal
    
    def _get_mock_data(self, limit: int) -> List[Dict[str, Any]]:
        """–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM –¥–ª—è fallback"""
        real_houses = [
            {"ID": "112", "TITLE": "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 112/1", "STAGE_ID": "C2:APOLOGY"},
            {"ID": "122", "TITLE": "–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ 18", "STAGE_ID": "C2:APOLOGY"},
            {"ID": "200", "TITLE": "–ñ—É–∫–æ–≤–∞ 25", "STAGE_ID": "C2:APOLOGY"},
            {"ID": "240", "TITLE": "–ì—Ä–∞–±—Ü–µ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ 158", "STAGE_ID": "C2:APOLOGY"},
            {"ID": "12782", "TITLE": "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è 54", "STAGE_ID": "C2:FINAL_INVOICE"},
            {"ID": "12774", "TITLE": "–ì–≤–∞—Ä–¥–µ–π—Å–∫–∞—è 4", "STAGE_ID": "C2:UC_6COC3G"},
            {"ID": "12640", "TITLE": "–ö–æ–Ω–¥—Ä–æ–≤–æ, –ü—É—à–∫–∏–Ω–∞ 78", "STAGE_ID": "C2:LOSE"},
        ]
        
        kaluga_streets = [
            "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è", "–ù–∏–∫–∏—Ç–∏–Ω–æ–π", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è", "–ë–∏–ª–∏–±–∏–Ω–∞", "–°—É–≤–æ—Ä–æ–≤–∞", 
            "–ó–µ–ª–µ–Ω–∞—è", "–¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è", "–ö–∞—Ä–∞—á–µ–≤—Å–∫–∞—è", "–ú–∞–π—Å–∫–∞—è", "–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ",
            "–≠–Ω–≥–µ–ª—å—Å–∞", "–°—Ç.–†–∞–∑–∏–Ω–∞", "–ú–∞–ª–æ—è—Ä–æ—Å–ª–∞–≤–µ—Ü–∫–∞—è", "–ñ—É–∫–æ–≤–∞", "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è"
        ]
        
        extended = list(real_houses)
        for i in range(len(real_houses), limit):
            street = kaluga_streets[i % len(kaluga_streets)]
            extended.append({
                "ID": str(300 + i),
                "TITLE": f"{street} {10 + (i % 150)}",
                "STAGE_ID": ["C2:WON", "C2:APOLOGY", "C2:NEW"][i % 3]
            })
        
        return extended[:limit]
    
    def analyze_house_brigade(self, address: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã –ø–æ –∞–¥—Ä–µ—Å—É"""
        address_lower = address.lower()
        
        if any(street in address_lower for street in ['–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è', '–±–∞—Ä—Ä–∏–∫–∞–¥', '–ª–µ–Ω–∏–Ω–∞']):
            return "1 –±—Ä–∏–≥–∞–¥–∞ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω"
        elif any(street in address_lower for street in ['—á–∏–∂–µ–≤—Å–∫–æ–≥–æ', '–Ω–∏–∫–∏—Ç–∏–Ω–∞']):
            return "2 –±—Ä–∏–≥–∞–¥–∞ - –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω"
        elif any(street in address_lower for street in ['–∂–∏–ª–µ—Ç–æ–≤–æ', '–º–æ–ª–æ–¥–µ–∂–Ω–∞—è']):
            return "3 –±—Ä–∏–≥–∞–¥–∞ - –ñ–∏–ª–µ—Ç–æ–≤–æ"
        elif any(street in address_lower for street in ['–∂—É–∫–æ–≤–∞', '—Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è']):
            return "4 –±—Ä–∏–≥–∞–¥–∞ - –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω"
        elif any(street in address_lower for street in ['–∫–æ–Ω–¥—Ä–æ–≤–æ', '–ø—É—à–∫–∏–Ω–∞']):
            return "5 –±—Ä–∏–≥–∞–¥–∞ - –ü—Ä–∏–≥–æ—Ä–æ–¥"
        else:
            return "6 –±—Ä–∏–≥–∞–¥–∞ - –û–∫—Ä–∞–∏–Ω—ã"
    
    def get_status_info(self, stage_id: str) -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–¥–µ–ª–∫–∏"""
        if stage_id == 'C2:WON':
            return "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", "success"
        elif 'APOLOGY' in stage_id or 'LOSE' in stage_id:
            return "‚ùå –ü—Ä–æ–±–ª–µ–º—ã", "error"
        elif 'FINAL_INVOICE' in stage_id:
            return "üßæ –í—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á–µ—Ç", "info"
        else:
            return "üîÑ –í —Ä–∞–±–æ—Ç–µ", "processing"

    async def create_task(
        self, 
        title: str, 
        description: str, 
        responsible_id: int = 1,
        group_id: Optional[int] = None,
        deadline: Optional[str] = None
    ) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Bitrix24"""
        try:
            logger.info(f"üìù Creating task in Bitrix24: {title}")
            
            params = {
                'fields[TITLE]': title,
                'fields[DESCRIPTION]': description,
                'fields[RESPONSIBLE_ID]': str(responsible_id),
                'fields[CREATED_BY]': str(responsible_id),
            }
            
            if group_id:
                params['fields[GROUP_ID]'] = str(group_id)
            
            if deadline:
                params['fields[DEADLINE]'] = deadline
            
            query_string = urllib.parse.urlencode(params)
            url = f"{self.webhook_url}tasks.task.add.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.post(url, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get('result'):
                        task_id = data['result']['task']['id']
                        logger.info(f"‚úÖ Task created successfully: ID {task_id}")
                        
                        return {
                            "status": "success",
                            "task_id": task_id,
                            "title": title,
                            "description": description
                        }
                    else:
                        logger.error(f"‚ùå Task creation failed: {data}")
                        return {"status": "error", "message": "Failed to create task"}
                else:
                    logger.error(f"‚ùå Bitrix24 API error: {response.status_code}")
                    return {"status": "error", "message": f"API error: {response.status_code}"}
                    
        except Exception as e:
            logger.error(f"‚ùå Create task error: {e}")
            return {"status": "error", "message": str(e)}

    async def get_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Bitrix24"""
        try:
            url = f"{self.webhook_url}user.get.json"
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get('result'):
                        users = data['result']
                        logger.info(f"‚úÖ Retrieved {len(users)} users from Bitrix24")
                        return users
                    else:
                        logger.warning("‚ö†Ô∏è No users found in Bitrix24")
                        return []
                else:
                    logger.error(f"‚ùå Failed to get users: {response.status_code}")
                    return []
                    
        except Exception as e:
            logger.error(f"‚ùå Get users error: {e}")
            return []

    async def add_comment_to_deal(self, deal_id: str, comment: str) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–¥–µ–ª–∫–µ"""
        try:
            logger.info(f"üí¨ Adding comment to deal {deal_id}")
            
            params = {
                'id': deal_id,
                'fields[COMMENTS]': comment
            }
            
            query_string = urllib.parse.urlencode(params)
            url = f"{self.webhook_url}crm.deal.update.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.post(url, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    logger.info(f"‚úÖ Comment added to deal {deal_id}")
                    return True
                else:
                    logger.error(f"‚ùå Failed to add comment: {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Add comment error: {e}")
            return False