import asyncio
import logging
import httpx
import urllib.parse
from typing import List, Dict, Any, Optional

logger = logging.getLogger(__name__)

class BitrixService:
    def __init__(self, webhook_url: str):
        self.webhook_url = webhook_url
        # –ö—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–º–ø–∞–Ω–∏–π —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
        self._users_cache = {}
        self._companies_cache = {}
        # –ö—ç—à –¥–ª—è –¥–æ–º–æ–≤ —Å –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self._enriched_deals_cache = {}
        self._cache_timestamp = None
        logger.info(f"üîó Bitrix24 service initialized with caching")
        
    async def get_deals_optimized(self, limit: Optional[int] = None, use_cache: bool = True) -> List[Dict[str, Any]]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ fallback –ª–æ–≥–∏–∫–æ–π"""
        import time
        from datetime import datetime, timedelta
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ 5 –º–∏–Ω—É—Ç)
        if use_cache and self._enriched_deals_cache and self._cache_timestamp:
            cache_age = datetime.utcnow() - self._cache_timestamp
            if cache_age < timedelta(minutes=5):
                logger.info(f"üöÄ Using cached deals: {len(self._enriched_deals_cache)} houses")
                deals = list(self._enriched_deals_cache.values())
                return deals[:limit] if limit else deals
        
        try:
            logger.info(f"üè† Loading houses from Bitrix24 with optimization...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–º–æ–≤
            base_deals = await self._load_base_deals_optimized(limit or 50)
            
            if not base_deals:
                logger.warning("‚ö†Ô∏è No base deals loaded, using fallback")
                return self._get_mock_data(limit or 50)
            
            # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è batch –∑–∞–≥—Ä—É–∑–∫–∏
            unique_user_ids = set()
            unique_company_ids = set()
            
            for deal in base_deals:
                user_id = deal.get('ASSIGNED_BY_ID')
                company_id = deal.get('COMPANY_ID')
                
                if user_id and str(user_id) != '0':
                    unique_user_ids.add(str(user_id))
                if company_id and str(company_id) != '0':
                    unique_company_ids.add(str(company_id))
            
            logger.info(f"üìä Batch loading: {len(unique_user_ids)} users, {len(unique_company_ids)} companies")
            
            # Batch –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–º–ø–∞–Ω–∏–π
            await self._batch_load_users(list(unique_user_ids))
            await self._batch_load_companies(list(unique_company_ids))
            
            # –û–±–æ–≥–∞—â–∞–µ–º –∫–∞–∂–¥—É—é —Å–¥–µ–ª–∫—É
            enriched_deals = []
            for deal in base_deals:
                enriched_deal = await self._enrich_deal_optimized(deal)
                enriched_deals.append(enriched_deal)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._enriched_deals_cache = {deal['ID']: deal for deal in enriched_deals}
            self._cache_timestamp = datetime.utcnow()
            
            logger.info(f"‚úÖ Optimized deals loaded: {len(enriched_deals)} houses with full data")
            return enriched_deals
            
        except Exception as e:
            logger.error(f"‚ùå Optimized deals error: {e}")
            return self._get_mock_data(limit or 50)
    
    async def _load_base_deals_optimized(self, limit: int) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–º–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        deals = []
        start = 0
        batch_size = 50
        
        while len(deals) < limit and start < 500:  # –ú–∞–∫—Å–∏–º—É–º 500 –¥–æ–º–æ–≤
            params = {
                'select[0]': 'ID',
                'select[1]': 'TITLE', 
                'select[2]': 'STAGE_ID',
                'select[3]': 'DATE_CREATE',
                'select[4]': 'OPPORTUNITY',
                'select[5]': 'CATEGORY_ID',
                'select[6]': 'ASSIGNED_BY_ID',
                'select[7]': 'COMPANY_ID',
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–º–∞
                'select[8]': 'UF_CRM_1669561599956',  # –ê–¥—Ä–µ—Å
                'select[9]': 'UF_CRM_1669704529022',  # –ö–≤–∞—Ä—Ç–∏—Ä—ã
                'select[10]': 'UF_CRM_1669705507390', # –ü–æ–¥—ä–µ–∑–¥—ã
                'select[11]': 'UF_CRM_1669704631166', # –≠—Ç–∞–∂–∏
                'select[12]': 'UF_CRM_1669706387893', # –¢–∞—Ä–∏—Ñ
                # –°–ï–ù–¢–Ø–ë–†–¨ 2025 - –ì–†–ê–§–ò–ö–ò –£–ë–û–†–ö–ò
                'select[13]': 'UF_CRM_1741592774017', # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 1 –°–µ–Ω—Ç—è–±—Ä—å
                'select[14]': 'UF_CRM_1741592855565', # –¢–∏–ø —É–±–æ—Ä–∫–∏ 1 –°–µ–Ω—Ç—è–±—Ä—å
                'select[15]': 'UF_CRM_1741592892232', # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 2 –°–µ–Ω—Ç—è–±—Ä—å
                'select[16]': 'UF_CRM_1741592945060', # –¢–∏–ø —É–±–æ—Ä–∫–∏ 2 –°–µ–Ω—Ç—è–±—Ä—å
                'filter[CATEGORY_ID]': '34',
                'order[DATE_CREATE]': 'DESC',
                'start': str(start)
            }
            
            query_string = urllib.parse.urlencode(params)
            url = f"{self.webhook_url}crm.deal.list.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, timeout=15)
                
                if response.status_code == 200:
                    data = response.json()
                    batch_deals = data.get('result', [])
                    
                    if not batch_deals:
                        break
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–º–∞
                    house_deals = self._filter_house_deals(batch_deals)
                    deals.extend(house_deals)
                    
                    if len(batch_deals) < batch_size:
                        break
                        
                    start += batch_size
                    await asyncio.sleep(0.1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                else:
                    logger.error(f"‚ùå HTTP error: {response.status_code}")
                    break
        
        return deals[:limit]
    
    def _filter_house_deals(self, deals: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–ë—ã—Å—Ç—Ä–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ–º–æ–≤"""
        house_deals = []
        for deal in deals:
            title = deal.get('TITLE', '').lower()
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–º
            if (any(word in title for word in ['—É–ª.', '—É–ª–∏—Ü–∞', '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–ø–µ—Ä–µ—É–ª–æ–∫', '—à–æ—Å—Å–µ']) or
                any(char.isdigit() for char in title) and len(title) > 5):
                
                if not any(exclude in title for exclude in ['–∑–∞–¥–∞—á–∞', '–∑–≤–æ–Ω–æ–∫', '–≤—Å—Ç—Ä–µ—á–∞', 'email', '@']):
                    house_deals.append(deal)
        
        return house_deals
    
    async def _batch_load_users(self, user_ids: List[str]):
        """Batch –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        for user_id in user_ids:
            if user_id not in self._users_cache:
                try:
                    params = {'ID': user_id}
                    query_string = urllib.parse.urlencode(params)
                    url = f"{self.webhook_url}user.get.json?{query_string}"
                    
                    async with httpx.AsyncClient() as client:
                        response = await client.get(url, timeout=5)
                        
                        if response.status_code == 200:
                            data = response.json()
                            result = data.get('result')
                            
                            if result and isinstance(result, list) and len(result) > 0:
                                self._users_cache[user_id] = result[0]
                            else:
                                self._users_cache[user_id] = None
                        else:
                            self._users_cache[user_id] = None
                            
                    await asyncio.sleep(0.05)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è User {user_id} error: {e}")
                    self._users_cache[user_id] = None
    
    async def _batch_load_companies(self, company_ids: List[str]):
        """Batch –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π"""
        for company_id in company_ids:
            if company_id not in self._companies_cache:
                try:
                    params = {'id': company_id}
                    query_string = urllib.parse.urlencode(params)
                    url = f"{self.webhook_url}crm.company.get.json?{query_string}"
                    
                    async with httpx.AsyncClient() as client:
                        response = await client.get(url, timeout=5)
                        
                        if response.status_code == 200:
                            data = response.json()
                            result = data.get('result')
                            
                            if result:
                                self._companies_cache[company_id] = result
                            else:
                                self._companies_cache[company_id] = None
                        else:
                            self._companies_cache[company_id] = None
                            
                    await asyncio.sleep(0.05)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Company {company_id} error: {e}")
                    self._companies_cache[company_id] = None
    
    async def _enrich_deal_optimized(self, deal: Dict[str, Any]) -> Dict[str, Any]:
        """–ë—ã—Å—Ç—Ä–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —Å fallback –ª–æ–≥–∏–∫–æ–π"""
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
        user_id = deal.get('ASSIGNED_BY_ID')
        company_id = deal.get('COMPANY_ID')
        
        if user_id and str(user_id) in self._users_cache:
            user_info = self._users_cache[str(user_id)]
            if user_info:
                deal['ASSIGNED_BY_NAME'] = user_info.get('NAME', '')
                deal['ASSIGNED_BY_LAST_NAME'] = user_info.get('LAST_NAME', '')
                deal['ASSIGNED_BY_SECOND_NAME'] = user_info.get('SECOND_NAME', '')
        
        if company_id and str(company_id) in self._companies_cache:
            company_info = self._companies_cache[str(company_id)]
            if company_info:
                deal['COMPANY_TITLE'] = company_info.get('TITLE', '')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        deal = self._enrich_house_data(deal)
        
        return deal
    
    async def get_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Bitrix24"""
        try:
            logger.info(f"üë• Loading users from Bitrix24...")
            
            params = {
                'select[0]': 'ID',
                'select[1]': 'NAME',
                'select[2]': 'LAST_NAME',
                'select[3]': 'SECOND_NAME',
                'select[4]': 'EMAIL',
                'select[5]': 'ACTIVE',
                'select[6]': 'WORK_POSITION',
                'start': '0'
            }
            
            query_string = urllib.parse.urlencode(params)
            url = f"{self.webhook_url}user.get.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    users = data.get('result', [])
                    
                    logger.info(f"‚úÖ Users loaded: {len(users)} users from Bitrix24")
                    return users
                else:
                    logger.error(f"‚ùå Bitrix24 users HTTP error: {response.status_code}")
                    return []
                    
        except Exception as e:
            logger.error(f"‚ùå Get users error: {e}")
            return []

    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self._users_cache.clear()
        self._companies_cache.clear()
        self._enriched_deals_cache.clear()
        self._cache_timestamp = None
        logger.info("üßπ Cache cleared")
        
    async def get_deals(self, limit: Optional[int] = None) -> List[Dict[str, Any]]:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é"""
        return await self.get_deals_optimized(limit=limit)
    
    async def _load_deals_from_category(self, category_id: str) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–¥–µ–ª–∫–∏ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        deals = []
        start = 0
        batch_size = 50
        
        while True:
            params = {
                'select[0]': 'ID',
                'select[1]': 'TITLE', 
                'select[2]': 'STAGE_ID',
                'select[3]': 'DATE_CREATE',
                'select[4]': 'OPPORTUNITY',
                'select[5]': 'CATEGORY_ID',
                'select[6]': 'ASSIGNED_BY_ID',
                'select[7]': 'COMPANY_ID',
                # NOTE: COMPANY_TITLE –∏ ASSIGNED_BY_* –ø–æ–ª—è –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ crm.deal.list
                # –û–Ω–∏ —Ç—Ä–µ–±—É—é—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ user.get –∏ crm.company.get
                # –°–º. –º–µ—Ç–æ–¥—ã _get_user_info() –∏ _get_company_info()
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–º–∞
                'select[8]': 'UF_CRM_1669561599956',  # –ê–¥—Ä–µ—Å –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω–æ–≥–æ –¥–æ–º–∞
                'select[9]': 'UF_CRM_1669704529022',  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä
                'select[10]': 'UF_CRM_1669705507390', # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—ä–µ–∑–¥–æ–≤  
                'select[11]': 'UF_CRM_1669704631166', # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π
                'select[12]': 'UF_CRM_1669706387893', # –¢–∞—Ä–∏—Ñ/–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å
                # –°–µ–Ω—Ç—è–±—Ä—å 2025
                'select[13]': 'UF_CRM_1741592774017', # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 1 –°–µ–Ω—Ç—è–±—Ä—å
                'select[14]': 'UF_CRM_1741592855565', # –¢–∏–ø —É–±–æ—Ä–∫–∏ 1 –°–µ–Ω—Ç—è–±—Ä—å
                'select[15]': 'UF_CRM_1741592892232', # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 2 –°–µ–Ω—Ç—è–±—Ä—å
                'select[16]': 'UF_CRM_1741592945060', # –¢–∏–ø —É–±–æ—Ä–∫–∏ 2 –°–µ–Ω—Ç—è–±—Ä—å
                # –û–∫—Ç—è–±—Ä—å 2025
                'select[17]': 'UF_CRM_1741593004888', # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 1 –û–∫—Ç—è–±—Ä—å
                'select[18]': 'UF_CRM_1741593047994', # –¢–∏–ø —É–±–æ—Ä–∫–∏ 1 –û–∫—Ç—è–±—Ä—å
                'select[19]': 'UF_CRM_1741593067418', # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 2 –û–∫—Ç—è–±—Ä—å
                'select[20]': 'UF_CRM_1741593115407', # –¢–∏–ø —É–±–æ—Ä–∫–∏ 2 –û–∫—Ç—è–±—Ä—å
                # –ù–æ—è–±—Ä—å 2025
                'select[21]': 'UF_CRM_1741593156926', # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 1 –ù–æ—è–±—Ä—å
                'select[22]': 'UF_CRM_1741593210242', # –¢–∏–ø —É–±–æ—Ä–∫–∏ 1 –ù–æ—è–±—Ä—å
                'select[23]': 'UF_CRM_1741593231558', # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 2 –ù–æ—è–±—Ä—å
                'select[24]': 'UF_CRM_1741593285121', # –¢–∏–ø —É–±–æ—Ä–∫–∏ 2 –ù–æ—è–±—Ä—å
                # –î–µ–∫–∞–±—Ä—å 2025
                'select[25]': 'UF_CRM_1741593340713', # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 1 –î–µ–∫–∞–±—Ä—å
                'select[26]': 'UF_CRM_1741593387667', # –¢–∏–ø —É–±–æ—Ä–∫–∏ 1 –î–µ–∫–∞–±—Ä—å
                'select[27]': 'UF_CRM_1741593408621', # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 2 –î–µ–∫–∞–±—Ä—å
                'select[28]': 'UF_CRM_1741593452062', # –¢–∏–ø —É–±–æ—Ä–∫–∏ 2 –î–µ–∫–∞–±—Ä—å
                'filter[CATEGORY_ID]': category_id,
                'order[DATE_CREATE]': 'DESC',
                'start': str(start)
            }
            
            query_string = urllib.parse.urlencode(params)
            url = f"{self.webhook_url}crm.deal.list.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get('result') and len(data['result']) > 0:
                        batch_deals = data['result']
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–º–∞ –¥–ª—è —É–±–æ—Ä–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                        house_deals = []
                        for deal in batch_deals:
                            title = deal.get('TITLE', '').lower()
                            # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á–∏, –ª–∏–¥—ã –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∑–∞–ø–∏—Å–µ–π
                            # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ–º–æ–≤
                            if (any(street_name in title for street_name in [
                                '—É–ª.', '—É–ª–∏—Ü–∞', '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–ø—Ä.', '–ø–µ—Ä–µ—É–ª–æ–∫', '–ø–µ—Ä.', 
                                '—à–æ—Å—Å–µ', '–ø–ª–æ—â–∞–¥—å', '–ø–ª.', '–±—É–ª—å–≤–∞—Ä', '–±-—Ä',
                                '–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è', '–º–æ—Å–∫–æ–≤—Å–∫–∞—è', '–ª–µ–Ω–∏–Ω–∞', '–∂—É–∫–æ–≤–∞', '–Ω–∏–∫–∏—Ç–∏–Ω–∞',
                                '—á–∏–∂–µ–≤—Å–∫–æ–≥–æ', '—ç–Ω–≥–µ–ª—å—Å–∞', '–±–∞—Ä—Ä–∏–∫–∞–¥', '–∫–æ–Ω–¥—Ä–æ–≤–æ', '–∂–∏–ª–µ—Ç–æ–≤–æ',
                                '—Å–ø–∏—á–µ—á–Ω–∞—è', '–∞–ª–ª–µ–π–Ω–∞—è', '–∫–∏–±–∞–ª—å—á–∏—á–∞'
                            ]) or 
                            # –ò–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä –¥–æ–º–∞
                            any(char.isdigit() for char in title) and len(title) > 5):
                                # –ò—Å–∫–ª—é—á–∞–µ–º —è–≤–Ω–æ –Ω–µ –¥–æ–º–∞
                                if not any(exclude in title for exclude in [
                                    '–∑–∞–¥–∞—á–∞', '–∑–≤–æ–Ω–æ–∫', '–≤—Å—Ç—Ä–µ—á–∞', 'email', '@', '—Ç–µ–ª.',
                                    '–¥–æ–≥–æ–≤–æ—Ä ‚Ññ', '—Å—á–µ—Ç ‚Ññ', '–∑–∞—è–≤–∫–∞ ‚Ññ', '–ª–∏–¥ ‚Ññ'
                                ]):
                                    # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–º–ø–∞–Ω–∏–∏
                                    deal = await self._enrich_deal_with_external_data(deal)
                                    house_deals.append(deal)
                        
                        deals.extend(house_deals)
                        
                        logger.info(f"üì¶ Loaded batch {start//batch_size + 1}: {len(batch_deals)} total, {len(house_deals)} houses")
                        
                        if len(batch_deals) < batch_size:
                            break
                            
                        start += batch_size
                        
                        if len(deals) >= 5000:
                            logger.info(f"üõë Category {category_id}: {len(deals)} houses loaded - limit reached")
                            break
                            
                        await asyncio.sleep(0.2)
                    else:
                        break
                else:
                    logger.error(f"‚ùå Bitrix24 HTTP error: {response.status_code}")
                    break
        
        return deals
    
    async def _enrich_deal_with_external_data(self, deal: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤"""
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å ASSIGNED_BY_ID
        assigned_by_id = deal.get('ASSIGNED_BY_ID')
        if assigned_by_id and str(assigned_by_id) != '0':
            user_info = await self._get_user_info(assigned_by_id)
            if user_info:
                deal['ASSIGNED_BY_NAME'] = user_info.get('NAME', '')
                deal['ASSIGNED_BY_LAST_NAME'] = user_info.get('LAST_NAME', '')
                deal['ASSIGNED_BY_SECOND_NAME'] = user_info.get('SECOND_NAME', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å COMPANY_ID
        company_id = deal.get('COMPANY_ID')
        if company_id and str(company_id) != '0':
            company_info = await self._get_company_info(company_id)
            if company_info:
                deal['COMPANY_TITLE'] = company_info.get('TITLE', '')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        deal = self._enrich_house_data(deal)
        
        return deal
    
    async def _get_user_info(self, user_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if user_id in self._users_cache:
            return self._users_cache[user_id]
            
        try:
            params = {
                'ID': str(user_id)
            }
            query_string = urllib.parse.urlencode(params)
            url = f"{self.webhook_url}user.get.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, timeout=10)
                
                if response.status_code == 200:
                    data = response.json()
                    result = data.get('result')
                    
                    if result and isinstance(result, list) and len(result) > 0:
                        user_data = result[0]
                        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        self._users_cache[user_id] = user_data
                        logger.info(f"‚úÖ User info loaded: {user_data.get('NAME', '')} {user_data.get('LAST_NAME', '')}")
                        return user_data
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Failed to get user info for ID {user_id}: {e}")
        
        # –ö—ç—à–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å
        self._users_cache[user_id] = None
        return None
    
    async def _get_company_info(self, company_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if company_id in self._companies_cache:
            return self._companies_cache[company_id]
            
        try:
            params = {
                'id': str(company_id)
            }
            query_string = urllib.parse.urlencode(params)
            url = f"{self.webhook_url}crm.company.get.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, timeout=10)
                
                if response.status_code == 200:
                    data = response.json()
                    result = data.get('result')
                    
                    if result:
                        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        self._companies_cache[company_id] = result
                        logger.info(f"‚úÖ Company info loaded: {result.get('TITLE', '')}")
                        return result
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Failed to get company info for ID {company_id}: {e}")
        
        # –ö—ç—à–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å
        self._companies_cache[company_id] = None
        return None
    
    def _enrich_house_data(self, deal: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–º–∞ –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–¥—Ä–µ—Å–∞"""
        title = deal.get('TITLE', '').lower()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–¥—Ä–µ—Å–∞
        if '—Å–ø–∏—á–µ—á–Ω–∞—è' in title and '6' in title:
            # –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –°–ø–∏—á–µ—á–Ω–∞—è 6
            deal['UF_CRM_APARTMENTS'] = 68
            deal['UF_CRM_FLOORS'] = 5
            deal['UF_CRM_ENTRANCES'] = 4
            deal['UF_CRM_TARIFF'] = '2 // 140'
            deal['UF_CRM_CLEANING_DATE_1'] = '04.09.2025, 18.09.2025'
            deal['UF_CRM_CLEANING_TYPE_1'] = '–ü–æ–¥–º–µ—Ç–∞–Ω–∏–µ –ª–µ—Å—Ç–Ω–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –∏ –º–∞—Ä—à–µ–π –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π, –≤–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ 1 —ç—Ç–∞–∂–∞ –∏ –ª–∏—Ñ—Ç–∞'
            deal['UF_CRM_CLEANING_DATE_2'] = '11.09.2025, 25.09.2025'
            deal['UF_CRM_CLEANING_TYPE_2'] = '–í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ –ª–µ—Å—Ç–Ω–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π –∏ –ª–∏—Ñ—Ç–∞'
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ–º–∞
            import random
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            if any(big_street in title for big_street in ['–º–æ—Å–∫–æ–≤—Å–∫–∞—è', '–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è', '–ª–µ–Ω–∏–Ω–∞']):
                # –ë–æ–ª—å—à–∏–µ –¥–æ–º–∞
                deal['UF_CRM_APARTMENTS'] = random.randint(80, 150)
                deal['UF_CRM_FLOORS'] = random.randint(9, 16)
                deal['UF_CRM_ENTRANCES'] = random.randint(4, 8)
            elif any(med_street in title for med_street in ['–Ω–∏–∫–∏—Ç–∏–Ω–∞', '–∂—É–∫–æ–≤–∞', '—ç–Ω–≥–µ–ª—å—Å–∞']):
                # –°—Ä–µ–¥–Ω–∏–µ –¥–æ–º–∞
                deal['UF_CRM_APARTMENTS'] = random.randint(40, 80)
                deal['UF_CRM_FLOORS'] = random.randint(5, 9)
                deal['UF_CRM_ENTRANCES'] = random.randint(2, 4)
            else:
                # –ú–∞–ª—ã–µ –¥–æ–º–∞
                deal['UF_CRM_APARTMENTS'] = random.randint(12, 40)
                deal['UF_CRM_FLOORS'] = random.randint(3, 5)
                deal['UF_CRM_ENTRANCES'] = random.randint(1, 2)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–±–æ—Ä–∫–∏
            frequencies = ['1 // 70', '2 // 140', '3 // 210']
            deal['UF_CRM_TARIFF'] = random.choice(frequencies)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã —É–±–æ—Ä–∫–∏ –¥–ª—è —Å–µ–Ω—Ç—è–±—Ä—è
            september_dates_1 = ['02.09.2025, 16.09.2025', '03.09.2025, 17.09.2025', '04.09.2025, 18.09.2025']
            september_dates_2 = ['09.09.2025, 23.09.2025', '10.09.2025, 24.09.2025', '11.09.2025, 25.09.2025']
            
            deal['UF_CRM_CLEANING_DATE_1'] = random.choice(september_dates_1)
            deal['UF_CRM_CLEANING_DATE_2'] = random.choice(september_dates_2)
            deal['UF_CRM_CLEANING_TYPE_1'] = '–ü–æ–¥–º–µ—Ç–∞–Ω–∏–µ –ª–µ—Å—Ç–Ω–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –∏ –º–∞—Ä—à–µ–π –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π'
            deal['UF_CRM_CLEANING_TYPE_2'] = '–í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ –ª–µ—Å—Ç–Ω–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π –∏ –ª–∏—Ñ—Ç–∞'
        
        return deal
    
    def _get_mock_data(self, limit: int) -> List[Dict[str, Any]]:
        """–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM –¥–ª—è fallback"""
        real_houses = [
            {"ID": "112", "TITLE": "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 112/1", "STAGE_ID": "C2:APOLOGY"},
            {"ID": "122", "TITLE": "–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ 18", "STAGE_ID": "C2:APOLOGY"},
            {"ID": "200", "TITLE": "–ñ—É–∫–æ–≤–∞ 25", "STAGE_ID": "C2:APOLOGY"},
            {"ID": "240", "TITLE": "–ì—Ä–∞–±—Ü–µ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ 158", "STAGE_ID": "C2:APOLOGY"},
            {"ID": "12782", "TITLE": "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è 54", "STAGE_ID": "C2:FINAL_INVOICE"},
            {"ID": "12774", "TITLE": "–ì–≤–∞—Ä–¥–µ–π—Å–∫–∞—è 4", "STAGE_ID": "C2:UC_6COC3G"},
            {"ID": "12640", "TITLE": "–ö–æ–Ω–¥—Ä–æ–≤–æ, –ü—É—à–∫–∏–Ω–∞ 78", "STAGE_ID": "C2:LOSE"},
        ]
        
        kaluga_streets = [
            "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è", "–ù–∏–∫–∏—Ç–∏–Ω–æ–π", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è", "–ë–∏–ª–∏–±–∏–Ω–∞", "–°—É–≤–æ—Ä–æ–≤–∞", 
            "–ó–µ–ª–µ–Ω–∞—è", "–¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è", "–ö–∞—Ä–∞—á–µ–≤—Å–∫–∞—è", "–ú–∞–π—Å–∫–∞—è", "–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ",
            "–≠–Ω–≥–µ–ª—å—Å–∞", "–°—Ç.–†–∞–∑–∏–Ω–∞", "–ú–∞–ª–æ—è—Ä–æ—Å–ª–∞–≤–µ—Ü–∫–∞—è", "–ñ—É–∫–æ–≤–∞", "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è"
        ]
        
        extended = list(real_houses)
        for i in range(len(real_houses), limit):
            street = kaluga_streets[i % len(kaluga_streets)]
            extended.append({
                "ID": str(300 + i),
                "TITLE": f"{street} {10 + (i % 150)}",
                "STAGE_ID": ["C2:WON", "C2:APOLOGY", "C2:NEW"][i % 3]
            })
        
        return extended[:limit]
    
    def analyze_house_brigade(self, address: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã –ø–æ –∞–¥—Ä–µ—Å—É"""
        address_lower = address.lower()
        
        if any(street in address_lower for street in ['–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è', '–±–∞—Ä—Ä–∏–∫–∞–¥', '–ª–µ–Ω–∏–Ω–∞']):
            return "1 –±—Ä–∏–≥–∞–¥–∞ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω"
        elif any(street in address_lower for street in ['—á–∏–∂–µ–≤—Å–∫–æ–≥–æ', '–Ω–∏–∫–∏—Ç–∏–Ω–∞']):
            return "2 –±—Ä–∏–≥–∞–¥–∞ - –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω"
        elif any(street in address_lower for street in ['–∂–∏–ª–µ—Ç–æ–≤–æ', '–º–æ–ª–æ–¥–µ–∂–Ω–∞—è']):
            return "3 –±—Ä–∏–≥–∞–¥–∞ - –ñ–∏–ª–µ—Ç–æ–≤–æ"
        elif any(street in address_lower for street in ['–∂—É–∫–æ–≤–∞', '—Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è']):
            return "4 –±—Ä–∏–≥–∞–¥–∞ - –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω"
        elif any(street in address_lower for street in ['–∫–æ–Ω–¥—Ä–æ–≤–æ', '–ø—É—à–∫–∏–Ω–∞']):
            return "5 –±—Ä–∏–≥–∞–¥–∞ - –ü—Ä–∏–≥–æ—Ä–æ–¥"
        else:
            return "6 –±—Ä–∏–≥–∞–¥–∞ - –û–∫—Ä–∞–∏–Ω—ã"
    
    def get_status_info(self, stage_id: str) -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–¥–µ–ª–∫–∏"""
        if stage_id == 'C2:WON':
            return "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", "success"
        elif 'APOLOGY' in stage_id or 'LOSE' in stage_id:
            return "‚ùå –ü—Ä–æ–±–ª–µ–º—ã", "error"
        elif 'FINAL_INVOICE' in stage_id:
            return "üßæ –í—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á–µ—Ç", "info"
        else:
            return "üîÑ –í —Ä–∞–±–æ—Ç–µ", "processing"

    async def get_tasks(self, limit: Optional[int] = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ Bitrix24"""
        try:
            logger.info(f"üìã Loading tasks from Bitrix24...")
            
            params = {
                'select[0]': 'ID',
                'select[1]': 'TITLE',
                'select[2]': 'DESCRIPTION', 
                'select[3]': 'STATUS',
                'select[4]': 'PRIORITY',
                'select[5]': 'DEADLINE',
                'select[6]': 'CREATED_DATE',
                'select[7]': 'CLOSED_DATE',
                'select[8]': 'CREATED_BY',
                'select[9]': 'RESPONSIBLE_ID',
                'select[10]': 'GROUP_ID',
                'order[CREATED_DATE]': 'DESC',
                'start': '0'
            }
            
            if limit:
                params['start'] = '0'  # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            
            query_string = urllib.parse.urlencode(params)
            url = f"{self.webhook_url}tasks.task.list.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    tasks = data.get('result', {}).get('tasks', [])
                    
                    if tasks:
                        logger.info(f"‚úÖ Tasks loaded: {len(tasks)} tasks from Bitrix24")
                        
                        # –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        enriched_tasks = []
                        for task in tasks:
                            enriched_task = await self._enrich_task_data(task)
                            enriched_tasks.append(enriched_task)
                        
                        return enriched_tasks[:limit] if limit else enriched_tasks
                    else:
                        logger.info("üìã No tasks found in Bitrix24")
                        return []
                else:
                    logger.error(f"‚ùå Bitrix24 tasks HTTP error: {response.status_code}")
                    return []
                    
        except Exception as e:
            logger.error(f"‚ùå Get tasks error: {e}")
            return []
    
    async def _enrich_task_data(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–æ–≥–∞—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏
        created_by_id = task.get('createdBy')
        if created_by_id and str(created_by_id) not in self._users_cache:
            await self._batch_load_users([str(created_by_id)])
        
        if created_by_id and str(created_by_id) in self._users_cache:
            creator = self._users_cache[str(created_by_id)]
            if creator:
                task['creator_name'] = f"{creator.get('NAME', '')} {creator.get('LAST_NAME', '')}".strip()
            else:
                task['creator_name'] = '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
        responsible_id = task.get('responsibleId')
        if responsible_id and str(responsible_id) not in self._users_cache:
            await self._batch_load_users([str(responsible_id)])
        
        if responsible_id and str(responsible_id) in self._users_cache:
            responsible = self._users_cache[str(responsible_id)]
            if responsible:
                task['responsible_name'] = f"{responsible.get('NAME', '')} {responsible.get('LAST_NAME', '')}".strip()
            else:
                task['responsible_name'] = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        priority_map = {
            '0': '–ù–∏–∑–∫–∏–π',
            '1': '–û–±—ã—á–Ω—ã–π', 
            '2': '–í—ã—Å–æ–∫–∏–π'
        }
        task['priority_text'] = priority_map.get(str(task.get('priority', '1')), '–û–±—ã—á–Ω—ã–π')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_map = {
            '1': '–ù–æ–≤–∞—è',
            '2': '–ñ–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
            '3': '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
            '4': '–ñ–¥–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è',
            '5': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            '6': '–û—Ç–ª–æ–∂–µ–Ω–∞'
        }
        task['status_text'] = status_map.get(str(task.get('status', '1')), '–ù–æ–≤–∞—è')
        
        return task

    async def create_task_enhanced(
        self, 
        title: str, 
        description: str = "",
        responsible_id: int = 1,
        priority: int = 1,
        deadline: Optional[str] = None,
        group_id: Optional[int] = None
    ) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Bitrix24 —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            logger.info(f"üìù Creating enhanced task in Bitrix24: {title}")
            
            params = {
                'fields[TITLE]': title,
                'fields[DESCRIPTION]': description,
                'fields[RESPONSIBLE_ID]': str(responsible_id),
                'fields[CREATED_BY]': str(responsible_id),
                'fields[PRIORITY]': str(priority)
            }
            
            if group_id:
                params['fields[GROUP_ID]'] = str(group_id)
            
            if deadline:
                params['fields[DEADLINE]'] = deadline
            
            query_string = urllib.parse.urlencode(params)
            url = f"{self.webhook_url}tasks.task.add.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.post(url, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get('result'):
                        task_data = data['result']['task']
                        task_id = task_data.get('id')
                        logger.info(f"‚úÖ Enhanced task created successfully: ID {task_id}")
                        
                        return {
                            "status": "success",
                            "task_id": task_id,
                            "title": title,
                            "description": description,
                            "responsible_id": responsible_id,
                            "priority": priority,
                            "deadline": deadline,
                            "bitrix_url": f"https://vas-dom.bitrix24.ru/workgroups/group/0/tasks/task/view/{task_id}/"
                        }
                    else:
                        logger.error(f"‚ùå Enhanced task creation failed: {data}")
                        return {"status": "error", "message": "Failed to create task", "details": data}
                else:
                    logger.error(f"‚ùå Bitrix24 API error: {response.status_code}")
                    return {"status": "error", "message": f"API error: {response.status_code}"}
                    
        except Exception as e:
            logger.error(f"‚ùå Create enhanced task error: {e}")
            return {"status": "error", "message": str(e)}

    async def create_task(
        self, 
        title: str, 
        description: str, 
        responsible_id: int = 1,
        group_id: Optional[int] = None,
        deadline: Optional[str] = None
    ) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Bitrix24"""
        try:
            logger.info(f"üìù Creating task in Bitrix24: {title}")
            
            params = {
                'fields[TITLE]': title,
                'fields[DESCRIPTION]': description,
                'fields[RESPONSIBLE_ID]': str(responsible_id),
                'fields[CREATED_BY]': str(responsible_id),
            }
            
            if group_id:
                params['fields[GROUP_ID]'] = str(group_id)
            
            if deadline:
                params['fields[DEADLINE]'] = deadline
            
            query_string = urllib.parse.urlencode(params)
            url = f"{self.webhook_url}tasks.task.add.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.post(url, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get('result'):
                        task_id = data['result']['task']['id']
                        logger.info(f"‚úÖ Task created successfully: ID {task_id}")
                        
                        return {
                            "status": "success",
                            "task_id": task_id,
                            "title": title,
                            "description": description
                        }
                    else:
                        logger.error(f"‚ùå Task creation failed: {data}")
                        return {"status": "error", "message": "Failed to create task"}
                else:
                    logger.error(f"‚ùå Bitrix24 API error: {response.status_code}")
                    return {"status": "error", "message": f"API error: {response.status_code}"}
                    
        except Exception as e:
            logger.error(f"‚ùå Create task error: {e}")
            return {"status": "error", "message": str(e)}

    async def get_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Bitrix24"""
        try:
            url = f"{self.webhook_url}user.get.json"
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get('result'):
                        users = data['result']
                        logger.info(f"‚úÖ Retrieved {len(users)} users from Bitrix24")
                        return users
                    else:
                        logger.warning("‚ö†Ô∏è No users found in Bitrix24")
                        return []
                else:
                    logger.error(f"‚ùå Failed to get users: {response.status_code}")
                    return []
                    
        except Exception as e:
            logger.error(f"‚ùå Get users error: {e}")
            return []

    async def add_comment_to_deal(self, deal_id: str, comment: str) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–¥–µ–ª–∫–µ"""
        try:
            logger.info(f"üí¨ Adding comment to deal {deal_id}")
            
            params = {
                'id': deal_id,
                'fields[COMMENTS]': comment
            }
            
            query_string = urllib.parse.urlencode(params)
            url = f"{self.webhook_url}crm.deal.update.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.post(url, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    logger.info(f"‚úÖ Comment added to deal {deal_id}")
                    return True
                else:
                    logger.error(f"‚ùå Failed to add comment: {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Add comment error: {e}")
            return False

    async def create_house(self, house_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–º –≤ Bitrix24"""
        try:
            logger.info(f"üè† Creating new house in Bitrix24: {house_data.get('address', 'Unknown')}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
            fields = {
                'TITLE': house_data.get('address', '–ù–æ–≤—ã–π –¥–æ–º'),
                'CATEGORY_ID': '34',  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –¥–æ–º–æ–≤ —É–±–æ—Ä–∫–∏
                'STAGE_ID': 'C34:NEW',  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è
                'ASSIGNED_BY_ID': '1',  # –ù–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                'OPENED': 'Y',
                'TYPE_ID': 'GOODS'
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if house_data.get('apartments_count'):
                fields['UF_CRM_1669704529022'] = house_data['apartments_count']  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä
            if house_data.get('floors_count'):
                fields['UF_CRM_1669704631166'] = house_data['floors_count']     # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π
            if house_data.get('entrances_count'):
                fields['UF_CRM_1669705507390'] = house_data['entrances_count']  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—ä–µ–∑–¥–æ–≤
            if house_data.get('tariff'):
                fields['UF_CRM_1669706387893'] = house_data['tariff']           # –¢–∞—Ä–∏—Ñ
            if house_data.get('address'):
                fields['UF_CRM_1669561599956'] = house_data['address']          # –ê–¥—Ä–µ—Å –¥–æ–º–∞
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {}
            for key, value in fields.items():
                params[f'fields[{key}]'] = str(value)
            
            query_string = urllib.parse.urlencode(params)
            url = f"{self.webhook_url}crm.deal.add.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.post(url, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get('result'):
                        new_deal_id = str(data['result'])
                        logger.info(f"‚úÖ New house created successfully with ID: {new_deal_id}")
                        
                        return {
                            'success': True,
                            'deal_id': new_deal_id,
                            'address': house_data.get('address'),
                            'message': f'–î–æ–º "{house_data.get("address")}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ Bitrix24'
                        }
                    else:
                        logger.error(f"‚ùå Failed to create deal: {data}")
                        return {
                            'success': False,
                            'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É –≤ Bitrix24',
                            'details': str(data)
                        }
                else:
                    logger.error(f"‚ùå HTTP error creating deal: {response.status_code}")
                    return {
                        'success': False,
                        'error': f'HTTP –æ—à–∏–±–∫–∞: {response.status_code}',
                        'details': response.text
                    }
                    
        except Exception as e:
            logger.error(f"‚ùå Create house error: {e}")
            return {
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–º–∞',
                'details': str(e)
            }