"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –ø–æ–¥–ø–∏—Å–µ–π –∫ —Ñ–æ—Ç–æ —É–±–æ—Ä–æ–∫
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ PostingFotoTG
"""
import os
import logging
from datetime import datetime
from typing import Optional
from openai import AsyncOpenAI

logger = logging.getLogger(__name__)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º Emergent LLM key –∏–ª–∏ OpenAI key
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', os.getenv('EMERGENT_LLM_KEY'))
client = AsyncOpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None


async def generate_caption(address: str, photo_count: int = 1, cleaning_type: str = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é AI –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ —É–±–æ—Ä–∫–∏
    
    Args:
        address: –ê–¥—Ä–µ—Å –¥–æ–º–∞
        photo_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
        cleaning_type: –¢–∏–ø —É–±–æ—Ä–∫–∏ (–≤–ª–∞–∂–Ω–∞—è, –ø–æ–¥–º–µ—Ç–∞–Ω–∏–µ, –∏ —Ç.–¥.)
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å AI-—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é
    """
    if not client:
        logger.warning("[photo_caption] OpenAI client not available, using fallback")
        return _generate_fallback_caption(address, photo_count, cleaning_type)
    
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ-—Ä—É—Å—Å–∫–∏
        months_ru = {
            1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
            5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
            9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
        }
        now = datetime.now()
        russian_date = f"{now.day} {months_ru[now.month]} {now.year}"
        
        # –ì–æ—Ç–æ–≤–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
        cleaning_info = f"–¢–∏–ø —É–±–æ—Ä–∫–∏: {cleaning_type}" if cleaning_type else "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞"
        photo_info = f"–§–æ—Ç–æ–æ—Ç—á—ë—Ç: {photo_count} —Ñ–æ—Ç–æ" if photo_count > 1 else "–§–æ—Ç–æ–æ—Ç—á—ë—Ç"
        
        prompt = f"""
–í—ã ‚Äî –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –í–∞—Å–î–æ–º –ø–æ —É–±–æ—Ä–∫–µ –ø–æ–¥—ä–µ–∑–¥–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–µ–∫—Å—Ç –∫ —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç—É –æ–± —É–±–æ—Ä–∫–µ.

–ê–¥—Ä–µ—Å: {address}
{cleaning_info}
{photo_info}
–î–∞—Ç–∞: {russian_date}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –£–ø–æ–º—è–Ω–∏—Ç–µ —á–∏—Å—Ç–æ—Ç—É, –ø–æ—Ä—è–¥–æ–∫ –∏ –∑–∞–±–æ—Ç—É –æ –¥–æ–º–µ
- –î–æ–±–∞–≤—å—Ç–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –±—Ä–∏–≥–∞–¥–µ
- –ù–∞–º–µ–∫–Ω–∏—Ç–µ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ –∫–æ–º—Ñ–æ—Ä—Ç –∂–∏–ª—å—Ü–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 2-3 –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–º–æ–¥–∑–∏
- –ú–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –¢–æ–Ω: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
"""

        logger.info(f"[photo_caption] Generating caption for address: {address}")
        
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –í–∞—Å–î–æ–º. –ü–∏—à–µ—à—å –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∫ —Ñ–æ—Ç–æ —É–±–æ—Ä–æ–∫."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.8,
            max_tokens=200
        )
        
        text = response.choices[0].message.content.strip()
        logger.info(f"[photo_caption] AI caption generated successfully: {text[:50]}...")
        return text
        
    except Exception as e:
        logger.warning(f"[photo_caption] Error generating AI caption: {e}, using fallback")
        return _generate_fallback_caption(address, photo_count, cleaning_type)


def _generate_fallback_caption(address: str, photo_count: int, cleaning_type: str = None) -> str:
    """
    Fallback –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ AI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    """
    months_ru = {
        1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
        5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
        9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
    }
    now = datetime.now()
    russian_date = f"{now.day} {months_ru[now.month]} {now.year}"
    
    type_text = f"\nüßπ {cleaning_type}" if cleaning_type else ""
    photos_text = f" ({photo_count} —Ñ–æ—Ç–æ)" if photo_count > 1 else ""
    
    return (
        f"‚ú® –£–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!{photos_text}\n"
        f"üè† –ê–¥—Ä–µ—Å: {address}\n"
        f"üìÖ –î–∞—Ç–∞: {russian_date}{type_text}\n\n"
        f"–°–ø–∞—Å–∏–±–æ –Ω–∞—à–µ–π –±—Ä–∏–≥–∞–¥–µ –∑–∞ —á–∏—Å—Ç–æ—Ç—É –∏ –∑–∞–±–æ—Ç—É –æ –≤–∞—à–µ–º –¥–æ–º–µ! üíô"
    )


async def format_cleaning_completion_message(
    address: str,
    photo_count: int,
    cleaning_type: str = None,
    brigade_name: str = None,
    use_ai: bool = True
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–±–æ—Ä–∫–∏
    
    Args:
        address: –ê–¥—Ä–µ—Å –¥–æ–º–∞
        photo_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
        cleaning_type: –¢–∏–ø —É–±–æ—Ä–∫–∏
        brigade_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã
        use_ai: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    
    Returns:
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    if use_ai:
        ai_text = await generate_caption(address, photo_count, cleaning_type)
    else:
        ai_text = _generate_fallback_caption(address, photo_count, cleaning_type)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∏–≥–∞–¥–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if brigade_name:
        ai_text += f"\n\nüë∑ –ë—Ä–∏–≥–∞–¥–∞: {brigade_name}"
    
    return ai_text


# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import asyncio
    
    async def test():
        caption = await generate_caption(
            address="—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10",
            photo_count=3,
            cleaning_type="–í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π"
        )
        print("Generated caption:")
        print(caption)
    
    asyncio.run(test())
