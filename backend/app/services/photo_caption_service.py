"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –ø–æ–¥–ø–∏—Å–µ–π –∫ —Ñ–æ—Ç–æ —É–±–æ—Ä–æ–∫
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ PostingFotoTG
"""
import os
import logging
from datetime import datetime
from typing import Optional
from openai import AsyncOpenAI

logger = logging.getLogger(__name__)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û OpenAI API –∫–ª—é—á
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
client = AsyncOpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None


async def generate_motivational_text(address: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¢–û–õ–¨–ö–û –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ç GPT-4o (–ë–ï–ó –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ)
    
    Args:
        address: –ê–¥—Ä–µ—Å –¥–æ–º–∞
    
    Returns:
        –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ç–µ–∫—Å—Ç (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
    """
    if not client:
        logger.warning("[photo_caption] OpenAI client not available, using fallback")
        return "üåü –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –∑–∞ —Ç—Ä—É–¥ –∏ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º. –ß–∏—Å—Ç–æ—Ç–∞ –≤ –ø–æ–¥—ä–µ–∑–¥–µ ‚Äî —ç—Ç–æ –∑–∞–±–æ—Ç–∞ –æ –∫–∞–∂–¥–æ–º –∂–∏–ª—å—Ü–µ. –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –¥–µ–ª–∞—Ç—å –º–∏—Ä —á–∏—â–µ –∏ —Å–≤–µ—Ç–ª–µ–µ! üí™üåø"
    
    try:
        prompt = f"""
–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –æ–± —É–±–æ—Ä–∫–µ –ø–æ–¥—ä–µ–∑–¥–∞ –ø–æ –∞–¥—Ä–µ—Å—É: {address}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –±—Ä–∏–≥–∞–¥—É —É–±–æ—Ä—â–∏–∫–æ–≤ –∑–∞ —Ä–∞–±–æ—Ç—É
- –£–ø–æ–º—è–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç—å —á–∏—Å—Ç–æ—Ç—ã –∏ –∑–∞–±–æ—Ç—ã –æ –¥–æ–º–µ
- –î–æ–±–∞–≤—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
- –ò—Å–ø–æ–ª—å–∑—É–π 3-4 —ç–º–æ–¥–∑–∏ (üåü, üßπ, üí™, üåø, ‚ú®, üè†, üí´)
- 3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –º–∞–∫—Å–∏–º—É–º
- –¢–æ–Ω: –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π

–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª—è:
"–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –°–≤–µ—Ç–ª—ã–π –ø–æ–¥—ä–µ–∑–¥ —Ç–µ–ø–µ—Ä—å —Å–∏—è–µ—Ç —á–∏—Å—Ç–æ—Ç–æ–π –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞—à–∏–º —É—Å–∏–ª–∏—è–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–±–æ—Ç—É –æ –Ω–∞—à–µ–º –æ–±—â–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ!"
"–°–µ–≥–æ–¥–Ω—è –º—ã —Å–¥–µ–ª–∞–ª–∏ –º–∏—Ä –Ω–µ–º–Ω–æ–≥–æ —á–∏—â–µ! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º —É–±–æ—Ä—â–∏–∫–æ–≤ –∑–∞ —Ç—Ä—É–¥ –∏ –≤–Ω–∏–º–∞–Ω–∏–µ. –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –¥–µ–ª–∞—Ç—å –Ω–∞—à –≥–æ—Ä–æ–¥ –ª—É—á—à–µ!"
"""

        logger.info(f"[photo_caption] Generating motivational text with GPT-5")
        
        response = await client.chat.completions.create(
            model="gpt-5",  # –ù–æ–≤–µ–π—à–∞—è –º–æ–¥–µ–ª—å GPT-5
            messages=[
                {"role": "system", "content": "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –í–∞—Å–î–æ–º. –ü–∏—à–µ—à—å –∫–æ—Ä–æ—Ç–∫–∏–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã –ø—Ä–æ —É–±–æ—Ä–∫—É –ø–æ–¥—ä–µ–∑–¥–æ–≤."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.9,  # –ë–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
            max_tokens=200
        )
        
        text = response.choices[0].message.content.strip()
        logger.info(f"[photo_caption] Motivational text generated: {text[:60]}...")
        return text
        
    except Exception as e:
        logger.error(f"[photo_caption] Error generating motivational text: {e}", exc_info=True)
        return "üåü –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –∑–∞ —Ç—Ä—É–¥ –∏ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º. –ß–∏—Å—Ç–æ—Ç–∞ –≤ –ø–æ–¥—ä–µ–∑–¥–µ ‚Äî —ç—Ç–æ –∑–∞–±–æ—Ç–∞ –æ –∫–∞–∂–¥–æ–º –∂–∏–ª—å—Ü–µ. –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –¥–µ–ª–∞—Ç—å –º–∏—Ä —á–∏—â–µ –∏ —Å–≤–µ—Ç–ª–µ–µ! üí™üåø"


async def generate_caption(
    address: str, 
    photo_count: int = 1, 
    cleaning_type: str = None,
    brigade_number: str = None
) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ —É–±–æ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PostingFotoTG
    –ë–ï–ó –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ, —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç
    
    Args:
        address: –ê–¥—Ä–µ—Å –¥–æ–º–∞
        photo_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
        cleaning_type: –¢–∏–ø —É–±–æ—Ä–∫–∏ (–≤–ª–∞–∂–Ω–∞—è, –ø–æ–¥–º–µ—Ç–∞–Ω–∏–µ, –∏ —Ç.–¥.)
        brigade_number: –ù–æ–º–µ—Ä –±—Ä–∏–≥–∞–¥—ã
    
    Returns:
        –ü–æ–ª–Ω–∞—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å
    """
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ-—Ä—É—Å—Å–∫–∏
    months_ru = {
        1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
        5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
        9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
    }
    now = datetime.now()
    russian_date = f"{now.day} {months_ru[now.month]} {now.year}"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ GPT
    motivational_text = await generate_motivational_text(address)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ö–µ—à—Ç–µ–≥–∏ –∏–∑ –∞–¥—Ä–µ—Å–∞
    city = "–ö–∞–ª—É–≥–∞"  # TODO: –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ –∞–¥—Ä–µ—Å–∞
    address_clean = address.replace(" ", "_").replace(",", "")
    hashtags = f"#–ß–∏—Å—Ç–æ—Ç–∞ #–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å #–°–æ—Ü–∏–∞–ª—å–Ω–∞—è–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å #{city}"
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –ø–æ–¥–ø–∏—Å—å
    caption_parts = [
        "üßπ –£–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        f"üè† –ê–¥—Ä–µ—Å: {address}",
        f"üìÖ –î–∞—Ç–∞: {russian_date}"
    ]
    
    if brigade_number:
        caption_parts.append(f"üë∑ –ë—Ä–∏–≥–∞–¥–∞: #{brigade_number}")
    
    caption_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    caption_parts.append(motivational_text)
    caption_parts.append(hashtags)
    
    full_caption = "\n".join(caption_parts)
    
    logger.info(f"[photo_caption] Full caption generated for {address}")
    return full_caption


def _generate_fallback_caption(address: str, brigade_number: str = None) -> str:
    """
    Fallback –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ AI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–≤ —Å—Ç–∏–ª–µ PostingFotoTG)
    """
    months_ru = {
        1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
        5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
        9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
    }
    now = datetime.now()
    russian_date = f"{now.day} {months_ru[now.month]} {now.year}"
    
    brigade_text = f"\nüë∑ –ë—Ä–∏–≥–∞–¥–∞: #{brigade_number}" if brigade_number else ""
    
    return (
        f"üßπ –£–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"üè† –ê–¥—Ä–µ—Å: {address}\n"
        f"üìÖ –î–∞—Ç–∞: {russian_date}{brigade_text}\n\n"
        f"üåü –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –∑–∞ —Ç—Ä—É–¥ –∏ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º. "
        f"–ß–∏—Å—Ç–æ—Ç–∞ –≤ –ø–æ–¥—ä–µ–∑–¥–µ ‚Äî —ç—Ç–æ –∑–∞–±–æ—Ç–∞ –æ –∫–∞–∂–¥–æ–º –∂–∏–ª—å—Ü–µ –∏ —É–≤–∞–∂–µ–Ω–∏–µ –∫ —Å–µ–±–µ. "
        f"–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –¥–µ–ª–∞—Ç—å –º–∏—Ä —á–∏—â–µ –∏ —Å–≤–µ—Ç–ª–µ–µ! üí™üåø\n"
        f"#–ß–∏—Å—Ç–æ—Ç–∞ #–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å #–°–æ—Ü–∏–∞–ª—å–Ω–∞—è–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"
    )


async def format_cleaning_completion_message(
    address: str,
    photo_count: int = 1,
    cleaning_type: str = None,
    brigade_number: str = None,
    use_ai: bool = True
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–±–æ—Ä–∫–∏ –≤ —Å—Ç–∏–ª–µ PostingFotoTG
    
    Args:
        address: –ê–¥—Ä–µ—Å –¥–æ–º–∞
        photo_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
        cleaning_type: –¢–∏–ø —É–±–æ—Ä–∫–∏
        brigade_number: –ù–æ–º–µ—Ä –±—Ä–∏–≥–∞–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä "1")
        use_ai: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ GPT-4o –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    
    Returns:
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if use_ai:
        caption = await generate_caption(address, photo_count, cleaning_type, brigade_number)
    else:
        caption = _generate_fallback_caption(address, brigade_number)
    
    return caption


# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import asyncio
    
    async def test():
        caption = await generate_caption(
            address="—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10",
            photo_count=3,
            cleaning_type="–í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π"
        )
        print("Generated caption:")
        print(caption)
    
    asyncio.run(test())
