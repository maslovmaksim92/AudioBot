"""
Telegram –±–æ—Ç –¥–ª—è –±—Ä–∏–≥–∞–¥ - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —É–±–æ—Ä–æ–∫
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
1. /start - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –±—Ä–∏–≥–∞–¥—ã
2. –í—ã–±–æ—Ä –¥–æ–º–∞ —á–µ—Ä–µ–∑ inline buttons
3. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
4. /done - –∑–∞–≤–µ—Ä—à–∏—Ç—å —É–±–æ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å AI –ø–æ–¥–ø–∏—Å—å—é
"""
import os
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime, date
import httpx

logger = logging.getLogger(__name__)

# Telegram credentials
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
user_sessions = {}


class CleaningSession:
    """–°–µ—Å—Å–∏—è —É–±–æ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def __init__(self, user_id: int, brigade_id: str = None):
        self.user_id = user_id
        self.brigade_id = brigade_id
        self.selected_house_id = None
        self.selected_house_address = None
        self.photos = []  # List of file_ids
        self.started_at = datetime.now()
    
    def add_photo(self, file_id: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏—é"""
        self.photos.append(file_id)
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é"""
        self.selected_house_id = None
        self.selected_house_address = None
        self.photos = []


def get_or_create_session(user_id: int) -> CleaningSession:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_sessions:
        user_sessions[user_id] = CleaningSession(user_id)
    return user_sessions[user_id]


async def send_message(
    chat_id: int,
    text: str,
    reply_markup: Optional[Dict] = None,
    parse_mode: str = "HTML"
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        async with httpx.AsyncClient(timeout=30) as client:
            payload = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode
            }
            if reply_markup:
                payload["reply_markup"] = reply_markup
            
            response = await client.post(f"{API_URL}/sendMessage", json=payload)
            
            if response.status_code == 200:
                logger.info(f"[telegram_cleaning_bot] Message sent to {chat_id}")
                return True
            else:
                logger.error(f"[telegram_cleaning_bot] Failed to send message: {response.text}")
                return False
    
    except Exception as e:
        logger.error(f"[telegram_cleaning_bot] Error sending message: {e}")
        return False


async def send_photo(
    chat_id: int,
    photo_file_id: str,
    caption: str = None
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"""
    try:
        async with httpx.AsyncClient(timeout=30) as client:
            payload = {
                "chat_id": chat_id,
                "photo": photo_file_id
            }
            if caption:
                payload["caption"] = caption
                payload["parse_mode"] = "HTML"
            
            response = await client.post(f"{API_URL}/sendPhoto", json=payload)
            
            if response.status_code == 200:
                logger.info(f"[telegram_cleaning_bot] Photo sent to {chat_id}")
                return True
            else:
                logger.error(f"[telegram_cleaning_bot] Failed to send photo: {response.text}")
                return False
    
    except Exception as e:
        logger.error(f"[telegram_cleaning_bot] Error sending photo: {e}")
        return False


async def send_media_group(
    chat_id: int,
    photos: List[str],
    caption: str = None
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é"""
    try:
        if not photos:
            logger.warning("[telegram_cleaning_bot] No photos to send")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º media array
        media = []
        for idx, photo_file_id in enumerate(photos):
            media_item = {
                "type": "photo",
                "media": photo_file_id
            }
            # –ü–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
            if idx == 0 and caption:
                media_item["caption"] = caption
                media_item["parse_mode"] = "HTML"
            
            media.append(media_item)
        
        async with httpx.AsyncClient(timeout=30) as client:
            payload = {
                "chat_id": chat_id,
                "media": media
            }
            
            response = await client.post(f"{API_URL}/sendMediaGroup", json=payload)
            
            if response.status_code == 200:
                logger.info(f"[telegram_cleaning_bot] Media group sent to {chat_id}: {len(photos)} photos")
                return True
            else:
                logger.error(f"[telegram_cleaning_bot] Failed to send media group: {response.text}")
                return False
    
    except Exception as e:
        logger.error(f"[telegram_cleaning_bot] Error sending media group: {e}")
        return False


async def handle_start_command(chat_id: int, user_id: int, db_session):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –±—Ä–∏–≥–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"[telegram_cleaning_bot] /start command from user {user_id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
        session = get_or_create_session(user_id)
        
        # TODO: –ü–æ–ª—É—á–∏—Ç—å –±—Ä–∏–≥–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ telegram_id
        # brigade = await get_brigade_by_telegram_id(user_id, db_session)
        # if not brigade:
        #     await send_message(chat_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        #     return
        
        # TODO: –ü–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —ç—Ç–æ–π –±—Ä–∏–≥–∞–¥—ã
        # today = date.today()
        # houses = await get_houses_for_brigade_by_date(brigade.id, today, db_session)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–∏–≥–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # TODO: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –ë–î –ø–æ telegram_user_id
        session.brigade_id = "brigade_1"  # –ë—Ä–∏–≥–∞–¥–∞ 1
        brigade_name = "1 –±—Ä–∏–≥–∞–¥–∞"  # –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞ –±—Ä–∏–≥–∞–¥—ã 1 –Ω–∞ 13.10.2025 –∏–∑ Bitrix24 —á–µ—Ä–µ–∑ API
        from datetime import datetime
        target_date = "2025-10-13"
        
        try:
            from app.services.bitrix24_service import bitrix24_service
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –¥–æ–º–∞ –Ω–∞ 13.10.2025 (API limit 200, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 50)
            data = await bitrix24_service.list_houses(
                cleaning_date=target_date,
                limit=200  # API –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ–º–æ–≤
            )
            
            houses_raw = data.get('houses', [])
            logger.info(f"[telegram_cleaning_bot] Loaded {len(houses_raw)} houses for {target_date}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±—Ä–∏–≥–∞–¥–µ 1
            brigade_houses = [h for h in houses_raw if h.get('brigade_name') == brigade_name]
            logger.info(f"[telegram_cleaning_bot] Filtered to {len(brigade_houses)} houses for {brigade_name}")
            
            if brigade_houses:
                houses = []
                for h in brigade_houses:
                    # –ë–µ—Ä–µ–º ID –∏–∑ Bitrix (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π —Ç–∏–ø–∞ "13180")
                    house_id = str(h.get('id', ''))
                    address = h.get('address') or h.get('title', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
                    
                    houses.append({
                        "id": house_id,
                        "address": address,
                        "entrances": h.get('entrances', 1),
                        "floors": h.get('floors', 5)
                    })
                
                logger.info(f"[telegram_cleaning_bot] ‚úÖ Prepared {len(houses)} houses for brigade 1 on {target_date}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ–º–æ–≤ –¥–ª—è –±—Ä–∏–≥–∞–¥—ã 1 –Ω–∞ 13.10, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ–º–∞ —ç—Ç–æ–π –¥–∞—Ç—ã
                logger.warning(f"[telegram_cleaning_bot] No houses for {brigade_name} on {target_date}, showing all houses")
                
                houses = []
                for h in houses_raw[:10]:
                    houses.append({
                        "id": str(h.get('id', '')),
                        "address": h.get('address') or h.get('title', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'),
                        "entrances": h.get('entrances', 1),
                        "floors": h.get('floors', 5)
                    })
        
        except Exception as e:
            logger.error(f"[telegram_cleaning_bot] Failed to load houses from Bitrix24: {e}")
            # Fallback –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º –±—Ä–∏–≥–∞–¥—ã 1
            houses = [
                {"id": "13084", "address": "–ú–∞–ª–æ—è—Ä–æ—Å–ª–∞–≤–µ—Ü–∫–∞—è —É–ª–∏—Ü–∞, 6, –ö–∞–ª—É–≥–∞, –ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –†–æ—Å—Å–∏—è", "entrances": 1, "floors": 5},
                {"id": "8674", "address": "—É–ª–∏—Ü–∞ –ö–∏–±–∞–ª—å—á–∏—á–∞ 3, 248012, –ö–∞–ª—É–≥–∞, –ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –†–æ—Å—Å–∏—è", "entrances": 2, "floors": 5}
            ]
        
        if not houses:
            await send_message(
                chat_id,
                "üìã –ù–∞ —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–±–æ—Ä–æ–∫.\n\n"
                "–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É."
            )
            return
        
        # –°–æ–∑–¥–∞—ë–º inline keyboard —Å –∞–¥—Ä–µ—Å–∞–º–∏
        keyboard = []
        for house in houses:
            button = {
                "text": house["address"],
                "callback_data": f"house_{house['id']}"
            }
            keyboard.append([button])
        
        reply_markup = {
            "inline_keyboard": keyboard
        }
        
        await send_message(
            chat_id,
            f"üè† <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:</b>\n\n"
            f"üìÖ –°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%d.%m.%Y')}\n"
            f"üìç –î–æ–º–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(houses)}",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"[telegram_cleaning_bot] Error in handle_start_command: {e}")
        await send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_house_selection(
    chat_id: int,
    user_id: int,
    house_id: str,
    callback_query_id: str,
    db_session
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–º–∞
    """
    logger.info(f"[telegram_cleaning_bot] House selected: {house_id} by user {user_id}")
    
    try:
        session = get_or_create_session(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ –∏–∑ Bitrix24
        house = None
        try:
            from app.services.bitrix24_service import bitrix24_service
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–æ–º–∞ –∏–∑ Bitrix24
            house_details = await bitrix24_service.get_deal_details(house_id)
            
            if house_details:
                house = {
                    "id": str(house_details.get('id', house_id)),
                    "address": house_details.get('address') or house_details.get('title', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'),
                    "entrances": house_details.get('entrances', 1),
                    "floors": house_details.get('floors', 5)
                }
                logger.info(f"[telegram_cleaning_bot] Loaded house from Bitrix24: {house_id}")
            else:
                logger.warning(f"[telegram_cleaning_bot] House {house_id} not found in Bitrix24")
        except Exception as e:
            logger.error(f"[telegram_cleaning_bot] Failed to load house from Bitrix24: {e}")
            house = None
        
        if not house:
            await send_message(chat_id, "‚ùå –î–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–º –≤ —Å–µ—Å—Å–∏—é
        session.selected_house_id = house["id"]
        session.selected_house_address = house["address"]
        session.photos = []  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–æ—Ç–æ
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä
        await send_message(
            chat_id,
            f"‚úÖ <b>–í—ã–±—Ä–∞–Ω –¥–æ–º:</b>\n"
            f"üè† {house['address']}\n"
            f"üö™ –ü–æ–¥—ä–µ–∑–¥–æ–≤: {house.get('entrances', '‚Äî')}\n"
            f"üìä –≠—Ç–∞–∂–µ–π: {house.get('floors', '‚Äî')}\n\n"
            f"üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —É–±–æ—Ä–∫–∏</b>\n"
            f"–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /done"
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        async with httpx.AsyncClient(timeout=10) as client:
            await client.post(
                f"{API_URL}/answerCallbackQuery",
                json={"callback_query_id": callback_query_id, "text": "–î–æ–º –≤—ã–±—Ä–∞–Ω ‚úÖ"}
            )
        
    except Exception as e:
        logger.error(f"[telegram_cleaning_bot] Error in handle_house_selection: {e}")
        await send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–æ–º–∞")


async def handle_photo(chat_id: int, user_id: int, photo_file_id: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    """
    logger.info(f"[telegram_cleaning_bot] Photo received from user {user_id}")
    
    try:
        session = get_or_create_session(user_id)
        
        if not session.selected_house_id:
            await send_message(
                chat_id,
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start"
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏—é
        session.add_photo(photo_file_id)
        
        await send_message(
            chat_id,
            f"‚úÖ –§–æ—Ç–æ {len(session.photos)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n"
            f"üè† –î–æ–º: {session.selected_house_address}\n\n"
            f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        )
        
    except Exception as e:
        logger.error(f"[telegram_cleaning_bot] Error in handle_photo: {e}")
        await send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")


async def handle_done_command(chat_id: int, user_id: int, db_session):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /done - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–±–æ—Ä–∫–∏
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –æ–±—Ä–∞—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å AI –ø–æ–¥–ø–∏—Å—å—é (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
    """
    logger.info(f"[telegram_cleaning_bot] /done command from user {user_id}")
    
    try:
        session = get_or_create_session(user_id)
        
        if not session.selected_house_id or not session.photos:
            await send_message(
                chat_id,
                "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–æ–º –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ."
            )
            return
        
        await send_message(chat_id, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–¥–ø–∏—Å—å...")
        
        # –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        from app.services.photo_caption_service import format_cleaning_completion_message
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –ø–æ–¥–ø–∏—Å—å —Å –Ω–æ–º–µ—Ä–æ–º –±—Ä–∏–≥–∞–¥—ã
        brigade_number = session.brigade_id.replace("brigade_", "") if session.brigade_id else "1"
        
        caption = await format_cleaning_completion_message(
            address=session.selected_house_address,
            photo_count=len(session.photos),
            cleaning_type="–í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞",  # TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
            brigade_number=brigade_number,  # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: "1"
            use_ai=True
        )
        
        logger.info(f"[telegram_cleaning_bot] Generated caption for {session.selected_house_address}")
        
        # –ü–†–û–î–ê–ö–®–ï–ù –†–ï–ñ–ò–ú: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –≥—Ä—É–ø–ø—ã
        target_chat_id = os.getenv('TELEGRAM_TARGET_CHAT_ID')  # –ü—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
        report_chat_id = os.getenv('TELEGRAM_REPORT_CHAT_ID')  # –û—Ç—á–µ—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞
        
        sent_to_group = False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—É–±–ª–∏—á–Ω—É—é –≥—Ä—É–ø–ø—É
        if target_chat_id:
            logger.info(f"[telegram_cleaning_bot] Sending to public group: {target_chat_id}")
            if len(session.photos) == 1:
                await send_photo(target_chat_id, session.photos[0], caption)
            else:
                await send_media_group(target_chat_id, session.photos, caption)
            sent_to_group = True
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç–Ω—É—é –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—É–±–ª–∏—á–Ω–æ–π)
        if report_chat_id and report_chat_id != target_chat_id:
            logger.info(f"[telegram_cleaning_bot] Sending to report group: {report_chat_id}")
            if len(session.photos) == 1:
                await send_photo(report_chat_id, session.photos[0], caption)
            else:
                await send_media_group(report_chat_id, session.photos, caption)
        
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if not sent_to_group:
            logger.warning("[telegram_cleaning_bot] No group chats configured, sending to user")
            if len(session.photos) == 1:
                await send_photo(chat_id, session.photos[0], caption)
            else:
                await send_media_group(chat_id, session.photos, caption)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        try:
            from datetime import datetime
            from app.config.database import get_db_pool
            
            db_pool = await get_db_pool()
            if db_pool:
                async with db_pool.acquire() as conn:
                    await conn.execute(
                        """
                        INSERT INTO cleaning_photos (
                            house_id, house_address, brigade_id, telegram_user_id,
                            cleaning_date, photo_file_ids, photo_count, ai_caption,
                            status, sent_to_group_at
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
                        ON CONFLICT (house_id, cleaning_date, brigade_id) 
                        DO UPDATE SET
                            photo_file_ids = EXCLUDED.photo_file_ids,
                            photo_count = EXCLUDED.photo_count,
                            ai_caption = EXCLUDED.ai_caption,
                            status = EXCLUDED.status,
                            sent_to_group_at = EXCLUDED.sent_to_group_at,
                            updated_at = NOW()
                        """,
                        session.selected_house_id,
                        session.selected_house_address,
                        session.brigade_id,
                        user_id,
                        datetime.now().date(),
                        session.photos,
                        len(session.photos),
                        caption,
                        'sent_to_group' if sent_to_group else 'uploaded',
                        datetime.now() if sent_to_group else None
                    )
                    logger.info(f"[telegram_cleaning_bot] ‚úÖ Saved to DB: {session.selected_house_id}")
        except Exception as db_error:
            logger.error(f"[telegram_cleaning_bot] ‚ùå Failed to save to DB: {db_error}")
        
        # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –≤ Bitrix24
        # await send_bitrix24_webhook(
        #     house_id=session.selected_house_id,
        #     cleaning_date=datetime.now().date(),
        #     photo_count=len(session.photos)
        # )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—Ö–µ
        success_msg = "‚úÖ <b>–£–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
        success_msg += f"üè† {session.selected_house_address}\n"
        success_msg += f"üì∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {len(session.photos)}\n"
        if sent_to_group:
            success_msg += "üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É\n"
        success_msg += "\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! üíô"
        
        await send_message(chat_id, success_msg)
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        session.clear()
        
    except Exception as e:
        logger.error(f"[telegram_cleaning_bot] Error in handle_done_command: {e}")
        await send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–±–æ—Ä–∫–∏")
