"""
Telegram –±–æ—Ç –¥–ª—è –±—Ä–∏–≥–∞–¥ - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —É–±–æ—Ä–æ–∫
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
1. /start - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –±—Ä–∏–≥–∞–¥—ã
2. –í—ã–±–æ—Ä –¥–æ–º–∞ —á–µ—Ä–µ–∑ inline buttons
3. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
4. /done - –∑–∞–≤–µ—Ä—à–∏—Ç—å —É–±–æ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å AI –ø–æ–¥–ø–∏—Å—å—é
"""
import os
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime, date
import httpx
from backend.app.services.photo_caption_service import format_cleaning_completion_message

logger = logging.getLogger(__name__)

# Telegram credentials
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
user_sessions = {}


class CleaningSession:
    """–°–µ—Å—Å–∏—è —É–±–æ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def __init__(self, user_id: int, brigade_id: str = None):
        self.user_id = user_id
        self.brigade_id = brigade_id
        self.selected_house_id = None
        self.selected_house_address = None
        self.photos = []  # List of file_ids
        self.started_at = datetime.now()
    
    def add_photo(self, file_id: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏—é"""
        self.photos.append(file_id)
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é"""
        self.selected_house_id = None
        self.selected_house_address = None
        self.photos = []


def get_or_create_session(user_id: int) -> CleaningSession:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_sessions:
        user_sessions[user_id] = CleaningSession(user_id)
    return user_sessions[user_id]


async def send_message(
    chat_id: int,
    text: str,
    reply_markup: Optional[Dict] = None,
    parse_mode: str = "HTML"
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        async with httpx.AsyncClient(timeout=30) as client:
            payload = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode
            }
            if reply_markup:
                payload["reply_markup"] = reply_markup
            
            response = await client.post(f"{API_URL}/sendMessage", json=payload)
            
            if response.status_code == 200:
                logger.info(f"[telegram_cleaning_bot] Message sent to {chat_id}")
                return True
            else:
                logger.error(f"[telegram_cleaning_bot] Failed to send message: {response.text}")
                return False
    
    except Exception as e:
        logger.error(f"[telegram_cleaning_bot] Error sending message: {e}")
        return False


async def send_photo(
    chat_id: int,
    photo_file_id: str,
    caption: str = None
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"""
    try:
        async with httpx.AsyncClient(timeout=30) as client:
            payload = {
                "chat_id": chat_id,
                "photo": photo_file_id
            }
            if caption:
                payload["caption"] = caption
                payload["parse_mode"] = "HTML"
            
            response = await client.post(f"{API_URL}/sendPhoto", json=payload)
            
            if response.status_code == 200:
                logger.info(f"[telegram_cleaning_bot] Photo sent to {chat_id}")
                return True
            else:
                logger.error(f"[telegram_cleaning_bot] Failed to send photo: {response.text}")
                return False
    
    except Exception as e:
        logger.error(f"[telegram_cleaning_bot] Error sending photo: {e}")
        return False


async def send_media_group(
    chat_id: int,
    photos: List[str],
    caption: str = None
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é"""
    try:
        if not photos:
            logger.warning("[telegram_cleaning_bot] No photos to send")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º media array
        media = []
        for idx, photo_file_id in enumerate(photos):
            media_item = {
                "type": "photo",
                "media": photo_file_id
            }
            # –ü–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
            if idx == 0 and caption:
                media_item["caption"] = caption
                media_item["parse_mode"] = "HTML"
            
            media.append(media_item)
        
        async with httpx.AsyncClient(timeout=30) as client:
            payload = {
                "chat_id": chat_id,
                "media": media
            }
            
            response = await client.post(f"{API_URL}/sendMediaGroup", json=payload)
            
            if response.status_code == 200:
                logger.info(f"[telegram_cleaning_bot] Media group sent to {chat_id}: {len(photos)} photos")
                return True
            else:
                logger.error(f"[telegram_cleaning_bot] Failed to send media group: {response.text}")
                return False
    
    except Exception as e:
        logger.error(f"[telegram_cleaning_bot] Error sending media group: {e}")
        return False


async def handle_start_command(chat_id: int, user_id: int, db_session):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –±—Ä–∏–≥–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"[telegram_cleaning_bot] /start command from user {user_id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
        session = get_or_create_session(user_id)
        
        # TODO: –ü–æ–ª—É—á–∏—Ç—å –±—Ä–∏–≥–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ telegram_id
        # brigade = await get_brigade_by_telegram_id(user_id, db_session)
        # if not brigade:
        #     await send_message(chat_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        #     return
        
        # TODO: –ü–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —ç—Ç–æ–π –±—Ä–∏–≥–∞–¥—ã
        # today = date.today()
        # houses = await get_houses_for_brigade_by_date(brigade.id, today, db_session)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        houses = [
            {"id": "1", "address": "—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10"},
            {"id": "2", "address": "—É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 25"},
            {"id": "3", "address": "–ø—Ä. –ú–∏—Ä–∞, –¥. 5"}
        ]
        
        if not houses:
            await send_message(
                chat_id,
                "üìã –ù–∞ —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–±–æ—Ä–æ–∫.\n\n"
                "–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É."
            )
            return
        
        # –°–æ–∑–¥–∞—ë–º inline keyboard —Å –∞–¥—Ä–µ—Å–∞–º–∏
        keyboard = []
        for house in houses:
            button = {
                "text": house["address"],
                "callback_data": f"house_{house['id']}"
            }
            keyboard.append([button])
        
        reply_markup = {
            "inline_keyboard": keyboard
        }
        
        await send_message(
            chat_id,
            f"üè† <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:</b>\n\n"
            f"üìÖ –°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%d.%m.%Y')}\n"
            f"üìç –î–æ–º–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(houses)}",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"[telegram_cleaning_bot] Error in handle_start_command: {e}")
        await send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_house_selection(
    chat_id: int,
    user_id: int,
    house_id: str,
    callback_query_id: str,
    db_session
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–º–∞
    """
    logger.info(f"[telegram_cleaning_bot] House selected: {house_id} by user {user_id}")
    
    try:
        session = get_or_create_session(user_id)
        
        # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ –∏–∑ –ë–î
        # house = await get_house_by_id(house_id, db_session)
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        houses_mock = {
            "1": {"id": "1", "address": "—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10", "entrances": 3, "floors": 5},
            "2": {"id": "2", "address": "—É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 25", "entrances": 4, "floors": 9},
            "3": {"id": "3", "address": "–ø—Ä. –ú–∏—Ä–∞, –¥. 5", "entrances": 2, "floors": 5}
        }
        house = houses_mock.get(house_id)
        
        if not house:
            await send_message(chat_id, "‚ùå –î–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–º –≤ —Å–µ—Å—Å–∏—é
        session.selected_house_id = house["id"]
        session.selected_house_address = house["address"]
        session.photos = []  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–æ—Ç–æ
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä
        await send_message(
            chat_id,
            f"‚úÖ <b>–í—ã–±—Ä–∞–Ω –¥–æ–º:</b>\n"
            f"üè† {house['address']}\n"
            f"üö™ –ü–æ–¥—ä–µ–∑–¥–æ–≤: {house.get('entrances', '‚Äî')}\n"
            f"üìä –≠—Ç–∞–∂–µ–π: {house.get('floors', '‚Äî')}\n\n"
            f"üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —É–±–æ—Ä–∫–∏</b>\n"
            f"–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /done"
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        async with httpx.AsyncClient(timeout=10) as client:
            await client.post(
                f"{API_URL}/answerCallbackQuery",
                json={"callback_query_id": callback_query_id, "text": "–î–æ–º –≤—ã–±—Ä–∞–Ω ‚úÖ"}
            )
        
    except Exception as e:
        logger.error(f"[telegram_cleaning_bot] Error in handle_house_selection: {e}")
        await send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–æ–º–∞")


async def handle_photo(chat_id: int, user_id: int, photo_file_id: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    """
    logger.info(f"[telegram_cleaning_bot] Photo received from user {user_id}")
    
    try:
        session = get_or_create_session(user_id)
        
        if not session.selected_house_id:
            await send_message(
                chat_id,
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start"
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏—é
        session.add_photo(photo_file_id)
        
        await send_message(
            chat_id,
            f"‚úÖ –§–æ—Ç–æ {len(session.photos)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n"
            f"üè† –î–æ–º: {session.selected_house_address}\n\n"
            f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        )
        
    except Exception as e:
        logger.error(f"[telegram_cleaning_bot] Error in handle_photo: {e}")
        await send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")


async def handle_done_command(chat_id: int, user_id: int, db_session):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /done - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–±–æ—Ä–∫–∏
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –æ–±—Ä–∞—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å AI –ø–æ–¥–ø–∏—Å—å—é (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
    """
    logger.info(f"[telegram_cleaning_bot] /done command from user {user_id}")
    
    try:
        session = get_or_create_session(user_id)
        
        if not session.selected_house_id or not session.photos:
            await send_message(
                chat_id,
                "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–æ–º –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ."
            )
            return
        
        await send_message(chat_id, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–¥–ø–∏—Å—å...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –ø–æ–¥–ø–∏—Å—å
        caption = await format_cleaning_completion_message(
            address=session.selected_house_address,
            photo_count=len(session.photos),
            cleaning_type="–í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞",  # TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
            brigade_name=None,  # TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏
            use_ai=True
        )
        
        logger.info(f"[telegram_cleaning_bot] Generated caption for {session.selected_house_address}")
        
        # –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –æ–±—Ä–∞—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–Ω–µ –≤ –≥—Ä—É–ø–ø—É)
        if len(session.photos) == 1:
            # –û–¥–Ω–æ —Ñ–æ—Ç–æ
            await send_photo(chat_id, session.photos[0], caption)
        else:
            # –ì—Ä—É–ø–ø–∞ —Ñ–æ—Ç–æ
            await send_media_group(chat_id, session.photos, caption)
        
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        # await save_cleaning_completion(
        #     house_id=session.selected_house_id,
        #     photos=session.photos,
        #     caption=caption,
        #     db_session=db_session
        # )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—Ö–µ
        await send_message(
            chat_id,
            f"‚úÖ <b>–£–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
            f"üè† {session.selected_house_address}\n"
            f"üì∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {len(session.photos)}\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! üíô"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        session.clear()
        
    except Exception as e:
        logger.error(f"[telegram_cleaning_bot] Error in handle_done_command: {e}")
        await send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–±–æ—Ä–∫–∏")
