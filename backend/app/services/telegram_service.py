"""
–°–µ—Ä–≤–∏—Å Telegram Bot - –ø—Ä–∏–µ–º —Ñ–æ—Ç–æ –æ—Ç –±—Ä–∏–≥–∞–¥ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
- –ü—Ä–∏–µ–º ~300 —Ñ–æ—Ç–æ/–¥–µ–Ω—å –æ—Ç –±—Ä–∏–≥–∞–¥
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –¢–ì –≥—Ä—É–ø–ø—É
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—É –æ –∑–∞–¥–∞—á–∞—Ö/–ø–ª–∞–Ω–µ—Ä–∫–∞—Ö
"""
import httpx
import logging
from typing import Optional, List, Dict, Any
from datetime import datetime, timezone
import os

from backend.app.config.settings import settings

logger = logging.getLogger(__name__)

class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API"""
    
    def __init__(self):
        self.bot_token = settings.TELEGRAM_BOT_TOKEN
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"
        self.timeout = httpx.Timeout(30.0)
        
        # –ì—Ä—É–ø–ø–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        self.photos_channel_id = os.getenv("TELEGRAM_PHOTOS_CHANNEL_ID", "")
    
    async def send_message(
        self,
        chat_id: str,
        text: str,
        parse_mode: str = "HTML",
        reply_markup: Optional[Dict] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        try:
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                url = f"{self.api_url}/sendMessage"
                payload = {
                    "chat_id": chat_id,
                    "text": text,
                    "parse_mode": parse_mode
                }
                
                if reply_markup:
                    payload["reply_markup"] = reply_markup
                
                response = await client.post(url, json=payload)
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def send_photo(
        self,
        chat_id: str,
        photo_url: Optional[str] = None,
        photo_file: Optional[bytes] = None,
        caption: Optional[str] = None,
        parse_mode: str = "HTML"
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ"""
        
        try:
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                url = f"{self.api_url}/sendPhoto"
                
                if photo_url:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ URL
                    payload = {
                        "chat_id": chat_id,
                        "photo": photo_url,
                        "caption": caption or "",
                        "parse_mode": parse_mode
                    }
                    response = await client.post(url, json=payload)
                    
                elif photo_file:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
                    files = {"photo": ("photo.jpg", photo_file, "image/jpeg")}
                    data = {
                        "chat_id": chat_id,
                        "caption": caption or "",
                        "parse_mode": parse_mode
                    }
                    response = await client.post(url, data=data, files=files)
                    
                else:
                    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ photo_url, –Ω–∏ photo_file")
                    return False
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {response.text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            return False
    
    async def forward_photo_to_channel(
        self,
        photo_file_id: str,
        caption: Optional[str] = None,
        sender_info: Optional[str] = None
    ) -> bool:
        """
        –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –æ—Ç –±—Ä–∏–≥–∞–¥
        """
        
        if not self.photos_channel_id:
            logger.warning("TELEGRAM_PHOTOS_CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
        full_caption = f"üì∏ {sender_info}\n" if sender_info else ""
        full_caption += f"{caption}\n\n" if caption else ""
        full_caption += f"üïí {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')}"
        
        try:
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                url = f"{self.api_url}/sendPhoto"
                payload = {
                    "chat_id": self.photos_channel_id,
                    "photo": photo_file_id,
                    "caption": full_caption,
                    "parse_mode": "HTML"
                }
                
                response = await client.post(url, json=payload)
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ –§–æ—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: {response.text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: {e}")
            return False
    
    async def send_bulk_notification(
        self,
        chat_ids: List[str],
        text: str,
        parse_mode: str = "HTML"
    ) -> Dict[str, int]:
        """
        –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö/–Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        """
        
        results = {"success": 0, "failed": 0}
        
        for chat_id in chat_ids:
            success = await self.send_message(chat_id, text, parse_mode)
            if success:
                results["success"] += 1
            else:
                results["failed"] += 1
        
        logger.info(f"üìä –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: —É—Å–ø–µ—à–Ω–æ {results['success']}, –æ—à–∏–±–æ–∫ {results['failed']}")
        
        return results
    
    async def send_plannerka_reminder(self, chat_ids: List[str], time: str = "8:30") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–ª–∞–Ω–µ—Ä–∫–µ
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ AI –∑–∞–¥–∞—á–∞—Ö (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:25)
        """
        
        text = f"""
üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞–Ω–µ—Ä–∫–µ!</b>

üìÖ –°–µ–≥–æ–¥–Ω—è –≤ {time}
üìç Zoom / –û—Ñ–∏—Å

‚è∞ –ù–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ!
        """
        
        results = await self.send_bulk_notification(chat_ids, text)
        
        return results["success"] > 0
    
    async def notify_new_task(
        self,
        chat_id: str,
        task_title: str,
        task_description: Optional[str] = None,
        due_date: Optional[str] = None,
        priority: str = "medium"
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
        
        priority_emoji = {
            "low": "üü¢",
            "medium": "üü°",
            "high": "üü†",
            "urgent": "üî¥"
        }
        
        emoji = priority_emoji.get(priority, "üü°")
        
        text = f"""
{emoji} <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞!</b>

üìã {task_title}
"""
        
        if task_description:
            text += f"\nüìù {task_description}\n"
        
        if due_date:
            text += f"\n‚è∞ –°—Ä–æ–∫: {due_date}"
        
        text += "\n\nüëâ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
        
        return await self.send_message(chat_id, text)
    
    async def get_webhook_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook"""
        
        try:
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                url = f"{self.api_url}/getWebhookInfo"
                response = await client.get(url)
                
                if response.status_code == 200:
                    return response.json().get("result", {})
                else:
                    return {}
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook info: {e}")
            return {}
    
    async def set_webhook(self, webhook_url: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞"""
        
        try:
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                url = f"{self.api_url}/setWebhook"
                payload = {
                    "url": webhook_url,
                    "allowed_updates": ["message", "callback_query"]
                }
                
                response = await client.post(url, json=payload)
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {response.text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
            return False

# Singleton instance
telegram_service = TelegramService()
