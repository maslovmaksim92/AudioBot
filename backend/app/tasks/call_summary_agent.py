"""
–ê–≥–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ Novofon –∏ Bitrix24
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –∑–≤–æ–Ω–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ —Å–æ–∑–¥–∞—ë—Ç —Å–∞–º–º–∞—Ä–∏
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Set

from backend.app.services.bitrix_calls_service import BitrixCallsService
from backend.app.services.novofon_service import novofon_service
from backend.app.routers.call_summary import process_call_recording

logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–º ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–≤–∞–∂–¥—ã
processed_calls: Set[str] = set()

class CallSummaryAgent:
    def __init__(self):
        self.bitrix_service = BitrixCallsService()
        self.is_running = False
    
    async def check_and_process_calls(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –∑–≤–æ–Ω–∫–∏ –∏ —Å–æ–∑–¥–∞—ë—Ç —Å–∞–º–º–∞—Ä–∏
        """
        try:
            if self.is_running:
                logger.info("‚è≠Ô∏è Previous task still running, skipping...")
                return
            
            self.is_running = True
            logger.info("üîç Checking for new calls to process...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–≤–æ–Ω–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
            calls = await self.bitrix_service.get_recent_calls(limit=20)
            
            if not calls:
                logger.info("üì≠ No calls found")
                self.is_running = False
                return
            
            processed_count = 0
            
            for call in calls:
                call_id = call.get("CALL_ID")
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                if call_id in processed_calls:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
                has_record = bool(call.get("RECORD_FILE_ID"))
                duration = int(call.get("CALL_DURATION", 0))
                call_status = call.get("CALL_STATUS")
                
                # –¢–æ–ª—å–∫–æ –∑–≤–æ–Ω–∫–∏ —Å –∑–∞–ø–∏—Å—å—é, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é > 10 —Å–µ–∫ –∏ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ
                if not has_record:
                    logger.debug(f"‚è≠Ô∏è Call {call_id}: no recording")
                    processed_calls.add(call_id)  # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
                    continue
                
                if duration < 10:
                    logger.debug(f"‚è≠Ô∏è Call {call_id}: too short ({duration}s)")
                    processed_calls.add(call_id)
                    continue
                
                if call_status != "200":  # 200 = answered
                    logger.debug(f"‚è≠Ô∏è Call {call_id}: not answered (status: {call_status})")
                    processed_calls.add(call_id)
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–≤–æ–Ω–æ–∫
                logger.info(f"üéôÔ∏è Processing call {call_id} ({duration}s)")
                
                try:
                    await self.process_single_call(call)
                    processed_calls.add(call_id)
                    processed_count += 1
                    logger.info(f"‚úÖ Successfully processed call {call_id}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    logger.error(f"‚ùå Failed to process call {call_id}: {e}")
                    import traceback
                    logger.error(traceback.format_exc())
            
            if processed_count > 0:
                logger.info(f"‚úÖ Processed {processed_count} calls")
            else:
                logger.info("üì≠ No new calls to process")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ ID –∏–∑ –ø–∞–º—è—Ç–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            if len(processed_calls) > 1000:
                logger.info("üßπ Cleaning old call IDs from memory...")
                processed_calls.clear()
            
        except Exception as e:
            logger.error(f"‚ùå Error in call summary agent: {e}")
            import traceback
            logger.error(traceback.format_exc())
        finally:
            self.is_running = False
    
    async def process_single_call(self, call: dict):
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω –∑–≤–æ–Ω–æ–∫
        """
        call_id = call.get("CALL_ID")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å
        recording_url = await self.bitrix_service.get_call_recording(call_id)
        
        if not recording_url:
            raise Exception(f"Failed to get recording URL for call {call_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        webhook_data = {
            "call_id": call_id,
            "caller": call.get("PHONE_NUMBER", ""),
            "called": "",  # –ù–µ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ Bitrix24
            "direction": "in" if call.get("CALL_TYPE") == "1" else "out",
            "duration": int(call.get("CALL_DURATION", 0)),
            "status": "answered",
            "record_url": recording_url,
            "timestamp": call.get("CALL_START_DATE")
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è + —Å–∞–º–º–∞—Ä–∏ + –æ—Ç–ø—Ä–∞–≤–∫–∞)
        await process_call_recording(webhook_data, None)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞
call_summary_agent = CallSummaryAgent()

async def run_call_summary_agent():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ scheduler)
    """
    await call_summary_agent.check_and_process_calls()
