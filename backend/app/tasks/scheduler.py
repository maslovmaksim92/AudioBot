"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Bitrix24 –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–ª–∞–Ω–µ—Ä–∫–∞—Ö
- AI –∑–≤–æ–Ω–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
"""
import asyncio
import logging
from datetime import datetime, timezone
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger
import pytz

from backend.app.services.bitrix24_service import bitrix24_service
from backend.app.services.telegram_service import telegram_service
from backend.app.config.database import AsyncSessionLocal
from backend.app.tasks.call_summary_agent import run_call_summary_agent

logger = logging.getLogger(__name__)

class TaskScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    
    def __init__(self):
        # –°–æ–∑–¥–∞—ë–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
        moscow_tz = pytz.timezone('Europe/Moscow')
        self.scheduler = AsyncIOScheduler(timezone=moscow_tz)
        self.running = False
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.running:
            logger.warning("Scheduler already running")
            return
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Bitrix24 –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏)
        self.scheduler.add_job(
            self.sync_bitrix24_houses,
            trigger=IntervalTrigger(minutes=30),
            id='sync_bitrix24',
            name='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ–º–æ–≤ –∏–∑ Bitrix24',
            replace_existing=True
        )
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞–Ω–µ—Ä–∫–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:25
        self.scheduler.add_job(
            self.send_plannerka_reminder,
            trigger=CronTrigger(hour=8, minute=25),
            id='plannerka_reminder',
            name='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞–Ω–µ—Ä–∫–µ',
            replace_existing=True
        )
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.scheduler.add_job(
            run_call_summary_agent,
            trigger=IntervalTrigger(minutes=5),
            id='call_summary_agent',
            name='–ê–≥–µ–Ω—Ç —Å–∞–º–º–∞—Ä–∏ –∑–≤–æ–Ω–∫–æ–≤',
            replace_existing=True
        )
        
        # AI –∑–≤–æ–Ω–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 16:55
        self.scheduler.add_job(
            self.ai_call_employees,
            trigger=CronTrigger(hour=16, minute=55),
            id='ai_calls_daily',
            name='AI –∑–≤–æ–Ω–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º',
            replace_existing=True
        )
        
        self.scheduler.start()
        self.running = True
        
        logger.info("=" * 70)
        logger.info("üöÄ Task Scheduler started!")
        logger.info("=" * 70)
        logger.info("üìÖ Scheduled tasks (Moscow Time - MSK):")
        moscow_tz = pytz.timezone('Europe/Moscow')
        for job in self.scheduler.get_jobs():
            next_run_msk = job.next_run_time.astimezone(moscow_tz) if job.next_run_time else None
            logger.info(f"   - {job.name} (ID: {job.id})")
            if next_run_msk:
                logger.info(f"     Next run: {next_run_msk.strftime('%Y-%m-%d %H:%M:%S MSK')}")
        logger.info("=" * 70)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.running:
            return
        
        self.scheduler.shutdown()
        self.running = False
        logger.info("üõë Task Scheduler stopped")
    
    async def sync_bitrix24_houses(self):
        """–ó–∞–¥–∞—á–∞: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ–º–æ–≤ –∏–∑ Bitrix24"""
        logger.info("üîÑ Starting Bitrix24 sync...")
        
        try:
            async with AsyncSessionLocal() as db:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
                deals = await bitrix24_service.get_all_deals()
                
                if not deals:
                    logger.warning("No deals loaded from Bitrix24")
                    return
                
                synced = 0
                created = 0
                updated = 0
                
                from backend.app.models.house import House
                from sqlalchemy import select
                
                for deal in deals:
                    house_data = bitrix24_service.parse_deal_to_house(deal)
                    
                    if not house_data.get("address"):
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
                    result = await db.execute(
                        select(House).where(House.bitrix_id == house_data["bitrix_id"])
                    )
                    existing = result.scalar_one_or_none()
                    
                    if existing:
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        for key, value in house_data.items():
                            if key != "id":
                                setattr(existing, key, value)
                        updated += 1
                    else:
                        # –°–æ–∑–¥–∞–Ω–∏–µ
                        new_house = House(**house_data)
                        db.add(new_house)
                        created += 1
                    
                    synced += 1
                
                await db.commit()
                
                logger.info(f"‚úÖ Bitrix24 sync complete: {synced} total, {created} created, {updated} updated")
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î
                from backend.app.models.log import Log, LogLevel, LogCategory
                from uuid import uuid4
                log = Log(
                    id=str(uuid4()),
                    level=LogLevel.INFO,
                    category=LogCategory.INTEGRATION,
                    message=f"–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Bitrix24 –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {synced} –¥–æ–º–æ–≤ ({created} —Å–æ–∑–¥–∞–Ω–æ, {updated} –æ–±–Ω–æ–≤–ª–µ–Ω–æ)",
                    extra_data={"synced": synced, "created": created, "updated": updated}
                )
                db.add(log)
                await db.commit()
                
        except Exception as e:
            logger.error(f"‚ùå Bitrix24 sync error: {e}")
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ë–î
            try:
                async with AsyncSessionLocal() as db:
                    from backend.app.models.log import Log, LogLevel, LogCategory
                    from uuid import uuid4
                    log = Log(
                        id=str(uuid4()),
                        level=LogLevel.ERROR,
                        category=LogCategory.INTEGRATION,
                        message=f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Bitrix24: {str(e)}",
                        extra_data={"error": str(e)}
                    )
                    db.add(log)
                    await db.commit()
            except:
                pass
    
    async def send_plannerka_reminder(self):
        """–ó–∞–¥–∞—á–∞: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞–Ω–µ—Ä–∫–µ –≤ 8:25"""
        logger.info("üîî Sending plannerka reminders...")
        
        try:
            import os
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            director_chat_id = os.getenv('CHAT_ID_DIRECTOR')
            
            if not director_chat_id:
                logger.error("‚ùå CHAT_ID_DIRECTOR –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞ Render")
                return
            
            message = "üîî <b>–≤ 8:30 –ø–ª–∞–Ω–µ—Ä–∫–∞, —Å–±–æ—Ä</b>"
            
            success = await telegram_service.send_message(
                chat_id=director_chat_id,
                text=message
            )
            
            if success:
                logger.info(f"‚úÖ Plannerka reminder sent to director (chat_id: {director_chat_id})")
            else:
                logger.warning(f"‚ö†Ô∏è Failed to send to director (chat_id: {director_chat_id})")
                
        except Exception as e:
            logger.error(f"‚ùå Plannerka reminder error: {e}")
    
    async def ai_call_employees(self):
        """–ó–∞–¥–∞—á–∞: AI –∑–≤–æ–Ω–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –≤ 16:55"""
        logger.info("üìû Starting AI call to collect daily report...")
        
        try:
            import httpx
            import os
            
            # –í–ª–∞–¥–µ–ª–µ—Ü (–ú–ú–í)
            owner_phone = "+79200924550"
            
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏
            reporting_prompt = """–í—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ VasDom, –∑–≤–æ–Ω–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É –¥–ª—è —Å–±–æ—Ä–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏.

–í–∞—à–∞ –∑–∞–¥–∞—á–∞:
1. –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è: "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –Ø AI –ø–æ–º–æ—â–Ω–∏–∫ VasDom. –ó–≤–æ–Ω—é –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏."
2. –°–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞ –¥–µ–Ω—å
3. –£–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏–ª–∏ —Ä–µ–∫–ª–∞–º–∞—Ü–∏—è—Ö
4. –°–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –ø–ª–∞–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞
5. –£–∑–Ω–∞—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ –∫–∞–∫–∞—è-—Ç–æ –ø–æ–º–æ—â—å –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
6. –í–µ–∂–ª–∏–≤–æ –ø–æ–ø—Ä–æ—â–∞—Ç—å—Å—è

–ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã. –ê–∫—Ç–∏–≤–Ω–æ —Å–ª—É—à–∞–π—Ç–µ –∏ –∑–∞–¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã."""
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π URL (–∫–∞–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
            backend_url = os.getenv('REACT_APP_BACKEND_URL') or os.getenv('BACKEND_URL') or 'http://localhost:8001'
            voice_api_url = f"{backend_url}/api/voice/ai-call"
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ httpx
            async with httpx.AsyncClient(timeout=httpx.Timeout(30.0)) as client:
                payload = {
                    "phone_number": owner_phone,
                    "prompt": reporting_prompt
                }
                
                logger.info(f"üìû Calling voice API: {voice_api_url}")
                response = await client.post(voice_api_url, json=payload)
                
                if response.status_code == 200:
                    data = response.json()
                    logger.info(f"‚úÖ AI call initiated to {owner_phone} for daily report")
                    logger.info(f"üìû Call details: {data}")
                else:
                    logger.error(f"‚ùå Failed to initiate AI call: {response.status_code} - {response.text}")
            
        except Exception as e:
            logger.error(f"‚ùå AI call error: {e}")
            import traceback
            logger.error(traceback.format_exc())

# Singleton instance
task_scheduler = TaskScheduler()
