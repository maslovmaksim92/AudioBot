"""
Mock Bitrix24 Service –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
"""
import logging
from typing import Dict, List, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class MockBitrix24Service:
    """Mock —Å–µ—Ä–≤–∏—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Bitrix24 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.mock_data = {
            "deals": [
                {
                    "ID": "1",
                    "TITLE": "–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–∞ - —É–ª. –õ–µ–Ω–∏–Ω–∞ 15, –ö–∞–ª—É–≥–∞",
                    "STAGE_ID": "NEW", 
                    "OPPORTUNITY": "15000",
                    "CURRENCY_ID": "RUB",
                    "DATE_CREATE": "2025-09-01T10:00:00",
                    "CONTACT_ID": "1"
                },
                {
                    "ID": "2", 
                    "TITLE": "–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤ - –ñ–ö –ë–µ—Ä–µ–∑–∫–∏, –ö–µ–º–µ—Ä–æ–≤–æ",
                    "STAGE_ID": "WORK",
                    "OPPORTUNITY": "45000", 
                    "CURRENCY_ID": "RUB",
                    "DATE_CREATE": "2025-09-02T14:30:00",
                    "CONTACT_ID": "2"
                },
                {
                    "ID": "3",
                    "TITLE": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ - –†–µ–º–æ–Ω—Ç –ø–æ–¥—ä–µ–∑–¥–∞ —É–ª. –ú–∏—Ä–∞ 22",
                    "STAGE_ID": "WORK",
                    "OPPORTUNITY": "120000",
                    "CURRENCY_ID": "RUB", 
                    "DATE_CREATE": "2025-08-28T09:15:00",
                    "CONTACT_ID": "3"
                }
            ],
            "contacts": [
                {
                    "ID": "1",
                    "NAME": "–£–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è –ö–∞–ª—É–≥–∞-–°–µ—Ä–≤–∏—Å",
                    "PHONE": "+7 (4842) 123-456",
                    "EMAIL": "info@kaluga-service.ru",
                    "ADDRESS": "–≥. –ö–∞–ª—É–≥–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞ 15"
                },
                {
                    "ID": "2", 
                    "NAME": "–¢–°–ñ –ë–µ—Ä–µ–∑–∫–∏",
                    "PHONE": "+7 (3842) 654-321",
                    "EMAIL": "tszh@berezki-kem.ru", 
                    "ADDRESS": "–≥. –ö–µ–º–µ—Ä–æ–≤–æ, –ñ–ö –ë–µ—Ä–µ–∑–∫–∏"
                }
            ],
            "companies": [
                {
                    "ID": "1",
                    "TITLE": "–û–û–û –ö–∞–ª—É–≥–∞-–°–µ—Ä–≤–∏—Å", 
                    "ADDRESS": "–≥. –ö–∞–ª—É–≥–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞ 15",
                    "PHONE": "+7 (4842) 123-456"
                },
                {
                    "ID": "2",
                    "TITLE": "–¢–°–ñ –ë–µ—Ä–µ–∑–∫–∏",
                    "ADDRESS": "–≥. –ö–µ–º–µ—Ä–æ–≤–æ, –ñ–ö –ë–µ—Ä–µ–∑–∫–∏", 
                    "PHONE": "+7 (3842) 654-321"
                }
            ]
        }
        logger.info("‚úÖ Mock Bitrix24 service initialized with demo data")
    
    async def test_connection(self) -> Dict:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –º–æ–∫ –≤–µ—Ä—Å–∏—è"""
        return {
            "status": "success",
            "message": "Mock Bitrix24 connection OK (demo data)",
            "user": {
                "ID": "1",
                "NAME": "Demo User",
                "EMAIL": "demo@vas-dom.ru"
            },
            "note": "–≠—Ç–æ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω webhook URL –∏–∑ Bitrix24"
        }
    
    async def get_deals(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–¥–µ–ª–∫–∏ - –º–æ–∫ –≤–µ—Ä—Å–∏—è"""
        logger.info("üìã Returning mock deals data")
        return self.mock_data["deals"]
    
    async def get_cleaning_houses_deals(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞ –¥–ª—è —É–±–æ—Ä–∫–∏ - –º–æ–∫ –≤–µ—Ä—Å–∏—è"""
        cleaning_deals = [
            deal for deal in self.mock_data["deals"] 
            if "—É–±–æ—Ä–∫–∞" in deal["TITLE"].lower() or "–ø–æ–¥—ä–µ–∑–¥" in deal["TITLE"].lower()
        ]
        logger.info(f"üè† Returning {len(cleaning_deals)} cleaning houses")
        return cleaning_deals
    
    async def get_contacts(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã - –º–æ–∫ –≤–µ—Ä—Å–∏—è"""
        return self.mock_data["contacts"]
    
    async def get_companies(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ - –º–æ–∫ –≤–µ—Ä—Å–∏—è"""
        return self.mock_data["companies"]
    
    async def get_cleaning_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - –º–æ–∫ –≤–µ—Ä—Å–∏—è"""
        deals = self.mock_data["deals"]
        contacts = self.mock_data["contacts"]
        companies = self.mock_data["companies"]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –≥–æ—Ä–æ–¥–∞–º
        kaluga_count = sum(1 for item in contacts + companies if "–∫–∞–ª—É–≥–∞" in item.get("ADDRESS", "").lower())
        kemerovo_count = sum(1 for item in contacts + companies if "–∫–µ–º–µ—Ä–æ–≤–æ" in item.get("ADDRESS", "").lower())
        
        return {
            "total_deals": len(deals),
            "total_contacts": len(contacts), 
            "total_companies": len(companies),
            "kaluga_properties": kaluga_count,
            "kemerovo_properties": kemerovo_count,
            "last_updated": datetime.utcnow().isoformat(),
            "note": "–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        }
    
    async def create_task(self, title: str, description: str = "", responsible_id: int = 1, deadline: str = None) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É - –º–æ–∫ –≤–µ—Ä—Å–∏—è"""
        task_id = f"demo_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}"
        
        logger.info(f"üìù Mock task created: {title}")
        
        return {
            'success': True,
            'task_id': task_id,
            'title': title,
            'note': '–î–µ–º–æ-–∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ (—Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Bitrix24)'
        }
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ - –º–æ–∫ –≤–µ—Ä—Å–∏—è"""
        pass

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–∫-—Å–µ—Ä–≤–∏—Å–∞
mock_bitrix24_service = None

async def get_mock_bitrix24_service():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–∫-—Å–µ—Ä–≤–∏—Å–∞"""
    global mock_bitrix24_service
    if mock_bitrix24_service is None:
        mock_bitrix24_service = MockBitrix24Service()
    return mock_bitrix24_service