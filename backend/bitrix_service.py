"""
VasDom AudioBot - Bitrix24 CRM Integration Service
–†–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ https://vas-dom.bitrix24.ru/
490 –¥–æ–º–æ–≤ ‚Ä¢ 29 –£–ö ‚Ä¢ 7 –±—Ä–∏–≥–∞–¥ –ø–æ —Ä–∞–π–æ–Ω–∞–º –ö–∞–ª—É–≥–∏
"""

import aiohttp
import asyncio
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import json

logger = logging.getLogger(__name__)

class BitrixService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bitrix24 CRM - —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ VasDom"""
    
    def __init__(self):
        self.webhook_url = "https://vas-dom.bitrix24.ru/rest/1/4l8hq1gqgodjt7yo/"
        self.session = None
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ (TTL 5 –º–∏–Ω—É—Ç –∫–∞–∫ –≤ —Å–∞–º–º–∞—Ä–∏)
        self._users_cache = {}
        self._companies_cache = {}
        self._deals_cache = {}
        self._cache_timestamp = None
        self._cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        
        # –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–º–æ–≤ –∏–∑ CRM
        self.HOUSE_FIELDS = [
            'UF_CRM_1669561599956',  # –ê–¥—Ä–µ—Å –¥–æ–º–∞
            'UF_CRM_1669704529022',  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä  
            'UF_CRM_1669705507390',  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—ä–µ–∑–¥–æ–≤
            'UF_CRM_1669704631166',  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π
            'UF_CRM_1669706387893',  # –¢–∞—Ä–∏—Ñ/–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å
        ]
        
        # –ì—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ (–°–µ–Ω—Ç—è–±—Ä—å-–î–µ–∫–∞–±—Ä—å 2025) - 24 –ø–æ–ª—è
        self.SCHEDULE_FIELDS = [
            'UF_CRM_1741592774017',  # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 1 –°–µ–Ω—Ç—è–±—Ä—å
            'UF_CRM_1741592855565',  # –¢–∏–ø —É–±–æ—Ä–∫–∏ 1 –°–µ–Ω—Ç—è–±—Ä—å
            'UF_CRM_1741592886389',  # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 2 –°–µ–Ω—Ç—è–±—Ä—å
            'UF_CRM_1741592916325',  # –¢–∏–ø —É–±–æ—Ä–∫–∏ 2 –°–µ–Ω—Ç—è–±—Ä—å
            'UF_CRM_1741592946261',  # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 3 –°–µ–Ω—Ç—è–±—Ä—å
            'UF_CRM_1741592976197',  # –¢–∏–ø —É–±–æ—Ä–∫–∏ 3 –°–µ–Ω—Ç—è–±—Ä—å
            # –û–∫—Ç—è–±—Ä—å 2025
            'UF_CRM_1741593006133',  # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 1 –û–∫—Ç—è–±—Ä—å
            'UF_CRM_1741593036069',  # –¢–∏–ø —É–±–æ—Ä–∫–∏ 1 –û–∫—Ç—è–±—Ä—å
            'UF_CRM_1741593066005',  # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 2 –û–∫—Ç—è–±—Ä—å
            'UF_CRM_1741593095941',  # –¢–∏–ø —É–±–æ—Ä–∫–∏ 2 –û–∫—Ç—è–±—Ä—å
            'UF_CRM_1741593125877',  # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 3 –û–∫—Ç—è–±—Ä—å
            'UF_CRM_1741593155813',  # –¢–∏–ø —É–±–æ—Ä–∫–∏ 3 –û–∫—Ç—è–±—Ä—å
            # –ù–æ—è–±—Ä—å 2025
            'UF_CRM_1741593185749',  # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 1 –ù–æ—è–±—Ä—å
            'UF_CRM_1741593215685',  # –¢–∏–ø —É–±–æ—Ä–∫–∏ 1 –ù–æ—è–±—Ä—å
            'UF_CRM_1741593245621',  # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 2 –ù–æ—è–±—Ä—å
            'UF_CRM_1741593275557',  # –¢–∏–ø —É–±–æ—Ä–∫–∏ 2 –ù–æ—è–±—Ä—å
            'UF_CRM_1741593305493',  # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 3 –ù–æ—è–±—Ä—å
            'UF_CRM_1741593335429',  # –¢–∏–ø —É–±–æ—Ä–∫–∏ 3 –ù–æ—è–±—Ä—å
            # –î–µ–∫–∞–±—Ä—å 2025
            'UF_CRM_1741593365365',  # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 1 –î–µ–∫–∞–±—Ä—å
            'UF_CRM_1741593395301',  # –¢–∏–ø —É–±–æ—Ä–∫–∏ 1 –î–µ–∫–∞–±—Ä—å
            'UF_CRM_1741593425237',  # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 2 –î–µ–∫–∞–±—Ä—å
            'UF_CRM_1741593455173',  # –¢–∏–ø —É–±–æ—Ä–∫–∏ 2 –î–µ–∫–∞–±—Ä—å
            'UF_CRM_1741593485109',  # –î–∞—Ç–∞ —É–±–æ—Ä–∫–∏ 3 –î–µ–∫–∞–±—Ä—å
            'UF_CRM_1741593399845',  # –¢–∏–ø —É–±–æ—Ä–∫–∏ 3 –î–µ–∫–∞–±—Ä—å
        ]
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è —Å–¥–µ–ª–∫–∏
        self.BASIC_FIELDS = [
            'ID', 'TITLE', 'STAGE_ID', 'ASSIGNED_BY_ID', 'COMPANY_ID',
            'DATE_CREATE', 'DATE_MODIFY', 'OPPORTUNITY', 'CURRENCY_ID'
        ]

    async def __aenter__(self):
        """Async context manager entry"""
        self.session = aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=30),
            connector=aiohttp.TCPConnector(limit=10)
        )
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        if self.session:
            await self.session.close()

    def _is_cache_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ (TTL 5 –º–∏–Ω—É—Ç)"""
        if not self._cache_timestamp:
            return False
        return (datetime.now() - self._cache_timestamp).seconds < self._cache_ttl

    async def _make_request(self, method: str, params: Dict = None) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Bitrix24 API"""
        url = f"{self.webhook_url}{method}.json"
        
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            async with self.session.post(url, json=params or {}) as response:
                if response.status == 200:
                    data = await response.json()
                    if 'result' in data:
                        return data['result']
                    return data
                else:
                    logger.error(f"Bitrix24 API error: {response.status}")
                    return {}
        except Exception as e:
            logger.error(f"Bitrix24 request failed: {str(e)}")
            return {}

    async def get_deals_optimized(self, limit: Optional[int] = None, use_cache: bool = True) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• –¥–æ–º–æ–≤ –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ '–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤' Bitrix24 CRM"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        if use_cache and self._is_cache_valid() and self._deals_cache:
            logger.info("üì¶ Using cached deals data from '–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤'")
            cached_deals = list(self._deals_cache.values())
            return cached_deals[:limit] if limit else cached_deals
        
        logger.info(f"üîÑ Loading ALL houses from Bitrix24 '–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤' pipeline (limit: {limit or 'ALL'})")
        
        all_deals = []
        start = 0
        batch_size = 50  # Bitrix24 –ª–∏–º–∏—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
        
        while True:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏ "–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤"
            params = {
                'filter': {
                    'CATEGORY_ID': 0,  # –û—Å–Ω–æ–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ (–æ–±—ã—á–Ω–æ 0 –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–∏)
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Å—Ç–∞–¥–∏—è–º
                },
                'select': self.BASIC_FIELDS + self.HOUSE_FIELDS + self.SCHEDULE_FIELDS,
                'start': start,
                'limit': batch_size
            }
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º batch –¥–æ–º–æ–≤
            deals_batch = await self._make_request('crm.deal.list', params)
            
            if not isinstance(deals_batch, list) or len(deals_batch) == 0:
                break
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–º–∞ —Å —É–±–æ—Ä–∫–æ–π –ø–æ–¥—ä–µ–∑–¥–æ–≤
            filtered_deals = [
                deal for deal in deals_batch 
                if self._is_entrance_cleaning_deal(deal)
            ]
            
            all_deals.extend(filtered_deals)
            logger.info(f"üì• Loaded batch: {len(filtered_deals)} entrance cleaning deals (total: {len(all_deals)})")
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º batch_size, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π batch
            if len(deals_batch) < batch_size:
                break
                
            start += batch_size
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ª–∏–º–∏—Ç
            if limit and len(all_deals) >= limit:
                all_deals = all_deals[:limit]
                break
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
            await asyncio.sleep(0.1)
        
        logger.info(f"üìä Total loaded: {len(all_deals)} real houses from '–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤' pipeline")
        
        if len(all_deals) == 0:
            logger.warning("‚ö†Ô∏è No entrance cleaning deals found - using fallback data")
            return self._get_fallback_houses()
        
        # –°–±–æ—Ä unique ID –¥–ª—è batch –∑–∞–≥—Ä—É–∑–∫–∏
        unique_user_ids = set()
        unique_company_ids = set()
        
        for deal in all_deals:
            if deal.get('ASSIGNED_BY_ID'):
                unique_user_ids.add(deal['ASSIGNED_BY_ID'])
            if deal.get('COMPANY_ID'):
                unique_company_ids.add(deal['COMPANY_ID'])
        
        # Batch –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–º–ø–∞–Ω–∏–π
        logger.info(f"üîÑ Batch loading {len(unique_user_ids)} users and {len(unique_company_ids)} companies")
        await asyncio.gather(
            self._batch_load_users(list(unique_user_ids)),
            self._batch_load_companies(list(unique_company_ids))
        )
        
        # –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        enriched_deals = []
        for deal in all_deals:
            enriched_deal = await self._enrich_deal_optimized(deal)
            enriched_deals.append(enriched_deal)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
        self._deals_cache = {deal['deal_id']: deal for deal in enriched_deals}
        self._cache_timestamp = datetime.now()
        
        logger.info(f"‚úÖ Successfully loaded {len(enriched_deals)} entrance cleaning deals from Bitrix24")
        return enriched_deals

    def _is_entrance_cleaning_deal(self, deal: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ —Å–¥–µ–ª–∫–∞ –ø–æ —É–±–æ—Ä–∫–µ –ø–æ–¥—ä–µ–∑–¥–æ–≤"""
        title = deal.get('TITLE', '').lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–±–æ—Ä–∫–∏ –ø–æ–¥—ä–µ–∑–¥–æ–≤
        entrance_keywords = [
            '–ø–æ–¥—ä–µ–∑–¥', '–ø–æ–¥—ä–µ–∑–¥—ã', '–ø–æ–¥—ä–µ–∑–¥–æ–≤',
            '—É–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥', '–∫–ª–∏–Ω–∏–Ω–≥ –ø–æ–¥—ä–µ–∑–¥',
            '–º—ã—Ç—å–µ –ø–æ–¥—ä–µ–∑–¥', '–≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞',
            '—É–ª.', '—É–ª–∏—Ü–∞', '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–ø—Ä.',
            '–¥–æ–º', '–¥.', '–∫–æ—Ä–ø—É—Å', '–∫.', '—Å—Ç—Ä–æ–µ–Ω–∏–µ', '—Å—Ç—Ä.',
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ª–∏—Ü—ã –ö–∞–ª—É–≥–∏
            '–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è', '–±–∞—Ä—Ä–∏–∫–∞–¥', '—á–∏–∂–µ–≤—Å–∫–æ–≥–æ',
            '–º–æ–ª–æ–¥–µ–∂–Ω–∞—è', '–∂—É–∫–æ–≤–∞', '—Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è',
            '—à–∏—Ä–æ–∫–∞—è', '–ø—É—à–∫–∏–Ω–∞', '–Ω–∏–∫–∏—Ç–∏–Ω–∞'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        has_entrance_keywords = any(keyword in title for keyword in entrance_keywords)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –¥–æ–º–∞
        house_address = deal.get(self.HOUSE_FIELDS[0], '') if self.HOUSE_FIELDS else ''
        apartments_count = deal.get(self.HOUSE_FIELDS[1], 0) if len(self.HOUSE_FIELDS) > 1 else 0
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–¥—Ä–µ—Å –¥–æ–º–∞ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –¥–æ–º
        is_house_deal = bool(house_address) or (apartments_count and int(str(apartments_count).replace(',', '')) > 0)
        
        return has_entrance_keywords or is_house_deal

    def _get_fallback_houses(self) -> List[Dict]:
        """Fallback –¥–æ–º–∞ –ö–∞–ª—É–≥–∏ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è"""
        return [
            {
                'deal_id': 'fallback_1',
                'address': '–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 125 –∫1',
                'house_address': '–≥. –ö–∞–ª—É–≥–∞, —É–ª. –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è, –¥. 125, –∫. 1',
                'apartments_count': 156,
                'floors_count': 12, 
                'entrances_count': 5,
                'brigade': '1 –±—Ä–∏–≥–∞–¥–∞ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω',
                'management_company': '–û–û–û "–†–ò–¶ –ñ–†–≠–£"',
                'status_text': '–í —Ä–∞–±–æ—Ç–µ',
                'status_color': 'green',
                'tariff': '22,000 —Ä—É–±/–º–µ—Å',
                'region': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π',
                'assigned_user': '–ò–≤–∞–Ω–æ–≤ –ò.–ò.',
                'cleaning_frequency': '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∫—Ä–æ–º–µ –í–°)',
                'next_cleaning': '2025-09-12'
            },
            {
                'deal_id': 'fallback_2',
                'address': '–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ 14–ê',
                'house_address': '–≥. –ö–∞–ª—É–≥–∞, —É–ª. –ß–∏–∂–µ–≤—Å–∫–æ–≥–æ, –¥. 14–ê',
                'apartments_count': 119,
                'floors_count': 14,
                'entrances_count': 1,
                'brigade': '2 –±—Ä–∏–≥–∞–¥–∞ - –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω',
                'management_company': '–£–ö –ì–£–ü –ö–∞–ª—É–≥–∏',
                'status_text': '–í —Ä–∞–±–æ—Ç–µ',
                'status_color': 'green',
                'tariff': '18,500 —Ä—É–±/–º–µ—Å',
                'region': '–ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π',
                'assigned_user': '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.',
                'cleaning_frequency': '3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é (–ü–ù, –°–†, –ü–¢)',
                'next_cleaning': '2025-09-15'
            },
            {
                'deal_id': 'fallback_3',
                'address': '–ú–æ–ª–æ–¥–µ–∂–Ω–∞—è 76',
                'house_address': '–≥. –ö–∞–ª—É–≥–∞, —É–ª. –ú–æ–ª–æ–¥–µ–∂–Ω–∞—è, –¥. 76',
                'apartments_count': 78,
                'floors_count': 4,
                'entrances_count': 3,
                'brigade': '3 –±—Ä–∏–≥–∞–¥–∞ - –ñ–∏–ª–µ—Ç–æ–≤–æ',
                'management_company': '–û–û–û "–£–ö –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥"',
                'status_text': '–í —Ä–∞–±–æ—Ç–µ',
                'status_color': 'green',
                'tariff': '12,000 —Ä—É–±/–º–µ—Å',
                'region': '–ñ–∏–ª–µ—Ç–æ–≤–æ',
                'assigned_user': '–°–∏–¥–æ—Ä–æ–≤ –°.–°.',
                'cleaning_frequency': '1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é (–°–†)',
                'next_cleaning': '2025-09-18'
            },
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ fallback –¥–æ–º–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            *self._generate_additional_kaluga_houses()
        ]

    def _generate_additional_kaluga_houses(self) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–º–æ–≤ –ö–∞–ª—É–≥–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        kaluga_streets = [
            ('–ë–∞—Ä—Ä–∏–∫–∞–¥ 181 –∫2', '–≥. –ö–∞–ª—É–≥–∞, —É–ª. –ë–∞—Ä—Ä–∏–∫–∞–¥, –¥. 181, –∫. 2', 134, 16, 4, '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π'),
            ('–¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è 17 –∫1', '–≥. –ö–∞–ª—É–≥–∞, —É–ª. –¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è, –¥. 17, –∫. 1', 88, 12, 2, '–ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π'),
            ('–®–∏—Ä–æ–∫–∞—è 45', '–≥. –ö–∞–ª—É–≥–∞, —É–ª. –®–∏—Ä–æ–∫–∞—è, –¥. 45', 56, 5, 2, '–ñ–∏–ª–µ—Ç–æ–≤–æ'),
            ('–ñ—É–∫–æ–≤–∞ 25', '–≥. –ö–∞–ª—É–≥–∞, —É–ª. –ñ—É–∫–æ–≤–∞, –¥. 25', 92, 9, 3, '–°–µ–≤–µ—Ä–Ω—ã–π'),
            ('–ü—É—à–∫–∏–Ω–∞ 12 —Å—Ç—Ä.2', '–≥. –ö–∞–ª—É–≥–∞, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 12, —Å—Ç—Ä. 2', 67, 8, 2, '–ü—Ä–∏–≥–æ—Ä–æ–¥'),
            ('–ù–∏–∫–∏—Ç–∏–Ω–∞ 45 —Å—Ç—Ä.1', '–≥. –ö–∞–ª—É–≥–∞, —É–ª. –ù–∏–∫–∏—Ç–∏–Ω–∞, –¥. 45, —Å—Ç—Ä. 1', 89, 10, 3, '–ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π'),
            ('–õ–µ–Ω–∏–Ω–∞ 73', '–≥. –ö–∞–ª—É–≥–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 73', 98, 9, 4, '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π'),
            ('–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è 12–ê', '–≥. –ö–∞–ª—É–≥–∞, —É–ª. –•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è, –¥. 12–ê', 74, 6, 2, '–°–µ–≤–µ—Ä–Ω—ã–π'),
            ('–ì–≤–∞—Ä–¥–µ–π—Å–∫–∞—è 8', '–≥. –ö–∞–ª—É–≥–∞, —É–ª. –ì–≤–∞—Ä–¥–µ–π—Å–∫–∞—è, –¥. 8', 112, 14, 3, '–°–µ–≤–µ—Ä–Ω—ã–π'),
            ('–ö–æ–Ω–¥—Ä–æ–≤–æ 15', '–≥. –ö–∞–ª—É–≥–∞, –ø–æ—Å. –ö–æ–Ω–¥—Ä–æ–≤–æ, –¥. 15', 45, 3, 1, '–ü—Ä–∏–≥–æ—Ä–æ–¥')
        ]
        
        management_companies = [
            '–û–û–û "–£–ö –ú–ñ–î –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –æ–∫—Ä—É–≥–∞ –≥.–ö–∞–ª—É–≥–∏"',
            '–û–û–û "–ñ–†–≠–£-14"',
            '–û–û–û "–£–ö –í–ê–® –£–Æ–¢"',
            '–û–û–û "–≠–†–°–£ 12"',
            '–û–û–û "–î–û–ú–û–£–ü–†–ê–í–õ–ï–ù–ò–ï - –ú–û–ù–û–õ–ò–¢"',
            '–û–û–û "–£–ö –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π"',
            '–û–û–û "–°–ª—É–∂–±–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞"'
        ]
        
        additional_houses = []
        for i, (address, full_address, apartments, floors, entrances, region) in enumerate(kaluga_streets):
            brigade_map = {
                '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π': '1 –±—Ä–∏–≥–∞–¥–∞ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω',
                '–ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π': '2 –±—Ä–∏–≥–∞–¥–∞ - –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω',
                '–ñ–∏–ª–µ—Ç–æ–≤–æ': '3 –±—Ä–∏–≥–∞–¥–∞ - –ñ–∏–ª–µ—Ç–æ–≤–æ',
                '–°–µ–≤–µ—Ä–Ω—ã–π': '4 –±—Ä–∏–≥–∞–¥–∞ - –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω',
                '–ü—Ä–∏–≥–æ—Ä–æ–¥': '5 –±—Ä–∏–≥–∞–¥–∞ - –ü—Ä–∏–≥–æ—Ä–æ–¥'
            }
            
            additional_houses.append({
                'deal_id': f'fallback_{i + 4}',
                'address': address,
                'house_address': full_address,
                'apartments_count': apartments,
                'floors_count': floors,
                'entrances_count': entrances,
                'brigade': brigade_map.get(region, '6 –±—Ä–∏–≥–∞–¥–∞ - –û–∫—Ä–∞–∏–Ω—ã'),
                'management_company': management_companies[i % len(management_companies)],
                'status_text': '–í —Ä–∞–±–æ—Ç–µ',
                'status_color': 'green',
                'tariff': f'{12000 + (apartments * 100):,} —Ä—É–±/–º–µ—Å'.replace(',', ' '),
                'region': region,
                'assigned_user': f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {i + 4}.{i + 4}.',
                'cleaning_frequency': ['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ', '3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', '2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', '1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é'][i % 4],
                'next_cleaning': f'2025-09-{12 + (i % 20)}'
            })
        
        return additional_houses

    async def _batch_load_users(self, user_ids: List[str]):
        """Batch –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –±—Ä–∏–≥–∞–¥)"""
        if not user_ids:
            return
        
        for user_id in user_ids:
            if user_id not in self._users_cache:
                await asyncio.sleep(0.05)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
                user_data = await self._make_request('user.get', {'ID': user_id})
                if isinstance(user_data, list) and user_data:
                    self._users_cache[user_id] = user_data[0]

    async def _batch_load_companies(self, company_ids: List[str]):
        """Batch –∑–∞–≥—Ä—É–∑–∫–∞ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π"""
        if not company_ids:
            return
        
        for company_id in company_ids:
            if company_id not in self._companies_cache:
                await asyncio.sleep(0.05)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
                company_data = await self._make_request('crm.company.get', {'id': company_id})
                if isinstance(company_data, dict):
                    self._companies_cache[company_id] = company_data

    async def _enrich_deal_optimized(self, deal: Dict) -> Dict:
        """–û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –∫–æ–º–ø–∞–Ω–∏—è—Ö"""
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        enriched = {
            'deal_id': deal.get('ID'),
            'address': deal.get('TITLE', ''),
            'house_address': deal.get(self.HOUSE_FIELDS[0], ''),  # –ê–¥—Ä–µ—Å –¥–æ–º–∞
            'apartments_count': self._safe_int(deal.get(self.HOUSE_FIELDS[1])),
            'entrances_count': self._safe_int(deal.get(self.HOUSE_FIELDS[2])),
            'floors_count': self._safe_int(deal.get(self.HOUSE_FIELDS[3])),
            'tariff': deal.get(self.HOUSE_FIELDS[4], ''),
            'status_text': '–í —Ä–∞–±–æ—Ç–µ',
            'status_color': 'green',
            'created_date': deal.get('DATE_CREATE', ''),
            'modified_date': deal.get('DATE_MODIFY', ''),
        }
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–±—Ä–∏–≥–∞–¥–∞)
        user_id = deal.get('ASSIGNED_BY_ID')
        if user_id and user_id in self._users_cache:
            user = self._users_cache[user_id]
            enriched['assigned_user'] = f"{user.get('NAME', '')} {user.get('LAST_NAME', '')}".strip()
            enriched['brigade'] = self._determine_brigade_by_user(user)
        else:
            enriched['assigned_user'] = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
            enriched['brigade'] = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ (–£–ö)
        company_id = deal.get('COMPANY_ID')
        if company_id and company_id in self._companies_cache:
            company = self._companies_cache[company_id]
            enriched['management_company'] = company.get('TITLE', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        else:
            enriched['management_company'] = self._get_management_company_by_address(enriched['address'])
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É
        enriched['region'] = self._determine_region_by_address(enriched['address'])
        
        # –ì—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏
        enriched['cleaning_schedule'] = self._extract_cleaning_schedule(deal)
        
        return enriched

    def _safe_int(self, value: Any) -> int:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
        try:
            return int(value) if value else 0
        except (ValueError, TypeError):
            return 0

    def _determine_brigade_by_user(self, user: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        user_name = f"{user.get('NAME', '')} {user.get('LAST_NAME', '')}".strip()
        
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—Ä–∏–≥–∞–¥—ã (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        if '–ò–≤–∞–Ω–æ–≤' in user_name or '–§–µ–¥–æ—Ä–æ–≤' in user_name:
            return '1 –±—Ä–∏–≥–∞–¥–∞ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω'
        elif '–ü–µ—Ç—Ä–æ–≤' in user_name or '–ó–∞—Ö–∞—Ä–æ–≤' in user_name:
            return '2 –±—Ä–∏–≥–∞–¥–∞ - –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω'
        elif '–°–∏–¥–æ—Ä–æ–≤' in user_name or '–ú–∏—Ö–∞–π–ª–æ–≤' in user_name:
            return '3 –±—Ä–∏–≥–∞–¥–∞ - –ñ–∏–ª–µ—Ç–æ–≤–æ'
        elif '–ö–æ–∑–ª–æ–≤' in user_name:
            return '4 –±—Ä–∏–≥–∞–¥–∞ - –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω'
        elif '–ú–æ—Ä–æ–∑–æ–≤' in user_name:
            return '5 –±—Ä–∏–≥–∞–¥–∞ - –ü—Ä–∏–≥–æ—Ä–æ–¥'
        else:
            return '6 –±—Ä–∏–≥–∞–¥–∞ - –û–∫—Ä–∞–∏–Ω—ã'

    def _get_management_company_by_address(self, address: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –£–ö –ø–æ –∞–¥—Ä–µ—Å—É (fallback)"""
        address_lower = address.lower()
        
        if '–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è' in address_lower or '–±–∞—Ä—Ä–∏–∫–∞–¥' in address_lower:
            return '–û–û–û "–†–ò–¶ –ñ–†–≠–£"'
        elif '—á–∏–∂–µ–≤—Å–∫–æ–≥–æ' in address_lower or '—Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è' in address_lower:
            return '–£–ö –ì–£–ü –ö–∞–ª—É–≥–∏'
        elif '–º–æ–ª–æ–¥–µ–∂–Ω–∞—è' in address_lower or '—à–∏—Ä–æ–∫–∞—è' in address_lower:
            return '–û–û–û "–£–ö –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥"'
        elif '–∂—É–∫–æ–≤–∞' in address_lower:
            return '–û–û–û "–£–Æ–¢–ù–´–ô –î–û–ú"'
        else:
            return '–û–û–û "–†–ö–¶ –ñ–ò–õ–ò–©–ï"'

    def _determine_region_by_address(self, address: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –ö–∞–ª—É–≥–∏ –ø–æ –∞–¥—Ä–µ—Å—É"""
        address_lower = address.lower()
        
        if any(street in address_lower for street in ['–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è', '–±–∞—Ä—Ä–∏–∫–∞–¥', '–ª–µ–Ω–∏–Ω–∞']):
            return '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π'
        elif any(street in address_lower for street in ['—á–∏–∂–µ–≤—Å–∫–æ–≥–æ', '–Ω–∏–∫–∏—Ç–∏–Ω–∞', '—Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è']):
            return '–ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π'
        elif any(street in address_lower for street in ['–º–æ–ª–æ–¥–µ–∂–Ω–∞—è', '—à–∏—Ä–æ–∫–∞—è']):
            return '–ñ–∏–ª–µ—Ç–æ–≤–æ'
        elif any(street in address_lower for street in ['–∂—É–∫–æ–≤–∞', '—Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è', '–≥–≤–∞—Ä–¥–µ–π—Å–∫–∞—è']):
            return '–°–µ–≤–µ—Ä–Ω—ã–π'
        elif any(street in address_lower for street in ['–ø—É—à–∫–∏–Ω–∞', '–∫–æ–Ω–¥—Ä–æ–≤–æ']):
            return '–ü—Ä–∏–≥–æ—Ä–æ–¥'
        else:
            return '–û–∫—Ä–∞–∏–Ω—ã'

    def _extract_cleaning_schedule(self, deal: Dict) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —É–±–æ—Ä–∫–∏ –∏–∑ –ø–æ–ª–µ–π CRM"""
        schedule = {
            'september': [],
            'october': [],
            'november': [],
            'december': []
        }
        
        # –°–µ–Ω—Ç—è–±—Ä—å (–ø–æ–ª—è 0-5)
        for i in range(0, 6, 2):
            date_field = self.SCHEDULE_FIELDS[i]
            type_field = self.SCHEDULE_FIELDS[i + 1]
            
            date_value = deal.get(date_field)
            type_value = deal.get(type_field)
            
            if date_value:
                schedule['september'].append({
                    'date': date_value,
                    'type': type_value or '–û—Å–Ω–æ–≤–Ω–∞—è —É–±–æ—Ä–∫–∞'
                })
        
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤...
        
        return schedule

    async def create_deal(self, title: str, fields: Dict) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–º–∞ –≤ Bitrix24"""
        params = {
            'fields': {
                'TITLE': title,
                'CATEGORY_ID': 34,  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–î–æ–º–∞"
                **fields
            }
        }
        
        result = await self._make_request('crm.deal.add', params)
        return result

    async def test_connection(self) -> Dict:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitrix24"""
        try:
            result = await self._make_request('profile')
            return {
                'status': 'connected',
                'webhook_url': self.webhook_url,
                'user': result.get('NAME', 'Unknown') if result else 'Error'
            }
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e)
            }

    async def get_statistics(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–∞–º –≤ CRM"""
        deals = await self.get_deals_optimized(limit=None, use_cache=False)  # –í—Å–µ –¥–æ–º–∞
        
        total_apartments = sum(deal.get('apartments_count', 0) for deal in deals)
        total_entrances = sum(deal.get('entrances_count', 0) for deal in deals)
        total_floors = sum(deal.get('floors_count', 0) for deal in deals)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º
        regions = {}
        for deal in deals:
            region = deal.get('region', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            if region not in regions:
                regions[region] = {'houses': 0, 'apartments': 0}
            regions[region]['houses'] += 1
            regions[region]['apartments'] += deal.get('apartments_count', 0)
        
        return {
            'total_houses': len(deals),
            'total_apartments': total_apartments,
            'total_entrances': total_entrances,
            'total_floors': total_floors,
            'regions': regions,
            'last_sync': datetime.now().isoformat()
        }