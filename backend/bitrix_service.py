"""
üîó –°–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Bitrix24 –¥–ª—è AudioBot
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–º–æ–≤, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ CRM
"""

import aiohttp
import asyncio
import os
from typing import List, Dict, Any, Optional
import logging
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

logger = logging.getLogger(__name__)

class BitrixService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bitrix24 API"""
    
    def __init__(self):
        self.webhook_url = os.environ.get('BITRIX_WEBHOOK_URL', '')
        self.portal_url = os.environ.get('BITRIX_PORTAL_URL', 'https://vas-dom.bitrix24.ru')
        
        if not self.webhook_url:
            logger.warning("BITRIX_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞")
            self.webhook_url = "https://vas-dom.bitrix24.ru/sample/"
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ URL –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ /
        if not self.webhook_url.endswith('/'):
            self.webhook_url += '/'
    
    async def _make_request(self, method: str, params: Dict[str, Any] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Bitrix24 API"""
        url = f"{self.webhook_url}{method}"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params, timeout=aiohttp.ClientTimeout(total=30)) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Bitrix24: {response.status} - {await response.text()}")
                        return {"result": [], "error": f"HTTP {response.status}"}
                        
        except asyncio.TimeoutError:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Bitrix24: {method}")
            return {"result": [], "error": "Timeout"}
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Bitrix24: {e}")
            return {"result": [], "error": str(e)}
    
    async def get_houses(self, limit: int = 500) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–º–æ–≤ –∏–∑ CRM (—Å–¥–µ–ª–∫–∏)"""
        params = {
            'select[]': [
                'ID', 
                'TITLE',
                'UF_CRM_1669704529022',  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä
                'UF_CRM_1669705507390',  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—ä–µ–∑–¥–æ–≤  
                'UF_CRM_1669704631166',  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π
                'UF_CRM_1669708345534',  # –£–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è
                'UF_CRM_1693297230181',  # –ì—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ —Å–µ–Ω—Ç—è–±—Ä—è
            ],
            'filter[CATEGORY_ID]': '0',  # –û—Å–Ω–æ–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞
            'start': '0'
        }
        
        if limit:
            params['ORDER'] = {'ID': 'DESC'}
        
        data = await self._make_request('crm.deal.list', params)
        houses = data.get('result', [])
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        normalized_houses = []
        for house in houses[:limit] if limit else houses:
            normalized_house = {
                'id': house.get('ID'),
                'address': house.get('TITLE', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'),
                'apartments': int(house.get('UF_CRM_1669704529022', 0) or 0),
                'entrances': int(house.get('UF_CRM_1669705507390', 0) or 0),
                'floors': int(house.get('UF_CRM_1669704631166', 0) or 0),
                'management_company': house.get('UF_CRM_1669708345534', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                'september_schedule': house.get('UF_CRM_1693297230181', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                'has_apartments': int(house.get('UF_CRM_1669704529022', 0) or 0) > 0,
                'has_entrances': int(house.get('UF_CRM_1669705507390', 0) or 0) > 0,
                'has_floors': int(house.get('UF_CRM_1669704631166', 0) or 0) > 0,
            }
            normalized_houses.append(normalized_house)
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–º–æ–≤ –∏–∑ Bitrix24: {len(normalized_houses)}")
        return normalized_houses
    
    async def get_employees(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        params = {
            'select[]': [
                'ID',
                'NAME', 
                'LAST_NAME',
                'EMAIL',
                'WORK_POSITION',
                'UF_DEPARTMENT',
                'ACTIVE'
            ],
            'filter[ACTIVE]': 'Y'
        }
        
        data = await self._make_request('user.get', params)
        users = data.get('result', [])
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        normalized_employees = []
        for user in users:
            normalized_employee = {
                'id': user.get('ID'),
                'name': f"{user.get('NAME', '')} {user.get('LAST_NAME', '')}".strip(),
                'email': user.get('EMAIL', ''),
                'position': user.get('WORK_POSITION', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                'department_id': user.get('UF_DEPARTMENT', [None])[0] if user.get('UF_DEPARTMENT') else None,
                'active': user.get('ACTIVE') == 'Y'
            }
            normalized_employees.append(normalized_employee)
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ Bitrix24: {len(normalized_employees)}")
        return normalized_employees
    
    async def get_departments(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π"""
        data = await self._make_request('department.get')
        departments = data.get('result', [])
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
        normalized_departments = []
        for dept in departments:
            normalized_department = {
                'id': dept.get('ID'),
                'name': dept.get('NAME', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                'parent_id': dept.get('PARENT'),
                'head_id': dept.get('UF_HEAD'),
                'sort': dept.get('SORT', 500)
            }
            normalized_departments.append(normalized_department)
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –∏–∑ Bitrix24: {len(normalized_departments)}")
        return normalized_departments
    
    async def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        houses_task = self.get_houses()
        employees_task = self.get_employees()
        departments_task = self.get_departments()
        
        houses, employees, departments = await asyncio.gather(
            houses_task, employees_task, departments_task, 
            return_exceptions=True
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if isinstance(houses, Exception):
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–æ–≤: {houses}")
            houses = []
        
        if isinstance(employees, Exception):
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {employees}")
            employees = []
            
        if isinstance(departments, Exception):
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π: {departments}")
            departments = []
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_apartments = sum(house.get('apartments', 0) for house in houses)
        total_entrances = sum(house.get('entrances', 0) for house in houses)
        total_floors = sum(house.get('floors', 0) for house in houses)
        
        # –ü–æ–¥—Å—á–µ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π
        management_companies = set()
        houses_with_schedule = 0
        
        for house in houses:
            mc = house.get('management_company', '').strip()
            if mc and mc != '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
                management_companies.add(mc)
            
            schedule = house.get('september_schedule', '').strip()
            if schedule and schedule != '–ù–µ —É–∫–∞–∑–∞–Ω':
                houses_with_schedule += 1
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º (–±—Ä–∏–≥–∞–¥–∞–º)
        brigades = {}
        for employee in employees:
            dept_id = employee.get('department_id')
            if dept_id:
                if dept_id not in brigades:
                    brigades[dept_id] = {
                        'id': dept_id,
                        'name': f'–ë—Ä–∏–≥–∞–¥–∞ {dept_id}',
                        'employees': []
                    }
                brigades[dept_id]['employees'].append(employee)
        
        # –ù–∞–π–¥–µ–º –∏–º–µ–Ω–∞ –±—Ä–∏–≥–∞–¥ –∏–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
        for dept in departments:
            dept_id = dept.get('id')
            if dept_id in brigades:
                brigades[dept_id]['name'] = dept.get('name', f'–ë—Ä–∏–≥–∞–¥–∞ {dept_id}')
        
        statistics = {
            'houses': {
                'total': len(houses),
                'with_apartments': len([h for h in houses if h.get('has_apartments')]),
                'with_entrances': len([h for h in houses if h.get('has_entrances')]),
                'with_floors': len([h for h in houses if h.get('has_floors')]),
                'with_schedule': houses_with_schedule,
                'total_apartments': total_apartments,
                'total_entrances': total_entrances,  
                'total_floors': total_floors
            },
            'employees': {
                'total': len(employees),
                'active': len([e for e in employees if e.get('active')]),
                'brigades': len(brigades),
                'by_brigade': list(brigades.values())
            },
            'management_companies': {
                'total': len(management_companies),
                'list': sorted(list(management_companies))
            },
            'departments': {
                'total': len(departments)
            },
            'last_updated': datetime.now().isoformat()
        }
        
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞: {statistics['houses']['total']} –¥–æ–º–æ–≤, {statistics['employees']['total']} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        return statistics
    
    async def test_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitrix24"""
        try:
            data = await self._make_request('app.info')
            
            if 'error' not in data:
                return {
                    'status': 'success',
                    'message': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bitrix24 —Ä–∞–±–æ—Ç–∞–µ—Ç',
                    'app_info': data.get('result', {})
                }
            else:
                return {
                    'status': 'error', 
                    'message': f"–û—à–∏–±–∫–∞ Bitrix24: {data['error']}",
                    'webhook_url': self.webhook_url
                }
                
        except Exception as e:
            return {
                'status': 'error',
                'message': f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}",
                'webhook_url': self.webhook_url
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
bitrix_service = BitrixService()