"""
–°–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ CRM –¥–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è AI
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –≤–∫–ª—é—á–∞—è "–∑–∞–¥–∞—Ä–º–∞ –Ω–æ–≤–æ—Ñ–æ–Ω"
"""
import os
import logging
import json
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class CallTranscriptionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö CRM —Å–∏—Å—Ç–µ–º"""
    
    def __init__(self):
        self.supported_systems = {
            "bitrix24": {
                "name": "Bitrix24 CRM",
                "webhook_url": os.getenv("BITRIX24_WEBHOOK_URL", ""),
                "phone_field": "PHONE",
                "call_field": "UF_CRM_CALL_RECORD"
            },
            "novofon": {
                "name": "–ó–∞–¥–∞—Ä–º–∞ –ù–æ–≤–æ—Ñ–æ–Ω",
                "api_key": os.getenv("NOVOFON_API_KEY", ""),
                "api_url": "https://api.novofon.com/v1",
                "webhook_secret": os.getenv("NOVOFON_WEBHOOK_SECRET", "")
            },
            "mango": {
                "name": "Mango Office",
                "api_key": os.getenv("MANGO_API_KEY", ""),
                "api_secret": os.getenv("MANGO_API_SECRET", "")
            },
            "zadarma": {
                "name": "Zadarma",
                "user_key": os.getenv("ZADARMA_USER_KEY", ""),
                "secret_key": os.getenv("ZADARMA_SECRET_KEY", "")
            }
        }
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        self.transcription_config = {
            "min_call_duration": 30,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            "language": "ru-RU",      # –Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            "auto_learning": True,    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
            "quality_threshold": 0.7,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        }
        
        logger.info("üéôÔ∏è Call Transcription Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self._log_supported_systems()
    
    def _log_supported_systems(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏—Å—Ç–µ–º"""
        logger.info("üìû –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:")
        for system_id, config in self.supported_systems.items():
            status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if self._is_system_configured(system_id) else "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            logger.info(f"   {config['name']}: {status}")
    
    def _is_system_configured(self, system_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        config = self.supported_systems.get(system_id, {})
        
        if system_id == "bitrix24":
            return bool(config.get("webhook_url"))
        elif system_id == "novofon":
            return bool(config.get("api_key"))
        elif system_id == "mango":
            return bool(config.get("api_key")) and bool(config.get("api_secret"))
        elif system_id == "zadarma":
            return bool(config.get("user_key")) and bool(config.get("secret_key"))
        
        return False
    
    async def transcribe_audio_file(self, audio_file_path: str, system: str = "auto") -> Dict[str, Any]:
        """
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∑–≤–æ–Ω–∫–∞
        
        Args:
            audio_file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –∏–ª–∏ URL
            system: –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫—É–¥–∞ –ø–æ–ª—É—á–µ–Ω –∑–≤–æ–Ω–æ–∫
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            logger.info(f"üéß –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {audio_file_path}")
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ –∫ —Å–µ—Ä–≤–∏—Å—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
            # –ù–∞–ø—Ä–∏–º–µ—Ä: OpenAI Whisper, Google Speech-to-Text, Yandex SpeechKit
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
            transcription_result = await self._simulate_transcription(audio_file_path, system)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            processed_result = self._process_transcription_result(transcription_result)
            
            logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(processed_result.get('text', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return processed_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ {audio_file_path}: {e}")
            return {
                "success": False,
                "error": str(e),
                "timestamp": datetime.utcnow().isoformat()
            }
    
    async def _simulate_transcription(self, audio_file_path: str, system: str) -> Dict:
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)"""
        
        # –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        sample_conversations = [
            {
                "duration": 120,
                "speakers": [
                    {"speaker": "operator", "text": "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! VasDom, –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è. –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"},
                    {"speaker": "client", "text": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—Ç–µ–ª —É–∑–Ω–∞—Ç—å –ø—Ä–æ —É–±–æ—Ä–∫—É –ø–æ–¥—ä–µ–∑–¥–∞ –≤ –Ω–∞—à–µ–º –¥–æ–º–µ –Ω–∞ —É–ª–∏—Ü–µ –õ–µ–Ω–∏–Ω–∞ 15."},
                    {"speaker": "operator", "text": "–ö–æ–Ω–µ—á–Ω–æ! –ú—ã –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º —ç—Ç–æ—Ç —Ä–∞–π–æ–Ω. –°–∫–æ–ª—å–∫–æ –ø–æ–¥—ä–µ–∑–¥–æ–≤ –≤ –≤–∞—à–µ–º –¥–æ–º–µ?"},
                    {"speaker": "client", "text": "–î–≤–∞ –ø–æ–¥—ä–µ–∑–¥–∞, –ø–æ 5 —ç—Ç–∞–∂–µ–π –∫–∞–∂–¥—ã–π. –ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —É–±–∏—Ä–∞–µ—Ç–µ?"},
                    {"speaker": "operator", "text": "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–±–æ—Ä–∫—É 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é - –≤–ª–∞–∂–Ω—É—é —É–±–æ—Ä–∫—É –∏ —Å—É—Ö—É—é. –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–ª–æ—â–∞–¥–∏."},
                    {"speaker": "client", "text": "–ê –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø–æ—á—Ç—É?"},
                    {"speaker": "operator", "text": "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ! –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à email, –∏ —è –≤—ã—à–ª—é —Ä–∞—Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞."}
                ]
            },
            {
                "duration": 85,
                "speakers": [
                    {"speaker": "operator", "text": "VasDom, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∫ –¥–µ–ª–∞ —Å —É–±–æ—Ä–∫–æ–π?"},
                    {"speaker": "client", "text": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º–∞ - –∫–ª–∏–Ω–∏–Ω–≥ –¥–µ–ª–∞—é—Ç –ø–ª–æ—Ö–æ, –æ—Å—Ç–∞–µ—Ç—Å—è –≥—Ä—è–∑—å –Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü–∞—Ö."},
                    {"speaker": "operator", "text": "–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! –≠—Ç–æ –¥–æ–º –Ω–∞ –∫–∞–∫–æ–π —É–ª–∏—Ü–µ? –Ø —Å—Ä–∞–∑—É —Å–≤—è–∂—É—Å—å —Å –±—Ä–∏–≥–∞–¥–æ–π."},
                    {"speaker": "client", "text": "–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –¥–æ–º 23. –£–∂–µ –Ω–µ–¥–µ–ª—é –∫–∞–∫ —Ç–∞–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è."},
                    {"speaker": "operator", "text": "–ü–æ–Ω—è–ª –≤–∞—Å. –û—Ç–ø—Ä–∞–≤–ª—é —Å—Ç–∞—Ä—à–µ–≥–æ –±—Ä–∏–≥–∞–¥–∏—Ä–∞ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞. –ü–µ—Ä–µ–∑–≤–æ–Ω—é –≤–∞–º."}
                ]
            },
            {
                "duration": 180,
                "speakers": [
                    {"speaker": "operator", "text": "–ö–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è VasDom, —Å–ª—É—à–∞—é –≤–∞—Å."},
                    {"speaker": "client", "text": "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ä–∞—Å—Ü–µ–Ω–∫–∏ –Ω–∞ —É–±–æ—Ä–∫—É –±–æ–ª—å—à–æ–≥–æ –ø–æ–¥—ä–µ–∑–¥–∞."},
                    {"speaker": "operator", "text": "–•–æ—Ä–æ—à–æ! –°–∫–æ–ª—å–∫–æ —ç—Ç–∞–∂–µ–π –∏ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –ø–æ–¥—ä–µ–∑–¥–µ?"},
                    {"speaker": "client", "text": "9 —ç—Ç–∞–∂–µ–π, 54 –∫–≤–∞—Ä—Ç–∏—Ä—ã. –ü–ª–æ—â–∞–¥—å –ø–æ–¥—ä–µ–∑–¥–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ 200 –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤."},
                    {"speaker": "operator", "text": "–ü–æ–Ω—è—Ç–Ω–æ. –î–ª—è —Ç–∞–∫–æ–≥–æ –æ–±—ä–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—É—é —É–±–æ—Ä–∫—É —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –ø–ª—é—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â—É—é 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é."},
                    {"speaker": "client", "text": "–ê —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å –≤ –º–µ—Å—è—Ü?"},
                    {"speaker": "operator", "text": "–î–ª—è –ø–æ–¥—ä–µ–∑–¥–∞ —Ç–∞–∫–æ–π –ø–ª–æ—â–∞–¥–∏ –≤—ã–π–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 15-18 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü. –ú–æ–≥—É –≤—ã—Å–ª–∞—Ç—å —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç?"}
                ]
            }
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–∏–∞–ª–æ–≥
        import random
        conversation = random.choice(sample_conversations)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        full_text = ""
        dialogue_pairs = []
        current_pair = {"client": "", "operator": ""}
        
        for turn in conversation["speakers"]:
            full_text += f"{turn['speaker'].title()}: {turn['text']}\n"
            
            if turn["speaker"] == "client":
                current_pair["client"] = turn["text"]
            elif turn["speaker"] == "operator":
                current_pair["operator"] = turn["text"]
                if current_pair["client"]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞
                    dialogue_pairs.append(current_pair.copy())
                    current_pair = {"client": "", "operator": ""}
        
        return {
            "success": True,
            "text": full_text.strip(),
            "duration": conversation["duration"],
            "speakers_detected": 2,
            "dialogue_pairs": dialogue_pairs,
            "confidence": 0.95,
            "language": "ru-RU",
            "system": system,
            "audio_file": audio_file_path
        }
    
    def _process_transcription_result(self, raw_result: Dict) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
        if not raw_result.get("success"):
            return raw_result
        
        processed = {
            "success": True,
            "transcription_id": str(uuid.uuid4()),
            "timestamp": datetime.utcnow().isoformat(),
            "text": raw_result.get("text", ""),
            "duration_seconds": raw_result.get("duration", 0),
            "confidence_score": raw_result.get("confidence", 0.0),
            "language": raw_result.get("language", "ru-RU"),
            "speakers_count": raw_result.get("speakers_detected", 0),
            "dialogue_pairs": raw_result.get("dialogue_pairs", []),
            "metadata": {
                "system": raw_result.get("system", "unknown"),
                "audio_file": raw_result.get("audio_file", ""),
                "processing_time": datetime.utcnow().isoformat()
            }
        }
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        processed["quality_assessment"] = self._assess_transcription_quality(processed)
        
        return processed
    
    def _assess_transcription_quality(self, transcription: Dict) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
        
        text = transcription.get("text", "")
        confidence = transcription.get("confidence_score", 0.0)
        duration = transcription.get("duration_seconds", 0)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        word_count = len(text.split())
        words_per_minute = (word_count / duration * 60) if duration > 0 else 0
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = 0.0
        
        # –§–∞–∫—Ç–æ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
        if confidence > 0.9:
            quality_score += 0.4
        elif confidence > 0.7:
            quality_score += 0.3
        elif confidence > 0.5:
            quality_score += 0.2
        
        if 100 <= words_per_minute <= 200:  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏
            quality_score += 0.2
        elif 80 <= words_per_minute <= 250:
            quality_score += 0.1
        
        if word_count >= 50:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            quality_score += 0.2
        elif word_count >= 20:
            quality_score += 0.1
        
        if len(transcription.get("dialogue_pairs", [])) >= 2:  # –ï—Å—Ç—å –¥–∏–∞–ª–æ–≥
            quality_score += 0.2
        elif len(transcription.get("dialogue_pairs", [])) >= 1:
            quality_score += 0.1
        
        quality_level = "high" if quality_score >= 0.7 else "medium" if quality_score >= 0.4 else "low"
        suitable_for_learning = quality_score >= self.transcription_config["quality_threshold"]
        
        return {
            "quality_score": quality_score,
            "quality_level": quality_level,
            "suitable_for_learning": suitable_for_learning,
            "metrics": {
                "word_count": word_count,
                "words_per_minute": words_per_minute,
                "confidence": confidence,
                "dialogue_pairs_count": len(transcription.get("dialogue_pairs", []))
            }
        }
    
    async def process_crm_calls(self, system: str, date_range: Optional[Dict] = None) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ CRM —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            system: ID —Å–∏—Å—Ç–µ–º—ã (bitrix24, novofon, mango, zadarma)
            date_range: –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤
        """
        try:
            if system not in self.supported_systems:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞: {system}")
            
            if not self._is_system_configured(system):
                raise ValueError(f"–°–∏—Å—Ç–µ–º–∞ {system} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
            logger.info(f"üìû –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ {self.supported_systems[system]['name']}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–≤–æ–Ω–∫–æ–≤
            calls = await self._fetch_calls_from_system(system, date_range)
            
            processed_calls = []
            learning_data = []
            
            for call in calls:
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∑–≤–æ–Ω–æ–∫
                transcription = await self.transcribe_audio_file(call["audio_url"], system)
                
                if transcription.get("success") and transcription.get("quality_assessment", {}).get("suitable_for_learning"):
                    processed_calls.append(transcription)
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                    for pair in transcription.get("dialogue_pairs", []):
                        if pair.get("client") and pair.get("operator"):
                            learning_data.append({
                                "user_message": pair["client"],
                                "ai_response": pair["operator"],
                                "source": "call_transcription",
                                "system": system,
                                "transcription_id": transcription.get("transcription_id"),
                                "quality_score": transcription.get("quality_assessment", {}).get("quality_score", 0.0)
                            })
            
            result = {
                "success": True,
                "system": system,
                "processed_calls": len(processed_calls),
                "learning_data_extracted": len(learning_data),
                "total_calls_found": len(calls),
                "transcriptions": processed_calls,
                "learning_data": learning_data,
                "timestamp": datetime.utcnow().isoformat()
            }
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed_calls)} –∑–≤–æ–Ω–∫–æ–≤, –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(learning_data)} –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ {system}: {e}")
            return {
                "success": False,
                "system": system,
                "error": str(e),
                "timestamp": datetime.utcnow().isoformat()
            }
    
    async def _fetch_calls_from_system(self, system: str, date_range: Optional[Dict] = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ CRM —Å–∏—Å—Ç–µ–º—ã"""
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã API –≤—ã–∑–æ–≤—ã –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
        
        sample_calls = [
            {
                "call_id": "call_2025_001",
                "phone_number": "+7(123)456-78-90",
                "duration": 120,
                "date": "2025-01-09T10:30:00",
                "audio_url": "https://example.com/call_001.wav",
                "direction": "incoming"
            },
            {
                "call_id": "call_2025_002", 
                "phone_number": "+7(987)654-32-10",
                "duration": 85,
                "date": "2025-01-09T11:15:00",
                "audio_url": "https://example.com/call_002.wav",
                "direction": "incoming"
            },
            {
                "call_id": "call_2025_003",
                "phone_number": "+7(555)123-45-67",
                "duration": 180,
                "date": "2025-01-09T14:22:00", 
                "audio_url": "https://example.com/call_003.wav",
                "direction": "incoming"
            }
        ]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        filtered_calls = [
            call for call in sample_calls 
            if call["duration"] >= self.transcription_config["min_call_duration"]
        ]
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(filtered_calls)} –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        return filtered_calls
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
        status = {
            "service": "Call Transcription Service",
            "version": "1.0.0",
            "supported_systems": {},
            "configuration": self.transcription_config,
            "timestamp": datetime.utcnow().isoformat()
        }
        
        for system_id, config in self.supported_systems.items():
            status["supported_systems"][system_id] = {
                "name": config["name"],
                "configured": self._is_system_configured(system_id),
                "ready_for_transcription": self._is_system_configured(system_id)
            }
        
        return status

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
call_transcription_service = CallTranscriptionService()