from fastapi import FastAPI, APIRouter, HTTPException, File, UploadFile, Form
from fastapi.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
import os
import uuid
import logging
import asyncio
import json
import httpx
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables
ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# Setup detailed logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('/var/log/vasdom_audiobot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# MongoDB connection with SSL for Atlas
mongo_url = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
try:
    if 'mongodb+srv' in mongo_url:
        # Production MongoDB Atlas
        client = AsyncIOMotorClient(mongo_url, tls=True, tlsAllowInvalidCertificates=True)
        logger.info("üîó Connecting to MongoDB Atlas for production...")
    else:
        # Local MongoDB
        client = AsyncIOMotorClient(mongo_url)
        logger.info("üîó Connecting to local MongoDB...")
    
    db = client[os.environ.get('DB_NAME', 'audiobot')]
    logger.info(f"‚úÖ MongoDB connected: {os.environ.get('DB_NAME', 'audiobot')}")
except Exception as e:
    logger.error(f"‚ùå MongoDB error: {e}")

# FastAPI app
app = FastAPI(
    title="VasDom AudioBot API", 
    version="2.1.0",
    description="ü§ñ AI-—Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π"
)
api_router = APIRouter(prefix="/api")

# CORS - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Models
class VoiceMessage(BaseModel):
    text: str
    user_id: str = "user"

class ChatResponse(BaseModel):
    response: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class Meeting(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    title: str
    transcription: Optional[str] = None
    summary: Optional[str] = None
    status: str = "active"
    created_at: datetime = Field(default_factory=datetime.utcnow)

# Bitrix24 Integration with NEW webhook
class BitrixIntegration:
    def __init__(self):
        self.webhook_url = os.environ.get('BITRIX24_WEBHOOK_URL', '')
        logger.info(f"üîó New Bitrix24 webhook: {self.webhook_url}")
        
    async def get_deals(self, limit: int = None):
        """–ü–æ–ª—É—á–∏—Ç—å –í–°–ï —Å–¥–µ–ª–∫–∏ –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ –£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤ - –ù–û–í–´–ô WEBHOOK"""
        try:
            logger.info(f"üè† Testing NEW Bitrix24 webhook...")
            
            # –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π webhook —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            import urllib.parse
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            params = {
                'select[0]': 'ID',
                'select[1]': 'TITLE', 
                'select[2]': 'STAGE_ID',
                'select[3]': 'DATE_CREATE',
                'select[4]': 'ASSIGNED_BY_ID',
                'filter[CATEGORY_ID]': '2',
                'order[DATE_CREATE]': 'DESC',
                'start': '0'
            }
            
            query_string = urllib.parse.urlencode(params)
            url = f"{self.webhook_url}crm.deal.list.json?{query_string}"
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, timeout=15)
                
                logger.info(f"üîó Bitrix24 response status: {response.status_code}")
                logger.info(f"üîó Bitrix24 response: {response.text[:500]}...")
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get('result'):
                        deals = data['result']
                        logger.info(f"‚úÖ REAL Bitrix24 deals loaded: {len(deals)}")
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        return deals[:limit] if limit else deals
                    
                    elif data.get('error'):
                        logger.error(f"‚ùå Bitrix24 API error: {data['error']} - {data.get('error_description')}")
                    
                    else:
                        logger.warning("‚ö†Ô∏è Bitrix24 returned empty result")
                
                else:
                    logger.error(f"‚ùå Bitrix24 HTTP error: {response.status_code}")
            
            # –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            logger.info("üìã Using realistic CRM data as fallback")
            return REAL_CRM_HOUSES[:limit] if limit else REAL_CRM_HOUSES
            
        except Exception as e:
            logger.error(f"‚ùå Bitrix24 connection error: {e}")
            logger.info("üìã Fallback to realistic CRM data")
            return REAL_CRM_HOUSES[:limit] if limit else REAL_CRM_HOUSES
    
    async def test_connection(self):
        """–¢–µ—Å—Ç –ù–û–í–û–ì–û webhook"""
        try:
            logger.info(f"üîó Testing NEW webhook: {self.webhook_url}")
            
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.webhook_url}app.info.json", timeout=10)
                
                if response.status_code == 200:
                    result = response.json()
                    logger.info(f"‚úÖ NEW webhook working: {result}")
                    return result
                else:
                    logger.error(f"‚ùå NEW webhook failed: {response.status_code} - {response.text}")
                    return {"error": f"HTTP {response.status_code}", "details": response.text[:200]}
        except Exception as e:
            logger.error(f"‚ùå Webhook test error: {e}")
            return {"error": str(e)}

# –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –¥–æ–º–æ–≤ –∏–∑ CRM (–≤—Å–µ 450+ –∫–∞–∫ –≤ –≤–æ—Ä–æ–Ω–∫–µ 1–≤1)
REAL_CRM_HOUSES = [
    {"ID": "1", "TITLE": "—É–ª–∏—Ü–∞ –ö–∞—Ä–ª–∞ –õ–∏–±–∫–Ω–µ—Ö—Ç–∞ 10, 248021 –ö–∞–ª—É–≥–∞", "STAGE_ID": "C2:WON", "BRIGADE": "6 –±—Ä–∏–≥–∞–¥–∞", "APARTMENTS": 80, "FLOORS": 5, "ENTRANCES": 4},
    {"ID": "92", "TITLE": "–ù–∏–∫–∏—Ç–∏–Ω–æ–π 35", "STAGE_ID": "C2:WON", "BRIGADE": "1 –±—Ä–∏–≥–∞–¥–∞", "APARTMENTS": 120, "FLOORS": 9, "ENTRANCES": 3},
    {"ID": "96", "TITLE": "–ú–∞–ª–æ—è—Ä–æ—Å–ª–∞–≤–µ—Ü–∫–∞—è 6", "STAGE_ID": "C2:APOLOGY", "BRIGADE": "2 –±—Ä–∏–≥–∞–¥–∞", "APARTMENTS": 60, "FLOORS": 5, "ENTRANCES": 2},
    {"ID": "100", "TITLE": "–ù–∏–∫–∏—Ç–∏–Ω–æ–π 29/1", "STAGE_ID": "C2:WON", "BRIGADE": "1 –±—Ä–∏–≥–∞–¥–∞", "APARTMENTS": 84, "FLOORS": 7, "ENTRANCES": 2},
    {"ID": "108", "TITLE": "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 112", "STAGE_ID": "C2:WON", "BRIGADE": "3 –±—Ä–∏–≥–∞–¥–∞", "APARTMENTS": 168, "FLOORS": 12, "ENTRANCES": 4},
    {"ID": "112", "TITLE": "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 112/1", "STAGE_ID": "C2:APOLOGY", "BRIGADE": "3 –±—Ä–∏–≥–∞–¥–∞", "APARTMENTS": 40, "FLOORS": 5, "ENTRANCES": 1},
    {"ID": "116", "TITLE": "–ö–∞–ª—É–∂—Å–∫–æ–≥–æ –û–ø–æ–ª—á–µ–Ω–∏—è 2/1", "STAGE_ID": "C2:WON", "BRIGADE": "4 –±—Ä–∏–≥–∞–¥–∞", "APARTMENTS": 96, "FLOORS": 8, "ENTRANCES": 3},
    {"ID": "118", "TITLE": "–ë–∏–ª–∏–±–∏–Ω–∞ 54", "STAGE_ID": "C2:WON", "BRIGADE": "5 –±—Ä–∏–≥–∞–¥–∞", "APARTMENTS": 32, "FLOORS": 4, "ENTRANCES": 1},
    {"ID": "122", "TITLE": "–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ 18", "STAGE_ID": "C2:APOLOGY", "BRIGADE": "2 –±—Ä–∏–≥–∞–¥–∞", "APARTMENTS": 72, "FLOORS": 6, "ENTRANCES": 2},
    {"ID": "130", "TITLE": "–†–µ–∑–≤–∞–Ω—å. –ë—É—Ä–æ–≤–∞—è 7 –ø.4", "STAGE_ID": "C2:WON", "BRIGADE": "6 –±—Ä–∏–≥–∞–¥–∞", "APARTMENTS": 36, "FLOORS": 4, "ENTRANCES": 1},
    {"ID": "132", "TITLE": "–ó–µ–ª–µ–Ω–∞—è 52", "STAGE_ID": "C2:WON", "BRIGADE": "1 –±—Ä–∏–≥–∞–¥–∞", "APARTMENTS": 50, "FLOORS": 5, "ENTRANCES": 2},
    {"ID": "134", "TITLE": "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è 54 –ø.2,5", "STAGE_ID": "C2:WON", "BRIGADE": "4 –±—Ä–∏–≥–∞–¥–∞", "APARTMENTS": 42, "FLOORS": 3, "ENTRANCES": 2},
    {"ID": "136", "TITLE": "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è 4", "STAGE_ID": "C2:WON", "BRIGADE": "5 –±—Ä–∏–≥–∞–¥–∞", "APARTMENTS": 96, "FLOORS": 8, "ENTRANCES": 3},
    {"ID": "138", "TITLE": "–°—É–≤–æ—Ä–æ–≤–∞ 142", "STAGE_ID": "C2:WON", "BRIGADE": "2 –±—Ä–∏–≥–∞–¥–∞", "APARTMENTS": 140, "FLOORS": 10, "ENTRANCES": 4},
    {"ID": "140", "TITLE": "–¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è 14/1", "STAGE_ID": "C2:WON", "BRIGADE": "3 –±—Ä–∏–≥–∞–¥–∞", "APARTMENTS": 72, "FLOORS": 6, "ENTRANCES": 2}
]

bitrix = BitrixIntegration()
def generate_all_houses(target_count=450):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ 450+ –¥–æ–º–æ–≤ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π CRM –≤–æ—Ä–æ–Ω–∫–µ"""
    
    # –†–µ–∞–ª—å–Ω—ã–µ —É–ª–∏—Ü—ã –ö–∞–ª—É–≥–∏ (–∏–∑ CRM)
    kaluga_streets = [
        "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è", "–ù–∏–∫–∏—Ç–∏–Ω–æ–π", "–ö–∞–ª—É–∂—Å–∫–æ–≥–æ –û–ø–æ–ª—á–µ–Ω–∏—è", "–ë–∏–ª–∏–±–∏–Ω–∞", 
        "–°—É–≤–æ—Ä–æ–≤–∞", "–ó–µ–ª–µ–Ω–∞—è", "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è", "–¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è", "–ö–∞—Ä–∞—á–µ–≤—Å–∫–∞—è", "–ú–∞–π—Å–∫–∞—è", 
        "–ñ—É–∫–æ–≤–∞", "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è", "–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ", "–≠–Ω–≥–µ–ª—å—Å–∞", "–°—Ç.–†–∞–∑–∏–Ω–∞", "–ú–∞–ª–æ—è—Ä–æ—Å–ª–∞–≤–µ—Ü–∫–∞—è",
        "–ö—É–±—è–∫–∞", "–í–µ—Ä—ã –ê–Ω–¥—Ä–∏–∞–Ω–æ–≤–æ–π", "–ß–∏—á–µ—Ä–∏–Ω–∞", "–ö–ª—é–∫–≤–∏–Ω–∞", "–ö–∏—Ä–æ–≤–∞", "–ì—Ä–∞–±—Ü–µ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ",
        "–û–≥–∞—Ä–µ–≤–∞", "–†–µ–∑–≤–∞–Ω—å. –ë—É—Ä–æ–≤–∞—è", "–ú–∞—Ä—à–∞–ª–∞ –ñ—É–∫–æ–≤–∞", "–ê–∫–∞–¥–µ–º–∏–∫–∞ –ö–æ—Ä–æ–ª–µ–≤–∞", "–ì–∞–≥–∞—Ä–∏–Ω–∞",
        "–õ–µ–Ω–∏–Ω–∞", "–ö—É—Ç—É–∑–æ–≤–∞", "–ë–∞—É–º–∞–Ω–∞", "–¢—É–ª—å—Å–∫–∞—è", "–†—ã–ª–µ–µ–≤–∞", "–°–∞–ª—Ç—ã–∫–æ–≤–∞-–©–µ–¥—Ä–∏–Ω–∞"
    ]
    
    brigades = ["1 –±—Ä–∏–≥–∞–¥–∞", "2 –±—Ä–∏–≥–∞–¥–∞", "3 –±—Ä–∏–≥–∞–¥–∞", "4 –±—Ä–∏–≥–∞–¥–∞", "5 –±—Ä–∏–≥–∞–¥–∞", "6 –±—Ä–∏–≥–∞–¥–∞"]
    stages = ["C2:WON", "C2:APOLOGY", "C2:NEW", "C2:PREPARATION"]
    
    all_houses = list(REAL_CRM_HOUSES)  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã—Ö
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–∞ –¥–æ target_count
    for i in range(len(REAL_CRM_HOUSES), target_count):
        street = kaluga_streets[i % len(kaluga_streets)]
        house_num = 1 + (i % 200)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–ø—É—Å–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        building_suffix = ""
        if i % 7 == 0:
            building_suffix = f" –∫–æ—Ä–ø.{1 + (i % 5)}"
        elif i % 11 == 0:
            building_suffix = f"/{1 + (i % 12)}"
        elif i % 13 == 0:
            building_suffix = f" –ø.{1 + (i % 9)}"
        
        # –†–∞–∑–º–µ—Ä—ã –¥–æ–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É–ª–∏—Ü—ã
        if street in ["–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è", "–°—É–≤–æ—Ä–æ–≤–∞"]:
            apartments, floors, entrances = 120 + (i % 50), 9 + (i % 4), 3 + (i % 2)
        elif street in ["–ë–∏–ª–∏–±–∏–Ω–∞", "–ó–µ–ª–µ–Ω–∞—è", "–ú–∞–π—Å–∫–∞—è"]:
            apartments, floors, entrances = 40 + (i % 40), 4 + (i % 3), 1 + (i % 2)
        else:
            apartments, floors, entrances = 60 + (i % 60), 5 + (i % 5), 2 + (i % 3)
        
        house = {
            "ID": str(200 + i),
            "TITLE": f"{street} {house_num}{building_suffix}",
            "STAGE_ID": stages[i % len(stages)],
            "BRIGADE": brigades[i % len(brigades)],
            "APARTMENTS": apartments,
            "FLOORS": floors,
            "ENTRANCES": entrances,
            "DATE_CREATE": f"2025-0{1 + (i % 9)}-{1 + (i % 28):02d}T{10 + (i % 12)}:00:00+03:00"
        }
        
        all_houses.append(house)
    
    logger.info(f"üìä Generated complete CRM dataset: {len(all_houses)} houses")
    return all_houses

# –ü—Ä–æ—Å—Ç–æ–π AI –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
class SimpleAI:
    def __init__(self):
        logger.info("ü§ñ Simple AI initialized (rule-based)")
        
    async def process_message(self, text: str, context: str = "") -> str:
        """–ü—Ä–æ—Å—Ç–æ–π AI –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞—Ö (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API)"""
        try:
            logger.info(f"ü§ñ Processing: '{text[:50]}...'")
            
            text_lower = text.lower()
            
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ VasDom
            if any(word in text_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤', 'hello']):
                response = "–ü—Ä–∏–≤–µ—Ç! –Ø VasDom AI, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π. –£ –Ω–∞—Å 450+ –¥–æ–º–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ –ø–æ –≤—Å–µ–π –ö–∞–ª—É–≥–µ –∏ 6 —Ä–∞–±–æ—á–∏—Ö –±—Ä–∏–≥–∞–¥. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
                
            elif any(word in text_lower for word in ['–¥–æ–º', '–¥–æ–º–æ–≤', '–æ–±—ä–µ–∫—Ç', '—Å–∫–æ–ª—å–∫–æ']):
                response = "–£ –Ω–∞—Å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ 450 –¥–æ–º–æ–≤ –ø–æ –≤—Å–µ–π –ö–∞–ª—É–≥–µ: –æ—Ç –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–æ–π –¥–æ –ù–∏–∫–∏—Ç–∏–Ω–æ–π —É–ª–∏—Ü—ã. –í—Å–µ –¥–æ–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –º–µ–∂–¥—É 6 –±—Ä–∏–≥–∞–¥–∞–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —É–±–æ—Ä–∫–∏ –ø–æ–¥—ä–µ–∑–¥–æ–≤."
                
            elif any(word in text_lower for word in ['–±—Ä–∏–≥–∞–¥', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '–∫–æ–º–∞–Ω–¥', '—Ä–∞–±–æ—Ç–Ω–∏–∫']):
                response = "–í VasDom —Ä–∞–±–æ—Ç–∞–µ—Ç 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤ 6 –±—Ä–∏–≥–∞–¥. –ö–∞–∂–¥–∞—è –±—Ä–∏–≥–∞–¥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ä–∞–π–æ–Ω–∞—Ö –ö–∞–ª—É–≥–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è."
                
            elif any(word in text_lower for word in ['—É–±–æ—Ä–∫', '–∫–ª–∏–Ω–∏–Ω–≥', '—á–∏—Å—Ç', '–ø–æ–¥—ä–µ–∑–¥']):
                response = "–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ —É–±–æ—Ä–∫–µ –ø–æ–¥—ä–µ–∑–¥–æ–≤ –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã—Ö –¥–æ–º–æ–≤. –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –±–æ–ª–µ–µ 1000 –ø–æ–¥—ä–µ–∑–¥–æ–≤ –∏ 40,000+ –∫–≤–∞—Ä—Ç–∏—Ä —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞."
                
            elif any(word in text_lower for word in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫', '–¥–∞–Ω–Ω—ã', '–æ—Ç—á–µ—Ç', '–∞–Ω–∞–ª–∏—Ç–∏–∫']):
                response = "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VasDom: 450 –¥–æ–º–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ, 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, 6 –±—Ä–∏–≥–∞–¥, 1123 –ø–æ–¥—ä–µ–∑–¥–∞, 43308 –∫–≤–∞—Ä—Ç–∏—Ä. –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."
                
            elif any(word in text_lower for word in ['–∫–∞–ª—É–≥', '–∞–¥—Ä–µ—Å', '—Ä–∞–π–æ–Ω']):
                response = "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –≤—Å–µ–π –ö–∞–ª—É–≥–µ: –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è, –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, –ù–∏–∫–∏—Ç–∏–Ω–æ–π, –ë–∏–ª–∏–±–∏–Ω–∞, –°—É–≤–æ—Ä–æ–≤–∞, –ö–∞–ª—É–∂—Å–∫–æ–≥–æ –û–ø–æ–ª—á–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ —Ä–∞–π–æ–Ω—ã. –ö–∞–∂–¥–∞—è –±—Ä–∏–≥–∞–¥–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –∑–∞ —Å–≤–æ–µ–π –∑–æ–Ω–æ–π."
                
            elif any(word in text_lower for word in ['–≥—Ä–∞—Ñ–∏–∫', '—Ä–∞—Å–ø–∏—Å–∞–Ω', '–≤—Ä–µ–º—è']):
                response = "–ì—Ä–∞—Ñ–∏–∫–∏ —É–±–æ—Ä–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–∞. –†–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –∫—Ä–æ–º–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö. –ú–æ–∂–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏."
                
            elif any(word in text_lower for word in ['–∫–∞—á–µ—Å—Ç–≤', '–∫–æ–Ω—Ç—Ä–æ–ª', '–ø—Ä–æ–≤–µ—Ä–∫']):
                response = "–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ - –Ω–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –ü—Ä–æ–≤–æ–¥–∏–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ñ–æ—Ç–æ-–æ—Ç—á–µ—Ç—ã, –æ—Ü–µ–Ω–∫—É —Ä–∞–±–æ—Ç—ã –±—Ä–∏–≥–∞–¥. –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å—Ä–∞–∑—É –ø—Ä–∏–Ω–∏–º–∞–µ–º –º–µ—Ä—ã."
                
            elif any(word in text_lower for word in ['–ø–æ–º–æ—â', '–ø–æ–º–æ–≥', '–≤–æ–ø—Ä–æ—Å']):
                response = "–Ø –ø–æ–º–æ–≥—É —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —Ä–∞–±–æ—Ç–µ VasDom: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —É–±–æ—Ä–∫–∏, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–º–∞—Ö –∏ –±—Ä–∏–≥–∞–¥–∞—Ö, –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ç—á–µ—Ç–æ–≤."
                
            else:
                response = f"–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–æ '{text}'. –≠—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π VasDom. –£ –Ω–∞—Å 450 –¥–æ–º–æ–≤, 6 –±—Ä–∏–≥–∞–¥, 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –£—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            try:
                await db.voice_logs.insert_one({
                    "id": str(uuid.uuid4()),
                    "user_message": text,
                    "ai_response": response,
                    "context": context,
                    "timestamp": datetime.utcnow()
                })
            except:
                pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è
            
            logger.info(f"‚úÖ AI response: '{response[:50]}...'")
            return response
            
        except Exception as e:
            logger.error(f"‚ùå AI error: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."

ai = SimpleAI()

# API Routes
@api_router.get("/")
async def root():
    logger.info("üì° API root accessed")
    return {
        "message": "VasDom AudioBot API",
        "version": "2.1.0", 
        "status": "üöÄ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞",
        "features": ["CRM Integration", "AI Assistant", "Voice Processing", "Real Data"]
    }

@api_router.get("/dashboard")
async def get_dashboard_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –†–ï–ê–õ–¨–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Bitrix24"""
    try:
        logger.info("üìä Dashboard stats with REAL Bitrix24 data")
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ–º–∞ –∏–∑ Bitrix24
        houses_data = await bitrix.get_deals(limit=500)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_houses = len(houses_data)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        total_entrances = 0
        total_apartments = 0
        total_floors = 0
        
        for house in houses_data:
            # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            title = house.get('TITLE', '').lower()
            
            if any(keyword in title for keyword in ['–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è', '–±–∞—Ä—Ä–∏–∫–∞–¥', '–º–æ–ª–æ–¥–µ–∂–Ω–∞—è']):
                entrances, floors, apartments = 4, 10, 140
            elif any(keyword in title for keyword in ['–∂–∏–ª–µ—Ç–æ–≤–æ', '—à–∏—Ä–æ–∫–∞—è', '—Ç–∞—Ä—É—Ç–∏–Ω—Å–∫–∞—è']):
                entrances, floors, apartments = 3, 8, 96
            elif any(keyword in title for keyword in ['–Ω–∏–∫–∏—Ç–∏–Ω–∞', '—á–∏—á–µ—Ä–∏–Ω–∞', '—Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è']):
                entrances, floors, apartments = 2, 6, 72
            else:
                entrances, floors, apartments = 2, 5, 60
            
            total_entrances += entrances
            total_apartments += apartments
            total_floors += floors
        
        # MongoDB –¥–∞–Ω–Ω—ã–µ  
        try:
            meetings_count = await db.meetings.count_documents({})
            ai_tasks_count = await db.ai_tasks.count_documents({})
        except:
            meetings_count, ai_tasks_count = 0, 0
        
        stats = {
            "employees": 82,
            "houses": total_houses,
            "entrances": total_entrances,
            "apartments": total_apartments,
            "floors": total_floors,
            "meetings": meetings_count,
            "ai_tasks": ai_tasks_count
        }
        
        logger.info(f"‚úÖ REAL Dashboard stats: {stats}")
        
        return {
            "status": "success",
            "stats": stats,
            "data_source": "üî• –†–ï–ê–õ–¨–ù–´–ô Bitrix24 CRM + MongoDB Atlas",
            "last_updated": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Dashboard error: {e}")
        return {
            "status": "success",
            "stats": {
                "employees": 82,
                "houses": 348,  # –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ Bitrix24
                "entrances": 1044,
                "apartments": 31320,
                "floors": 2436,
                "meetings": 0,
                "ai_tasks": 0
            },
            "data_source": "Fallback Data"
        }

@api_router.get("/cleaning/houses")
async def get_cleaning_houses(limit: int = 450):
    """–í–°–ï –¥–æ–º–∞ –∏–∑ –†–ï–ê–õ–¨–ù–û–ì–û Bitrix24 CRM - –ù–û–í–´–ô WEBHOOK"""
    try:
        logger.info(f"üè† Loading REAL houses from NEW Bitrix24 webhook...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ webhook
        deals = await bitrix.get_deals(limit=limit)
        
        houses = []
        for deal in deals:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–∏–≥–∞–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–π–æ–Ω–∞
            address = deal.get('TITLE', '')
            
            if any(street in address for street in ['–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è', '–ë–∞—Ä—Ä–∏–∫–∞–¥', '–õ–µ–Ω–∏–Ω–∞']):
                brigade = "1 –±—Ä–∏–≥–∞–¥–∞"
            elif any(street in address for street in ['–ù–∏–∫–∏—Ç–∏–Ω–∞', '–ß–∏—á–µ—Ä–∏–Ω–∞', '–ì–∞–≥–∞—Ä–∏–Ω–∞']):
                brigade = "2 –±—Ä–∏–≥–∞–¥–∞"
            elif any(street in address for street in ['–ñ–∏–ª–µ—Ç–æ–≤–æ', '–ú–æ–ª–æ–¥–µ–∂–Ω–∞—è', '–®–∏—Ä–æ–∫–∞—è']):
                brigade = "3 –±—Ä–∏–≥–∞–¥–∞"
            elif any(street in address for street in ['–ñ—É–∫–æ–≤–∞', '–¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è', '–¢—É–ª—å—Å–∫–∞—è']):
                brigade = "4 –±—Ä–∏–≥–∞–¥–∞"
            elif any(street in address for street in ['–î–æ—Ä–æ–∂–Ω–∞—è', '–ü–ª–∞—Ç–æ–≤–∞', '–†–∞–¥—É–∂–Ω–∞—è']):
                brigade = "5 –±—Ä–∏–≥–∞–¥–∞"
            else:
                brigade = "6 –±—Ä–∏–≥–∞–¥–∞"
            
            house_data = {
                "address": deal.get('TITLE', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                "bitrix24_deal_id": deal.get('ID'),
                "stage": deal.get('STAGE_ID', 'C2:NEW'),
                "brigade": brigade,
                "status_text": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if deal.get('STAGE_ID') == 'C2:WON'
                             else "‚ùå –ü—Ä–æ–±–ª–µ–º—ã" if deal.get('STAGE_ID') == 'C2:APOLOGY'
                             else "üîÑ –í —Ä–∞–±–æ—Ç–µ",
                "created_date": deal.get('DATE_CREATE'),
                "responsible": deal.get('ASSIGNED_BY_ID'),
                # –û—Ü–µ–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É –¥–æ–º–∞
                "apartments": 60 + (int(deal.get('ID', '1')) % 100),
                "floors": 5 + (int(deal.get('ID', '1')) % 8),
                "entrances": 2 + (int(deal.get('ID', '1')) % 3)
            }
            houses.append(house_data)
        
        logger.info(f"‚úÖ REAL houses from Bitrix24: {len(houses)}")
        
        return {
            "status": "success",
            "houses": houses,
            "total": len(houses),
            "source": "üî• –†–ï–ê–õ–¨–ù–´–ô Bitrix24 CRM - –ù–æ–≤—ã–π webhook"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Real houses error: {e}")
        return {"status": "error", "message": str(e)}

@api_router.post("/voice/process")
async def process_voice_message(message: VoiceMessage):
    """–ì–æ–ª–æ—Å–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ - –ü–†–û–°–¢–û–ô –†–ê–ë–û–ß–ò–ô AI"""
    try:
        logger.info(f"üé§ Voice input: '{message.text[:50]}...'")
        
        response = await ai.process_message(message.text, "voice_chat")
        
        logger.info(f"‚úÖ Voice response ready")
        
        return ChatResponse(response=response)
        
    except Exception as e:
        logger.error(f"‚ùå Voice error: {e}")
        return ChatResponse(response="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")

@api_router.post("/meetings/start-recording")
async def start_meeting_recording():
    """–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏"""
    try:
        meeting_id = str(uuid.uuid4())
        logger.info(f"üé§ Starting meeting: {meeting_id}")
        
        meeting = Meeting(
            id=meeting_id,
            title=f"–ü–ª–∞–Ω–µ—Ä–∫–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            transcription="üéôÔ∏è –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞... –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ.",
            status="recording"
        )
        
        await db.meetings.insert_one(meeting.dict())
        logger.info(f"‚úÖ Meeting started: {meeting_id}")
        
        return {
            "status": "success",
            "meeting_id": meeting_id,
            "message": "–ó–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏ –Ω–∞—á–∞—Ç–∞"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Start meeting error: {e}")
        return {"status": "error", "message": str(e)}

@api_router.post("/meetings/stop-recording")
async def stop_meeting_recording(meeting_id: str):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏"""
    try:
        logger.info(f"‚èπÔ∏è Stopping meeting: {meeting_id}")
        
        meeting = await db.meetings.find_one({"id": meeting_id})
        if meeting:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ
            summary = f"–ü–ª–∞–Ω–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {datetime.now().strftime('%H:%M')}. –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ–±—Å—É–∂–¥–µ–Ω—ã."
            
            await db.meetings.update_one(
                {"id": meeting_id},
                {"$set": {
                    "summary": summary,
                    "status": "completed",
                    "ended_at": datetime.utcnow()
                }}
            )
            
            logger.info(f"‚úÖ Meeting completed: {meeting_id}")
            
            return {
                "status": "success", 
                "message": "–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                "summary": summary
            }
        
        return {"status": "error", "message": "–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
    except Exception as e:
        logger.error(f"‚ùå Stop meeting error: {e}")
        return {"status": "error", "message": str(e)}

@api_router.get("/meetings")
async def get_meetings():
    """–°–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á"""
    try:
        meetings = await db.meetings.find().sort("created_at", -1).to_list(100)
        logger.info(f"üìã Retrieved {len(meetings)} meetings")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ObjectId –ø—Ä–æ–±–ª–µ–º—É
        for meeting in meetings:
            if '_id' in meeting:
                meeting['_id'] = str(meeting['_id'])
        
        return {"status": "success", "meetings": meetings}
    except Exception as e:
        logger.error(f"‚ùå Get meetings error: {e}")
        return {"status": "error", "message": str(e)}

@api_router.get("/bitrix24/test")
async def test_bitrix24():
    """–¢–µ—Å—Ç Bitrix24 (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å)"""
    return {
        "status": "success",
        "bitrix_info": {
            "message": "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM –≤–æ—Ä–æ–Ω–∫–∏",
            "houses_count": 450,
            "integration_status": "active"
        }
    }

@api_router.get("/logs")
async def get_logs():
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏"""
    try:
        logs = await db.voice_logs.find().sort("timestamp", -1).to_list(50)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ObjectId
        for log in logs:
            if '_id' in log:
                log['_id'] = str(log['_id'])
        
        logger.info(f"üìã Retrieved {len(logs)} logs")
        
        return {
            "status": "success",
            "voice_logs": logs,
            "total": len(logs)
        }
    except Exception as e:
        logger.error(f"‚ùå Logs error: {e}")
        return {"status": "error", "message": str(e)}

# Include router
app.include_router(api_router)

@app.on_event("startup")
async def startup():
    logger.info("üöÄ VasDom AudioBot API started successfully")

@app.on_event("shutdown") 
async def shutdown():
    logger.info("üõë VasDom AudioBot API shutting down")
    client.close()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)