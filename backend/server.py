from fastapi import FastAPI, APIRouter, Request
from dotenv import load_dotenv
from starlette.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import os
import logging
from pathlib import Path
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
import uuid
from datetime import datetime
import aiohttp

ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# MongoDB connection
mongo_url = os.environ['MONGO_URL']
client = AsyncIOMotorClient(mongo_url)
db = client[os.environ['DB_NAME']]

# Create the main app
app = FastAPI(title="VasDom AudioBot", version="2.0.0")
api_router = APIRouter(prefix="/api")

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ============= BITRIX24 INTEGRATION SERVICE =============

class Bitrix24Service:
    def __init__(self):
        self.webhook_url = os.getenv("BITRIX24_WEBHOOK_URL", "").rstrip('/')
        
    async def _make_request(self, method: str, params: Dict = None):
        """–ó–∞–ø—Ä–æ—Å –∫ Bitrix24 API"""
        try:
            url = f"{self.webhook_url}/{method}"
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=params or {}, timeout=30) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        error_text = await response.text()
                        logger.error(f"Bitrix24 error {response.status}: {error_text}")
                        return {"error": f"HTTP {response.status}"}
        except Exception as e:
            logger.error(f"Bitrix24 request error: {str(e)}")
            return {"error": str(e)}
    
    async def get_deals_detailed(self, limit: int = 50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        params = {
            "SELECT": [
                "ID", "TITLE", "STAGE_ID", "OPPORTUNITY", "CONTACT_ID", "DATE_CREATE", "ASSIGNED_BY_ID",
                "UF_CRM_*"  # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è
            ],
            "start": 0,
            "limit": limit
        }
        result = await self._make_request("crm.deal.list", params)
        return result.get("result", [])
    
    async def create_task(self, task_data: Dict):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Bitrix24"""
        params = {
            "fields": {
                "TITLE": task_data.get("title", ""),
                "DESCRIPTION": task_data.get("description", ""),
                "RESPONSIBLE_ID": task_data.get("responsible_id", "1"),
                "DEADLINE": task_data.get("deadline", ""),
            }
        }
        return await self._make_request("tasks.task.add", params)
    
    async def get_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        result = await self._make_request("user.get")
        return result.get("result", [])

# Initialize services
bitrix_service = Bitrix24Service()

# ============= TELEGRAM BOT SERVICE =============

class TelegramService:
    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"
        
    async def send_message(self, chat_id: str, text: str, reply_markup: Dict = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            url = f"{self.api_url}/sendMessage"
            payload = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML"
            }
            if reply_markup:
                payload["reply_markup"] = reply_markup
                
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload, timeout=30) as response:
                    result = await response.json()
                    return result.get("ok", False)
        except Exception as e:
            logger.error(f"Telegram send error: {str(e)}")
            return False
    
    async def set_webhook(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
        try:
            webhook_url = os.getenv("TELEGRAM_WEBHOOK_URL")
            url = f"{self.api_url}/setWebhook"
            payload = {"url": webhook_url}
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload) as response:
                    result = await response.json()
                    return result
        except Exception as e:
            return {"ok": False, "error": str(e)}

telegram_service = TelegramService()

# ============= AI CHAT SERVICE =============

async def get_ai_response(message: str, context: str = "", department: str = "") -> str:
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã
        knowledge_context = ""
        if department:
            try:
                training_files = await db.training_files.find({"department": department}).to_list(10)
                if training_files:
                    knowledge_context = f"\n\n–ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –û–¢–î–ï–õ–ê {department}:\n"
                    for file in training_files[:3]:  # –ë–µ—Ä–µ–º —Ç–æ–ø 3 —Ñ–∞–π–ª–∞
                        knowledge_context += f"- {file['filename']}: {file['content'][:200]}...\n"
            except:
                pass
        
        openai_key = os.getenv("OPENROUTER_API_KEY") or os.getenv("EMERGENT_LLM_KEY")
        if not openai_key:
            return f"ü§ñ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: '{message}'. AI —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è..."
        
        url = "https://api.openai.com/v1/chat/completions"
        if openai_key.startswith("sk-or-"):
            url = "https://openrouter.ai/api/v1/chat/completions"
        elif openai_key.startswith("sk-emergent-"):
            url = "https://emergentmethods.ai/v1/chat/completions"
        
        headers = {"Authorization": f"Bearer {openai_key}", "Content-Type": "application/json"}
        
        system_message = f"""–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –í–∞—Å–î–æ–º - –ª–∏–¥–µ—Ä–∞ –≤ —É–±–æ—Ä–∫–µ –ø–æ–¥—ä–µ–∑–¥–æ–≤ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –≤ –ö–∞–ª—É–≥–µ.

–ö–û–ù–¢–ï–ö–°–¢: {context}

–ö–û–ú–ü–ê–ù–ò–Ø –í–ê–°–î–û–ú:
- –£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤ –≤ 400+ –¥–æ–º–∞—Ö –ö–∞–ª—É–≥–∏
- –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
- 13+ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ  
- Bitrix24 CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

{knowledge_context}

–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
        
        data = {
            "model": "gpt-4o-mini",
            "messages": [
                {"role": "system", "content": system_message},
                {"role": "user", "content": message}
            ],
            "temperature": 0.7,
            "max_tokens": 500
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data, timeout=30) as response:
                if response.status == 200:
                    result = await response.json()
                    return result["choices"][0]["message"]["content"]
                else:
                    return f"ü§ñ AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'"
                    
    except Exception as e:
        return f"ü§ñ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: '{message}'. AI –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∑–∂–µ."


# Define Models
class StatusCheck(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    client_name: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class StatusCheckCreate(BaseModel):
    client_name: str

# –ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
class Employee(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    full_name: str
    phone: str
    role: str
    department: str
    telegram_id: Optional[str] = None
    bitrix24_id: Optional[str] = None
    active: bool = True
    performance_score: float = 0.0
    created_at: datetime = Field(default_factory=datetime.utcnow)

class EmployeeCreate(BaseModel):
    full_name: str
    phone: str
    role: str
    department: str

class ChatMessage(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    sender_id: str
    content: str
    ai_response: Optional[str] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    chat_type: str = "dashboard"  # "dashboard", "telegram", "meeting"

class Meeting(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    title: str
    description: str
    participants: List[str] = []
    start_time: datetime
    recording_text: Optional[str] = None
    ai_summary: Optional[str] = None
    action_items: List[str] = []
    bitrix_tasks_created: List[str] = []
    created_at: datetime = Field(default_factory=datetime.utcnow)

class SystemLog(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    level: str  # INFO, WARNING, ERROR
    message: str
    component: str  # backend, telegram, bitrix24, ai
    data: Optional[Dict[str, Any]] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)

# –ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
class VoiceCall(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    caller_id: str
    duration: int = 0  # —Å–µ–∫—É–Ω–¥—ã
    transcript: Optional[str] = None
    ai_response_text: Optional[str] = None
    status: str = "active"  # active, ended, failed
    created_at: datetime = Field(default_factory=datetime.utcnow)

class AITask(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    title: str
    description: str
    schedule: str  # cron-style –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00"
    recurring: bool = True
    next_run: Optional[datetime] = None
    last_run: Optional[datetime] = None
    active: bool = True
    created_by: str
    created_at: datetime = Field(default_factory=datetime.utcnow)

class TrainingFile(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    filename: str
    department: str
    content: str
    file_type: str  # "pdf", "doc", "txt"
    uploaded_by: str
    processed: bool = False
    created_at: datetime = Field(default_factory=datetime.utcnow)

class CleaningHouse(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    address: str
    stage: str
    contact_info: Optional[str] = None
    bitrix24_deal_id: str
    last_cleaning: Optional[datetime] = None
    next_cleaning: Optional[datetime] = None
    notes: List[str] = []

# Add your routes to the router instead of directly to app
@api_router.get("/")
async def root():
    return {"message": "VasDom AudioBot API", "version": "2.0.0", "status": "üöÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã"}

@api_router.post("/status", response_model=StatusCheck)
async def create_status_check(input: StatusCheckCreate):
    status_dict = input.dict()
    status_obj = StatusCheck(**status_dict)
    _ = await db.status_checks.insert_one(status_obj.dict())
    return status_obj

@api_router.get("/status", response_model=List[StatusCheck])
async def get_status_checks():
    status_checks = await db.status_checks.find().to_list(1000)
    return [StatusCheck(**status_check) for status_check in status_checks]

# ============= DASHBOARD & EMPLOYEES =============

@api_router.get("/dashboard")
async def get_dashboard():
    """–î–∞—à–±–æ—Ä–¥ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    try:
        total_employees = await db.employees.count_documents({"active": True})
        total_meetings = await db.meetings.count_documents({})
        total_messages = await db.chat_messages.count_documents({})
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
        recent_logs = await db.system_logs.find(
            {"level": {"$in": ["WARNING", "ERROR"]}}, 
            sort=[("timestamp", -1)]
        ).limit(5).to_list(length=None)
        
        return {
            "total_employees": total_employees,
            "total_meetings": total_meetings,
            "total_messages": total_messages,
            "active_projects": 0,
            "completed_tasks_today": 0,
            "revenue_month": 0.0,
            "system_health": "good",
            "ai_suggestions": [],
            "recent_alerts": len(recent_logs)
        }
    except Exception as e:
        await log_system_event("ERROR", "Dashboard error", "backend", {"error": str(e)})
        return {"error": str(e)}

@api_router.get("/employees")
async def get_employees(department: Optional[str] = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    try:
        filter_dict = {"active": True}
        if department:
            filter_dict["department"] = department
            
        employees = await db.employees.find(filter_dict).to_list(1000)
        return [Employee(**emp) for emp in employees]
    except Exception as e:
        await log_system_event("ERROR", "Get employees error", "backend", {"error": str(e)})
        return {"error": str(e)}

@api_router.post("/employees")
async def create_employee(employee: EmployeeCreate):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        employee_dict = employee.dict()
        employee_obj = Employee(**employee_dict)
        await db.employees.insert_one(employee_obj.dict())
        
        await log_system_event("INFO", f"–°–æ–∑–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee_obj.full_name}", "backend")
        return employee_obj
    except Exception as e:
        await log_system_event("ERROR", "Create employee error", "backend", {"error": str(e)})
        return {"error": str(e)}

# ============= BITRIX24 INTEGRATION =============

@api_router.get("/bitrix24/test")
async def test_bitrix24():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitrix24"""
    try:
        result = await bitrix_service._make_request("app.info")
        if "error" in result:
            await log_system_event("ERROR", "Bitrix24 connection failed", "bitrix24", result)
            return {"status": "error", "message": result["error"]}
        
        await log_system_event("INFO", "Bitrix24 connection successful", "bitrix24")
        return {"status": "success", "bitrix_info": result.get("result", {})}
    except Exception as e:
        await log_system_event("ERROR", "Bitrix24 test error", "bitrix24", {"error": str(e)})
        return {"status": "error", "error": str(e)}

@api_router.get("/bitrix24/deals")
async def get_bitrix24_deals():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –∏–∑ Bitrix24"""
    try:
        deals = await bitrix_service.get_deals_detailed()
        await log_system_event("INFO", f"–ü–æ–ª—É—á–µ–Ω–æ {len(deals)} —Å–¥–µ–ª–æ–∫ –∏–∑ Bitrix24", "bitrix24")
        return {"status": "success", "deals": deals, "count": len(deals)}
    except Exception as e:
        await log_system_event("ERROR", "Bitrix24 deals error", "bitrix24", {"error": str(e)})
        return {"status": "error", "error": str(e)}

@api_router.post("/bitrix24/create-task")
async def create_bitrix24_task(task_data: Dict[str, Any]):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Bitrix24"""
    try:
        result = await bitrix_service.create_task(task_data)
        
        if result.get("result"):
            task_id = result["result"]
            await log_system_event("INFO", f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ Bitrix24: {task_id}", "bitrix24", {"task_id": task_id})
            return {"status": "success", "task_id": task_id}
        else:
            await log_system_event("ERROR", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Bitrix24", "bitrix24", result)
            return {"status": "error", "error": result}
    except Exception as e:
        await log_system_event("ERROR", "Bitrix24 create task error", "bitrix24", {"error": str(e)})
        return {"status": "error", "error": str(e)}

# ============= CHAT & LIVE COMMUNICATION =============

@api_router.post("/chat/send")
async def send_chat_message(message_data: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ (–∂–∏–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º AI –æ—Ç–≤–µ—Ç
        ai_response = await get_ai_response(
            message_data["content"], 
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message_data.get('sender_id', 'Unknown')}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç
        chat_message = ChatMessage(
            sender_id=message_data["sender_id"],
            content=message_data["content"],
            ai_response=ai_response,
            chat_type="dashboard"
        )
        
        await db.chat_messages.insert_one(chat_message.dict())
        await log_system_event("INFO", "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ", "ai", {"user": message_data["sender_id"]})
        
        return {
            "status": "success",
            "message": chat_message.dict(),
            "ai_response": ai_response
        }
    except Exception as e:
        await log_system_event("ERROR", "Chat message error", "ai", {"error": str(e)})
        return {"status": "error", "error": str(e)}

@api_router.get("/chat/history")
async def get_chat_history(limit: int = 50, chat_type: str = "dashboard"):
    """–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
    try:
        messages = await db.chat_messages.find(
            {"chat_type": chat_type},
            sort=[("timestamp", -1)]
        ).limit(limit).to_list(length=None)
        
        # Convert ObjectId to string for JSON serialization
        for message in messages:
            if "_id" in message:
                message["_id"] = str(message["_id"])
        
        return {"status": "success", "messages": messages[::-1]}  # Reverse –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
    except Exception as e:
        return {"status": "error", "error": str(e)}

# ============= MEETINGS & PLANNING =============

@api_router.post("/meetings")
async def create_meeting(meeting_data: Dict[str, Any]):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–µ—Ä–∫–∏"""
    try:
        meeting = Meeting(**meeting_data)
        await db.meetings.insert_one(meeting.dict())
        
        await log_system_event("INFO", f"–°–æ–∑–¥–∞–Ω–∞ –ø–ª–∞–Ω–µ—Ä–∫–∞: {meeting.title}", "backend")
        return {"status": "success", "meeting": meeting.dict()}
    except Exception as e:
        await log_system_event("ERROR", "Create meeting error", "backend", {"error": str(e)})
        return {"status": "error", "error": str(e)}

@api_router.get("/meetings")
async def get_meetings(limit: int = 20):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω–µ—Ä–æ–∫"""
    try:
        meetings = await db.meetings.find(
            {}, sort=[("start_time", -1)]
        ).limit(limit).to_list(length=None)
        
        # Convert ObjectId to string for JSON serialization
        for meeting in meetings:
            if "_id" in meeting:
                meeting["_id"] = str(meeting["_id"])
        
        return {"status": "success", "meetings": meetings}
    except Exception as e:
        return {"status": "error", "error": str(e)}

@api_router.post("/meetings/{meeting_id}/analyze")
async def analyze_meeting(meeting_id: str):
    """AI –∞–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á"""
    try:
        meeting = await db.meetings.find_one({"id": meeting_id})
        if not meeting:
            return {"status": "error", "error": "Meeting not found"}
        
        # AI –∞–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–∏ –ø–ª–∞–Ω–µ—Ä–∫–∏
        if meeting.get("recording_text"):
            analysis_prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏ –∏ –≤—ã–¥–µ–ª–∏:
            1. –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
            2. –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            3. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
            4. –î–µ–¥–ª–∞–π–Ω—ã
            
            –ó–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏:
            {meeting['recording_text']}
            
            –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            {
                "summary": "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ",
                "decisions": ["—Ä–µ—à–µ–Ω–∏–µ1", "—Ä–µ—à–µ–Ω–∏–µ2"],
                "tasks": [
                    {"title": "–ó–∞–¥–∞—á–∞", "responsible": "–§–ò–û", "deadline": "–¥–∞—Ç–∞", "description": "–æ–ø–∏—Å–∞–Ω–∏–µ"}
                ]
            }
            """
            
            ai_response = await get_ai_response(analysis_prompt, "–ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–µ—Ä–∫–∏")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            analysis_update = {
                "ai_summary": ai_response,
                "analyzed_at": datetime.utcnow()
            }
            await db.meetings.update_one({"id": meeting_id}, {"$set": analysis_update})
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ Bitrix24
            tasks_created = []
            try:
                # –ü–∞—Ä—Å–∏–º AI –æ—Ç–≤–µ—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á
                if "tasks" in ai_response.lower():
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ Bitrix24
                    task_result = await bitrix_service.create_task({
                        "title": f"–ó–∞–¥–∞—á–∏ —Å –ø–ª–∞–Ω–µ—Ä–∫–∏: {meeting['title']}",
                        "description": ai_response,
                        "responsible_id": "1"  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    })
                    
                    if task_result.get("result"):
                        tasks_created.append(task_result["result"])
                        await log_system_event("INFO", f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ Bitrix24: {task_result['result']}", "bitrix24")
                        
            except Exception as task_error:
                await log_system_event("WARNING", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ Bitrix24: {str(task_error)}", "bitrix24")
            
            return {
                "status": "success",
                "analysis": ai_response,
                "bitrix_tasks": tasks_created
            }
        else:
            return {"status": "error", "error": "No recording text to analyze"}
            
    except Exception as e:
        await log_system_event("ERROR", "Meeting analysis error", "ai", {"error": str(e)})
        return {"status": "error", "error": str(e)}

# ============= SYSTEM LOGS =============

@api_router.get("/logs")
async def get_system_logs(limit: int = 100, level: Optional[str] = None, component: Optional[str] = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤"""
    try:
        filter_dict = {}
        if level:
            filter_dict["level"] = level
        if component:
            filter_dict["component"] = component
            
        logs = await db.system_logs.find(
            filter_dict, 
            sort=[("timestamp", -1)]
        ).limit(limit).to_list(length=None)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ObjectId –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        for log in logs:
            if "_id" in log:
                log["_id"] = str(log["_id"])
        
        return {"status": "success", "logs": logs, "count": len(logs)}
    except Exception as e:
        logger.error(f"Get logs error: {str(e)}")
        return {"status": "error", "error": str(e)}

async def log_system_event(level: str, message: str, component: str, data: Dict = None):
    """–§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    try:
        log_entry = SystemLog(
            level=level,
            message=message,
            component=component,
            data=data or {}
        )
        await db.system_logs.insert_one(log_entry.dict())
        
        # –¢–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ Python logger
        if level == "ERROR":
            logger.error(f"[{component}] {message}")
        elif level == "WARNING":
            logger.warning(f"[{component}] {message}")
        else:
            logger.info(f"[{component}] {message}")
            
    except Exception as e:
        logger.error(f"Failed to log system event: {str(e)}")

# ============= TELEGRAM BOT ENDPOINTS =============

@app.post("/telegram/webhook")
async def telegram_webhook(request: Request):
    """Webhook –¥–ª—è Telegram –±–æ—Ç–∞"""
    try:
        data = await request.json()
        await log_system_event("INFO", "–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Telegram", "telegram", {"update_id": data.get("update_id")})
        
        if "message" in data:
            message = data["message"]
            chat_id = str(message["chat"]["id"])
            text = message.get("text", "")
            user_id = str(message["from"]["id"])
            username = message["from"].get("username", "Unknown")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            chat_msg = ChatMessage(
                sender_id=user_id,
                content=text,
                chat_type="telegram"
            )
            await db.chat_messages.insert_one(chat_msg.dict())
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text.startswith("/start"):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
                employee = await db.employees.find_one({"telegram_id": user_id})
                
                if employee:
                    welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {employee['full_name']}!\n\nü§ñ AudioBot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\nüìã –ö–æ–º–∞–Ω–¥—ã:\n/tasks - –º–æ–∏ –∑–∞–¥–∞—á–∏\n/help - –ø–æ–º–æ—â—å"
                else:
                    # –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
                    welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VasDom AudioBot!\n\nüîç –í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\nüìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n‚Ä¢ –ú–∞–∫—Å–∏–º: +7 920 092 4550\n‚Ä¢ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞: +7 920 870 1769"
                
                await telegram_service.send_message(chat_id, welcome_text)
                
            elif text.startswith("/tasks"):
                employee = await db.employees.find_one({"telegram_id": user_id})
                if employee:
                    tasks_text = f"üìã –ó–∞–¥–∞—á–∏ –¥–ª—è {employee['full_name']}:\n\nüîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞—á–∏\n‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å—Å—è –Ω–∞ –æ–±—ä–µ–∫—Ç–∞—Ö\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç—ã"
                else:
                    tasks_text = "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ (/start)"
                
                await telegram_service.send_message(chat_id, tasks_text)
                
            elif text.startswith("/help"):
                help_text = """ü§ñ <b>VasDom AudioBot - –ü–æ–º–æ—â—å</b>

üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ /tasks - –º–æ–∏ –∑–∞–¥–∞—á–∏  
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üè¢ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Bitrix24 CRM
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º: +7 920 092 4550
‚Ä¢ Email: maslovmaksim92@yandex.ru"""

                await telegram_service.send_message(chat_id, help_text)
                
            else:
                # AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                ai_response = await get_ai_response(text, f"Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º AI –æ—Ç–≤–µ—Ç
                await db.chat_messages.update_one(
                    {"id": chat_msg.id},
                    {"$set": {"ai_response": ai_response}}
                )
                
                await telegram_service.send_message(chat_id, f"ü§ñ {ai_response}")
                await log_system_event("INFO", "AI –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram", "ai", {"user": username})
        
        return {"status": "ok"}
        
    except Exception as e:
        await log_system_event("ERROR", "Telegram webhook error", "telegram", {"error": str(e)})
        return {"status": "error", "message": str(e)}

@app.get("/telegram/set-webhook")
async def set_telegram_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    try:
        result = await telegram_service.set_webhook()
        await log_system_event("INFO", "Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "telegram", result)
        return result
    except Exception as e:
        await log_system_event("ERROR", "Telegram webhook error", "telegram", {"error": str(e)})
        return {"error": str(e)}

# Include API router and configure app
app.include_router(api_router)

app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=os.environ.get('CORS_ORIGINS', '*').split(','),
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# App events
# ============= –ù–û–í–´–ï ENDPOINTS –î–õ–Ø –î–û–†–ê–ë–û–¢–û–ö =============

@api_router.get("/cleaning/houses") 
async def get_cleaning_houses():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–æ–≤ –¥–ª—è —É–±–æ—Ä–∫–∏ –∏–∑ Bitrix24"""
    try:
        deals = await bitrix_service.get_deals(limit=500)
        houses = [{"address": deal.get("TITLE", ""), "stage": deal.get("STAGE_ID", ""), "bitrix24_deal_id": deal["ID"]} for deal in deals]
        return {"status": "success", "houses": houses, "total": len(houses)}
    except Exception as e:
        return {"status": "error", "error": str(e)}

@api_router.get("/ai-tasks")
async def get_ai_tasks():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ AI –∑–∞–¥–∞—á"""
    try:
        tasks = await db.ai_tasks.find({"active": True}).to_list(1000)
        for task in tasks:
            if "_id" in task:
                task["_id"] = str(task["_id"])
        return {"status": "success", "tasks": tasks}
    except Exception as e:
        return {"status": "error", "error": str(e)}

@api_router.post("/ai-tasks")
async def create_ai_task(task_data: Dict[str, Any]):
    """–°–æ–∑–¥–∞–Ω–∏–µ AI –∑–∞–¥–∞—á–∏"""
    try:
        task = {
            "id": str(uuid.uuid4()),
            "title": task_data["title"],
            "description": task_data["description"],
            "schedule": task_data.get("schedule", ""),
            "recurring": task_data.get("recurring", False),
            "active": True,
            "created_by": "admin",
            "created_at": datetime.utcnow()
        }
        await db.ai_tasks.insert_one(task)
        return {"status": "success", "task": task}
    except Exception as e:
        return {"status": "error", "error": str(e)}

@api_router.get("/training/files")
async def get_training_files(department: Optional[str] = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
    try:
        filter_dict = {}
        if department:
            filter_dict["department"] = department
        files = await db.training_files.find(filter_dict).to_list(1000)
        for file in files:
            if "_id" in file:
                file["_id"] = str(file["_id"])
        return {"status": "success", "files": files}
    except Exception as e:
        return {"status": "error", "error": str(e)}

@api_router.post("/training/upload-file")
async def upload_training_file(file_data: Dict[str, Any]):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ–±—É—á–µ–Ω–∏—è"""
    try:
        file_obj = {
            "id": str(uuid.uuid4()),
            "filename": file_data["filename"],
            "department": file_data["department"],
            "content": file_data["content"],
            "file_type": file_data.get("file_type", "txt"),
            "uploaded_by": "admin",
            "created_at": datetime.utcnow()
        }
        await db.training_files.insert_one(file_obj)
        return {"status": "success", "file_id": file_obj["id"]}
    except Exception as e:
        return {"status": "error", "error": str(e)}

# Include the router –ü–ï–†–ï–î startup event
app.include_router(api_router)

app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=os.environ.get('CORS_ORIGINS', '*').split(','),
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    await log_system_event("INFO", "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è", "backend")
    logger.info("üöÄ Starting VasDom AudioBot System...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram webhook
    try:
        webhook_result = await telegram_service.set_webhook()
        if webhook_result.get("ok"):
            await log_system_event("INFO", "Telegram webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ", "telegram")
        else:
            await log_system_event("WARNING", "–ü—Ä–æ–±–ª–µ–º–∞ —Å Telegram webhook", "telegram", webhook_result)
    except Exception as e:
        await log_system_event("ERROR", "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram webhook", "telegram", {"error": str(e)})
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –∑–∞–¥–∞–Ω–∏—è
    try:
        base_employees = [
            # –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ  
            {"full_name": "–ú–∞—Å–ª–æ–≤ –ú–∞–∫—Å–∏–º –í–∞–ª–µ—Ä—å–µ–≤–∏—á", "phone": "89200924550", "role": "director", "department": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è"},
            {"full_name": "–ú–∞—Å–ª–æ–≤–∞ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞", "phone": "89208701769", "role": "general_director", "department": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è"},
            {"full_name": "–§–∏–ª–∏–ø–ø–æ–≤ –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–µ–µ–≤–∏—á", "phone": "89056400212", "role": "construction_head", "department": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–¥–µ–ª"},
            {"full_name": "–ß–µ—Ä–∫–∞—Å–æ–≤ –Ø—Ä–æ—Å–ª–∞–≤ –ê—Ä—Ç—É—Ä–æ–≤–∏—á", "phone": "89208855883", "role": "construction_manager", "department": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–¥–µ–ª"},
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–¥–µ–ª—ã
            {"full_name": "–ö–æ–ª–æ—Å–æ–≤ –î–º–∏—Ç—Ä–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á", "phone": "89105489113", "role": "accountant", "department": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è"},
            {"full_name": "–ú–∞—Å–ª–æ–≤–∞ –ê—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞", "phone": "89533150101", "role": "construction_manager", "department": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–¥–µ–ª"},
            {"full_name": "–ò–ª—å—è –ù–∏–∫–æ–ª–∞–µ–≤–∏—á", "phone": "", "role": "foreman", "department": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–¥–µ–ª"},
            {"full_name": "–û–ª—å–≥–∞ –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞", "phone": "89106058454", "role": "hr_director", "department": "–£–§–ò–¶"},
            {"full_name": "–ü–æ–ø–æ–≤ –ù–∏–∫–∏—Ç–∞ –í–∞–ª–µ—Ä—å–µ–≤–∏—á", "phone": "89105447777", "role": "hr_manager", "department": "–£–§–ò–¶"},
            {"full_name": "–ù–∞—Ç–∞–ª—å—è –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞", "phone": "89206148777", "role": "cleaning_head", "department": "–ö–ª–∏–Ω–∏–Ω–≥"},
            {"full_name": "–ò–ª—å–∏–Ω—ã—Ö –ê–ª–µ–∫—Å–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á", "phone": "89206188414", "role": "cleaning_manager", "department": "–ö–ª–∏–Ω–∏–Ω–≥"},
            {"full_name": "–®–∞–¥–æ–±–∞ –ï–ª–µ–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞", "phone": "89103330355", "role": "client_manager", "department": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"},
            {"full_name": "–ö–æ—Ü–µ—Ñ–∞–Ω –î–∞–Ω–∏–µ–ª–∞", "phone": "89775278413", "role": "client_manager", "department": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"}
        ]
        
        for emp_data in base_employees:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
            existing = await db.employees.find_one({"phone": emp_data["phone"]}) if emp_data["phone"] else None
            
            if not existing:
                employee_obj = Employee(**emp_data)
                await db.employees.insert_one(employee_obj.dict())
                await log_system_event("INFO", f"–°–æ–∑–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {emp_data['full_name']}", "backend")
        
        await log_system_event("INFO", "–ë–∞–∑–æ–≤—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã", "backend")
        
    except Exception as e:
        await log_system_event("ERROR", "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", "backend", {"error": str(e)})
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Bitrix24 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        bitrix_test = await bitrix_service._make_request("app.info")
        if "error" not in bitrix_test:
            await log_system_event("INFO", "Bitrix24 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ", "bitrix24")
        else:
            await log_system_event("WARNING", "–ü—Ä–æ–±–ª–µ–º–∞ —Å Bitrix24 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º", "bitrix24", bitrix_test)
    except Exception as e:
        await log_system_event("ERROR", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitrix24", "bitrix24", {"error": str(e)})
    
    await log_system_event("INFO", "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", "backend")
    logger.info("‚úÖ System startup completed!")

@app.on_event("shutdown")
async def shutdown_db_client():
    await log_system_event("INFO", "–°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É", "backend")
    client.close()