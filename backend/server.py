from fastapi import FastAPI, APIRouter
from dotenv import load_dotenv
from starlette.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import os
import logging
from pathlib import Path
from pydantic import BaseModel, Field
from typing import List, Optional
import uuid
from datetime import datetime


ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# MongoDB connection
mongo_url = os.environ['MONGO_URL']
client = AsyncIOMotorClient(mongo_url)
db = client[os.environ['DB_NAME']]

# Create the main app without a prefix
app = FastAPI()

# Create a router with the /api prefix
api_router = APIRouter(prefix="/api")


# Define Models
class StatusCheck(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    client_name: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class StatusCheckCreate(BaseModel):
    client_name: str

# Add your routes to the router instead of directly to app
@api_router.get("/")
async def root():
    return {"message": "Hello World"}

@api_router.post("/status", response_model=StatusCheck)
async def create_status_check(input: StatusCheckCreate):
    status_dict = input.dict()
    status_obj = StatusCheck(**status_dict)
    _ = await db.status_checks.insert_one(status_obj.dict())
    return status_obj

@api_router.get("/status", response_model=List[StatusCheck])
async def get_status_checks():
    status_checks = await db.status_checks.find().to_list(1000)
    return [StatusCheck(**status_check) for status_check in status_checks]

# üöÄ –î–û–†–ê–ë–û–¢–ö–ò –î–õ–Ø –í–ê–°–î–û–ú - –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –ö –°–£–©–ï–°–¢–í–£–Æ–©–ï–ú–£ –ö–û–î–£

# –ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
class Employee(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    full_name: str
    phone: str
    role: str
    department: str
    telegram_id: Optional[str] = None
    active: bool = True
    performance_score: float = 0.0
    created_at: datetime = Field(default_factory=datetime.utcnow)

class EmployeeCreate(BaseModel):
    full_name: str
    phone: str
    role: str
    department: str

# –ù–æ–≤—ã–µ endpoints –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
@api_router.get("/dashboard")
async def get_dashboard():
    """–î–∞—à–±–æ—Ä–¥ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    try:
        total_employees = await db.employees.count_documents({"active": True})
        return {
            "total_employees": total_employees,
            "active_projects": 0,  # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            "completed_tasks_today": 0,  # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ 
            "revenue_month": 0.0,  # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            "system_health": "good",
            "ai_suggestions": []
        }
    except Exception as e:
        logger.error(f"Dashboard error: {str(e)}")
        return {"error": str(e)}

@api_router.get("/employees")
async def get_employees():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    try:
        employees = await db.employees.find({"active": True}).to_list(1000)
        return [Employee(**emp) for emp in employees]
    except Exception as e:
        logger.error(f"Employees error: {str(e)}")
        return {"error": str(e)}

@api_router.post("/employees")
async def create_employee(employee: EmployeeCreate):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        employee_dict = employee.dict()
        employee_obj = Employee(**employee_dict)
        await db.employees.insert_one(employee_obj.dict())
        return employee_obj
    except Exception as e:
        logger.error(f"Create employee error: {str(e)}")
        return {"error": str(e)}

# Include the router in the main app - –ü–ï–†–ï–ù–ï–°–ï–ù–û –í –ö–û–ù–ï–¶
app.include_router(api_router)

app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=os.environ.get('CORS_ORIGINS', '*').split(','),
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@app.on_event("shutdown")
async def shutdown_db_client():
    client.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üöÄ Starting VasDom AudioBot System...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –∑–∞–¥–∞–Ω–∏—è
    try:
        base_employees = [
            # –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
            {"full_name": "–ú–∞—Å–ª–æ–≤ –ú–∞–∫—Å–∏–º –í–∞–ª–µ—Ä—å–µ–≤–∏—á", "phone": "89200924550", "role": "director", "department": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è"},
            {"full_name": "–ú–∞—Å–ª–æ–≤–∞ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞", "phone": "89208701769", "role": "general_director", "department": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è"},
            {"full_name": "–§–∏–ª–∏–ø–ø–æ–≤ –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–µ–µ–≤–∏—á", "phone": "89056400212", "role": "construction_head", "department": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–¥–µ–ª"},
            {"full_name": "–ß–µ—Ä–∫–∞—Å–æ–≤ –Ø—Ä–æ—Å–ª–∞–≤ –ê—Ä—Ç—É—Ä–æ–≤–∏—á", "phone": "89208855883", "role": "construction_manager", "department": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–¥–µ–ª"},
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
            {"full_name": "–ö–æ–ª–æ—Å–æ–≤ –î–º–∏—Ç—Ä–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á", "phone": "89105489113", "role": "accountant", "department": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è"},
            {"full_name": "–ú–∞—Å–ª–æ–≤–∞ –ê—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞", "phone": "89533150101", "role": "construction_manager", "department": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–¥–µ–ª"},
            {"full_name": "–ò–ª—å—è –ù–∏–∫–æ–ª–∞–µ–≤–∏—á", "phone": "", "role": "foreman", "department": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–¥–µ–ª"},
            {"full_name": "–û–ª—å–≥–∞ –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞", "phone": "89106058454", "role": "hr_director", "department": "–£–§–ò–¶"},
            {"full_name": "–ü–æ–ø–æ–≤ –ù–∏–∫–∏—Ç–∞ –í–∞–ª–µ—Ä—å–µ–≤–∏—á", "phone": "89105447777", "role": "hr_manager", "department": "–£–§–ò–¶"},
            {"full_name": "–ù–∞—Ç–∞–ª—å—è –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞", "phone": "89206148777", "role": "cleaning_head", "department": "–ö–ª–∏–Ω–∏–Ω–≥"},
            {"full_name": "–ò–ª—å–∏–Ω—ã—Ö –ê–ª–µ–∫—Å–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á", "phone": "89206188414", "role": "cleaning_manager", "department": "–ö–ª–∏–Ω–∏–Ω–≥"},
            {"full_name": "–®–∞–¥–æ–±–∞ –ï–ª–µ–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞", "phone": "89103330355", "role": "client_manager", "department": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"},
            {"full_name": "–ö–æ—Ü–µ—Ñ–∞–Ω –î–∞–Ω–∏–µ–ª–∞", "phone": "89775278413", "role": "client_manager", "department": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"}
        ]
        
        for emp_data in base_employees:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
            existing = await db.employees.find_one({"phone": emp_data["phone"]}) if emp_data["phone"] else None
            
            if not existing:
                employee_obj = Employee(**emp_data)
                await db.employees.insert_one(employee_obj.dict())
                logger.info(f"‚úÖ Created employee: {emp_data['full_name']}")
        
        logger.info("üë• Base employees initialized")
        
    except Exception as e:
        logger.error(f"Error initializing employees: {str(e)}")
    
    logger.info("‚úÖ System startup completed!")