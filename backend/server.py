"""
Backward compatibility entry point –¥–ª—è Render
–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω –ø–æ–¥ PostgreSQL –±–µ–∑ MongoDB
"""

try:
    # Try to import the new modular app
    from app.main import app
    print("‚úÖ Using modular VasDom AudioBot with self-learning v2.0 on Render")
except ImportError as e:
    print(f"‚ö†Ô∏è Modular app not available: {e}")
    print("üîÑ Using minimal implementation")
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    from fastapi import FastAPI, APIRouter
    from pydantic import BaseModel, Field
    from typing import List
    import uuid
    from datetime import datetime
    import os

    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = FastAPI(
        title="VasDom AudioBot API (Minimal Mode)",
        description="–ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è Render –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
        version="1.0.0"
    )

    # CORS
    from fastapi.middleware.cors import CORSMiddleware
    app.add_middleware(
        CORSMiddleware,
        allow_credentials=True,
        allow_origins=["*"],  # –í production —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # API —Ä–æ—É—Ç–µ—Ä
    api_router = APIRouter(prefix="/api")

    # –ú–æ–¥–µ–ª–∏
    class StatusCheck(BaseModel):
        id: str = Field(default_factory=lambda: str(uuid.uuid4()))
        client_name: str
        timestamp: datetime = Field(default_factory=datetime.utcnow)
        platform: str = "Render"

    class StatusCheckCreate(BaseModel):
        client_name: str

    # In-memory storage
    status_checks = []

    @api_router.get("/")
    async def root():
        return {
            "message": "VasDom AudioBot API - Minimal Mode on Render",
            "status": "running",
            "platform": "Render",
            "note": "–ú–æ–¥—É–ª—å —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL"
        }

    @api_router.get("/health")
    async def health():
        return {
            "status": "healthy",
            "platform": "Render",
            "mode": "minimal",
            "timestamp": datetime.utcnow().isoformat()
        }

    @api_router.post("/status", response_model=StatusCheck)
    async def create_status_check(input: StatusCheckCreate):
        status_obj = StatusCheck(**input.dict())
        status_checks.append(status_obj)
        return status_obj

    @api_router.get("/status", response_model=List[StatusCheck])
    async def get_status_checks():
        return status_checks[-10:]

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
    app.include_router(api_router)

    @app.get("/")
    async def root_minimal():
        return {
            "name": "VasDom AudioBot",
            "version": "1.0.0",
            "platform": "Render",
            "mode": "minimal",
            "message": "–ì–æ—Ç–æ–≤ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–¥—É–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è"
        }