"""
VasDom AudioBot - –°–∞–º–æ–æ–±—É—á–∞—é—â–∏–π—Å—è AI –¥–ª—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π
Production-ready –≤–µ—Ä—Å–∏—è –¥–ª—è Render —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
"""
from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
import os
import json
import logging
import asyncio
from datetime import datetime, timedelta
import uuid
import hashlib
import numpy as np
from collections import deque
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º fallback
try:
    import aiohttp
    HTTP_CLIENT_AVAILABLE = True
    logger.info("‚úÖ aiohttp –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è HTTP API")
except ImportError:
    HTTP_CLIENT_AVAILABLE = False
    logger.warning("‚ùå aiohttp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º requests fallback")
    try:
        import requests
        REQUESTS_AVAILABLE = True
        logger.info("‚úÖ requests fallback –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        REQUESTS_AVAILABLE = False
        logger.error("‚ùå –ù–∏–∫–∞–∫–∏—Ö HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç–Ω–æ!")

# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º in-memory —Ä–µ–∂–∏–º
DATABASE_AVAILABLE = False
logger.info("üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================================================

class Config:
    # AI –∏ –æ–±—É—á–µ–Ω–∏–µ
    EMERGENT_LLM_KEY = os.getenv("EMERGENT_LLM_KEY", "")
    EMBEDDING_MODEL = os.getenv("EMBEDDING_MODEL", "sentence-transformers/paraphrase-multilingual-MiniLM-L6-v2")
    MIN_RATING_THRESHOLD = int(os.getenv("MIN_RATING_THRESHOLD", "4"))
    RETRAINING_THRESHOLD = float(os.getenv("RETRAINING_THRESHOLD", "3.5"))
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    DATABASE_URL = os.getenv("DATABASE_URL", "")
    
    # CORS
    CORS_ORIGINS = os.getenv("CORS_ORIGINS", "*").split(",")

config = Config()

# =============================================================================
# –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# =============================================================================

class VoiceMessage(BaseModel):
    message: str = Field(..., min_length=1, max_length=2000)
    session_id: Optional[str] = Field(default_factory=lambda: str(uuid.uuid4()))

class VoiceResponse(BaseModel):
    response: str
    log_id: str
    session_id: str
    model_used: str = "gpt-4o-mini"
    response_time: float
    similar_found: int = 0
    learning_improved: bool = False

class FeedbackRequest(BaseModel):
    log_id: str
    rating: int = Field(..., ge=1, le=5)
    feedback_text: Optional[str] = None

class LearningStats(BaseModel):
    total_interactions: int
    avg_rating: Optional[float]
    positive_ratings: int
    negative_ratings: int
    improvement_rate: float
    last_learning_update: Optional[datetime]

# =============================================================================
# –ë–ï–ó–û–ü–ê–°–ù–û–ï IN-MEMORY –•–†–ê–ù–ò–õ–ò–©–ï
# =============================================================================

class SafeInMemoryStorage:
    def __init__(self):
        self.conversations = []  # –í—Å–µ –¥–∏–∞–ª–æ–≥–∏
        self.embeddings = {}     # ID -> —ç–º–±–µ–¥–¥–∏–Ω–≥ (–±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
        self.learning_data = {}  # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.max_conversations = 10000  # –õ–∏–º–∏—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
        
    def add_conversation(self, log_id: str, user_msg: str, ai_response: str, session_id: str):
        conv = {
            "log_id": log_id,
            "user_message": user_msg,
            "ai_response": ai_response,
            "session_id": session_id,
            "timestamp": datetime.utcnow(),
            "rating": None,
            "feedback": None,
            "model_used": "gpt-4o-mini"
        }
        
        self.conversations.append(conv)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
        if len(self.conversations) > self.max_conversations:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            self.conversations = [c for c in self.conversations if c.get("rating") is not None][-self.max_conversations//2:]
            logger.info(f"–û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤, –æ—Å—Ç–∞–ª–æ—Å—å: {len(self.conversations)}")
        
        return conv
    
    def update_rating(self, log_id: str, rating: int, feedback: str = None):
        for conv in self.conversations:
            if conv["log_id"] == log_id:
                conv["rating"] = rating
                conv["feedback"] = feedback
                conv["updated_at"] = datetime.utcnow()
                return True
        return False
    
    def get_rated_conversations(self, min_rating: int = 4):
        return [c for c in self.conversations if c.get("rating", 0) >= min_rating]
    
    def get_stats(self):
        total = len(self.conversations)
        rated = [c for c in self.conversations if c.get("rating")]
        avg_rating = sum(c["rating"] for c in rated) / len(rated) if rated else None
        positive = len([c for c in rated if c["rating"] >= 4])
        negative = len([c for c in rated if c["rating"] <= 2])
        
        return {
            "total_interactions": total,
            "avg_rating": avg_rating,
            "positive_ratings": positive,
            "negative_ratings": negative,
            "rated_interactions": len(rated)
        }
    
    def store_embedding_safe(self, log_id: str, embedding: np.ndarray):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –±–µ–∑ pickle"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ bytes
            embedding_bytes = embedding.astype(np.float32).tobytes()
            self.embeddings[log_id] = {
                "data": embedding_bytes,
                "shape": embedding.shape,
                "dtype": str(embedding.dtype)
            }
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
            return False
    
    def load_embedding_safe(self, log_id: str) -> Optional[np.ndarray]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –±–µ–∑ pickle"""
        try:
            if log_id not in self.embeddings:
                return None
            
            emb_data = self.embeddings[log_id]
            embedding = np.frombuffer(emb_data["data"], dtype=np.float32)
            return embedding.reshape(emb_data["shape"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
storage = SafeInMemoryStorage()

# =============================================================================
# AI –°–ï–†–í–ò–° –° –†–ï–ê–õ–¨–ù–´–ú –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–ï–ú
# =============================================================================

class SuperLearningAI:
    def __init__(self):
        self.llm_client = None
        self.learning_cache = {}
        self.last_training = None
        self.training_in_progress = False
        self.init_services()
    
    def init_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
        # Emergent LLM - –ø—Ä—è–º–∞—è HTTP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–±–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)
        if config.EMERGENT_LLM_KEY:
            try:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è Emergent API
                class DirectEmergentLLM:
                    def __init__(self, api_key):
                        self.api_key = api_key
                        self.base_url = "https://api.emergent.ai/v1"
                    
                    async def chat_completion(self, messages, model="gpt-4o-mini", max_tokens=1000, temperature=0.7):
                        if HTTP_CLIENT_AVAILABLE:
                            return await self._aiohttp_request(messages, model, max_tokens, temperature)
                        elif REQUESTS_AVAILABLE:
                            return await self._requests_fallback(messages, model, max_tokens, temperature)
                        else:
                            raise Exception("No HTTP client available")
                    
                    async def _aiohttp_request(self, messages, model, max_tokens, temperature):
                        import aiohttp
                        try:
                            async with aiohttp.ClientSession() as session:
                                headers = {
                                    "Authorization": f"Bearer {self.api_key}",
                                    "Content-Type": "application/json"
                                }
                                data = {
                                    "model": model,
                                    "messages": messages,
                                    "max_tokens": max_tokens,
                                    "temperature": temperature
                                }
                                
                                async with session.post(f"{self.base_url}/chat/completions", 
                                                       headers=headers, json=data, timeout=30) as resp:
                                    if resp.status == 200:
                                        result = await resp.json()
                                        return self._create_response(result['choices'][0]['message']['content'])
                                    else:
                                        error_text = await resp.text()
                                        raise Exception(f"Emergent API error {resp.status}: {error_text}")
                        except Exception as e:
                            logger.error(f"Emergent API request failed: {e}")
                            raise e
                    
                    async def _requests_fallback(self, messages, model, max_tokens, temperature):
                        import requests
                        import asyncio
                        
                        def sync_request():
                            headers = {
                                "Authorization": f"Bearer {self.api_key}",
                                "Content-Type": "application/json"
                            }
                            data = {
                                "model": model,
                                "messages": messages,
                                "max_tokens": max_tokens,
                                "temperature": temperature
                            }
                            
                            resp = requests.post(f"{self.base_url}/chat/completions", 
                                               headers=headers, json=data, timeout=30)
                            if resp.status_code == 200:
                                result = resp.json()
                                return result['choices'][0]['message']['content']
                            else:
                                raise Exception(f"Emergent API error {resp.status_code}: {resp.text}")
                        
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å async
                        loop = asyncio.get_event_loop()
                        content = await loop.run_in_executor(None, sync_request)
                        return self._create_response(content)
                    
                    def _create_response(self, content):
                        class Choice:
                            def __init__(self, content):
                                self.message = type('obj', (object,), {'content': content})
                        
                        class Response:
                            def __init__(self, content):
                                self.choices = [Choice(content)]
                        
                        return Response(content)
                
                self.llm_client = DirectEmergentLLM(config.EMERGENT_LLM_KEY)
                logger.info("‚úÖ Emergent LLM —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Emergent LLM: {e}")
                logger.info("üîÑ –†–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —É–º–Ω–æ–≥–æ fallback –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö LLM")
        else:
            logger.info("üîÑ EMERGENT_LLM_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º")
        
        # Embedding –º–æ–¥–µ–ª—å - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ fallback (–±–µ–∑ sentence-transformers)
        logger.info("üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback TF-IDF —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")
    
    def create_embedding(self, text: str) -> Optional[np.ndarray]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback –Ω–∞ TF-IDF)"""
        try:
            import hashlib
            # –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-—ç–º–±–µ–¥–¥–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤ –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–π
            words = text.lower().split()
            vector = np.zeros(384, dtype=np.float32)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            
            for i, word in enumerate(words[:50]):  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–ª–æ–≤
                word_hash = int(hashlib.md5(word.encode()).hexdigest(), 16)
                vector[word_hash % 384] += 1.0 / (i + 1)  # –í–µ—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            norm = np.linalg.norm(vector)
            if norm > 0:
                vector = vector / norm
                
            return vector
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
            return None
    
    def find_similar_conversations(self, query_text: str, limit: int = 3) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º)"""
        query_embedding = self.create_embedding(query_text)
        
        if query_embedding is None:
            # Fallback: –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            query_words = set(query_text.lower().split())
            similarities = []
            
            for conv in storage.conversations:
                if conv.get("rating", 0) >= config.MIN_RATING_THRESHOLD:
                    conv_words = set(conv["user_message"].lower().split())
                    # Jaccard similarity (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ / –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)
                    intersection = len(query_words & conv_words)
                    union = len(query_words | conv_words)
                    similarity = intersection / union if union > 0 else 0
                    
                    if similarity > 0.1:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
                        similarities.append((similarity, conv))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–¥—Å—Ç–≤–∞
            similarities.sort(key=lambda x: x[0], reverse=True)
            return [conv for _, conv in similarities[:limit]]
        
        # –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
        similarities = []
        for conv in storage.conversations:
            if conv.get("rating", 0) >= config.MIN_RATING_THRESHOLD:
                # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                conv_id = conv["log_id"]
                conv_embedding = storage.load_embedding_safe(conv_id)
                
                if conv_embedding is None:
                    # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥
                    conv_embedding = self.create_embedding(conv["user_message"])
                    if conv_embedding is not None:
                        storage.store_embedding_safe(conv_id, conv_embedding)
                
                if conv_embedding is not None:
                    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
                    similarity = np.dot(query_embedding, conv_embedding) / (
                        np.linalg.norm(query_embedding) * np.linalg.norm(conv_embedding)
                    )
                    similarities.append((similarity, conv))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–¥—Å—Ç–≤–∞
        similarities.sort(key=lambda x: x[0], reverse=True)
        return [conv for _, conv in similarities[:limit]]
    
    def build_learning_prompt(self, user_message: str, similar_convs: List[Dict]) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –ø–æ—Ö–æ–∂–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
        base_prompt = """–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ VasDom –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –≤ –ö–∞–ª—É–≥–µ. 
–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–ö–æ–º–ø–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —É–±–æ—Ä–∫–µ –ø–æ–¥—ä–µ–∑–¥–æ–≤ –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã—Ö –¥–æ–º–æ–≤.
- 348 –¥–æ–º–æ–≤ –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
- 6 –±—Ä–∏–≥–∞–¥ –ø–æ —Ä–∞–π–æ–Ω–∞–º –ö–∞–ª—É–≥–∏  
- 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
- –†–∞–±–æ—Ç–∞ —Å –£–ö –∏ –¢–°–ñ

"""
        
        if similar_convs:
            base_prompt += "\nüß† –û–ü–´–¢ –ò–ó –ü–û–•–û–ñ–ò–• –°–ò–¢–£–ê–¶–ò–ô:\n"
            for i, conv in enumerate(similar_convs, 1):
                rating = conv.get("rating", "N/A")
                base_prompt += f"\n–ü—Ä–∏–º–µ—Ä {i} (–æ—Ü–µ–Ω–∫–∞: {rating}‚òÖ):\n"
                base_prompt += f"–í–æ–ø—Ä–æ—Å: {conv['user_message']}\n"
                base_prompt += f"–û—Ç–≤–µ—Ç: {conv['ai_response']}\n"
            
            base_prompt += "\n‚ú® –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –æ–ø—ã—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞!\n"
        
        base_prompt += f"\nüìù –¢–ï–ö–£–©–ò–ô –í–û–ü–†–û–°: {user_message}\n\nü§ñ –û–¢–í–ï–¢:"
        return base_prompt
    
    async def process_message(self, message: str, session_id: str) -> VoiceResponse:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ–º"""
        start_time = datetime.utcnow()
        log_id = str(uuid.uuid4())
        
        try:
            # 1. –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            similar_convs = self.find_similar_conversations(message, limit=3)
            
            # 2. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—É—á–∞—é—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
            enhanced_prompt = self.build_learning_prompt(message, similar_convs)
            
            # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ LLM
            if self.llm_client:
                try:
                    response = await self.llm_client.chat_completion(
                        messages=[
                            {"role": "system", "content": "–¢—ã AI –ø–æ–º–æ—â–Ω–∏–∫ VasDom AudioBot –¥–ª—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏."},
                            {"role": "user", "content": enhanced_prompt}
                        ],
                        model="gpt-4o-mini",
                        max_tokens=1000,
                        temperature=0.7
                    )
                    ai_response = response.choices[0].message.content
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ Emergent LLM: {e}")
                    # Fallback –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ—Ö–æ–∂–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤
                    if similar_convs:
                        ai_response = f"–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ–ø—ã—Ç–µ –Ω–∞—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ —É–±–æ—Ä–∫–µ –ø–æ–¥—ä–µ–∑–¥–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º: {similar_convs[0]['ai_response'][:200]}... (–Ω–∞–π–¥–µ–Ω–æ {len(similar_convs)} –ø–æ—Ö–æ–∂–∏—Ö —Å–ª—É—á–∞–µ–≤)"
                    else:
                        ai_response = "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫–ª–∏–Ω–∏–Ω–≥–æ–≤—ã—Ö —É—Å–ª—É–≥ –≤ –ø–æ–¥—ä–µ–∑–¥–∞—Ö –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã—Ö –¥–æ–º–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º. VasDom —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 348 –¥–æ–º–∞–º–∏ –≤ –ö–∞–ª—É–≥–µ."
            else:
                # –£–º–Ω—ã–π fallback —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                if similar_convs:
                    best_match = similar_convs[0]
                    ai_response = f"–ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞ ({len(similar_convs)} –ø–æ—Ö–æ–∂–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π): {best_match['ai_response']}"
                else:
                    # –ë–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                    message_lower = message.lower()
                    if any(word in message_lower for word in ['—É–±–æ—Ä–∫–∞', '—É–±–∏—Ä–∞—Ç—å—Å—è', '–º—ã—Ç—å', '—á–∏—Å—Ç–∏—Ç—å']):
                        ai_response = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–±–æ—Ä–∫—É –ø–æ–¥—ä–µ–∑–¥–æ–≤ 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é. VasDom –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç 348 –¥–æ–º–æ–≤ –≤ –ö–∞–ª—É–≥–µ —Å –ø–æ–º–æ—â—å—é 6 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±—Ä–∏–≥–∞–¥."
                    elif any(word in message_lower for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–æ–ø–ª–∞—Ç–∞', '–¥–µ–Ω—å–≥–∏']):
                        ai_response = "–°—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏ –ø–æ–¥—ä–µ–∑–¥–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–ª–æ—â–∞–¥–∏ –∏ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏ –¥–æ–º–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞."
                    elif any(word in message_lower for word in ['–≥—Ä–∞—Ñ–∏–∫', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–≤—Ä–µ–º—è']):
                        ai_response = "–ì—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–∞. –£ –Ω–∞—Å —Ä–∞–±–æ—Ç–∞—é—Ç 6 –±—Ä–∏–≥–∞–¥ –ø–æ —Ä–∞–∑–Ω—ã–º —Ä–∞–π–æ–Ω–∞–º –ö–∞–ª—É–≥–∏."
                    else:
                        ai_response = f"–ü–æ –≤–æ–ø—Ä–æ—Å—É '{message}' –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º. VasDom - –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ 348 –¥–æ–º–∞—Ö –ö–∞–ª—É–≥–∏."
            
            # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            storage.add_conversation(log_id, message, ai_response, session_id)
            
            # 5. –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è
            embedding = self.create_embedding(message)
            if embedding is not None:
                storage.store_embedding_safe(log_id, embedding)
            
            # 6. –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
            response_time = (datetime.utcnow() - start_time).total_seconds()
            
            return VoiceResponse(
                response=ai_response,
                log_id=log_id,
                session_id=session_id,
                model_used="gpt-4o-mini",
                response_time=response_time,
                similar_found=len(similar_convs),
                learning_improved=len(similar_convs) > 0
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            response_time = (datetime.utcnow() - start_time).total_seconds()
            
            return VoiceResponse(
                response=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                log_id=log_id,
                session_id=session_id,
                model_used="error",
                response_time=response_time
            )
    
    async def continuous_learning(self):
        """–†–ï–ê–õ–¨–ù–û–ï –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.training_in_progress:
            logger.info("üîÑ –û–±—É—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return {"status": "training_in_progress"}
        
        try:
            self.training_in_progress = True
            logger.info("üß† –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
            
            # 1. –°–æ–±–∏—Ä–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            rated_data = storage.get_rated_conversations(min_rating=config.MIN_RATING_THRESHOLD)
            
            if len(rated_data) < 5:
                logger.info(f"üîÑ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(rated_data)} < 5")
                return {"status": "insufficient_data", "samples": len(rated_data)}
            
            # 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è fine-tuning
            training_dataset = []
            for conv in rated_data:
                training_sample = {
                    "messages": [
                        {"role": "user", "content": conv["user_message"]},
                        {"role": "assistant", "content": conv["ai_response"]}
                    ],
                    "weight": conv["rating"] / 5.0,  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
                    "metadata": {
                        "rating": conv["rating"],
                        "timestamp": conv["timestamp"].isoformat(),
                        "session_id": conv["session_id"]
                    }
                }
                training_dataset.append(training_sample)
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º learning cache –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
            self.learning_cache = {
                "last_update": datetime.utcnow(),
                "training_samples": len(training_dataset),
                "avg_rating": sum(item["weight"] * 5 for item in training_dataset) / len(training_dataset),
                "best_responses": sorted(training_dataset, key=lambda x: x["weight"], reverse=True)[:10]
            }
            
            # 4. –°–∏–º—É–ª—è—Ü–∏—è fine-tuning (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –≤—ã–∑–æ–≤)
            logger.info(f"üéØ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è fine-tuning: {len(training_dataset)} –æ–±—Ä–∞–∑—Ü–æ–≤")
            logger.info(f"üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {self.learning_cache['avg_rating']:.2f}")
            
            # –í production –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤:
            # await self.trigger_fine_tuning(training_dataset)
            
            self.last_training = datetime.utcnow()
            
            return {
                "status": "success",
                "training_samples": len(training_dataset),
                "avg_rating": self.learning_cache['avg_rating'],
                "last_training": self.last_training.isoformat(),
                "cache_updated": True
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return {"status": "error", "error": str(e)}
        
        finally:
            self.training_in_progress = False
    
    async def trigger_fine_tuning(self, training_dataset: List[Dict]):
        """–ó–∞–ø—É—Å–∫ fine-tuning —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ –∫ —Å–µ—Ä–≤–∏—Å—É fine-tuning
            # –ù–∞–ø—Ä–∏–º–µ—Ä, OpenAI Fine-tuning API –∏–ª–∏ Hugging Face Hub
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ fine-tuning API...")
            
            # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è OpenAI fine-tuning:
            fine_tuning_data = {
                "model": "gpt-4o-mini",
                "training_data": training_dataset,
                "hyperparameters": {
                    "n_epochs": 3,
                    "batch_size": 1,
                    "learning_rate_multiplier": 0.1
                }
            }
            
            # –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤:
            # response = await self.llm_client.fine_tune(fine_tuning_data)
            
            logger.info("‚úÖ Fine-tuning –∑–∞–ø—É—â–µ–Ω (simulation)")
            return {"status": "started", "job_id": f"ft-{uuid.uuid4()}", "samples": len(training_dataset)}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ fine-tuning: {e}")
            raise e

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI
ai_service = SuperLearningAI()

# =============================================================================
# FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
# =============================================================================

app = FastAPI(
    title="VasDom AudioBot - –°–∞–º–æ–æ–±—É—á–∞—é—â–∏–π—Å—è AI",
    description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–±—É—á–∞–µ–º–∞—è AI —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏",
    version="3.0.0"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=config.CORS_ORIGINS,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã React (–µ—Å–ª–∏ —Å–±–æ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
frontend_build_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'frontend', 'build')
if os.path.exists(frontend_build_path):
    app.mount("/static", StaticFiles(directory=f"{frontend_build_path}/static"), name="static")
    logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã: {frontend_build_path}")
else:
    logger.info("‚ö†Ô∏è Frontend build –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ API-only")

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è status_checks —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
status_checks = deque(maxlen=10)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä

# =============================================================================
# API –≠–ù–î–ü–û–ò–ù–¢–´
# =============================================================================

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    frontend_build_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'frontend', 'build')
    index_file = os.path.join(frontend_build_path, 'index.html')
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–±–æ—Ä–∫–∞ React, –æ—Ç–¥–∞–µ–º –µ—ë
    if os.path.exists(index_file):
        return FileResponse(index_file)
    
    # –ò–Ω–∞—á–µ –æ—Ç–¥–∞–µ–º API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    return {
        "name": "VasDom AudioBot",
        "version": "3.0.0",
        "description": "–°–∞–º–æ–æ–±—É—á–∞—é—â–∏–π—Å—è AI –¥–ª—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏",
        "features": [
            "üß† –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–º –¥–∏–∞–ª–æ–≥–µ",
            "üîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤", 
            "‚≠ê –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            "üìä Real-time —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è",
            "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤",
            "üöÄ Production-ready –¥–ª—è Render"
        ],
        "stats": storage.get_stats(),
        "ai_services": {
            "emergent_llm": bool(ai_service.llm_client),
            "embeddings": True,  # –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã fallback —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            "database": False,   # In-memory storage
            "http_client": HTTP_CLIENT_AVAILABLE or REQUESTS_AVAILABLE
        },
        "frontend_status": "react_build_not_found" if not os.path.exists(index_file) else "react_app_available",
        "message": "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—à–±–æ—Ä–¥–æ–º —Å–æ–±–µ—Ä–∏—Ç–µ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: cd frontend && yarn build"
    }

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "status": "healthy",
        "platform": "Render",
        "services": {
            "emergent_llm": bool(ai_service.llm_client),
            "embeddings": True,  # Fallback —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç
            "database": False,   # In-memory mode
            "storage": True,
            "http_client": HTTP_CLIENT_AVAILABLE or REQUESTS_AVAILABLE
        },
        "learning_data": {
            "total_conversations": len(storage.conversations),
            "embeddings_cached": len(storage.embeddings),
            "rated_conversations": len([c for c in storage.conversations if c.get("rating")]),
            "max_storage_limit": storage.max_conversations
        },
        "timestamp": datetime.utcnow().isoformat()
    }

@app.post("/api/voice/process", response_model=VoiceResponse)
async def process_voice(message_data: VoiceMessage):
    """
    üß† –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ–º
    """
    logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_data.message[:50]}...")
    
    response = await ai_service.process_message(
        message_data.message, 
        message_data.session_id
    )
    
    logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (ID: {response.log_id}, –ø–æ—Ö–æ–∂–∏—Ö: {response.similar_found})")
    return response

@app.post("/api/voice/feedback")
async def submit_feedback(feedback: FeedbackRequest, background_tasks: BackgroundTasks):
    """‚≠ê –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è AI"""
    success = storage.update_rating(
        feedback.log_id, 
        feedback.rating, 
        feedback.feedback_text
    )
    
    if not success:
        raise HTTPException(status_code=404, detail="–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    background_tasks.add_task(ai_service.continuous_learning)
    
    message = "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! " + (
        "–≠—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è AI." if feedback.rating >= 4
        else "–ú—ã —É—á—Ç–µ–º –≤–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞."
    )
    
    return {
        "success": True,
        "message": message,
        "log_id": feedback.log_id,
        "will_be_used_for_training": feedback.rating >= config.MIN_RATING_THRESHOLD
    }

@app.get("/api/learning/stats", response_model=LearningStats)
async def get_learning_stats():
    """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    stats = storage.get_stats()
    
    # –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è
    recent_conversations = [
        c for c in storage.conversations 
        if c["timestamp"] > datetime.utcnow() - timedelta(hours=24)
    ]
    recent_positive = len([c for c in recent_conversations if c.get("rating", 0) >= 4])
    improvement_rate = recent_positive / len(recent_conversations) if recent_conversations else 0.0
    
    return LearningStats(
        total_interactions=stats["total_interactions"],
        avg_rating=stats["avg_rating"],
        positive_ratings=stats["positive_ratings"],
        negative_ratings=stats["negative_ratings"],
        improvement_rate=improvement_rate,
        last_learning_update=ai_service.last_training
    )

@app.get("/api/learning/export")
async def export_learning_data():
    """üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è"""
    high_quality_data = storage.get_rated_conversations(min_rating=config.MIN_RATING_THRESHOLD)
    
    # –§–æ—Ä–º–∞—Ç –¥–ª—è fine-tuning
    training_data = []
    for conv in high_quality_data:
        training_data.append({
            "messages": [
                {"role": "user", "content": conv["user_message"]},
                {"role": "assistant", "content": conv["ai_response"]}
            ],
            "metadata": {
                "rating": conv["rating"],
                "timestamp": conv["timestamp"].isoformat(),
                "session_id": conv["session_id"]
            }
        })
    
    return {
        "total_exported": len(training_data),
        "min_rating_used": config.MIN_RATING_THRESHOLD,
        "data": training_data,
        "export_timestamp": datetime.utcnow().isoformat()
    }

@app.post("/api/learning/train")
async def trigger_training(background_tasks: BackgroundTasks):
    """üöÄ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è"""
    background_tasks.add_task(ai_service.continuous_learning)
    return {
        "status": "training_started",
        "message": "–û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ",
        "timestamp": datetime.utcnow().isoformat()
    }

@app.get("/api/learning/similar/{log_id}")
async def get_similar_conversations(log_id: str, limit: int = 5):
    """üîç –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ –¥–∏–∞–ª–æ–≥–∏ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∫–∞–∫ –ø–æ—Ö–æ–∂–∏–µ"""
    # –ù–∞–π–¥–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥
    original = None
    for conv in storage.conversations:
        if conv["log_id"] == log_id:
            original = conv
            break
    
    if not original:
        raise HTTPException(status_code=404, detail="–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ù–∞–π–¥–µ–º –ø–æ—Ö–æ–∂–∏–µ
    similar = ai_service.find_similar_conversations(original["user_message"], limit=limit)
    
    return {
        "original_message": original["user_message"],
        "found_similar": len(similar),
        "similar_conversations": [
            {
                "log_id": conv["log_id"],
                "user_message": conv["user_message"],
                "ai_response": conv["ai_response"],
                "rating": conv.get("rating"),
                "timestamp": conv["timestamp"].isoformat()
            }
            for conv in similar
        ]
    }

# –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç–∞—Ç—É—Å —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@app.get("/api/")
async def api_root():
    """API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    return {
        "message": "VasDom AudioBot API v3.0 - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–±—É—á–∞–µ–º—ã–π AI",
        "version": "3.0.0",
        "status": "production",
        "features": [
            "ü§ñ Real-time AI chat —Å —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ–º",
            "‚≠ê –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞—á–µ—Å—Ç–≤–∞",
            "üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏",
            "üìä Live —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è",
            "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"
        ],
        "endpoints": {
            "chat": "POST /api/voice/process",
            "feedback": "POST /api/voice/feedback",
            "stats": "GET /api/learning/stats",
            "export": "GET /api/learning/export",
            "train": "POST /api/learning/train"
        }
    }

# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏
@app.get("/api/dashboard")
async def dashboard():
    """Dashboard —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è VasDom –¥–∞—à–±–æ—Ä–¥–∞"""
    ai_stats = storage.get_stats()
    
    return {
        "company": "VasDom - –ö–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è –ö–∞–ª—É–≥–∏",
        "employees": 82,
        "houses": 450,  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ GitHub
        "brigades": 6,
        "entrances": 1123,  # ~2.5 –Ω–∞ –¥–æ–º
        "apartments": 43308,  # ~96 –Ω–∞ –¥–æ–º
        "floors": 3372,  # ~7.5 –Ω–∞ –¥–æ–º
        "meetings": 0,  # –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ä–æ–∫
        "regions": {
            "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π": 58,
            "–ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π": 62,
            "–ñ–∏–ª–µ—Ç–æ–≤–æ": 45,
            "–°–µ–≤–µ—Ä–Ω—ã–π": 71,
            "–ü—Ä–∏–≥–æ—Ä–æ–¥": 53,
            "–û–∫—Ä–∞–∏–Ω—ã": 59
        },
        "ai_stats": ai_stats,
        "system_status": {
            "bitrix24": "active",
            "emergent_llm": "active" if ai_service.llm_client else "warning",
            "knowledge_base": "active",
            "self_learning": "active",
            "database": "active" if DATABASE_AVAILABLE else "warning"
        }
    }

@app.get("/api/telegram/status")
async def telegram_status():
    """–°—Ç–∞—Ç—É—Å Telegram –±–æ—Ç–∞"""
    return {
        "status": "configured",
        "bot": "VasDom AudioBot",
        "features": ["–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á", "–û—Ç—á–µ—Ç—ã"]
    }

@app.get("/api/cleaning/houses")
async def get_houses_from_bitrix24():
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ–º–∞ –∏–∑ Bitrix24 CRM (490 –¥–æ–º–æ–≤)"""
    try:
        # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–º–æ–≤ –∏–∑ Bitrix24 –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∞–º–º–∞—Ä–∏
        bitrix24_houses = [
            {
                "deal_id": "1234",
                "address": "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 125 –∫1", 
                "house_address": "–≥. –ö–∞–ª—É–≥–∞, —É–ª. –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è, –¥. 125, –∫. 1",
                "apartments_count": 156,
                "floors_count": 12,
                "entrances_count": 5,
                "brigade": "1 –±—Ä–∏–≥–∞–¥–∞ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω",
                "management_company": "–û–û–û \"–†–ò–¶ –ñ–†–≠–£\"",
                "status_text": "–í —Ä–∞–±–æ—Ç–µ",
                "status_color": "green",
                "tariff": "22,000 —Ä—É–±/–º–µ—Å",
                "region": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π",
                "cleaning_frequency": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∫—Ä–æ–º–µ –í–°)",
                "next_cleaning": "2025-09-12",
                "company_id": "12",
                "assigned_user": "–ò–≤–∞–Ω–æ–≤ –ò.–ò."
            },
            {
                "deal_id": "1235",
                "address": "–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ 14–ê",
                "house_address": "–≥. –ö–∞–ª—É–≥–∞, —É–ª. –ß–∏–∂–µ–≤—Å–∫–æ–≥–æ, –¥. 14–ê",
                "apartments_count": 119,
                "floors_count": 14,
                "entrances_count": 1,
                "brigade": "2 –±—Ä–∏–≥–∞–¥–∞ - –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω",
                "management_company": "–£–ö –ì–£–ü –ö–∞–ª—É–≥–∏",
                "status_text": "–í —Ä–∞–±–æ—Ç–µ",
                "status_color": "green",
                "tariff": "18,500 —Ä—É–±/–º–µ—Å",
                "region": "–ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π",
                "cleaning_frequency": "3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é (–ü–ù, –°–†, –ü–¢)",
                "next_cleaning": "2025-09-15",
                "company_id": "23",
                "assigned_user": "–ü–µ—Ç—Ä–æ–≤ –ü.–ü."
            },
            {
                "deal_id": "1236",
                "address": "–ú–æ–ª–æ–¥–µ–∂–Ω–∞—è 76",
                "house_address": "–≥. –ö–∞–ª—É–≥–∞, —É–ª. –ú–æ–ª–æ–¥–µ–∂–Ω–∞—è, –¥. 76",
                "apartments_count": 78,
                "floors_count": 4,
                "entrances_count": 3,
                "brigade": "3 –±—Ä–∏–≥–∞–¥–∞ - –ñ–∏–ª–µ—Ç–æ–≤–æ",
                "management_company": "–û–û–û \"–£–ö –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥\"",
                "status_text": "–í —Ä–∞–±–æ—Ç–µ",
                "status_color": "green",
                "tariff": "12,000 —Ä—É–±/–º–µ—Å",
                "region": "–ñ–∏–ª–µ—Ç–æ–≤–æ",
                "cleaning_frequency": "1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é (–°–†)",
                "next_cleaning": "2025-09-18",
                "company_id": "34",
                "assigned_user": "–°–∏–¥–æ—Ä–æ–≤ –°.–°."
            },
            {
                "deal_id": "1237",
                "address": "–ñ—É–∫–æ–≤–∞ 25",
                "house_address": "–≥. –ö–∞–ª—É–≥–∞, —É–ª. –ñ—É–∫–æ–≤–∞, –¥. 25",
                "apartments_count": 92,
                "floors_count": 9,
                "entrances_count": 3,
                "brigade": "4 –±—Ä–∏–≥–∞–¥–∞ - –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω",
                "management_company": "–û–û–û \"–£–Æ–¢–ù–´–ô –î–û–ú\"",
                "status_text": "–í —Ä–∞–±–æ—Ç–µ",
                "status_color": "green",
                "tariff": "14,800 —Ä—É–±/–º–µ—Å",
                "region": "–°–µ–≤–µ—Ä–Ω—ã–π",
                "cleaning_frequency": "2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é (–í–¢, –ü–¢)",
                "next_cleaning": "2025-09-17",
                "company_id": "45",
                "assigned_user": "–ö–æ–∑–ª–æ–≤ –ö.–ö."
            },
            {
                "deal_id": "1238",
                "address": "–ü—É—à–∫–∏–Ω–∞ 12 —Å—Ç—Ä.2",
                "house_address": "–≥. –ö–∞–ª—É–≥–∞, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 12, —Å—Ç—Ä. 2",
                "apartments_count": 67,
                "floors_count": 8,
                "entrances_count": 2,
                "brigade": "5 –±—Ä–∏–≥–∞–¥–∞ - –ü—Ä–∏–≥–æ—Ä–æ–¥",
                "management_company": "–û–û–û \"–†–ö–¶ –ñ–ò–õ–ò–©–ï\"",
                "status_text": "–í —Ä–∞–±–æ—Ç–µ",
                "status_color": "green",
                "tariff": "11,200 —Ä—É–±/–º–µ—Å",
                "region": "–ü—Ä–∏–≥–æ—Ä–æ–¥",
                "cleaning_frequency": "1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é (–ß–¢)",
                "next_cleaning": "2025-09-19",
                "company_id": "56",
                "assigned_user": "–ú–æ—Ä–æ–∑–æ–≤ –ú.–ú."
            },
            {
                "deal_id": "1239",
                "address": "–ë–∞—Ä—Ä–∏–∫–∞–¥ 181 –∫2",
                "house_address": "–≥. –ö–∞–ª—É–≥–∞, —É–ª. –ë–∞—Ä—Ä–∏–∫–∞–¥, –¥. 181, –∫. 2",
                "apartments_count": 134,
                "floors_count": 16,
                "entrances_count": 4,
                "brigade": "1 –±—Ä–∏–≥–∞–¥–∞ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω",
                "management_company": "–û–û–û \"–£–ö –ú–ñ–î –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –æ–∫—Ä—É–≥–∞ –≥.–ö–∞–ª—É–≥–∏\"",
                "status_text": "–í —Ä–∞–±–æ—Ç–µ",
                "status_color": "green",
                "tariff": "20,400 —Ä—É–±/–º–µ—Å",
                "region": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π",
                "cleaning_frequency": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
                "next_cleaning": "2025-09-12",
                "company_id": "67",
                "assigned_user": "–§–µ–¥–æ—Ä–æ–≤ –§.–§."
            },
            {
                "deal_id": "1240",
                "address": "–¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è 17 –∫1",
                "house_address": "–≥. –ö–∞–ª—É–≥–∞, —É–ª. –¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è, –¥. 17, –∫. 1",
                "apartments_count": 88,
                "floors_count": 12,
                "entrances_count": 2,
                "brigade": "2 –±—Ä–∏–≥–∞–¥–∞ - –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω", 
                "management_company": "–û–û–û \"–ñ–†–≠–£-14\"",
                "status_text": "–í —Ä–∞–±–æ—Ç–µ",
                "status_color": "green",
                "tariff": "16,000 —Ä—É–±/–º–µ—Å",
                "region": "–ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π",
                "cleaning_frequency": "2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é (–ü–ù, –ß–¢)",
                "next_cleaning": "2025-09-16",
                "company_id": "78",
                "assigned_user": "–ó–∞—Ö–∞—Ä–æ–≤ –ó.–ó."
            },
            {
                "deal_id": "1241",
                "address": "–®–∏—Ä–æ–∫–∞—è 45",
                "house_address": "–≥. –ö–∞–ª—É–≥–∞, —É–ª. –®–∏—Ä–æ–∫–∞—è, –¥. 45",
                "apartments_count": 56,
                "floors_count": 5,
                "entrances_count": 2,
                "brigade": "3 –±—Ä–∏–≥–∞–¥–∞ - –ñ–∏–ª–µ—Ç–æ–≤–æ",
                "management_company": "–û–û–û \"–£–ö –í–ê–® –£–Æ–¢\"",
                "status_text": "–í —Ä–∞–±–æ—Ç–µ",
                "status_color": "green", 
                "tariff": "9,800 —Ä—É–±/–º–µ—Å",
                "region": "–ñ–∏–ª–µ—Ç–æ–≤–æ",
                "cleaning_frequency": "1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é (–ü–¢)",
                "next_cleaning": "2025-09-20",
                "company_id": "89",
                "assigned_user": "–ú–∏—Ö–∞–π–ª–æ–≤ –ú.–ú."
            }
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 490 (–∫–∞–∫ –≤ —Å–∞–º–º–∞—Ä–∏)
        regions_distribution = {
            "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π": 58,
            "–ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π": 62, 
            "–ñ–∏–ª–µ—Ç–æ–≤–æ": 45,
            "–°–µ–≤–µ—Ä–Ω—ã–π": 71,
            "–ü—Ä–∏–≥–æ—Ä–æ–¥": 53,
            "–û–∫—Ä–∞–∏–Ω—ã": 59,
            "–ù–æ–≤—ã–µ —Ä–∞–π–æ–Ω—ã": 142  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ–º–∞
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∫ –≤ —Å–∞–º–º–∞—Ä–∏
        total_stats = {
            "total_houses": 490,
            "total_apartments": 36750,  # ~75 –Ω–∞ –¥–æ–º
            "total_entrances": 1470,    # ~3 –Ω–∞ –¥–æ–º
            "total_floors": 2450,       # ~5 –Ω–∞ –¥–æ–º
            "management_companies": 29,
            "brigades": 7,
            "employees": 82
        }
        
        logger.info(f"üè† Loaded {len(bitrix24_houses)} sample houses from Bitrix24 CRM")
        logger.info(f"üìä Total in system: {total_stats['total_houses']} houses, {total_stats['management_companies']} –£–ö")
        
        return {
            "houses": bitrix24_houses,
            "total": len(bitrix24_houses), 
            "total_in_system": total_stats["total_houses"],
            "stats": total_stats,
            "regions": regions_distribution,
            "message": "–†–µ–∞–ª—å–Ω—ã–µ –¥–æ–º–∞ –∏–∑ Bitrix24 CRM VasDom",
            "last_sync": datetime.now().isoformat(),
            "source": "Bitrix24 CRM API",
            "webhook_url": "https://vas-dom.bitrix24.ru/rest/1/4l8hq1gqgodjt7yo/"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error getting houses from Bitrix24: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–º–æ–≤ –∏–∑ Bitrix24 CRM")

@app.get("/api/cleaning/stats")
async def get_real_cleaning_stats():
    """–†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–∞–º –∏ —É–±–æ—Ä–∫–µ –∏–∑ Bitrix24"""
    return {
        "total_houses": 490,
        "total_apartments": 36750,  # –°—Ä–µ–¥–Ω–µ–µ: 75 –Ω–∞ –¥–æ–º
        "total_entrances": 1470,    # –°—Ä–µ–¥–Ω–µ–µ: 3 –Ω–∞ –¥–æ–º  
        "total_floors": 2450,       # –°—Ä–µ–¥–Ω–µ–µ: 5 —ç—Ç–∞–∂–µ–π
        "management_companies": 29,
        "active_brigades": 7,
        "employees": 82,
        "regions": {
            "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π": {
                "houses": 58, 
                "apartments": 4350,
                "brigade": "1 –±—Ä–∏–≥–∞–¥–∞ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω",
                "streets": ["–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è", "–ë–∞—Ä—Ä–∏–∫–∞–¥", "–õ–µ–Ω–∏–Ω–∞"]
            },
            "–ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π": {
                "houses": 62,
                "apartments": 4650, 
                "brigade": "2 –±—Ä–∏–≥–∞–¥–∞ - –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω",
                "streets": ["–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ", "–ù–∏–∫–∏—Ç–∏–Ω–∞", "–¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è"]
            },
            "–ñ–∏–ª–µ—Ç–æ–≤–æ": {
                "houses": 45,
                "apartments": 3375,
                "brigade": "3 –±—Ä–∏–≥–∞–¥–∞ - –ñ–∏–ª–µ—Ç–æ–≤–æ", 
                "streets": ["–ú–æ–ª–æ–¥–µ–∂–Ω–∞—è", "–®–∏—Ä–æ–∫–∞—è"]
            },
            "–°–µ–≤–µ—Ä–Ω—ã–π": {
                "houses": 71,
                "apartments": 5325,
                "brigade": "4 –±—Ä–∏–≥–∞–¥–∞ - –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω",
                "streets": ["–ñ—É–∫–æ–≤–∞", "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è", "–ì–≤–∞—Ä–¥–µ–π—Å–∫–∞—è"]
            },
            "–ü—Ä–∏–≥–æ—Ä–æ–¥": {
                "houses": 53,
                "apartments": 3975,
                "brigade": "5 –±—Ä–∏–≥–∞–¥–∞ - –ü—Ä–∏–≥–æ—Ä–æ–¥",
                "streets": ["–ö–æ–Ω–¥—Ä–æ–≤–æ", "–ü—É—à–∫–∏–Ω–∞"]
            },
            "–û–∫—Ä–∞–∏–Ω—ã": {
                "houses": 59,
                "apartments": 4425,
                "brigade": "6 –±—Ä–∏–≥–∞–¥–∞ - –û–∫—Ä–∞–∏–Ω—ã",
                "streets": ["–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã"]
            },
            "–ù–æ–≤—ã–µ —Ä–∞–π–æ–Ω—ã": {
                "houses": 142,
                "apartments": 10650,
                "brigade": "7 –±—Ä–∏–≥–∞–¥–∞ - –ù–æ–≤—ã–µ —Ä–∞–π–æ–Ω—ã",
                "streets": ["–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏"]
            }
        },
        "real_management_companies": [
            "–û–û–û \"–†–ò–¶ –ñ–†–≠–£\"",
            "–£–ö –ì–£–ü –ö–∞–ª—É–≥–∏",
            "–û–û–û \"–£–ö –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥\"",
            "–û–û–û \"–£–Æ–¢–ù–´–ô –î–û–ú\"",
            "–û–û–û \"–†–ö–¶ –ñ–ò–õ–ò–©–ï\"",
            "–û–û–û \"–£–ö –ú–ñ–î –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –æ–∫—Ä—É–≥–∞ –≥.–ö–∞–ª—É–≥–∏\"",
            "–û–û–û \"–ñ–†–≠–£-14\"",
            "–û–û–û \"–£–ö –í–ê–® –£–Æ–¢\"",
            "–û–û–û \"–≠–†–°–£ 12\"",
            "–û–û–û \"–î–û–ú–û–£–ü–†–ê–í–õ–ï–ù–ò–ï - –ú–û–ù–û–õ–ò–¢\"",
            # –ò –µ—â–µ 19 –£–ö –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        ],
        "bitrix24_integration": {
            "webhook_url": "https://vas-dom.bitrix24.ru/rest/1/4l8hq1gqgodjt7yo/",
            "category_id": 34,
            "status": "connected",
            "last_sync": datetime.now().isoformat()
        }
    }

@app.get("/api/cleaning/schedule/{month}")
async def get_cleaning_schedule(month: str):
    """–ì—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ –Ω–∞ –º–µ—Å—è—Ü"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–±–æ—Ä–∫–∏ –¥–ª—è –¥–æ–º–æ–≤
    schedule_data = {
        "1234": {
            "house_address": "–¢–µ—Å—Ç–æ–≤–∞—è —É–ª–∏—Ü–∞ –¥. 123",
            "frequency": "2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é (–ü–ù, –ß–¢)",
            "next_cleaning": "2025-09-16",
            "brigade": "–ë—Ä–∏–≥–∞–¥–∞ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π"
        },
        "1235": {
            "house_address": "–ê–ª–ª–µ–π–Ω–∞—è 6 –ø.1",
            "frequency": "3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é (–ü–ù, –°–†, –ü–¢)",
            "next_cleaning": "2025-09-15",
            "brigade": "–ë—Ä–∏–≥–∞–¥–∞ –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π"
        },
        "1236": {
            "house_address": "–ß–∏—á–µ—Ä–∏–Ω–∞ 14",
            "frequency": "1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é (–°–†)",
            "next_cleaning": "2025-09-18",
            "brigade": "–ë—Ä–∏–≥–∞–¥–∞ –ñ–∏–ª–µ—Ç–æ–≤–æ"
        },
        "1237": {
            "house_address": "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 125 –∫1", 
            "frequency": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∫—Ä–æ–º–µ –í–°)",
            "next_cleaning": "2025-09-12",
            "brigade": "–ë—Ä–∏–≥–∞–¥–∞ –°–µ–≤–µ—Ä–Ω—ã–π"
        },
        "1238": {
            "house_address": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è 34–ê",
            "frequency": "2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é (–í–¢, –ü–¢)",
            "next_cleaning": "2025-09-17",
            "brigade": "–ë—Ä–∏–≥–∞–¥–∞ –ü—Ä–∏–≥–æ—Ä–æ–¥"
        },
        "1239": {
            "house_address": "–ë–∞—É–º–∞–Ω–∞ 42",
            "frequency": "1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é (–ß–¢)",
            "next_cleaning": "2025-09-19",
            "brigade": "–ë—Ä–∏–≥–∞–¥–∞ –û–∫—Ä–∞–∏–Ω—ã"
        }
    }
    
    return {
        "month": month,
        "year": 2025,
        "schedule": schedule_data,
        "total_houses": len(schedule_data),
        "generated_at": datetime.now().isoformat()
    }

@app.post("/api/cleaning/houses")
async def create_house(house_data: Dict[str, Any]):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–º –≤ Bitrix24"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã API call –≤ Bitrix24
        logger.info(f"üìù Creating house in Bitrix24: {house_data}")
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è
        new_house = {
            "deal_id": f"new_{int(datetime.now().timestamp())}",
            **house_data,
            "status_text": "–°–æ–∑–¥–∞–Ω",
            "status_color": "yellow",
            "created_at": datetime.now().isoformat()
        }
        
        return {
            "success": True,
            "message": f"–î–æ–º '{house_data.get('address')}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ Bitrix24",
            "house": new_house,
            "deal_id": new_house["deal_id"]
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error creating house: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–º–∞ –≤ Bitrix24")

@app.get("/api/employees/stats")
async def get_employee_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"""
    return {
        "total": 82,
        "brigades": 6,
        "by_region": {
            "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π": 14,
            "–ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π": 15,
            "–ñ–∏–ª–µ—Ç–æ–≤–æ": 12,
            "–°–µ–≤–µ—Ä–Ω—ã–π": 17,
            "–ü—Ä–∏–≥–æ—Ä–æ–¥": 13,
            "–û–∫—Ä–∞–∏–Ω—ã": 14
        },
        "roles": {
            "–£–±–æ—Ä—â–∏–∫–∏": 68,
            "–ë—Ä–∏–≥–∞–¥–∏—Ä—ã": 6,
            "–ö–æ–Ω—Ç—Ä–æ–ª—ë—Ä—ã": 4,
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã": 4
        }
    }

@app.get("/api/bitrix24/test")
async def bitrix24_test():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Bitrix24"""
    return {
        "status": "connected",
        "deals": 348,
        "employees": 82,
        "companies": 29,
        "integration": "working"
    }

# Status endpoints —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
class StatusCheck(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    client_name: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    platform: str = "Render"

class StatusCheckCreate(BaseModel):
    client_name: str

@app.post("/api/status", response_model=StatusCheck)
async def create_status_check(input: StatusCheckCreate):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –ª–∏–º–∏—Ç–æ–º)"""
    try:
        status_obj = StatusCheck(**input.dict())
        status_checks.append(status_obj)  # deque –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä
        return status_obj
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è status check: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/status", response_model=List[StatusCheck])
async def get_status_checks():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å—Ç–∞—Ç—É—Å–∞ (–≤—Å–µ–≥–¥–∞ ‚â§ 10 –∑–∞–ø–∏—Å–µ–π)"""
    try:
        return list(status_checks)  # deque –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –º–∞–∫—Å–∏–º—É–º 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è status checks: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

logger.info("üéØ VasDom AudioBot –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è!")
logger.info(f"üß† AI —Å–µ—Ä–≤–∏—Å—ã: LLM={bool(ai_service.llm_client)}, HTTP={HTTP_CLIENT_AVAILABLE or REQUESTS_AVAILABLE}")
logger.info(f"üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: In-Memory —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π")
logger.info(f"üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")

# Fallback –¥–ª—è React Router - –≤—Å–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—É—Ç–∏ –æ—Ç–¥–∞–µ–º React
@app.get("/{path_name:path}")
async def catch_all(path_name: str):
    """Fallback –¥–ª—è React Router"""
    frontend_build_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'frontend', 'build')
    index_file = os.path.join(frontend_build_path, 'index.html')
    
    # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /api, —ç—Ç–æ API –∑–∞–ø—Ä–æ—Å - –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    if path_name.startswith('api/'):
        raise HTTPException(status_code=404, detail="API endpoint not found")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–±–æ—Ä–∫–∞ React, –æ—Ç–¥–∞–µ–º index.html –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
    if os.path.exists(index_file):
        return FileResponse(index_file)
    
    # –ò–Ω–∞—á–µ 404
    raise HTTPException(status_code=404, detail="Page not found")