from fastapi import FastAPI, APIRouter, HTTPException, File, UploadFile, Form, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
import os
import uuid
import logging
import asyncio
import aiohttp
import httpx
import json
from pathlib import Path
from dotenv import load_dotenv
import hashlib

# Load environment variables
ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# Configure comprehensive logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('/var/log/audiobot_detailed.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# MongoDB connection
mongo_url = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
try:
    client = AsyncIOMotorClient(mongo_url)
    db = client[os.environ.get('DB_NAME', 'audiobot')]
    logger.info(f"‚úÖ MongoDB connected successfully: {os.environ.get('DB_NAME', 'audiobot')}")
except Exception as e:
    logger.error(f"‚ùå MongoDB connection failed: {e}")

# FastAPI app with detailed logging
app = FastAPI(
    title="VasDom AudioBot API", 
    version="2.0.1",
    description="AI-powered cleaning company management system"
)
api_router = APIRouter(prefix="/api")

# Enhanced CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"], 
    allow_headers=["*"],
)
logger.info("‚úÖ CORS middleware configured")

# Pydantic Models
class Employee(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    name: str
    role: str
    telegram_id: Optional[str] = None
    phone: Optional[str] = None
    email: Optional[str] = None
    created_at: datetime = Field(default_factory=datetime.utcnow)

class Meeting(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    title: str
    audio_url: Optional[str] = None
    transcription: Optional[str] = None
    summary: Optional[str] = None
    tasks_created: List[str] = []
    status: str = "active"
    created_at: datetime = Field(default_factory=datetime.utcnow)

class AITask(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    title: str
    description: str
    scheduled_time: datetime
    recurring: bool = False
    status: str = "pending"
    chat_messages: List[Dict] = []
    created_at: datetime = Field(default_factory=datetime.utcnow)

class VoiceMessage(BaseModel):
    text: str
    user_id: str = "user"

class ChatResponse(BaseModel):
    response: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class KnowledgeBase(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    title: str
    content: str
    file_type: str
    keywords: List[str] = []
    created_at: datetime = Field(default_factory=datetime.utcnow)

# Bitrix24 Integration with REAL API
class BitrixIntegration:
    def __init__(self):
        self.webhook_url = os.environ.get('BITRIX24_WEBHOOK_URL', '')
        logger.info(f"üîó Bitrix24 webhook initialized: {self.webhook_url[:50]}...")
        
    async def get_deals(self, limit: int = None):
        """–ü–æ–ª—É—á–∏—Ç—å –í–°–ï —Å–¥–µ–ª–∫–∏ –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ –£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤"""
        try:
            logger.info(f"üè† Fetching deals from Bitrix24, limit: {limit}")
            
            all_deals = []
            start = 0
            batch_size = 50
            
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–¥–µ–ª–∫–∏ –ø–∞–∫–µ—Ç–∞–º–∏
            while True:
                params = {
                    'start': start,
                    'select': ['ID', 'TITLE', 'STAGE_ID', 'DATE_CREATE', 'ASSIGNED_BY_ID', 'UF_*'],
                    'filter': {'CATEGORY_ID': '2'},  # –í–æ—Ä–æ–Ω–∫–∞ "–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤"
                    'order': {'DATE_CREATE': 'DESC'}
                }
                
                async with httpx.AsyncClient() as client:
                    response = await client.post(
                        f"{self.webhook_url}crm.deal.list",
                        json=params,
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        if data.get('result') and len(data['result']) > 0:
                            batch_deals = data['result']
                            all_deals.extend(batch_deals)
                            logger.info(f"üì¶ Loaded batch {start//batch_size + 1}: {len(batch_deals)} deals, total: {len(all_deals)}")
                            
                            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ batch_size, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç
                            if len(batch_deals) < batch_size:
                                break
                                
                            start += batch_size
                            
                            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                            if limit and len(all_deals) >= limit:
                                all_deals = all_deals[:limit]
                                break
                                
                            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                            await asyncio.sleep(0.5)
                        else:
                            logger.warning("üö´ No more deals returned from Bitrix24")
                            break
                    else:
                        logger.error(f"‚ùå Bitrix24 API error: {response.status_code} - {response.text}")
                        break
            
            logger.info(f"‚úÖ Total deals loaded from Bitrix24: {len(all_deals)}")
            return all_deals
            
        except Exception as e:
            logger.error(f"‚ùå Bitrix24 API error: {e}")
            # Fallback –Ω–∞ –∑–∞–≥–ª—É—à–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏ –∏–∑ CRM
            return self._get_realistic_mock_data(limit or 450)
    
    def _get_realistic_mock_data(self, limit):
        """–ó–∞–≥–ª—É—à–∫–∞ —Å –†–ï–ê–õ–¨–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Bitrix24 CRM (1–≤1 –∫–∞–∫ –≤ –≤–æ—Ä–æ–Ω–∫–µ)"""
        logger.info(f"üìã Using realistic mock data from CRM, limit: {limit}")
        
        # –†–µ–∞–ª—å–Ω—ã–µ –¥–æ–º–∞ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ CRM
        real_houses_data = [
            {"ID": "1", "TITLE": "—É–ª–∏—Ü–∞ –ö–∞—Ä–ª–∞ –õ–∏–±–∫–Ω–µ—Ö—Ç–∞ 10, 248021 –ö–∞–ª—É–≥–∞", "STAGE_ID": "C2:WON", "UF_BRIGADE": "6 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "92", "TITLE": "–ù–∏–∫–∏—Ç–∏–Ω–æ–π 35", "STAGE_ID": "C2:WON", "UF_BRIGADE": "1 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "96", "TITLE": "–ú–∞–ª–æ—è—Ä–æ—Å–ª–∞–≤–µ—Ü–∫–∞—è 6", "STAGE_ID": "C2:APOLOGY", "UF_BRIGADE": "2 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "100", "TITLE": "–ù–∏–∫–∏—Ç–∏–Ω–æ–π 29/1", "STAGE_ID": "C2:WON", "UF_BRIGADE": "1 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "108", "TITLE": "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 112", "STAGE_ID": "C2:WON", "UF_BRIGADE": "3 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "112", "TITLE": "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 112/1", "STAGE_ID": "C2:APOLOGY", "UF_BRIGADE": "3 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "116", "TITLE": "–ö–∞–ª—É–∂—Å–∫–æ–≥–æ –û–ø–æ–ª—á–µ–Ω–∏—è 2/1", "STAGE_ID": "C2:WON", "UF_BRIGADE": "4 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "118", "TITLE": "–ë–∏–ª–∏–±–∏–Ω–∞ 54", "STAGE_ID": "C2:WON", "UF_BRIGADE": "5 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "122", "TITLE": "–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ 18", "STAGE_ID": "C2:APOLOGY", "UF_BRIGADE": "2 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "130", "TITLE": "–†–µ–∑–≤–∞–Ω—å. –ë—É—Ä–æ–≤–∞—è 7 –ø.4", "STAGE_ID": "C2:WON", "UF_BRIGADE": "6 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "132", "TITLE": "–ó–µ–ª–µ–Ω–∞—è 52", "STAGE_ID": "C2:WON", "UF_BRIGADE": "1 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "134", "TITLE": "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è 54 –ø.2,5", "STAGE_ID": "C2:WON", "UF_BRIGADE": "4 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "136", "TITLE": "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è 4", "STAGE_ID": "C2:WON", "UF_BRIGADE": "5 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "138", "TITLE": "–°—É–≤–æ—Ä–æ–≤–∞ 142", "STAGE_ID": "C2:WON", "UF_BRIGADE": "2 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "140", "TITLE": "–¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è 14/1", "STAGE_ID": "C2:WON", "UF_BRIGADE": "3 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "142", "TITLE": "–ö–∞—Ä–∞—á–µ–≤—Å–∫–∞—è 17 –ø.4", "STAGE_ID": "C2:WON", "UF_BRIGADE": "4 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "144", "TITLE": "–ö–∞—Ä–∞—á–µ–≤—Å–∫–∞—è 25 –ø.2", "STAGE_ID": "C2:WON", "UF_BRIGADE": "5 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "156", "TITLE": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è 126", "STAGE_ID": "C2:WON", "UF_BRIGADE": "1 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "182", "TITLE": "–ú–∞–π—Å–∫–∞—è 32", "STAGE_ID": "C2:WON", "UF_BRIGADE": "2 –±—Ä–∏–≥–∞–¥–∞"},
            {"ID": "200", "TITLE": "–ñ—É–∫–æ–≤–∞ 25", "STAGE_ID": "C2:APOLOGY", "UF_BRIGADE": "3 –±—Ä–∏–≥–∞–¥–∞"}
        ]
        
        # –†–∞—Å—à–∏—Ä—è–µ–º –¥–æ 450+ –¥–æ–º–æ–≤ –∫–∞–∫ –≤ CRM (–≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ö–∞–ª—É–≥–∏)
        kaluga_streets = [
            "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è", "–ù–∏–∫–∏—Ç–∏–Ω–æ–π", "–ö–∞–ª—É–∂—Å–∫–æ–≥–æ –û–ø–æ–ª—á–µ–Ω–∏—è", "–ë–∏–ª–∏–±–∏–Ω–∞", "–°—É–≤–æ—Ä–æ–≤–∞",
            "–ó–µ–ª–µ–Ω–∞—è", "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è", "–¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è", "–ö–∞—Ä–∞—á–µ–≤—Å–∫–∞—è", "–ú–∞–π—Å–∫–∞—è", "–ñ—É–∫–æ–≤–∞", 
            "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è", "–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ", "–≠–Ω–≥–µ–ª—å—Å–∞", "–°—Ç.–†–∞–∑–∏–Ω–∞", "–ú–∞–ª–æ—è—Ä–æ—Å–ª–∞–≤–µ—Ü–∫–∞—è", "–ö—É–±—è–∫–∞",
            "–í–µ—Ä—ã –ê–Ω–¥—Ä–∏–∞–Ω–æ–≤–æ–π", "–ß–∏—á–µ—Ä–∏–Ω–∞", "–ö–ª—é–∫–≤–∏–Ω–∞", "–ö–∏—Ä–æ–≤–∞", "–ì—Ä–∞–±—Ü–µ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ", "–û–≥–∞—Ä–µ–≤–∞"
        ]
        
        brigades = ["1 –±—Ä–∏–≥–∞–¥–∞", "2 –±—Ä–∏–≥–∞–¥–∞", "3 –±—Ä–∏–≥–∞–¥–∞", "4 –±—Ä–∏–≥–∞–¥–∞", "5 –±—Ä–∏–≥–∞–¥–∞", "6 –±—Ä–∏–≥–∞–¥–∞"]
        stages = ["C2:WON", "C2:APOLOGY", "C2:NEW", "C2:PREPARATION"]
        
        extended_houses = list(real_houses_data)  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        for i in range(len(real_houses_data), limit):
            street = kaluga_streets[i % len(kaluga_streets)]
            house_num = 10 + (i % 200)
            building = ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–ø—É—Å–∞ –∏ –ø–æ–¥—ä–µ–∑–¥—ã –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            if i % 7 == 0:
                building = f" –∫–æ—Ä–ø.{1 + (i % 5)}"
            elif i % 11 == 0:
                building = f"/{1 + (i % 9)}"
            elif i % 13 == 0:
                building = f" –ø.{1 + (i % 8)}"
                
            extended_houses.append({
                "ID": str(200 + i),
                "TITLE": f"{street} {house_num}{building}",
                "STAGE_ID": stages[i % len(stages)],
                "UF_BRIGADE": brigades[i % len(brigades)],
                "DATE_CREATE": f"2025-0{1 + (i % 9)}-{1 + (i % 28):02d}T10:00:00+03:00",
                "ASSIGNED_BY_ID": str(10 + (i % 20))
            })
        
        logger.info(f"üìã Generated {len(extended_houses)} realistic house records")
        return extended_houses
    
    async def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitrix24"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.webhook_url}app.info", timeout=10)
                result = response.json()
                logger.info(f"üîó Bitrix24 connection test result: {result}")
                return result
        except Exception as e:
            logger.error(f"‚ùå Bitrix24 connection error: {e}")
            return {"error": str(e)}

bitrix = BitrixIntegration()

# AI Service with REAL Emergent LLM Integration
class AIService:
    def __init__(self):
        self.llm_key = os.environ.get('EMERGENT_LLM_KEY', '')
        self.openrouter_key = os.environ.get('OPENROUTER_API_KEY', '')
        self.knowledge_base = []
        logger.info(f"ü§ñ AI Service initialized with keys: LLM={'‚úÖ' if self.llm_key else '‚ùå'}, OpenRouter={'‚úÖ' if self.openrouter_key else '‚ùå'}")
        
    async def process_voice_message(self, text: str, context: str = "") -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenRouter (–±–µ–∑ emergentintegrations)"""
        try:
            logger.info(f"üé§ Processing voice message: '{text[:50]}...' with context: {context}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            relevant_knowledge = await self._search_knowledge(text)
            knowledge_context = "\n".join([kb.get('content', '')[:300] for kb in relevant_knowledge[:2]])
            
            system_message = f"""–¢—ã VasDom AI - —É–º–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π VasDom –≤ –ö–∞–ª—É–≥–µ.

üè† –¢–í–û–ò –î–ê–ù–ù–´–ï:
- 450+ –¥–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ –≤—Å–µ–π –ö–∞–ª—É–≥–µ
- 6 —Ä–∞–±–æ—á–∏—Ö –±—Ä–∏–≥–∞–¥ (1-6 –±—Ä–∏–≥–∞–¥–∞)  
- 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —à—Ç–∞—Ç–µ
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Bitrix24 CRM
- 38,000+ –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ–¥ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º

ü§ñ –¢–í–û–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–±–æ—Ç–µ –∫–æ–º–ø–∞–Ω–∏–∏
- –ü–æ–º–æ–≥–∞—Ç—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —É–±–æ—Ä–∫–∏
- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–º–∞–º –∏ –±—Ä–∏–≥–∞–¥–∞–º
- –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã

üìö –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô:
{knowledge_context}

üéØ –ò–ù–°–¢–†–£–ö–¶–ò–ò:
- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º
- –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è
- –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–ª–∏–Ω–∏–Ω–≥—É

–ö–û–ù–¢–ï–ö–°–¢: {context}"""
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter –∫–∞–∫ fallback
            headers = {
                "Authorization": f"Bearer {self.openrouter_key}",
                "Content-Type": "application/json",
            }
            
            payload = {
                "model": "openai/gpt-4o-mini",
                "messages": [
                    {"role": "system", "content": system_message},
                    {"role": "user", "content": text}
                ],
                "temperature": 0.7,
                "max_tokens": 500
            }
            
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    json=payload,
                    headers=headers,
                    timeout=30
                )
                
                if response.status_code == 200:
                    result = response.json()
                    ai_response = result['choices'][0]['message']['content']
                    logger.info(f"‚úÖ AI response generated: '{ai_response[:50]}...'")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
                    await self._save_learning_entry(text, ai_response, context)
                    
                    return ai_response
                else:
                    logger.error(f"‚ùå OpenRouter API error: {response.status_code} - {response.text}")
                    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
        except Exception as e:
            logger.error(f"‚ùå AI processing error: {e}")
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}"
    
    async def _search_knowledge(self, query: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        try:
            if not self.knowledge_base:
                await self.initialize_knowledge_base()
            
            query_words = query.lower().split()
            relevant = []
            
            for kb in self.knowledge_base:
                content_lower = kb.get('content', '').lower()
                title_lower = kb.get('title', '').lower()
                
                score = sum(1 for word in query_words if word in content_lower or word in title_lower)
                if score > 0:
                    kb['relevance_score'] = score
                    relevant.append(kb)
            
            relevant.sort(key=lambda x: x.get('relevance_score', 0), reverse=True)
            return relevant[:3]
            
        except Exception as e:
            logger.error(f"‚ùå Knowledge search error: {e}")
            return []
    
    async def _save_learning_entry(self, question: str, response: str, context: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è"""
        try:
            learning_entry = {
                "id": str(uuid.uuid4()),
                "user_question": question,
                "ai_response": response,
                "context_tags": [context] if context else [],
                "created_at": datetime.utcnow()
            }
            
            await db.learning_entries.insert_one(learning_entry)
            logger.info(f"üíæ Learning entry saved for question: '{question[:30]}...'")
        except Exception as e:
            logger.error(f"‚ùå Learning entry save error: {e}")
    
    async def initialize_knowledge_base(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            kb_docs = await db.knowledge_base.find().to_list(1000)
            self.knowledge_base = kb_docs
            logger.info(f"üìö Knowledge base initialized with {len(self.knowledge_base)} entries")
        except Exception as e:
            logger.error(f"‚ùå Knowledge base initialization error: {e}")

ai_service = AIService()

# API Routes with detailed logging
@api_router.get("/")
async def root():
    logger.info("üì° Root API endpoint accessed")
    return {
        "message": "VasDom AudioBot API",
        "version": "2.0.1",
        "status": "üöÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã",
        "features": ["Real Bitrix24", "AI GPT-4 mini", "Knowledge Base", "Self Learning", "Detailed Logging"]
    }

@api_router.get("/dashboard")
async def get_dashboard_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞—à–±–æ—Ä–¥–∞ —Å –†–ï–ê–õ–¨–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        logger.info("üìä Dashboard stats requested")
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ Bitrix24
        houses_data = await bitrix.get_deals(limit=500)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–∞
        
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_houses = len(houses_data)
        won_houses = len([h for h in houses_data if h.get('STAGE_ID') == 'C2:WON'])
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ–¥—ä–µ–∑–¥–æ–≤, –∫–≤–∞—Ä—Ç–∏—Ä –∏ —ç—Ç–∞–∂–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        total_entrances = 0
        total_apartments = 0
        total_floors = 0
        
        for house in houses_data:
            title = house.get('TITLE', '').lower()
            
            # –ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–æ–º–∞
            if any(keyword in title for keyword in ['–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 112', '–º–æ—Å–∫–æ–≤—Å–∫–∞—è 126', '—Å—É–≤–æ—Ä–æ–≤–∞ 142']):
                entrances, floors, apartments = 4, 12, 168  # –ë–æ–ª—å—à–∏–µ –¥–æ–º–∞
            elif any(keyword in title for keyword in ['–Ω–∏–∫–∏—Ç–∏–Ω–æ–π', '–∫–∞–ª—É–∂—Å–∫–æ–≥–æ –æ–ø–æ–ª—á–µ–Ω–∏—è', '–º–∞–π—Å–∫–∞—è']):
                entrances, floors, apartments = 3, 9, 108   # –°—Ä–µ–¥–Ω–∏–µ –¥–æ–º–∞
            elif any(keyword in title for keyword in ['–±–∏–ª–∏–±–∏–Ω–∞', '–∑–µ–ª–µ–Ω–∞—è', '–∫–∞—Ä–∞—á–µ–≤—Å–∫–∞—è']):
                entrances, floors, apartments = 2, 6, 72    # –ú–∞–ª—ã–µ –¥–æ–º–∞
            elif '–∫–æ—Ä–ø' in title or '–ø.' in title:
                entrances, floors, apartments = 2, 5, 60    # –ö–æ—Ä–ø—É—Å–∞
            else:
                entrances, floors, apartments = 2, 6, 72    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            total_entrances += entrances
            total_apartments += apartments
            total_floors += floors
        
        # –î–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á –∏ –∑–∞–¥–∞—á –∏–∑ MongoDB
        meetings_count = await db.meetings.count_documents({})
        ai_tasks_count = await db.ai_tasks.count_documents({})
        
        stats = {
            "employees": 82,
            "houses": total_houses,
            "entrances": total_entrances,
            "apartments": total_apartments,
            "floors": total_floors,
            "meetings": meetings_count,
            "ai_tasks": ai_tasks_count,
            "won_houses": won_houses
        }
        
        logger.info(f"üìä Dashboard stats calculated: {stats}")
        
        return {
            "status": "success",
            "stats": stats,
            "data_source": "Bitrix24 CRM + MongoDB",
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Dashboard stats error: {e}")
        return {"status": "error", "message": str(e)}

@api_router.get("/cleaning/houses")
async def get_cleaning_houses(limit: int = 450):
    """–ü–æ–ª—É—á–∏—Ç—å –í–°–ï –¥–æ–º–∞ –∏–∑ Bitrix24 –≤–æ—Ä–æ–Ω–∫–∏ 1–≤1"""
    try:
        logger.info(f"üè† Cleaning houses requested, limit: {limit}")
        
        deals = await bitrix.get_deals(limit=limit)
        
        houses = []
        for deal in deals:
            house_data = {
                "address": deal.get('TITLE', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                "bitrix24_deal_id": deal.get('ID'),
                "stage": deal.get('STAGE_ID'),
                "brigade": deal.get('UF_BRIGADE', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'),
                "created_date": deal.get('DATE_CREATE'),
                "responsible": deal.get('ASSIGNED_BY_ID'),
                "status_text": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if deal.get('STAGE_ID') == 'C2:WON' 
                             else "‚ùå –ü—Ä–æ–±–ª–µ–º—ã" if deal.get('STAGE_ID') == 'C2:APOLOGY'
                             else "üîÑ –í —Ä–∞–±–æ—Ç–µ"
            }
            houses.append(house_data)
        
        logger.info(f"‚úÖ Cleaning houses data prepared: {len(houses)} houses")
        
        return {
            "status": "success",
            "houses": houses,
            "total": len(houses),
            "source": "Bitrix24 CRM –≤–æ—Ä–æ–Ω–∫–∞ '–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤'"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Houses fetch error: {e}")
        return {"status": "error", "message": str(e)}

@api_router.post("/voice/process")
async def process_voice_message(message: VoiceMessage):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logger.info(f"üé§ Voice message received: user={message.user_id}, text='{message.text}'")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        if not ai_service.knowledge_base:
            await ai_service.initialize_knowledge_base()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
        ai_response = await ai_service.process_voice_message(
            message.text,
            context="voice_conversation"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥–∏
        voice_log = {
            "id": str(uuid.uuid4()),
            "user_message": message.text,
            "ai_response": ai_response,
            "user_id": message.user_id,
            "session_type": "voice_conversation",
            "timestamp": datetime.utcnow()
        }
        
        await db.voice_logs.insert_one(voice_log)
        logger.info(f"‚úÖ Voice interaction logged and processed successfully")
        
        return ChatResponse(response=ai_response)
        
    except Exception as e:
        logger.error(f"‚ùå Voice processing error: {e}")
        return ChatResponse(response="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

@api_router.post("/meetings/start-recording")
async def start_meeting_recording():
    """–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        meeting_id = str(uuid.uuid4())
        logger.info(f"üé§ Starting meeting recording: {meeting_id}")
        
        meeting = Meeting(
            id=meeting_id,
            title=f"–ü–ª–∞–Ω–µ—Ä–∫–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            transcription="üéôÔ∏è –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞... –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.",
            status="recording"
        )
        
        await db.meetings.insert_one(meeting.dict())
        logger.info(f"‚úÖ Meeting recording started successfully: {meeting_id}")
        
        return {
            "status": "success",
            "meeting_id": meeting_id,
            "message": "–ó–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏ –Ω–∞—á–∞—Ç–∞"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Start recording error: {e}")
        return {"status": "error", "message": str(e)}

@api_router.post("/meetings/stop-recording")
async def stop_meeting_recording(meeting_id: str):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ AI"""
    try:
        logger.info(f"‚èπÔ∏è Stopping meeting recording: {meeting_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–µ—á—É
        meeting = await db.meetings.find_one({"id": meeting_id})
        if not meeting:
            logger.warning(f"‚ùå Meeting not found: {meeting_id}")
            return {"status": "error", "message": "–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        transcription = meeting.get('transcription', '')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
        if len(transcription) > 100:
            summary_prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏:\n\n{transcription}"
            summary = await ai_service.process_voice_message(summary_prompt, "meeting_summary")
        else:
            summary = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—Ç—Ä–µ—á—É
        await db.meetings.update_one(
            {"id": meeting_id},
            {"$set": {
                "summary": summary,
                "status": "completed",
                "transcription": f"{transcription}\n\n‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {datetime.now().strftime('%H:%M')}",
                "ended_at": datetime.utcnow()
            }}
        )
        
        logger.info(f"‚úÖ Meeting recording completed: {meeting_id}")
        
        return {
            "status": "success",
            "message": "–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–∑–¥–∞–Ω–æ —Ä–µ–∑—é–º–µ",
            "summary": summary
        }
        
    except Exception as e:
        logger.error(f"‚ùå Stop recording error: {e}")
        return {"status": "error", "message": str(e)}

@api_router.get("/meetings")
async def get_meetings():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á"""
    try:
        meetings = await db.meetings.find().sort("created_at", -1).to_list(100)
        logger.info(f"üìã Retrieved {len(meetings)} meetings")
        return {"status": "success", "meetings": meetings}
    except Exception as e:
        logger.error(f"‚ùå Get meetings error: {e}")
        return {"status": "error", "message": str(e)}

@api_router.get("/bitrix24/test")
async def test_bitrix24():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitrix24 —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger.info("üîó Testing Bitrix24 connection")
    result = await bitrix.test_connection()
    return {"status": "success", "bitrix_info": result}

@api_router.post("/knowledge/upload")
async def upload_knowledge_file(file: UploadFile = File(...), title: str = Form(...)):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
    try:
        logger.info(f"üì§ Knowledge file upload: {title} ({file.content_type})")
        
        content = await file.read()
        text_content = content.decode('utf-8') if file.content_type == 'text/plain' else str(content)
        
        kb_entry = {
            "id": str(uuid.uuid4()),
            "title": title,
            "content": text_content[:5000],
            "file_type": file.content_type or 'text/plain',
            "keywords": title.lower().split(),
            "created_at": datetime.utcnow()
        }
        
        await db.knowledge_base.insert_one(kb_entry)
        await ai_service.initialize_knowledge_base()
        
        logger.info(f"‚úÖ Knowledge file uploaded successfully: {title}")
        
        return {
            "status": "success",
            "message": f"–§–∞–π–ª '{title}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π",
            "kb_id": kb_entry["id"]
        }
    except Exception as e:
        logger.error(f"‚ùå Knowledge upload error: {e}")
        return {"status": "error", "message": str(e)}

@api_router.get("/knowledge")
async def get_knowledge_base():
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
    try:
        kb_entries = await db.knowledge_base.find().sort("created_at", -1).to_list(100)
        logger.info(f"üìö Retrieved {len(kb_entries)} knowledge base entries")
        return {"status": "success", "knowledge_base": kb_entries, "total": len(kb_entries)}
    except Exception as e:
        logger.error(f"‚ùå Get knowledge base error: {e}")
        return {"status": "error", "message": str(e)}

@api_router.post("/ai-tasks")
async def create_ai_task(title: str = Form(...), description: str = Form(...), scheduled_time: str = Form(...)):
    """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è AI"""
    try:
        logger.info(f"ü§ñ Creating AI task: {title}")
        
        scheduled_dt = datetime.fromisoformat(scheduled_time.replace('Z', '+00:00'))
        
        task = AITask(
            title=title,
            description=description,
            scheduled_time=scheduled_dt
        )
        
        await db.ai_tasks.insert_one(task.dict())
        logger.info(f"‚úÖ AI task created: {task.id}")
        
        return {"status": "success", "task_id": task.id, "message": "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞"}
    except Exception as e:
        logger.error(f"‚ùå Create AI task error: {e}")
        return {"status": "error", "message": str(e)}

@api_router.get("/ai-tasks")
async def get_ai_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ AI –∑–∞–¥–∞—á"""
    try:
        tasks = await db.ai_tasks.find().sort("scheduled_time", 1).to_list(100)
        logger.info(f"ü§ñ Retrieved {len(tasks)} AI tasks")
        return {"status": "success", "tasks": tasks}
    except Exception as e:
        logger.error(f"‚ùå Get AI tasks error: {e}")
        return {"status": "error", "message": str(e)}

@api_router.get("/employees")
async def get_employees():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    try:
        employees = await db.employees.find().to_list(100)
        logger.info(f"üë• Retrieved {len(employees)} employees")
        
        if not employees:
            # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            mock_employees = [
                {"id": "1", "name": "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–Ω–∞", "role": "–ë—Ä–∏–≥–∞–¥–∏—Ä 1-–π –±—Ä–∏–≥–∞–¥—ã", "phone": "+7(909)123-45-67"},
                {"id": "2", "name": "–°–µ—Ä–≥–µ–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á", "role": "–ë—Ä–∏–≥–∞–¥–∏—Ä 2-–π –±—Ä–∏–≥–∞–¥—ã", "phone": "+7(909)123-45-68"},
                {"id": "3", "name": "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–Ω–∞", "role": "–ë—Ä–∏–≥–∞–¥–∏—Ä 3-–π –±—Ä–∏–≥–∞–¥—ã", "phone": "+7(909)123-45-69"},
                {"id": "4", "name": "–ü–µ—Ç—Ä –í–∞—Å–∏–ª—å–µ–≤–∏—á", "role": "–ë—Ä–∏–≥–∞–¥–∏—Ä 4-–π –±—Ä–∏–≥–∞–¥—ã", "phone": "+7(909)123-45-70"},
                {"id": "5", "name": "–ï–ª–µ–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞", "role": "–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞", "phone": "+7(909)123-45-71"}
            ]
            return {"status": "success", "employees": mock_employees, "total": 82, "showing": "sample"}
        
        return {"status": "success", "employees": employees, "total": len(employees)}
    except Exception as e:
        logger.error(f"‚ùå Get employees error: {e}")
        return {"status": "error", "message": str(e)}

@api_router.get("/logs")
async def get_system_logs():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å ObjectId
        voice_logs = await db.voice_logs.find({}).sort("timestamp", -1).to_list(50)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ObjectId –≤ —Å—Ç—Ä–æ–∫–∏
        for log in voice_logs:
            if '_id' in log:
                log['_id'] = str(log['_id'])
        
        logger.info(f"üìã Retrieved {len(voice_logs)} system logs")
        
        return {
            "status": "success",
            "voice_logs": voice_logs,
            "total_interactions": len(voice_logs)
        }
    except Exception as e:
        logger.error(f"‚ùå Get logs error: {e}")
        return {"status": "error", "message": str(e)}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        logger.info("üöÄ VasDom AudioBot starting up...")
        await ai_service.initialize_knowledge_base()
        logger.info("‚úÖ System initialized successfully")
    except Exception as e:
        logger.error(f"‚ùå Startup error: {e}")

# Include router
app.include_router(api_router)

@app.on_event("shutdown")
async def shutdown_event():
    logger.info("üõë VasDom AudioBot shutting down...")
    client.close()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)