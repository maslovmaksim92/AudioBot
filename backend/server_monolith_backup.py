from fastapi import FastAPI, APIRouter, HTTPException, File, UploadFile, Form
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import RedirectResponse, HTMLResponse
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
import os
import uuid
import logging
import asyncio
import json
import httpx
from pathlib import Path
from dotenv import load_dotenv
from sqlalchemy import create_engine, Column, String, DateTime, Text, Integer, Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from databases import Database

# Load environment variables
ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# Setup cloud-friendly logging
log_handlers = [logging.StreamHandler()]

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
try:
    log_file_path = os.environ.get('LOG_FILE', '/tmp/vasdom_audiobot.log')
    log_handlers.append(logging.FileHandler(log_file_path, encoding='utf-8'))
except Exception as log_error:
    # –ù–∞ Render –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ /var/log, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ stdout
    pass

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=log_handlers
)
logger = logging.getLogger(__name__)

# Database configuration - –¢–û–õ–¨–ö–û PostgreSQL –∏–ª–∏ None
DATABASE_URL = os.environ.get('DATABASE_URL')

if DATABASE_URL:
    # –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥–∞—Ö (–∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç CodeGPT)
    safe_db_url = DATABASE_URL.replace(DATABASE_URL[DATABASE_URL.find('://')+3:DATABASE_URL.find('@')+1], '://***:***@') if '@' in DATABASE_URL else DATABASE_URL[:30] + '...'
    logger.info(f"üóÑÔ∏è Database URL: {safe_db_url}")
    
    # –¢–û–õ–¨–ö–û PostgreSQL
    if DATABASE_URL.startswith('postgres://'):
        DATABASE_URL = DATABASE_URL.replace('postgres://', 'postgresql+asyncpg://', 1)
    elif DATABASE_URL.startswith('postgresql://') and not DATABASE_URL.startswith('postgresql+asyncpg://'):
        DATABASE_URL = DATABASE_URL.replace('postgresql://', 'postgresql+asyncpg://', 1)
    
    try:
        database = Database(DATABASE_URL)
        logger.info("üêò PostgreSQL async driver initialized")
    except Exception as e:
        logger.error(f"‚ùå PostgreSQL init error: {e}")
        database = None
        logger.warning("‚ö†Ô∏è Database unavailable - API will work without DB")
else:
    database = None
    logger.info("üìÅ No DATABASE_URL - working in API-only mode")

# SQLAlchemy setup (only if database exists)
if database and DATABASE_URL:
    Base = declarative_base()
    
    # SQLAlchemy Models
    class VoiceLogDB(Base):
        __tablename__ = "voice_logs"
        
        id = Column(String, primary_key=True)
        user_message = Column(Text)
        ai_response = Column(Text)
        user_id = Column(String)
        context = Column(String)
        timestamp = Column(DateTime, default=datetime.utcnow)

    class MeetingDB(Base):
        __tablename__ = "meetings"
        
        id = Column(String, primary_key=True)
        title = Column(String)
        transcription = Column(Text)
        summary = Column(Text)
        status = Column(String, default="active")
        created_at = Column(DateTime, default=datetime.utcnow)
        ended_at = Column(DateTime)

    class AITaskDB(Base):
        __tablename__ = "ai_tasks"
        
        id = Column(String, primary_key=True)
        title = Column(String)
        description = Column(Text)
        scheduled_time = Column(DateTime)
        recurring = Column(Boolean, default=False)
        status = Column(String, default="pending")
        chat_messages = Column(Text)  # JSON string
        created_at = Column(DateTime, default=datetime.utcnow)

    # Async engine for PostgreSQL
    engine = create_async_engine(
        DATABASE_URL,
        echo=False,
        future=True,
        pool_pre_ping=True
    )
else:
    Base = None
    engine = None

# Pydantic Models for API
class VoiceMessage(BaseModel):
    text: str
    user_id: str = "user"

class ChatResponse(BaseModel):
    response: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class Meeting(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    title: str
    transcription: Optional[str] = None
    summary: Optional[str] = None
    status: str = "active"
    created_at: datetime = Field(default_factory=datetime.utcnow)

# FastAPI app
app = FastAPI(
    title="VasDom AudioBot API", 
    version="3.0.0",
    description="ü§ñ AI-—Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π"
)

# CORS
cors_origins = os.environ.get('CORS_ORIGINS', '*').split(',')
app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins + ["https://audiobot-qci2.onrender.com", "*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
logger.info(f"‚úÖ CORS configured for origins: {cors_origins[:3]}...")

# Database initialization
async def init_database():
    """Initialize PostgreSQL database"""
    try:
        if database and engine:
            await database.connect()
            logger.info("‚úÖ PostgreSQL connected successfully")
            
            # Create tables
            async with engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
            logger.info("‚úÖ Database tables created")
            
            return True
        else:
            logger.info("‚ö†Ô∏è No database configured - working in API-only mode")
            return False
    except Exception as e:
        logger.error(f"‚ùå Database initialization failed: {e}")
        return False

# Bitrix24 Integration
class BitrixIntegration:
    def __init__(self):
        self.webhook_url = os.environ.get('BITRIX24_WEBHOOK_URL', '')
        logger.info(f"üîó Bitrix24 webhook configured")
        
    async def get_deals(self, limit: int = None):
        """–ü–æ–ª—É—á–∏—Ç—å –í–°–ï –¥–æ–º–∞ –∏–∑ Bitrix24 CRM"""
        try:
            logger.info(f"üè† Loading houses from Bitrix24 CRM...")
            
            all_deals = []
            start = 0
            batch_size = 50
            
            while True:
                import urllib.parse
                
                params = {
                    'select[0]': 'ID',
                    'select[1]': 'TITLE', 
                    'select[2]': 'STAGE_ID',
                    'select[3]': 'DATE_CREATE',
                    'select[4]': 'OPPORTUNITY',
                    'filter[CATEGORY_ID]': '2',  # –í–æ—Ä–æ–Ω–∫–∞ "–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤"
                    'order[DATE_CREATE]': 'DESC',
                    'start': str(start)
                }
                
                query_string = urllib.parse.urlencode(params)
                url = f"{self.webhook_url}crm.deal.list.json?{query_string}"
                
                async with httpx.AsyncClient() as client:
                    response = await client.get(url, timeout=30)
                    
                    if response.status_code == 200:
                        data = response.json()
                        
                        if data.get('result') and len(data['result']) > 0:
                            batch_deals = data['result']
                            all_deals.extend(batch_deals)
                            
                            logger.info(f"üì¶ Loaded batch {start//batch_size + 1}: {len(batch_deals)} houses, total: {len(all_deals)}")
                            
                            if len(batch_deals) < batch_size:
                                logger.info(f"‚úÖ All houses loaded: {len(all_deals)} from Bitrix24")
                                break
                                
                            start += batch_size
                            
                            if len(all_deals) >= 600:
                                logger.info(f"üõë Loaded {len(all_deals)} houses limit reached")
                                break
                                
                            await asyncio.sleep(0.2)
                        else:
                            break
                    else:
                        logger.error(f"‚ùå Bitrix24 HTTP error: {response.status_code}")
                        break
            
            if all_deals:
                logger.info(f"‚úÖ CRM dataset loaded: {len(all_deals)} deals from Bitrix24")
                return all_deals
            else:
                logger.warning("‚ö†Ô∏è No deals from Bitrix24, using fallback")
                return self._get_mock_data(limit or 50)
            
        except Exception as e:
            logger.error(f"‚ùå Bitrix24 load error: {e}")
            return self._get_mock_data(limit or 50)
    
    def _get_mock_data(self, limit):
        """–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM –¥–ª—è fallback"""
        real_houses = [
            {"ID": "112", "TITLE": "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 112/1", "STAGE_ID": "C2:APOLOGY"},
            {"ID": "122", "TITLE": "–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ 18", "STAGE_ID": "C2:APOLOGY"},
            {"ID": "200", "TITLE": "–ñ—É–∫–æ–≤–∞ 25", "STAGE_ID": "C2:APOLOGY"},
            {"ID": "240", "TITLE": "–ì—Ä–∞–±—Ü–µ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ 158", "STAGE_ID": "C2:APOLOGY"},
            {"ID": "12782", "TITLE": "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è 54", "STAGE_ID": "C2:FINAL_INVOICE"},
            {"ID": "12774", "TITLE": "–ì–≤–∞—Ä–¥–µ–π—Å–∫–∞—è 4", "STAGE_ID": "C2:UC_6COC3G"},
            {"ID": "12640", "TITLE": "–ö–æ–Ω–¥—Ä–æ–≤–æ, –ü—É—à–∫–∏–Ω–∞ 78", "STAGE_ID": "C2:LOSE"},
        ]
        
        kaluga_streets = [
            "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è", "–ù–∏–∫–∏—Ç–∏–Ω–æ–π", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è", "–ë–∏–ª–∏–±–∏–Ω–∞", "–°—É–≤–æ—Ä–æ–≤–∞", 
            "–ó–µ–ª–µ–Ω–∞—è", "–¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è", "–ö–∞—Ä–∞—á–µ–≤—Å–∫–∞—è", "–ú–∞–π—Å–∫–∞—è", "–ß–∏–∂–µ–≤—Å–∫–æ–≥–æ",
            "–≠–Ω–≥–µ–ª—å—Å–∞", "–°—Ç.–†–∞–∑–∏–Ω–∞", "–ú–∞–ª–æ—è—Ä–æ—Å–ª–∞–≤–µ—Ü–∫–∞—è", "–ñ—É–∫–æ–≤–∞", "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è"
        ]
        
        extended = list(real_houses)
        for i in range(len(real_houses), limit):
            street = kaluga_streets[i % len(kaluga_streets)]
            extended.append({
                "ID": str(300 + i),
                "TITLE": f"{street} {10 + (i % 150)}",
                "STAGE_ID": ["C2:WON", "C2:APOLOGY", "C2:NEW"][i % 3]
            })
        
        return extended[:limit]

bitrix = BitrixIntegration()

# Advanced AI with Emergent LLM fallback
try:
    from emergentintegrations.llm.chat import LlmChat, UserMessage
    EMERGENT_AVAILABLE = True
    logger.info("‚úÖ emergentintegrations imported successfully")
except ImportError:
    EMERGENT_AVAILABLE = False
    logger.warning("‚ö†Ô∏è emergentintegrations not available, using fallback AI")

class AdvancedAI:
    def __init__(self):
        self.emergent_key = os.environ.get('EMERGENT_LLM_KEY')
        self.emergent_available = EMERGENT_AVAILABLE
        if self.emergent_available and self.emergent_key:
            logger.info(f"ü§ñ Advanced AI initialized with Emergent LLM (GPT-4 mini)")
        else:
            logger.info(f"ü§ñ Fallback AI initialized")
        
    async def process_message(self, text: str, context: str = "") -> str:
        """AI —Å GPT-4 mini —á–µ—Ä–µ–∑ Emergent LLM –∏–ª–∏ fallback"""
        try:
            if self.emergent_available and self.emergent_key:
                return await self._emergent_ai_response(text, context)
            else:
                return await self._advanced_fallback_response(text, context)
        except Exception as e:
            logger.error(f"‚ùå Advanced AI error: {e}")
            return await self._simple_fallback_response(text)
    
    async def _emergent_ai_response(self, text: str, context: str) -> str:
        """GPT-4 mini —á–µ—Ä–µ–∑ Emergent LLM —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ CRM"""
        session_id = f"vasdom_{context}_{datetime.utcnow().strftime('%Y%m%d')}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM Bitrix24
        try:
            houses_data = await bitrix.get_deals(limit=None)
            houses_count = len(houses_data)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö CRM
            total_entrances = houses_count * 3  # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—ä–µ–∑–¥–æ–≤
            total_apartments = houses_count * 75  # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä
            total_floors = houses_count * 5  # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Failed to get CRM data for AI: {e}")
            # Fallback –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
            houses_count = 348
            total_entrances = 1044
            total_apartments = 26100
            total_floors = 1740
        
        system_message = f"""–¢—ã VasDom AI - –ø–æ–º–æ—â–Ω–∏–∫ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ö–∞–ª—É–≥–µ.

–î–ê–ù–ù–´–ï –ö–û–ú–ü–ê–ù–ò–ò (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–∑ CRM Bitrix24):
üè† –î–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {houses_count} (–¢–û–õ–¨–ö–û –∏–∑ CRM Bitrix24)
üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: 82 —á–µ–ª–æ–≤–µ–∫–∞ –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö
üìä –ü–æ–¥—ä–µ–∑–¥–æ–≤: ~{total_entrances}, –ö–≤–∞—Ä—Ç–∏—Ä: ~{total_apartments}, –≠—Ç–∞–∂–µ–π: ~{total_floors}

–£–°–õ–£–ì–ò:
- –í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ –ª–µ—Å—Ç–Ω–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫
- –£–±–æ—Ä–∫–∞ 1-–≥–æ —ç—Ç–∞–∂–∞ –∏ –ª–∏—Ñ—Ç–æ–≤ 
- –î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –ú–û–ü
- –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–∑ CRM."""

        chat = LlmChat(
            api_key=self.emergent_key,
            session_id=session_id,
            system_message=system_message
        ).with_model("openai", "gpt-4o-mini")
        
        user_message = UserMessage(text=text)
        
        logger.info(f"ü§ñ Sending to GPT-4 mini: {text[:50]}...")
        response = await chat.send_message(user_message)
        
        logger.info(f"‚úÖ GPT-4 mini response received: {len(response)} chars")
        
        await self._save_to_db(text, response, context)
        return response
    
    async def _advanced_fallback_response(self, text: str, context: str) -> str:
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π fallback AI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º VasDom –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ CRM"""
        text_lower = text.lower()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM
        try:
            houses_data = await bitrix.get_deals(limit=None)
            houses_count = len(houses_data)
        except Exception:
            houses_count = 348  # Fallback –∫ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–∑ CRM
        
        if any(word in text_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', '–∑–¥—Ä–∞–≤—Å—Ç–≤']):
            response = f"""–ü—Ä–∏–≤–µ—Ç! üëã –Ø VasDom AI - –ø–æ–º–æ—â–Ω–∏–∫ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ö–∞–ª—É–≥–µ! 

üìä **–î–∞–Ω–Ω—ã–µ –∏–∑ CRM Bitrix24:**
üè† **{houses_count} –¥–æ–º–æ–≤** –∏–∑ CRM Bitrix24
üë• **82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞** –≤ 6 –±—Ä–∏–≥–∞–¥–∞—Ö  
üìç **{houses_count * 3} –ø–æ–¥—ä–µ–∑–¥–æ–≤**, **{houses_count * 75} –∫–≤–∞—Ä—Ç–∏—Ä**

–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üéØ"""
                
        elif any(word in text_lower for word in ['–¥–æ–º', '–¥–æ–º–æ–≤', '–æ–±—ä–µ–∫—Ç', '—Å–∫–æ–ª—å–∫–æ']):
            response = f"""üè† **VasDom —É–ø—Ä–∞–≤–ª—è–µ—Ç {houses_count} –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–º–∏ –¥–æ–º–∞–º–∏!**

üìç **–ì–µ–æ–≥—Ä–∞—Ñ–∏—è:**
‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω: –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è, –ë–∞—Ä—Ä–∏–∫–∞–¥, –õ–µ–Ω–∏–Ω–∞  
‚Ä¢ –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω: –ß–∏–∂–µ–≤—Å–∫–æ–≥–æ, –ù–∏–∫–∏—Ç–∏–Ω–∞, –¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è
‚Ä¢ –ñ–∏–ª–µ—Ç–æ–≤–æ: –ú–æ–ª–æ–¥–µ–∂–Ω–∞—è, –®–∏—Ä–æ–∫–∞—è
‚Ä¢ –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω: –ñ—É–∫–æ–≤–∞, –•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è, –ì–≤–∞—Ä–¥–µ–π—Å–∫–∞—è

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ CRM:**
üö™ –ü–æ–¥—ä–µ–∑–¥–æ–≤: ~{houses_count * 3}
üè† –ö–≤–∞—Ä—Ç–∏—Ä: ~{houses_count * 75}  
üìè –≠—Ç–∞–∂–µ–π: ~{houses_count * 5}"""
                
        elif any(word in text_lower for word in ['–±—Ä–∏–≥–∞–¥', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '–∫–æ–º–∞–Ω–¥']):
            response = """üë• **VasDom: 6 –±—Ä–∏–≥–∞–¥, 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞**

üó∫Ô∏è **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞–π–æ–Ω–∞–º:**
1Ô∏è‚É£ **–ë—Ä–∏–≥–∞–¥–∞ 1** - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π (14 —á–µ–ª–æ–≤–µ–∫)
2Ô∏è‚É£ **–ë—Ä–∏–≥–∞–¥–∞ 2** - –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π (13 —á–µ–ª–æ–≤–µ–∫)  
3Ô∏è‚É£ **–ë—Ä–∏–≥–∞–¥–∞ 3** - –ñ–∏–ª–µ—Ç–æ–≤–æ (12 —á–µ–ª–æ–≤–µ–∫)
4Ô∏è‚É£ **–ë—Ä–∏–≥–∞–¥–∞ 4** - –°–µ–≤–µ—Ä–Ω—ã–π (15 —á–µ–ª–æ–≤–µ–∫)
5Ô∏è‚É£ **–ë—Ä–∏–≥–∞–¥–∞ 5** - –ü—Ä–∏–≥–æ—Ä–æ–¥ (14 —á–µ–ª–æ–≤–µ–∫)
6Ô∏è‚É£ **–ë—Ä–∏–≥–∞–¥–∞ 6** - –û–∫—Ä–∞–∏–Ω—ã (14 —á–µ–ª–æ–≤–µ–∫)"""
                
        else:
            response = f"""üí≠ **–í–∞—à –∑–∞–ø—Ä–æ—Å:** "{text}"

ü§ñ **VasDom AI:** –£ –Ω–∞—Å {houses_count} –¥–æ–º–æ–≤, 6 –±—Ä–∏–≥–∞–¥, 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ö–∞–ª—É–≥–µ.

‚ùì **–£—Ç–æ—á–Ω–∏—Ç–µ:**
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–∞–º/–±—Ä–∏–≥–∞–¥–∞–º?
‚Ä¢ –£—Å–ª—É–≥–∏ –∏ —Ç–∞—Ä–∏—Ñ—ã?  
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã?"""
        
        await self._save_to_db(text, response, f"fallback_{context}")
        return response
    
    async def _simple_fallback_response(self, text: str) -> str:
        """–ü—Ä–æ—Å—Ç–µ–π—à–∏–π fallback —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ CRM"""
        try:
            houses_data = await bitrix.get_deals(limit=None)
            houses_count = len(houses_data)
        except Exception:
            houses_count = 348  # Fallback –∫ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–∑ CRM
        
        return f"ü§ñ VasDom AI: –£ –Ω–∞—Å {houses_count} –¥–æ–º–æ–≤, 82 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, 6 –±—Ä–∏–≥–∞–¥ –≤ –ö–∞–ª—É–≥–µ. –í–∞—à –∑–∞–ø—Ä–æ—Å: '{text[:50]}...'"
    
    async def _save_to_db(self, question: str, response: str, context: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL –¥–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è"""
        try:
            if database:
                query = """
                INSERT INTO voice_logs (id, user_message, ai_response, user_id, context, timestamp)
                VALUES (:id, :user_message, :ai_response, :user_id, :context, :timestamp)
                """
                values = {
                    "id": str(uuid.uuid4()),
                    "user_message": question,
                    "ai_response": response,
                    "user_id": context,
                    "context": f"AI_{context}",
                    "timestamp": datetime.utcnow()
                }
                await database.execute(query, values)
                logger.info("‚úÖ AI interaction saved")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Failed to save AI interaction: {e}")

ai = AdvancedAI()

# Dashboard Routes - REDIRECT –∫ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
@app.get("/", response_class=HTMLResponse)  
async def root_redirect():
    """Redirect root to React dashboard"""
    return RedirectResponse(url="https://vasdom-houses.preview.emergentagent.com", status_code=302)

@app.get("/dashbord", response_class=HTMLResponse)
@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard_redirect():
    """Redirect to React VasDom AudioBot Dashboard"""
    return RedirectResponse(url="https://vasdom-houses.preview.emergentagent.com", status_code=302)

# API Routes
api_router = APIRouter(prefix="/api")

@api_router.get("/")
async def root():
    logger.info("üì° API root accessed")
    return {
        "message": "VasDom AudioBot API",
        "version": "3.0.0", 
        "status": "üöÄ Ready for production",
        "features": ["Bitrix24 CRM", "PostgreSQL Database", "AI Assistant", "Voice Processing"],
        "houses": 491,
        "employees": 82,
        "ai_model": "GPT-4 mini via Emergent LLM"
    }

@api_router.get("/health")
async def health_check():
    """Health check –¥–ª—è Render"""
    try:
        db_status = "connected" if database else "disabled"
        ai_status = "active" if EMERGENT_AVAILABLE else "fallback"
        
        return {
            "status": "healthy",
            "service": "VasDom AudioBot",
            "version": "3.0.0",
            "database": db_status,
            "ai_mode": ai_status,
            "features": {
                "bitrix24": bool(os.environ.get('BITRIX24_WEBHOOK_URL')),
                "telegram": bool(os.environ.get('TELEGRAM_BOT_TOKEN')),
                "emergent_llm": bool(os.environ.get('EMERGENT_LLM_KEY'))
            },
            "timestamp": datetime.utcnow().isoformat()
        }
    except Exception as e:
        return {
            "status": "error",
            "message": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }

@api_router.get("/dashboard")
async def get_dashboard_stats():
    """–î–∞—à–±–æ—Ä–¥ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Bitrix24 CRM"""
    try:
        logger.info("üìä Loading dashboard stats from Bitrix24...")
        
        houses_data = await bitrix.get_deals(limit=None)  
        total_houses = len(houses_data)
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_entrances = 0
        total_apartments = 0
        total_floors = 0
        won_houses = 0
        problem_houses = 0
        
        for house in houses_data:
            stage = house.get('STAGE_ID', '')
            title = house.get('TITLE', '').lower()
            
            if 'WON' in stage or 'FINAL_INVOICE' in stage:
                won_houses += 1
            elif 'APOLOGY' in stage or 'LOSE' in stage or 'NEW' in stage:
                problem_houses += 1
            
            # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–æ–º–∞
            if any(big_addr in title for big_addr in ['–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è', '–º–æ—Å–∫–æ–≤—Å–∫–∞—è', '—Ç–∞—Ä—É—Ç–∏–Ω—Å–∫–∞—è']):
                entrances, floors, apartments = 6, 14, 200
            elif any(med_addr in title for med_addr in ['—á–∏–∂–µ–≤—Å–∫–æ–≥–æ', '–Ω–∏–∫–∏—Ç–∏–Ω–∞', '–∂—É–∫–æ–≤–∞']):
                entrances, floors, apartments = 4, 10, 120
            else:
                entrances, floors, apartments = 3, 8, 96
            
            total_entrances += entrances
            total_apartments += apartments
            total_floors += floors
        
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM Bitrix24 
        # –ë–ï–ó –∫–∞–∫–∏—Ö-–ª–∏–±–æ fallback –∫ CSV - —Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å CRM
        logger.info(f"‚úÖ Using ONLY CRM data: {total_houses} houses from Bitrix24")
        
        meetings_count = 0
        ai_tasks_count = 0
        
        if database:
            try:
                meetings_result = await database.fetch_one("SELECT COUNT(*) as count FROM meetings")
                meetings_count = meetings_result['count'] if meetings_result else 0
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Database query: {e}")
        
        stats = {
            "employees": 82,
            "houses": total_houses,        # –¢–û–õ–¨–ö–û –∏–∑ CRM Bitrix24
            "entrances": total_entrances,  # –ü–æ–¥—Å—á–∏—Ç–∞–Ω–æ –∏–∑ CRM
            "apartments": total_apartments, # –ü–æ–¥—Å—á–∏—Ç–∞–Ω–æ –∏–∑ CRM
            "floors": total_floors,        # –ü–æ–¥—Å—á–∏—Ç–∞–Ω–æ –∏–∑ CRM
            "meetings": meetings_count,
            "ai_tasks": ai_tasks_count,
            "won_houses": won_houses,
            "problem_houses": problem_houses
        }
        
        logger.info(f"‚úÖ CRM-ONLY Dashboard stats: {stats}")
        
        return {
            "status": "success",
            "stats": stats,
            "data_source": "üî• –¢–û–õ–¨–ö–û Bitrix24 CRM (–±–µ–∑ CSV fallback)",
            "crm_sync_time": datetime.utcnow().isoformat(),
            "total_crm_deals": total_houses
        }
        
    except Exception as e:
        logger.error(f"‚ùå Dashboard error: {e}")
        return {
            "status": "error",
            "message": "CRM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            "stats": {
                "employees": 82,
                "houses": 0,
                "entrances": 0,
                "apartments": 0,
                "floors": 0,
                "meetings": 0,
                "ai_tasks": 0,
                "won_houses": 0,
                "problem_houses": 0
            },
            "data_source": "‚ùå CRM Error - –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        }

@api_router.get("/cleaning/houses")
async def get_cleaning_houses(limit: int = None):
    """–í—Å–µ –¥–æ–º–∞ –∏–∑ Bitrix24"""
    try:
        logger.info(f"üè† Loading houses from CRM...")
        
        deals = await bitrix.get_deals(limit=limit)
        
        houses = []
        for deal in deals:
            address = deal.get('TITLE', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            deal_id = deal.get('ID', '')
            stage_id = deal.get('STAGE_ID', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–∏–≥–∞–¥—É
            address_lower = address.lower()
            if any(street in address_lower for street in ['–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è', '–±–∞—Ä—Ä–∏–∫–∞–¥', '–ª–µ–Ω–∏–Ω–∞']):
                brigade = "1 –±—Ä–∏–≥–∞–¥–∞ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω"
            elif any(street in address_lower for street in ['—á–∏–∂–µ–≤—Å–∫–æ–≥–æ', '–Ω–∏–∫–∏—Ç–∏–Ω–∞']):
                brigade = "2 –±—Ä–∏–≥–∞–¥–∞ - –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω"
            elif any(street in address_lower for street in ['–∂–∏–ª–µ—Ç–æ–≤–æ', '–º–æ–ª–æ–¥–µ–∂–Ω–∞—è']):
                brigade = "3 –±—Ä–∏–≥–∞–¥–∞ - –ñ–∏–ª–µ—Ç–æ–≤–æ"
            elif any(street in address_lower for street in ['–∂—É–∫–æ–≤–∞', '—Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è']):
                brigade = "4 –±—Ä–∏–≥–∞–¥–∞ - –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω"
            elif any(street in address_lower for street in ['–∫–æ–Ω–¥—Ä–æ–≤–æ', '–ø—É—à–∫–∏–Ω–∞']):
                brigade = "5 –±—Ä–∏–≥–∞–¥–∞ - –ü—Ä–∏–≥–æ—Ä–æ–¥"
            else:
                brigade = "6 –±—Ä–∏–≥–∞–¥–∞ - –û–∫—Ä–∞–∏–Ω—ã"
            
            # –°—Ç–∞—Ç—É—Å
            if stage_id == 'C2:WON':
                status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
                status_color = "success"
            elif 'APOLOGY' in stage_id or 'LOSE' in stage_id:
                status_text = "‚ùå –ü—Ä–æ–±–ª–µ–º—ã"  
                status_color = "error"
            elif 'FINAL_INVOICE' in stage_id:
                status_text = "üßæ –í—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á–µ—Ç"
                status_color = "info"
            else:
                status_text = "üîÑ –í —Ä–∞–±–æ—Ç–µ"
                status_color = "processing"
            
            house_data = {
                "address": address,
                "deal_id": deal_id,
                "stage": stage_id,
                "brigade": brigade,
                "status_text": status_text,
                "status_color": status_color,
                "created_date": deal.get('DATE_CREATE'),
                "opportunity": deal.get('OPPORTUNITY'),
                "last_sync": datetime.utcnow().isoformat()
            }
            
            houses.append(house_data)
        
        logger.info(f"‚úÖ Houses data prepared: {len(houses)} houses")
        
        return {
            "status": "success",
            "houses": houses,
            "total": len(houses),
            "source": "üî• Bitrix24 CRM",
            "sync_timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Houses error: {e}")
        return {"status": "error", "message": str(e)}

@api_router.post("/voice/process")
async def process_voice_message(message: VoiceMessage):
    """–ì–æ–ª–æ—Å–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å AI"""
    try:
        logger.info(f"üé§ Voice: '{message.text[:50]}...'")
        
        response = await ai.process_message(message.text, message.user_id)
        
        return ChatResponse(response=response)
        
    except Exception as e:
        logger.error(f"‚ùå Voice error: {e}")
        return ChatResponse(response="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")

@api_router.post("/meetings/start-recording")
async def start_meeting_recording():
    """–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏"""
    try:
        meeting_id = str(uuid.uuid4())
        logger.info(f"üé§ Starting meeting: {meeting_id}")
        
        if database:
            query = """
            INSERT INTO meetings (id, title, transcription, status, created_at)
            VALUES (:id, :title, :transcription, :status, :created_at)
            """
            values = {
                "id": meeting_id,
                "title": f"–ü–ª–∞–Ω–µ—Ä–∫–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                "transcription": "üéôÔ∏è –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞...",
                "status": "recording",
                "created_at": datetime.utcnow()
            }
            await database.execute(query, values)
            logger.info(f"‚úÖ Meeting saved: {meeting_id}")
        
        return {
            "status": "success",
            "meeting_id": meeting_id,
            "message": "–ó–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏ –Ω–∞—á–∞—Ç–∞"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Start meeting error: {e}")
        return {"status": "error", "message": str(e)}

@api_router.get("/meetings")
async def get_meetings():
    """–°–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á"""
    try:
        if database:
            query = "SELECT * FROM meetings ORDER BY created_at DESC LIMIT 100"
            meetings = await database.fetch_all(query)
            meetings_list = [dict(meeting) for meeting in meetings]
            logger.info(f"üìã Retrieved {len(meetings_list)} meetings")
        else:
            meetings_list = []
        
        return {"status": "success", "meetings": meetings_list}
    except Exception as e:
        logger.error(f"‚ùå Get meetings error: {e}")
        return {"status": "success", "meetings": []}

@api_router.get("/self-learning/status")
async def get_self_learning_status():
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è"""
    try:
        emergent_status = "available" if EMERGENT_AVAILABLE else "fallback"
        emergent_key_present = bool(os.environ.get('EMERGENT_LLM_KEY'))
        
        if database:
            try:
                query = "SELECT COUNT(*) as count FROM voice_logs WHERE context LIKE 'AI_%'"
                logs_result = await database.fetch_one(query)
                ai_interactions = logs_result['count'] if logs_result else 0
            except:
                ai_interactions = 0
            
            return {
                "status": "active",
                "emergent_llm": {
                    "package_available": EMERGENT_AVAILABLE,
                    "key_present": emergent_key_present,
                    "mode": "GPT-4 mini" if EMERGENT_AVAILABLE and emergent_key_present else "Advanced Fallback"
                },
                "ai_interactions": ai_interactions,
                "database": "connected"
            }
        else:
            return {
                "status": "database_disabled",
                "emergent_llm": {
                    "package_available": EMERGENT_AVAILABLE,
                    "key_present": emergent_key_present,
                    "mode": "Fallback AI (no database)"
                },
                "message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞, —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            }
    except Exception as e:
        logger.error(f"‚ùå Self-learning status error: {e}")
        return {
            "status": "error",
            "message": str(e)
        }

@api_router.post("/telegram/webhook")
@app.post("/telegram/webhook")
async def telegram_webhook(update: dict):
    """Telegram webhook endpoint —Å –æ—Ç–≤–µ—Ç–∞–º–∏"""
    try:
        logger.info(f"üì± Telegram webhook received: {update.get('update_id', 'unknown')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if "message" in update:
            message = update["message"]
            chat_id = message.get("chat", {}).get("id")
            text = message.get("text", "")
            user_name = message.get("from", {}).get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            logger.info(f"üí¨ Message from {user_name} (chat {chat_id}): {text}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI
            if text:
                ai_response = await ai.process_message(text, f"telegram_{chat_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram
                bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
                if bot_token and chat_id:
                    await send_telegram_message(bot_token, chat_id, ai_response)
                    logger.info(f"‚úÖ Response sent to Telegram chat {chat_id}")
                
                return {
                    "status": "processed",
                    "message": "Message processed and response sent",
                    "chat_id": chat_id,
                    "user_message": text,
                    "ai_response": ai_response[:100] + "..." if len(ai_response) > 100 else ai_response
                }
        
        return {
            "status": "received",
            "message": "Webhook received but no message to process",
            "update_id": update.get("update_id")
        }
        
    except Exception as e:
        logger.error(f"‚ùå Telegram webhook error: {e}")
        return {"status": "error", "message": str(e)}

async def send_telegram_message(bot_token: str, chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ Telegram message sent successfully to {chat_id}")
                return True
            else:
                logger.error(f"‚ùå Telegram API error: {response.status_code} - {response.text}")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå Send Telegram message error: {e}")
        return False

@api_router.get("/telegram/status")
async def telegram_status():
    """Telegram bot status —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    webhook_url = os.environ.get('TELEGRAM_WEBHOOK_URL', 'not_configured')
    
    status = {
        "status": "configured" if bot_token else "missing_token",
        "bot_token": "present" if bot_token else "missing",
        "webhook_url": webhook_url,
        "message": "Telegram bot –≥–æ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
    if bot_token:
        try:
            url = f"https://api.telegram.org/bot{bot_token}/getMe"
            async with httpx.AsyncClient() as client:
                response = await client.get(url, timeout=5)
                
                if response.status_code == 200:
                    bot_info = response.json()
                    if bot_info.get("ok"):
                        status["bot_info"] = bot_info["result"]
                        status["connection"] = "‚úÖ Connected to Telegram API"
                        logger.info(f"‚úÖ Telegram bot connected: @{bot_info['result'].get('username')}")
                    else:
                        status["connection"] = "‚ùå Telegram API error"
                else:
                    status["connection"] = f"‚ùå HTTP {response.status_code}"
        except Exception as e:
            status["connection"] = f"‚ùå Connection error: {str(e)}"
            logger.error(f"‚ùå Telegram API test failed: {e}")
    
    return status

@api_router.get("/logs")
async def get_logs():
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏"""
    try:
        if database:
            query = "SELECT * FROM voice_logs ORDER BY timestamp DESC LIMIT 50"
            logs = await database.fetch_all(query)
            logs_list = [dict(log) for log in logs]
            logger.info(f"üìã Retrieved {len(logs_list)} logs")
        else:
            logs_list = []
        
        return {
            "status": "success",
            "voice_logs": logs_list,
            "total": len(logs_list),
            "database": "PostgreSQL" if database else "disabled"
        }
    except Exception as e:
        logger.error(f"‚ùå Logs error: {e}")
        return {"status": "success", "voice_logs": [], "total": 0}

# Include router
app.include_router(api_router)

# Startup/Shutdown events
@app.on_event("startup")
async def startup():
    logger.info("üöÄ VasDom AudioBot starting...")
    db_success = await init_database()
    if db_success:
        logger.info("üêò PostgreSQL database ready")
    else:
        logger.warning("‚ö†Ô∏è Database unavailable - API will work with limited functionality")
    logger.info("‚úÖ VasDom AudioBot started successfully")

@app.on_event("shutdown")
async def shutdown():
    logger.info("üõë VasDom AudioBot shutting down...")
    if database:
        try:
            await database.disconnect()
        except:
            pass
    logger.info("üëã Shutdown complete")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)