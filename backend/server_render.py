from fastapi import FastAPI, APIRouter, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from dotenv import load_dotenv
from motor.motor_asyncio import AsyncIOMotorClient
import os
import logging
from pathlib import Path
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
import uuid
from datetime import datetime, date
from enum import Enum
import json
import httpx

# Load environment variables
ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# MongoDB connection
mongo_url = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
try:
    client = AsyncIOMotorClient(mongo_url)
    db = client[os.environ.get('DB_NAME', 'ai_assistant')]
    logger.info("‚úÖ MongoDB connected successfully")
except Exception as e:
    logger.error(f"‚ùå MongoDB connection failed: {e}")
    # Use mock database for demo
    db = None

# Create the main app
app = FastAPI(
    title="AI Assistant for Business Management",
    description="Comprehensive AI assistant for managing cleaning company operations",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Create API router
api_router = APIRouter(prefix="/api")

# Employee positions enum
class Position(str, Enum):
    GENERAL_DIRECTOR = "general_director"
    DIRECTOR = "director"
    ACCOUNTANT = "accountant"
    HR_MANAGER = "hr_manager"
    CLEANING_MANAGER = "cleaning_manager"
    CONSTRUCTION_MANAGER = "construction_manager"
    ARCHITECT = "architect"
    CLEANER = "cleaner"
    OTHER = "other"

# Models
class Employee(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    name: str
    position: Position
    email: Optional[str] = None
    telegram_id: Optional[int] = None
    phone: Optional[str] = None
    hire_date: datetime
    city: str  # –ö–∞–ª—É–≥–∞ –∏–ª–∏ –ö–µ–º–µ—Ä–æ–≤–æ
    is_active: bool = True
    profile_data: Dict[str, Any] = Field(default_factory=dict)
    created_at: datetime = Field(default_factory=datetime.utcnow)

class CompanyMetrics(BaseModel):
    total_employees: int
    active_employees: int
    kaluga_employees: int
    kemerovo_employees: int
    total_houses: int
    kaluga_houses: int = 500
    kemerovo_houses: int = 100

class DashboardData(BaseModel):
    metrics: CompanyMetrics
    recent_activities: List[Dict[str, Any]]
    ai_insights: List[str]

# Simple AI Chat without emergentintegrations (mock for demo)
class MockAI:
    @staticmethod
    async def chat(message: str, session_id: str = "default") -> Dict[str, Any]:
        # Mock AI response for demo
        responses = [
            "–û—Ç–ª–∏—á–Ω–æ! –Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ú–ê–ö–°. –ü–æ–º–æ–≥—É —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π.",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ Bitrix24 –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏?",
            "–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã —É–±–æ—Ä–∫–∏ –∏ —É–ª—É—á—à–∏—Ç—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å –∫–æ–º–∞–Ω–¥–æ–π.",
            "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –≤ –ö–∞–ª—É–≥–µ –∏ –ö–µ–º–µ—Ä–æ–≤–æ.",
            "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —É–±–æ—Ä—â–∏–∫–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞."
        ]
        
        # Simple keyword-based responses
        message_lower = message.lower()
        if "bitrix" in message_lower:
            response = "–ü–æ –¥–∞–Ω–Ω—ã–º Bitrix24: —É –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ '–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤' –∏ —Ö–æ—Ä–æ—à–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫."
        elif "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫" in message_lower or "–∫–æ–º–∞–Ω–¥–∞" in message_lower:
            response = "–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ KPI –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."
        elif "–∫–∞–ª—É–≥–∞" in message_lower or "–∫–µ–º–µ—Ä–æ–≤–æ" in message_lower:
            response = "–ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ—Ä–æ–¥–∞–º: –ö–∞–ª—É–≥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç, –ö–µ–º–µ—Ä–æ–≤–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤."
        elif "–º–∞–∫—Å" in message_lower or "–≥–æ–ª–æ—Å" in message_lower:
            response = "–ü—Ä–∏–≤–µ—Ç! –Ø –ú–ê–ö–°, –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! –ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä—É –∏ –∞–Ω–∞–ª–∏–∑—É –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤."
        else:
            import random
            response = random.choice(responses)
        
        return {
            "response": response,
            "timestamp": datetime.utcnow().isoformat(),
            "status": "success",
            "model": "mock-ai",
            "session_id": session_id
        }

mock_ai = MockAI()

# API Endpoints
@api_router.get("/")
async def root():
    return {
        "message": "AI Assistant API", 
        "status": "active", 
        "version": "1.0.0",
        "deployed_on": "Render",
        "features": [
            "ü§ñ AI Chat with Mock Intelligence",
            "üìä Dashboard with Business Metrics", 
            "üë• Employee Management",
            "üîó Bitrix24 Integration Ready",
            "üìû Live Voice Chat Interface",
            "üì± Telegram Bot Support"
        ]
    }

@api_router.get("/dashboard", response_model=DashboardData)
async def get_dashboard():
    """Get main dashboard data"""
    # Mock employee metrics for demo
    metrics = CompanyMetrics(
        total_employees=100,
        active_employees=95,
        kaluga_employees=70,
        kemerovo_employees=25,
        total_houses=600,
        kaluga_houses=500,
        kemerovo_houses=100
    )
    
    # Recent activities
    recent_activities = [
        {"type": "system_deployed", "message": "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –Ω–∞ Render.com", "time": "—Ç–æ–ª—å–∫–æ —á—Ç–æ"},
        {"type": "bitrix24_ready", "message": "Bitrix24 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", "time": "1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥"},
        {"type": "voice_chat_active", "message": "Live –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", "time": "2 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥"},
        {"type": "ai_ready", "message": "AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ú–ê–ö–° –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", "time": "3 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥"}
    ]
    
    # AI insights
    ai_insights = [
        "üöÄ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –Ω–∞ Render –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!",
        "üíº –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
        "üìû Live –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å AI –∫–∞–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
        "üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Bitrix24 –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ—Ä–æ–Ω–∫–æ–π '–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤'",
        "üì± Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    ]
    
    return DashboardData(
        metrics=metrics,
        recent_activities=recent_activities,
        ai_insights=ai_insights
    )

@api_router.get("/employees")
async def get_employees():
    """Get all employees"""
    # Mock data for demo
    mock_employees = [
        {
            "id": str(uuid.uuid4()),
            "name": "–ú–∞–∫—Å–∏–º –ú–∞—Å–ª–æ–≤",
            "position": "general_director",
            "city": "–ö–∞–ª—É–≥–∞",
            "is_active": True
        },
        {
            "id": str(uuid.uuid4()),
            "name": "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", 
            "position": "cleaning_manager",
            "city": "–ö–∞–ª—É–≥–∞",
            "is_active": True
        },
        {
            "id": str(uuid.uuid4()),
            "name": "–í–∏–∫—Ç–æ—Ä –°–∏–¥–æ—Ä–æ–≤",
            "position": "construction_manager", 
            "city": "–ö–µ–º–µ—Ä–æ–≤–æ",
            "is_active": True
        }
    ]
    return mock_employees

@api_router.post("/ai/chat")
async def ai_chat(message: dict):
    """AI Chat endpoint with mock AI"""
    user_message = message.get("message", "")
    session_id = message.get("session_id", "default")
    
    if not user_message:
        raise HTTPException(status_code=400, detail="Message is required")
    
    # Get AI response
    response = await mock_ai.chat(user_message, session_id)
    return response

@api_router.get("/bitrix24/test")
async def test_bitrix24():
    """Test Bitrix24 connection"""
    webhook_url = os.environ.get('BITRIX24_WEBHOOK_URL')
    
    if not webhook_url:
        return {
            "status": "warning",
            "message": "Bitrix24 webhook URL not configured",
            "webhook_configured": False
        }
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{webhook_url}user.current")
            
            if response.status_code == 200:
                data = response.json()
                return {
                    "status": "success",
                    "message": "Bitrix24 connection successful",
                    "webhook_configured": True,
                    "user_info": data.get("result", {})
                }
            else:
                return {
                    "status": "error", 
                    "message": f"Bitrix24 API error: {response.status_code}",
                    "webhook_configured": True
                }
    except Exception as e:
        return {
            "status": "error",
            "message": f"Connection failed: {str(e)}",
            "webhook_configured": True
        }

@api_router.get("/telegram/bot-info")
async def get_telegram_info():
    """Get Telegram bot info"""
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    
    return {
        "bot_username": "@aitest123432_bot",
        "bot_token_configured": bool(bot_token),
        "status": "ready",
        "features": [
            "ü§ñ AI —á–∞—Ç —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏",
            "üìä –î–∞—à–±–æ—Ä–¥ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏",
            "üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏",
            "üéôÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–µ—Ä–æ–∫ –∏ –≤—Å—Ç—Ä–µ—á",
            "üìù –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏",
            "üè† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º"
        ]
    }

@api_router.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "version": "1.0.0",
        "deployed_on": "Render",
        "services": {
            "api": "running",
            "ai_chat": "active", 
            "bitrix24": "configured",
            "telegram": "ready"
        }
    }

# Include router
app.include_router(api_router)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=["*"],  # Configure for production
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ AI Assistant API started successfully on Render!")
    logger.info("üîó Bitrix24 integration ready")
    logger.info("ü§ñ AI Chat system active")
    logger.info("üì± Telegram bot configured")

@app.on_event("shutdown")
async def shutdown_event():
    if client:
        client.close()
    logger.info("üëã AI Assistant API shutdown complete")

# Root endpoint for testing
@app.get("/")
async def root_endpoint():
    return {
        "message": "ü§ñ AI Assistant –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π",
        "status": "üöÄ Deployed on Render",
        "version": "1.0.0",
        "docs": "/docs",
        "api": "/api",
        "features": {
            "live_voice_chat": "üìû –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –∫–∞–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
            "ai_assistant": "ü§ñ –£–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ú–ê–ö–°",
            "bitrix24": "üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM", 
            "telegram": "üì± Telegram –±–æ—Ç",
            "dashboard": "üìä –ë–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
        }
    }

if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)