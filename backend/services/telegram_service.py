import asyncio
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
import aiohttp
import json
import os
from motor.motor_asyncio import AsyncIOMotorDatabase

logger = logging.getLogger(__name__)

class TelegramService:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Telegram —Å–µ—Ä–≤–∏—Å —Å AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self, db: AsyncIOMotorDatabase):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.webhook_url = os.getenv("TELEGRAM_WEBHOOK_URL")
        self.db = db
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"
        
        # –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏–∑ –∑–∞–¥–∞–Ω–∏—è
        self.leadership_contacts = {
            "89056400212": {"name": "–§–∏–ª–∏–ø–ø–æ–≤ –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–µ–µ–≤–∏—á", "role": "–ê–∫—Ü–∏–æ–Ω–µ—Ä"},
            "89208855883": {"name": "–ß–µ—Ä–∫–∞—Å–æ–≤ –Ø—Ä–æ—Å–ª–∞–≤ –ê—Ä—Ç—É—Ä–æ–≤–∏—á", "role": "–ê–∫—Ü–∏–æ–Ω–µ—Ä"},
            "89200924550": {"name": "–ú–∞—Å–ª–æ–≤ –ú–∞–∫—Å–∏–º –í–∞–ª–µ—Ä—å–µ–≤–∏—á", "role": "–î–∏—Ä–µ–∫—Ç–æ—Ä"},
            "89208701769": {"name": "–ú–∞—Å–ª–æ–≤–∞ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞", "role": "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä"}
        }
        
    async def send_message(self, chat_id: str, text: str, reply_markup: Dict = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            url = f"{self.api_url}/sendMessage"
            
            payload = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML"
            }
            
            if reply_markup:
                payload["reply_markup"] = reply_markup
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload, timeout=30) as response:
                    result = await response.json()
                    
                    if result.get("ok"):
                        return {"status": "success", "message_id": result["result"]["message_id"]}
                    else:
                        logger.error(f"Telegram API error: {result}")
                        return {"status": "error", "error": result.get("description", "Unknown error")}
                        
        except Exception as e:
            logger.error(f"Error sending Telegram message: {str(e)}")
            return {"status": "error", "error": str(e)}
    
    async def send_notification_to_leadership(self, message: str, urgency: str = "normal") -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É"""
        results = []
        
        for phone, contact in self.leadership_contacts.items():
            # –ò—â–µ–º chat_id –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –Ω–∞—à–µ–π –ë–î
            employee = await self.db.employees.find_one({"phone": phone})
            
            if employee and employee.get("telegram_id"):
                icon = "üî•" if urgency == "urgent" else "üìä" if urgency == "important" else "‚ÑπÔ∏è"
                
                formatted_message = f"{icon} <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {contact['name']}</b>\n\n{message}"
                
                result = await self.send_message(employee["telegram_id"], formatted_message)
                results.append({
                    "contact": contact["name"],
                    "phone": phone,
                    "status": result.get("status", "error")
                })
            else:
                results.append({
                    "contact": contact["name"],
                    "phone": phone,
                    "status": "no_telegram_id"
                })
        
        return {"results": results, "total_sent": len([r for r in results if r["status"] == "success"])}
    
    async def create_employee_keyboards(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        keyboards = {
            "director": {
                "inline_keyboard": [
                    [{"text": "üìä –î–∞—à–±–æ—Ä–¥", "callback_data": "dashboard"}],
                    [{"text": "üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", "callback_data": "employees"}, {"text": "üí∞ –§–∏–Ω–∞–Ω—Å—ã", "callback_data": "finances"}],
                    [{"text": "üìã –ó–∞–¥–∞—á–∏", "callback_data": "tasks"}, {"text": "üè¢ –ü—Ä–æ–µ–∫—Ç—ã", "callback_data": "projects"}],
                    [{"text": "ü§ñ AI –ê–Ω–∞–ª–∏–∑", "callback_data": "ai_analysis"}]
                ]
            },
            "manager": {
                "inline_keyboard": [
                    [{"text": "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "callback_data": "my_tasks"}],
                    [{"text": "üë• –ö–æ–º–∞–Ω–¥–∞", "callback_data": "team"}, {"text": "üìä –û—Ç—á–µ—Ç—ã", "callback_data": "reports"}],
                    [{"text": "üöó –ú–∞—Ä—à—Ä—É—Ç—ã", "callback_data": "routes"}],
                    [{"text": "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å AI", "callback_data": "ai_help"}]
                ]
            },
            "employee": {
                "inline_keyboard": [
                    [{"text": "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "callback_data": "my_tasks"}],
                    [{"text": "üìç –û—Ç–º–µ—Ç–∏—Ç—å—Å—è", "callback_data": "check_in"}],
                    [{"text": "üìù –û—Ç—á–µ—Ç", "callback_data": "report"}],
                    [{"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "help"}]
                ]
            }
        }
        
        return keyboards
    
    async def handle_callback_query(self, callback_data: str, user_id: str, message_id: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employee = await self.db.employees.find_one({"telegram_id": user_id})
            
            if not employee:
                await self.send_message(user_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return {"status": "error", "message": "Employee not found"}
            
            response_text = ""
            
            if callback_data == "dashboard":
                response_text = await self._get_dashboard_summary()
            elif callback_data == "employees":
                response_text = await self._get_employees_summary()
            elif callback_data == "finances":
                response_text = await self._get_finances_summary()
            elif callback_data == "my_tasks":
                response_text = await self._get_employee_tasks(employee["id"])
            elif callback_data == "ai_analysis":
                response_text = await self._get_ai_analysis()
            elif callback_data == "check_in":
                response_text = await self._handle_check_in(employee["id"])
            else:
                response_text = f"‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è '{callback_data}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
            
            await self.send_message(user_id, response_text)
            return {"status": "success", "action": callback_data}
            
        except Exception as e:
            logger.error(f"Error handling callback query: {str(e)}")
            return {"status": "error", "error": str(e)}
    
    async def _get_dashboard_summary(self) -> str:
        """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_employees = await self.db.employees.count_documents({"active": True})
            active_projects = await self.db.projects.count_documents({"status": "active"})
            pending_tasks = await self.db.tasks.count_documents({"status": "pending"})
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            latest_suggestions = await self.db.improvements.find(
                {"status": "suggested"}, sort=[("created_at", -1)]
            ).limit(3).to_list(length=None)
            
            text = f"""üìä <b>–î–ê–®–ë–û–†–î –ö–û–ú–ü–ê–ù–ò–ò</b>
            
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {total_employees}
üè¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {active_projects}  
üìã –ó–∞–¥–∞—á –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_tasks}

ü§ñ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>"""
            
            for suggestion in latest_suggestions:
                text += f"\n‚Ä¢ {suggestion.get('title', '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')} (–í–ª–∏—è–Ω–∏–µ: {suggestion.get('impact_score', 0)}/10)"
            
            if not latest_suggestions:
                text += "\n‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
                
            text += f"\n\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.utcnow().strftime('%H:%M %d.%m.%Y')}"
            
            return text
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}"
    
    async def _get_employees_summary(self) -> str:
        """–°–≤–æ–¥–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"""
        try:
            employees = await self.db.employees.find({"active": True}).to_list(length=None)
            
            departments = {}
            for emp in employees:
                dept = emp.get("department", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                if dept not in departments:
                    departments[dept] = []
                departments[dept].append(emp)
            
            text = "üë• <b>–°–û–¢–†–£–î–ù–ò–ö–ò –ü–û –û–¢–î–ï–õ–ê–ú</b>\n\n"
            
            for dept, emps in departments.items():
                text += f"<b>{dept}</b> ({len(emps)} —á–µ–ª.):\n"
                for emp in emps[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
                    score_icon = "üü¢" if emp.get("performance_score", 0) >= 7 else "üü°" if emp.get("performance_score", 0) >= 5 else "üî¥"
                    text += f"  {score_icon} {emp['full_name']} ({emp.get('role', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')})\n"
                
                if len(emps) > 5:
                    text += f"  ... –∏ –µ—â–µ {len(emps) - 5} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
                text += "\n"
            
            return text
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {str(e)}"
    
    async def _get_finances_summary(self) -> str:
        """–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞"""
        try:
            # –î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü
            month_start = datetime.utcnow().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
            
            pipeline = [
                {"$match": {"date": {"$gte": month_start}}},
                {"$group": {
                    "_id": "$category",
                    "total": {"$sum": "$amount"},
                    "count": {"$sum": 1}
                }}
            ]
            
            cursor = self.db.finance_entries.aggregate(pipeline)
            results = await cursor.to_list(length=None)
            
            revenue = next((r["total"] for r in results if r["_id"] == "revenue"), 0)
            expenses = next((r["total"] for r in results if r["_id"] == "expense"), 0)
            profit = revenue - expenses
            
            text = f"""üí∞ <b>–§–ò–ù–ê–ù–°–´ –ó–ê –ú–ï–°–Ø–¶</b>

üìà –î–æ—Ö–æ–¥—ã: {revenue:,.0f} ‚ÇΩ
üìâ –†–∞—Å—Ö–æ–¥—ã: {expenses:,.0f} ‚ÇΩ
üí∞ –ü—Ä–∏–±—ã–ª—å: {profit:,.0f} ‚ÇΩ

üìä –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: {(profit/max(revenue, 1)*100):,.1f}%"""
            
            return text
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
    
    async def _get_employee_tasks(self, employee_id: str) -> str:
        """–ó–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        try:
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            tasks = await self.db.tasks.find({
                "assignee_id": employee_id,
                "status": {"$in": ["pending", "in_progress"]}
            }, sort=[("due_date", 1)]).to_list(length=None)
            
            if not tasks:
                return "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."
            
            text = f"üìã <b>–í–ê–®–ò –ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ß–ò ({len(tasks)})</b>\n\n"
            
            for i, task in enumerate(tasks[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                priority_icon = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}.get(task.get("priority", "medium"), "üü°")
                status_icon = {"pending": "‚è≥", "in_progress": "üîÑ"}.get(task.get("status", "pending"), "‚è≥")
                
                due_date = ""
                if task.get("due_date"):
                    due_date = f" (–¥–æ {task['due_date'].strftime('%d.%m')})"
                
                text += f"{i}. {priority_icon}{status_icon} {task['title']}{due_date}\n"
            
            if len(tasks) > 10:
                text += f"\n... –∏ –µ—â–µ {len(tasks) - 10} –∑–∞–¥–∞—á"
            
            return text
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {str(e)}"
    
    async def _get_ai_analysis(self) -> str:
        """–ü–æ—Å–ª–µ–¥–Ω–∏–π AI –∞–Ω–∞–ª–∏–∑"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑
            analysis = await self.db.system_learning.find_one(
                {"event_type": "performance_analysis"},
                sort=[("created_at", -1)]
            )
            
            if not analysis:
                return "ü§ñ AI –∞–Ω–∞–ª–∏–∑ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è. –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç."
            
            performance = analysis.get("performance_data", {})
            health = performance.get("overall_health", "unknown")
            
            health_emoji = {
                "excellent": "üü¢",
                "good": "üü°", 
                "fair": "üü†",
                "poor": "üî¥"
            }.get(health, "‚ö™")
            
            text = f"""ü§ñ <b>AI –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´</b>

{health_emoji} –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {health.upper()}

üìä –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á: {performance.get('tasks', {}).get('completion_rate', 0)*100:.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {performance.get('employees', {}).get('average_performance', 0):.1f}/10
‚Ä¢ –û—à–∏–±–æ–∫ –∑–∞ –¥–µ–Ω—å: {performance.get('system_errors', {}).get('total_errors', 0)}

‚è∞ –ê–Ω–∞–ª–∏–∑ –æ—Ç: {analysis['created_at'].strftime('%H:%M %d.%m.%Y')}"""
            
            return text
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
    
    async def _handle_check_in(self, employee_id: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ –ø—Ä–∏–±—ã—Ç–∏–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —á–µ–∫-–∏–Ω–µ
            checkin = {
                "id": f"checkin_{datetime.utcnow().timestamp()}",
                "employee_id": employee_id,
                "timestamp": datetime.utcnow(),
                "type": "check_in",
                "location": "telegram",  # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å GPS
                "created_at": datetime.utcnow()
            }
            
            await self.db.employee_checkins.insert_one(checkin)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            await self.db.employees.update_one(
                {"id": employee_id},
                {"$set": {"last_activity": datetime.utcnow()}}
            )
            
            return f"‚úÖ –û—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!\n‚è∞ –í—Ä–µ–º—è: {datetime.utcnow().strftime('%H:%M %d.%m.%Y')}"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ: {str(e)}"
    
    async def process_voice_message(self, voice_data: Dict, user_id: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º —Ä–µ—á–∏
        return "üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."
    
    async def set_webhook(self) -> Dict[str, Any]:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞"""
        try:
            url = f"{self.api_url}/setWebhook"
            payload = {"url": self.webhook_url}
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload) as response:
                    result = await response.json()
                    return result
                    
        except Exception as e:
            return {"ok": False, "error": str(e)}