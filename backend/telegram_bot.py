import asyncio
import json
from typing import Dict, Any, Optional
from loguru import logger
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.types import Update, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError

class TelegramBotService:
    """Telegram Bot Service with AI integration"""
    
    def __init__(self, token: str, webhook_url: str, ai_service, bitrix24_service):
        self.token = token
        self.webhook_url = webhook_url
        self.ai_service = ai_service
        self.bitrix24_service = bitrix24_service
        
        self.bot = Bot(token=token) if token else None
        self.dp = Dispatcher() if token else None
        
        # User sessions storage (in production use Redis/DB)
        self.user_sessions = {}
        
        if not token:
            logger.warning("‚ö†Ô∏è Telegram bot token not provided")
        else:
            logger.info("‚úÖ Telegram bot service initialized")
    
    async def setup(self):
        """Setup bot and webhook"""
        if not self.bot:
            return
        
        try:
            # Get bot info
            bot_info = await self.bot.get_me()
            logger.info(f"ü§ñ Bot info: @{bot_info.username} ({bot_info.first_name})")
            
            # Set webhook if URL provided
            if self.webhook_url:
                await self.set_webhook()
            
        except Exception as e:
            logger.error(f"‚ùå Bot setup error: {e}")
    
    async def set_webhook(self) -> Dict[str, Any]:
        """Set Telegram webhook"""
        if not self.bot or not self.webhook_url:
            return {"error": "Bot or webhook URL not configured"}
        
        try:
            webhook_info = await self.bot.get_webhook_info()
            logger.info(f"Current webhook: {webhook_info.url}")
            
            if webhook_info.url != self.webhook_url:
                success = await self.bot.set_webhook(url=self.webhook_url)
                logger.info(f"‚úÖ Webhook set to: {self.webhook_url}")
                return {"status": "webhook_set", "url": self.webhook_url}
            else:
                return {"status": "webhook_already_set", "url": self.webhook_url}
                
        except Exception as e:
            logger.error(f"‚ùå Webhook setup error: {e}")
            return {"error": str(e)}
    
    async def handle_webhook(self, update_data: Dict[str, Any]):
        """Handle incoming webhook update"""
        if not self.bot:
            return
        
        try:
            # Create Update object
            update = Update(**update_data)
            
            # Process the update
            if update.message:
                await self.handle_message(update.message)
            elif update.callback_query:
                await self.handle_callback_query(update.callback_query)
            else:
                logger.info(f"üì® Unhandled update type: {type(update)}")
                
        except Exception as e:
            logger.error(f"‚ùå Webhook handling error: {e}")
    
    async def handle_message(self, message: Message):
        """Handle incoming message"""
        user_id = message.from_user.id
        user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        text = message.text or ""
        
        logger.info(f"üì• Message from {user_name} (ID: {user_id}): {text}")
        
        # Update user session
        self.user_sessions[user_id] = {
            "name": user_name,
            "username": message.from_user.username,
            "last_message": text,
            "message_count": self.user_sessions.get(user_id, {}).get("message_count", 0) + 1
        }
        
        try:
            # Handle special commands
            if text.startswith("/start"):
                await self.send_welcome_message(message)
                return
            elif text.startswith("/help"):
                await self.send_help_message(message)
                return
            elif text.startswith("/menu"):
                await self.send_menu(message)
                return
            
            # Generate AI response
            user_data = self.user_sessions.get(user_id, {})
            response = await self.ai_service.generate_smart_reply(text, user_data)
            
            # Analyze user intent
            intent_data = await self.ai_service.analyze_user_intent(text)
            
            # Send response with appropriate keyboard
            keyboard = self.get_response_keyboard(intent_data.get("intent", "other"))
            
            await self.bot.send_message(
                chat_id=user_id,
                text=response,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            # Log interaction
            logger.info(f"üì§ Response sent to {user_name}: {len(response)} chars")
            
        except Exception as e:
            logger.error(f"‚ùå Message handling error: {e}")
            await self.bot.send_message(
                chat_id=user_id,
                text="ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
            )
    
    async def send_welcome_message(self, message: Message):
        """Send welcome message"""
        user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        welcome_text = f"""üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–∞—Å–î–æ–º, {user_name}!

–Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å:
‚Ä¢ üßπ –ó–∞–∫–∞–∑–æ–º —É–±–æ—Ä–∫–∏ –ø–æ–¥—ä–µ–∑–¥–æ–≤
‚Ä¢ üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–∞—Ö
‚Ä¢ üìã –í–æ–ø—Ä–æ—Å–∞–º–∏ –æ–± —É—Å–ª—É–≥–∞—Ö
‚Ä¢ üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üßπ –ó–∞–∫–∞–∑–∞—Ç—å —É–±–æ—Ä–∫—É", callback_data="order_cleaning")],
            [InlineKeyboardButton(text="üí∞ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã", callback_data="get_prices")],
            [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")]
        ])
        
        await self.bot.send_message(
            chat_id=message.chat.id,
            text=welcome_text,
            reply_markup=keyboard
        )
    
    async def send_help_message(self, message: Message):
        """Send help message"""
        help_text = """‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± —É—Å–ª—É–≥–∞—Ö –í–∞—Å–î–æ–º
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –∑–∞–∫–∞–∑–æ–º —É–±–æ—Ä–∫–∏
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö
‚Ä¢ –°–≤—è–∑—ã–≤–∞—Ç—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏

<b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!</b> ü§ñ"""
        
        await self.bot.send_message(
            chat_id=message.chat.id,
            text=help_text,
            parse_mode="HTML"
        )
    
    async def send_menu(self, message: Message):
        """Send main menu"""
        menu_text = "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –í–∞—Å–î–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —É—Å–ª—É–≥—É:"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üßπ –£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤", callback_data="cleaning_service")],
            [InlineKeyboardButton(text="üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é", callback_data="property_management")],
            [InlineKeyboardButton(text="üí∞ –¶–µ–Ω—ã –∏ —Ç–∞—Ä–∏—Ñ—ã", callback_data="pricing")],
            [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="about")]
        ])
        
        await self.bot.send_message(
            chat_id=message.chat.id,
            text=menu_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    def get_response_keyboard(self, intent: str) -> Optional[InlineKeyboardMarkup]:
        """Get appropriate keyboard based on user intent"""
        keyboards = {
            "cleaning_request": InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")],
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            "price_inquiry": InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üßπ –ó–∞–∫–∞–∑–∞—Ç—å —É–±–æ—Ä–∫—É", callback_data="order_cleaning")],
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            "support_request": InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")]
            ])
        }
        
        return keyboards.get(intent)
    
    async def handle_callback_query(self, callback_query: types.CallbackQuery):
        """Handle callback query from inline keyboard"""
        user_id = callback_query.from_user.id
        data = callback_query.data
        
        logger.info(f"üì± Callback from user {user_id}: {data}")
        
        try:
            await callback_query.answer()  # Acknowledge the callback
            
            # Handle different callback actions
            if data == "order_cleaning":
                await self.handle_order_cleaning(callback_query)
            elif data == "get_prices":
                await self.handle_get_prices(callback_query)
            elif data == "contact_manager":
                await self.handle_contact_manager(callback_query)
            elif data == "main_menu":
                await self.send_menu_from_callback(callback_query)
            else:
                # Generate AI response for other callbacks
                response = await self.ai_service.generate_response(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {data}")
                await self.bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=response
                )
                
        except Exception as e:
            logger.error(f"‚ùå Callback handling error: {e}")
    
    async def handle_order_cleaning(self, callback_query: types.CallbackQuery):
        """Handle cleaning order callback"""
        text = """üßπ <b>–ó–∞–∫–∞–∑ —É–±–æ—Ä–∫–∏ –ø–æ–¥—ä–µ–∑–¥–æ–≤</b>

–î–ª—è –∑–∞–∫–∞–∑–∞ —É–±–æ—Ä–∫–∏ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:
‚Ä¢ üìç –ê–¥—Ä–µ—Å –ø–æ–¥—ä–µ–∑–¥–∞
‚Ä¢ üìÖ –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞
‚Ä¢ üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω

–ù–∞–ø–∏—à–∏—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏ —è —Å–≤—è–∂—É –≤–∞—Å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")]
        ])
        
        await self.bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    async def handle_get_prices(self, callback_query: types.CallbackQuery):
        """Handle price inquiry callback"""
        text = """üí∞ <b>–¶–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏ –í–∞—Å–î–æ–º</b>

<b>–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤:</b>
‚Ä¢ –†–∞–∑–æ–≤–∞—è —É–±–æ—Ä–∫–∞: –æ—Ç 2000‚ÇΩ
‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: –æ—Ç 1500‚ÇΩ/–º–µ—Å
‚Ä¢ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞: –æ—Ç 3000‚ÇΩ

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é:</b>
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: –æ—Ç 1000‚ÇΩ
‚Ä¢ –ü–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ: –æ—Ç 5000‚ÇΩ/–º–µ—Å

<i>–¢–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—ä–µ–º–∞ —Ä–∞–±–æ—Ç –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏.</i>"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üßπ –ó–∞–∫–∞–∑–∞—Ç—å —É–±–æ—Ä–∫—É", callback_data="order_cleaning")],
            [InlineKeyboardButton(text="üìû –£—Ç–æ—á–Ω–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="contact_manager")]
        ])
        
        await self.bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    async def handle_contact_manager(self, callback_query: types.CallbackQuery):
        """Handle contact manager callback"""
        text = """üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –í–∞—Å–î–æ–º</b>

<b>–ú–∞–∫—Å–∏–º –ú–∞—Å–ª–æ–≤</b>
üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX
üìß Email: info@vas-dom.ru

<b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b>
–ü–Ω-–ü—Ç: 9:00 - 18:00
–°–±: 10:00 - 16:00
–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π

–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞."""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await self.bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    async def send_menu_from_callback(self, callback_query: types.CallbackQuery):
        """Send main menu from callback"""
        menu_text = "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –í–∞—Å–î–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —É—Å–ª—É–≥—É:"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üßπ –£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤", callback_data="cleaning_service")],
            [InlineKeyboardButton(text="üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é", callback_data="property_management")],
            [InlineKeyboardButton(text="üí∞ –¶–µ–Ω—ã –∏ —Ç–∞—Ä–∏—Ñ—ã", callback_data="pricing")],
            [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
        ])
        
        await self.bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=menu_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    async def get_status(self) -> Dict[str, Any]:
        """Get bot status"""
        if not self.bot:
            return {"status": "not_configured"}
        
        try:
            bot_info = await self.bot.get_me()
            webhook_info = await self.bot.get_webhook_info()
            
            return {
                "status": "active",
                "bot_username": bot_info.username,
                "bot_name": bot_info.first_name,
                "webhook_url": webhook_info.url,
                "pending_updates": webhook_info.pending_update_count,
                "active_sessions": len(self.user_sessions)
            }
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    async def cleanup(self):
        """Cleanup resources"""
        if self.bot:
            await self.bot.session.close()
            logger.info("üõë Telegram bot session closed")