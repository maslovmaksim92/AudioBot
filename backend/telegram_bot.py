import os
import asyncio
import logging
from typing import Dict, Any
from datetime import datetime
import json

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from ai_service import ai_assistant
from bitrix24_service import get_bitrix24_service
from voice_service import generate_voice_message, make_text_conversational

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot configuration
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN not found in environment variables")

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# States for conversation
class ConversationState(StatesGroup):
    waiting_for_feedback = State()
    waiting_for_meeting_transcript = State()
    waiting_for_deal_info = State()
    onboarding_name = State()
    onboarding_role = State()
    onboarding_experience = State()
    onboarding_priorities = State()
    onboarding_schedule = State()

# Create main menu keyboard
def get_main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –î–∞—à–±–æ—Ä–¥"), KeyboardButton(text="üè† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–æ–≤")],
            [KeyboardButton(text="üíº –°–¥–µ–ª–∫–∏ Bitrix24"), KeyboardButton(text="üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")],
            [KeyboardButton(text="üéôÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–µ—Ä–∫–∏"), KeyboardButton(text="üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")],
            [KeyboardButton(text="ü§ñ AI –ü–æ–º–æ—â—å"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )
    return keyboard

# Inline keyboard for feedback
def get_feedback_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ", callback_data="suggest_improvement")],
            [InlineKeyboardButton(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="rate_work")],
            [InlineKeyboardButton(text="üêõ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data="report_issue")]
        ]
    )
    return keyboard

# User profiles storage (in production, use database)
user_profiles = {}

# Start command handler with proactive onboarding
@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–∫–æ–ª–ª–µ–≥–∞"
    
    # Check if user is already onboarded
    if user_id in user_profiles:
        profile = user_profiles[user_id]
        welcome_text = f"""
üëã **–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {profile.get('name', user_name)}!**

–Ø –ú–ê–ö–° - –≤–∞—à AI-–¥–∏—Ä–µ–∫—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –í–∞—Å–î–æ–º.

üìä **–ë—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: –ø—Ä–æ–≤–µ—Ä—è—é...
‚Ä¢ –ö–æ–º–∞–Ω–¥–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã: –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ

**–ß—Ç–æ –æ–±—Å—É–¥–∏–º —Å–µ–≥–æ–¥–Ω—è?** –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ.
"""
        await message.answer(welcome_text, reply_markup=get_main_menu(), parse_mode="Markdown")
        
        # Send proactive daily insights
        await send_daily_insights(message.chat.id)
    else:
        # Start onboarding for new user
        await start_onboarding(message, state)

async def start_onboarding(message: types.Message, state: FSMContext):
    """Start proactive onboarding process"""
    await state.set_state(ConversationState.onboarding_name)
    
    welcome_text = f"""
üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –í–∞—Å–î–æ–º!**

–Ø –ú–ê–ö–° - –≤–∞—à AI-–¥–∏—Ä–µ–∫—Ç–æ—Ä –∏ –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–∏–∑–Ω–µ—Å–æ–º.

–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã:
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã  
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∑–∞—Ä–∞–Ω–µ–µ
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è

**–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ.**

–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏.

*–ù–∞–ø—Ä–∏–º–µ—Ä: "–ú–∞–∫—Å–∏–º –ú–∞—Å–ª–æ–≤, –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä"*
"""
    
    await message.answer(welcome_text, parse_mode="Markdown")

# Dashboard handler
@dp.message(F.text == "üìä –î–∞—à–±–æ—Ä–¥")
async def dashboard_handler(message: types.Message):
    try:
        # Get Bitrix24 service
        bx24 = await get_bitrix24_service()
        stats = await bx24.get_cleaning_statistics()
        
        dashboard_text = f"""
üìä **–î–ê–®–ë–û–†–î –ö–û–ú–ü–ê–ù–ò–ò**

**Bitrix24 –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üî∏ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats.get('total_deals', 0)}
üî∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {stats.get('total_contacts', 0)} 
üî∏ –ö–æ–º–ø–∞–Ω–∏–∏: {stats.get('total_companies', 0)}

**–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –±–∏–∑–Ω–µ—Å–∞:**
üè† –ö–∞–ª—É–≥–∞: {stats.get('kaluga_properties', 0)} –æ–±—ä–µ–∫—Ç–æ–≤
üèòÔ∏è –ö–µ–º–µ—Ä–æ–≤–æ: {stats.get('kemerovo_properties', 0)} –æ–±—ä–µ–∫—Ç–æ–≤
üìç –í—Å–µ–≥–æ: {stats.get('kaluga_properties', 0) + stats.get('kemerovo_properties', 0)} –æ–±—ä–µ–∫—Ç–æ–≤

‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M %d.%m.%Y')}
"""
        
        await message.answer(dashboard_text, parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# Houses statistics handler with real cleaning houses data
@dp.message(F.text == "üè† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–æ–≤")
async def houses_stats_handler(message: types.Message):
    try:
        bx24 = await get_bitrix24_service()
        
        # Get real cleaning houses from funnel
        cleaning_houses = await bx24.get_cleaning_houses_deals()
        
        kaluga_count = 0
        kemerovo_count = 0
        active_count = 0
        total_value = 0
        
        # Analyze cleaning houses
        for house in cleaning_houses:
            title = house.get("TITLE", "").lower()
            stage_id = house.get("STAGE_ID", "")
            opportunity = float(house.get("OPPORTUNITY", 0))
            
            total_value += opportunity
            
            # Count by city
            if "–∫–∞–ª—É–≥–∞" in title:
                kaluga_count += 1
            elif "–∫–µ–º–µ—Ä–æ–≤–æ" in title:
                kemerovo_count += 1
            
            # Count active houses (not won/lost)
            if "WON" not in stage_id and "LOSE" not in stage_id:
                active_count += 1
        
        houses_text = f"""
üè† **–†–ï–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û–ú–û–í**

**üìä –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–º–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ: {len(cleaning_houses)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {active_count}
‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {total_value:,.0f} ‚ÇΩ

**üåç –ü–æ –≥–æ—Ä–æ–¥–∞–º:**
üî∏ –ö–∞–ª—É–≥–∞: {kaluga_count} –¥–æ–º–æ–≤
üî∏ –ö–µ–º–µ—Ä–æ–≤–æ: {kemerovo_count} –¥–æ–º–æ–≤
üî∏ –î—Ä—É–≥–∏–µ: {len(cleaning_houses) - kaluga_count - kemerovo_count} –¥–æ–º–æ–≤

**üí∞ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {total_value/max(len(cleaning_houses), 1):,.0f} ‚ÇΩ –∑–∞ –æ–±—ä–µ–∫—Ç

**üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {((len(cleaning_houses) - active_count)/max(len(cleaning_houses), 1)*100):,.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {total_value/max(len(cleaning_houses), 1):,.0f} ‚ÇΩ

üéØ *–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ "–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤" –≤ Bitrix24*
"""
        
        # Add task creation button for directors
        user_id = message.from_user.id
        profile = user_profiles.get(user_id, {})
        if "–¥–∏—Ä–µ–∫—Ç–æ—Ä" in profile.get("role", "").lower():
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ø–æ –¥–æ–º–∞–º", callback_data="create_houses_task")],
                    [InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="detailed_houses_analysis")]
                ]
            )
            await message.answer(houses_text, reply_markup=keyboard, parse_mode="Markdown")
        else:
            await message.answer(houses_text, parse_mode="Markdown")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# Bitrix24 deals handler
@dp.message(F.text == "üíº –°–¥–µ–ª–∫–∏ Bitrix24")
async def deals_handler(message: types.Message):
    try:
        bx24 = await get_bitrix24_service()
        deals = await bx24.get_deals()
        
        if not deals:
            await message.answer("üìã –°–¥–µ–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É –≤ Bitrix24!")
            return
        
        deals_text = f"üíº **–ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò** (–≤—Å–µ–≥–æ: {len(deals)})\n\n"
        
        # Show last 5 deals
        for i, deal in enumerate(deals[:5]):
            title = deal.get("TITLE", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")[:50]
            deal_id = deal.get("ID")
            stage = deal.get("STAGE_ID", "")
            
            deals_text += f"üî∏ **#{deal_id}**: {title}\n"
            if len(title) > 47:
                deals_text += "...\n"
        
        if len(deals) > 5:
            deals_text += f"\n‚ûï –ò –µ—â—ë {len(deals) - 5} —Å–¥–µ–ª–æ–∫ –≤ Bitrix24"
        
        await message.answer(deals_text, parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# Meeting analysis handler
@dp.message(F.text == "üéôÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–µ—Ä–∫–∏")
async def meeting_analysis_handler(message: types.Message, state: FSMContext):
    await state.set_state(ConversationState.waiting_for_meeting_transcript)
    
    instruction_text = """
üéôÔ∏è **–ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–ï–†–ö–ò**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:
üó£Ô∏è **–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ** —Å –∑–∞–ø–∏—Å—å—é –ø–ª–∞–Ω–µ—Ä–∫–∏
üìù **–¢–µ–∫—Å—Ç** —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º –≤—Å—Ç—Ä–µ—á–∏

–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –≤—ã–¥–µ–ª—é:
‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
‚úÖ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏  
‚úÖ –í–∞–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
‚úÖ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

**–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–ø–∏—Å—å!** üéØ
"""
    
    await message.answer(instruction_text, parse_mode="Markdown")

# Handle meeting transcript (voice or text)
@dp.message(StateFilter(ConversationState.waiting_for_meeting_transcript))
async def process_meeting_transcript(message: types.Message, state: FSMContext):
    try:
        transcript_text = ""
        
        if message.voice:
            # TODO: Implement voice to text conversion
            await message.answer("üéôÔ∏è –ü–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! (–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            transcript_text = "–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ..."
        elif message.text:
            transcript_text = message.text
        else:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–ª–∞–Ω–µ—Ä–∫—É —Å –ø–æ–º–æ—â—å—é AI...")
        
        # Analyze with AI
        analysis = await ai_assistant.analyze_meeting_transcript(transcript_text)
        
        result_text = f"""
üìù **–ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–ï–†–ö–ò**

{analysis.get('summary', '–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω')}

‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%H:%M %d.%m.%Y')}
"""
        
        await message.answer(result_text, parse_mode="Markdown")
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        await state.clear()

# Feedback handler
@dp.message(F.text == "üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def feedback_handler(message: types.Message):
    feedback_text = """
üìù **–û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨**

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã! 

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:
"""
    
    await message.answer(feedback_text, reply_markup=get_feedback_keyboard(), parse_mode="Markdown")

# Feedback callback handlers
@dp.callback_query(F.data == "suggest_improvement")
async def suggest_improvement_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ConversationState.waiting_for_feedback)
    await callback.message.answer("üí° –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã:")

@dp.callback_query(F.data == "rate_work")
async def rate_work_handler(callback: types.CallbackQuery):
    rating_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚≠ê", callback_data="rate_1"),
             InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data="rate_2"),
             InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data="rate_3")],
            [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_4"),
             InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_5")]
        ]
    )
    await callback.message.answer("‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã:", reply_markup=rating_keyboard)

# Rating handlers
@dp.callback_query(F.data.startswith("rate_"))
async def rating_handler(callback: types.CallbackQuery):
    rating = callback.data.split("_")[1]
    await callback.message.answer(f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating}/5! –í–∞—à –æ—Ç–∑—ã–≤ —É—á—Ç–µ–Ω.")

# AI Help handler
@dp.message(F.text == "ü§ñ AI –ü–æ–º–æ—â—å")
async def ai_help_handler(message: types.Message):
    help_text = """
ü§ñ **AI –ü–û–ú–û–©–¨**

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å! –Ø –º–æ–≥—É:

üî∏ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-—Å–∏—Ç—É–∞—Ü–∏—é
üî∏ –î–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é
üî∏ –ü–æ–º–æ—á—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç
üî∏ –û–±—ä—è—Å–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Bitrix24
üî∏ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å?"
‚Ä¢ "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
‚Ä¢ "–ö–∞–∫–∏–µ –¥–æ–º–∞ –Ω—É–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?"

**–ü–∏—à–∏—Ç–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ - —è —É–º–Ω—ã–π! üß†**
"""
    
    await message.answer(help_text, parse_mode="Markdown")

# Onboarding handlers
@dp.message(StateFilter(ConversationState.onboarding_name))
async def process_onboarding_name(message: types.Message, state: FSMContext):
    name_and_role = message.text
    await state.update_data(name_and_role=name_and_role)
    
    await state.set_state(ConversationState.onboarding_experience)
    
    response = f"""
‚úÖ **–ü–æ–Ω—è–ª: {name_and_role}**

–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –≤ –í–∞—Å–î–æ–º:

‚Ä¢ –°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π —Å—Ñ–µ—Ä–µ?
‚Ä¢ –ó–∞ –∫–∞–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç–µ? (–ö–∞–ª—É–≥–∞, –ö–µ–º–µ—Ä–æ–≤–æ, –æ–±—â–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
‚Ä¢ –ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–∞–µ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ?

*–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –æ—Ç—á–µ—Ç—ã.*
"""
    
    await message.answer(response, parse_mode="Markdown")

@dp.message(StateFilter(ConversationState.onboarding_experience))
async def process_onboarding_experience(message: types.Message, state: FSMContext):
    experience = message.text
    await state.update_data(experience=experience)
    
    await state.set_state(ConversationState.onboarding_priorities)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", callback_data="priority_finance")],
            [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º", callback_data="priority_hr")],
            [InlineKeyboardButton(text="üìà –†–æ—Å—Ç –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ", callback_data="priority_growth")],
            [InlineKeyboardButton(text="üè† –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="priority_operations")],
            [InlineKeyboardButton(text="üìã –í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="priority_all")]
        ]
    )
    
    response = """
üìä **–ö–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤–∞—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã?**

–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—è:
"""
    
    await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query(F.data.startswith("priority_"))
async def process_onboarding_priority(callback: types.CallbackQuery, state: FSMContext):
    priority = callback.data.replace("priority_", "")
    await state.update_data(priority=priority)
    
    await state.set_state(ConversationState.onboarding_schedule)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üåÖ –£—Ç—Ä–æ–º (8:00)", callback_data="schedule_morning")],
            [InlineKeyboardButton(text="üåá –í–µ—á–µ—Ä–æ–º (18:00)", callback_data="schedule_evening")],
            [InlineKeyboardButton(text="üìä –ü–æ –∑–∞–ø—Ä–æ—Å—É", callback_data="schedule_ondemand")],
            [InlineKeyboardButton(text="üö® –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω–æ–µ", callback_data="schedule_critical")]
        ]
    )
    
    response = """
‚è∞ **–ö–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏?**

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:
"""
    
    await callback.message.answer(response, reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query(F.data.startswith("schedule_"))
async def complete_onboarding(callback: types.CallbackQuery, state: FSMContext):
    schedule = callback.data.replace("schedule_", "")
    user_data = await state.get_data()
    
    user_id = callback.from_user.id
    user_profiles[user_id] = {
        "name": user_data.get("name_and_role", "").split(",")[0].strip(),
        "role": user_data.get("name_and_role", ""),
        "experience": user_data.get("experience", ""),
        "priority": schedule,
        "schedule": schedule,
        "onboarded_at": datetime.now().isoformat()
    }
    
    await state.clear()
    
    # Personalized welcome based on role
    profile = user_profiles[user_id]
    role_lower = profile["role"].lower()
    
    if "–¥–∏—Ä–µ–∫—Ç–æ—Ä" in role_lower or "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å" in role_lower:
        director_welcome = f"""
üéØ **–û—Ç–ª–∏—á–Ω–æ, {profile['name']}!**

–¢–µ–ø–µ—Ä—å —è –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–¥–∏—Ä–µ–∫—Ç–æ—Ä. –ë—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞:

üìä **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏:** –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏, –ø—Ä–æ–±–ª–µ–º—ã, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
üö® **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã:** –ø–∞–¥–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π, —Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏  
üí° **–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã:** —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –±–∏–∑–Ω–µ—Å–∞
üìà **–ü—Ä–æ–≥–Ω–æ–∑—ã:** –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Bitrix24

**–ü–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤–ª—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å...**
"""
        await callback.message.answer(director_welcome, reply_markup=get_main_menu(), parse_mode="Markdown")
        
        # Send immediate business overview
        await send_director_briefing(callback.message.chat.id, profile)
        
    else:
        manager_welcome = f"""
‚úÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {profile['name']}!**

–Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º —Å:
‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –≤–∞—à–∏—Ö –∑–∞–¥–∞—á –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
‚Ä¢ –û—Ç—á–µ—Ç–∞–º–∏ –ø–æ –≤–∞—à–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é  
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
‚Ä¢ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —Ä–∞–±–æ—á–∏–µ –≤–æ–ø—Ä–æ—Å—ã

**–ù–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—É! –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?**
"""
        await callback.message.answer(manager_welcome, reply_markup=get_main_menu(), parse_mode="Markdown")

# Proactive daily insights
async def send_daily_insights(chat_id: int):
    """Send proactive daily business insights"""
    try:
        from bitrix24_service import get_bitrix24_service
        
        bx24 = await get_bitrix24_service()
        deals = await bx24.get_deals()
        
        insights = [
            f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len([d for d in deals if 'WON' not in d.get('STAGE_ID', '')])}",
            f"üí∞ –í —Ä–∞–±–æ—Ç–µ: {sum(float(d.get('OPPORTUNITY', 0)) for d in deals):,.0f} ‚ÇΩ",
            "üéØ –°–µ–≥–æ–¥–Ω—è —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é –≤ –ö–µ–º–µ—Ä–æ–≤–æ"
        ]
        
        insight_text = "üìà **–ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n" + "\n".join(insights)
        await bot.send_message(chat_id, insight_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error sending daily insights: {e}")

async def send_director_briefing(chat_id: int, profile: dict):
    """Send comprehensive briefing for directors"""
    try:
        from bitrix24_service import get_bitrix24_service
        from analytics_service import get_performance_metrics
        
        # Get real data
        bx24 = await get_bitrix24_service()
        deals = await bx24.get_deals()
        metrics = await get_performance_metrics()
        
        won_deals = [d for d in deals if 'WON' in d.get('STAGE_ID', '')]
        active_deals = [d for d in deals if 'WON' not in d.get('STAGE_ID', '') and 'LOSE' not in d.get('STAGE_ID', '')]
        
        briefing = f"""
üìã **–£–ü–†–ê–í–õ–ï–ù–ß–ï–°–ö–ê–Ø –°–í–û–î–ö–ê –î–õ–Ø {profile['name'].upper()}**

üéØ **–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:**
‚Ä¢ –í—ã—Ä—É—á–∫–∞ –ø–ª–∞–Ω/—Ñ–∞–∫—Ç: {metrics.get('sales_metrics', {}).get('conversion_rate', 0)}% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(active_deals)} –Ω–∞ —Å—É–º–º—É {sum(float(d.get('OPPORTUNITY', 0)) for d in active_deals):,.0f} ‚ÇΩ
‚Ä¢ –ö–æ–º–∞–Ω–¥–∞: {metrics.get('operational_metrics', {}).get('total_employees', 100)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ

‚ö†Ô∏è **–¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø:**
‚Ä¢ –°–¥–µ–ª–∫–∏ –±–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è: {len([d for d in deals if not d.get('DATE_MODIFY')])} —à—Ç—É–∫
‚Ä¢ –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ö–µ–º–µ—Ä–æ–≤–æ: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
‚Ä¢ –ü–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü: –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ {metrics.get('growth_metrics', {}).get('revenue_target_achievement', 85)}%

üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ù–ê –°–ï–ì–û–î–ù–Ø:**
1. –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–ª–∞–Ω–µ—Ä–∫—É —Å –∫–æ–º–∞–Ω–¥–æ–π –ö–µ–º–µ—Ä–æ–≤–æ
2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ —Å–¥–µ–ª–∫–∏ –≤ Bitrix24
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ KPI –∑–∞ –Ω–µ–¥–µ–ª—é

**–ù—É–∂–Ω–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ª—é–±–æ–º—É –ø—É–Ω–∫—Ç—É?** –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è.
"""
        
        await bot.send_message(chat_id, briefing, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error sending director briefing: {e}")

# Handle any text message as AI chat with director tone
@dp.message(F.text & ~F.text.in_(["üìä –î–∞—à–±–æ—Ä–¥", "üè† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–æ–≤", "üíº –°–¥–µ–ª–∫–∏ Bitrix24", 
                                 "üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", "üéôÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–µ—Ä–∫–∏", "üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", 
                                 "ü§ñ AI –ü–æ–º–æ—â—å", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]))
async def ai_chat_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        user_message = message.text
        
        # Get user profile for context
        profile = user_profiles.get(user_id, {})
        user_name = profile.get("name", message.from_user.first_name or "–∫–æ–ª–ª–µ–≥–∞")
        user_role = profile.get("role", "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫")
        
        # Director-style context
        if "–¥–∏—Ä–µ–∫—Ç–æ—Ä" in user_role.lower():
            contextual_message = f"""
–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä {user_name} –æ–±—Ä–∞—â–∞–µ—Ç—Å—è —Å –≤–æ–ø—Ä–æ—Å–æ–º: "{user_message}"

–ö–æ–Ω—Ç–µ–∫—Å—Ç: —ç—Ç–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ –í–∞—Å–î–æ–º, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è.
–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π AI-–¥–∏—Ä–µ–∫—Ç–æ—Ä: —á–µ—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏ —Ü–∏—Ñ—Ä–∞–º–∏.
"""
        else:
            contextual_message = f"""
–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user_name} ({user_role}) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "{user_message}"

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π —Ç–æ–Ω, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏, —á–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
"""
        
        await message.answer("üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏—Ç—É–∞—Ü–∏—é...")
        
        # Get AI response with memory
        response = await ai_assistant.chat(contextual_message, f"telegram_{user_id}", user_name)
        
        ai_text = response.get("response", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å")
        
        # Add proactive suggestions based on response
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="show_analytics")],
                [InlineKeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è", callback_data="suggest_improvement")]
            ]
        )
        
        # Send BOTH voice and text message for convenience
        try:
            # First send voice message
            conversational_text = make_text_conversational(ai_text)
            voice_data = await generate_voice_message(conversational_text, "director")
            
            if voice_data and len(voice_data) > 100:  # Check if voice was generated
                # Create voice message using InputFile
                from aiogram.types import BufferedInputFile
                voice_file = BufferedInputFile(voice_data, filename="voice_response.ogg")
                await message.answer_voice(voice_file)
            
            # Then send text message with buttons
            await message.answer(f"üìã **–ú–ê–ö–°:** {ai_text}", reply_markup=keyboard, parse_mode="Markdown")
            
        except Exception as voice_error:
            logger.error(f"Voice generation error: {voice_error}")
            # Fallback to text only
            await message.answer(f"üìã **–ú–ê–ö–°:** {ai_text}", reply_markup=keyboard, parse_mode="Markdown")
        
        # Be proactive - suggest related actions
        await suggest_proactive_actions(message, user_message, profile)
        
    except Exception as e:
        logger.error(f"AI chat error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è—é —Å–∏—Å—Ç–µ–º—ã...")

async def suggest_proactive_actions(message: types.Message, user_question: str, profile: dict):
    """Suggest proactive actions based on user question"""
    try:
        question_lower = user_question.lower()
        
        if any(word in question_lower for word in ["–ø—Ä–æ–±–ª–µ–º–∞", "—Å–Ω–∏–∂–µ–Ω–∏–µ", "–ø–∞–¥–µ–Ω–∏–µ", "–ø–ª–æ—Ö–æ"]):
            await message.answer("üîç **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:** –ó–∞–ø—É—Å—Ç–∏—Ç—å —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–µ? –Ø –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Bitrix24 –∏ –¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
            
        elif any(word in question_lower for word in ["–ø–ª–∞–Ω", "–ø—Ä–æ–≥–Ω–æ–∑", "—É–≤–µ–ª–∏—á–∏—Ç—å", "—Ä–æ—Å—Ç"]):
            await message.answer("üìà **–ò–¥–µ—è:** –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —à–∞–≥–∞–º–∏ –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏? –ú–æ–≥—É –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–∏—Ö —Å–¥–µ–ª–æ–∫.")
            
        elif any(word in question_lower for word in ["—Å–æ—Ç—Ä—É–¥–Ω–∏–∫", "–∫–æ–º–∞–Ω–¥–∞", "–ø–µ—Ä—Å–æ–Ω–∞–ª"]):
            await message.answer("üë• **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:** –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º? –£ –º–µ–Ω—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
            
    except Exception as e:
        logger.error(f"Error suggesting proactive actions: {e}")

# Task creation callbacks
@dp.callback_query(F.data == "create_houses_task")
async def create_houses_task_callback(callback: types.CallbackQuery):
    try:
        bx24 = await get_bitrix24_service()
        
        # Create task for house inspection
        task_title = f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–º–æ–≤ - {datetime.now().strftime('%d.%m.%Y')}"
        task_description = """
–ó–ê–î–ê–ß–ê: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤

–ü–†–û–í–ï–†–ò–¢–¨:
1. –ö–∞—á–µ—Å—Ç–≤–æ —É–±–æ—Ä–∫–∏ –≤ –ø–æ–¥—ä–µ–∑–¥–∞—Ö
2. –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
3. –ñ–∞–ª–æ–±—ã –æ—Ç –∂–∏–ª—å—Ü–æ–≤
4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç

–û–¢–ß–ï–¢: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram –≥—Ä—É–ø–ø—É
–°–†–û–ö: –¥–æ 18:00 —Å–µ–≥–æ–¥–Ω—è
"""
        
        result = await bx24.create_task(
            title=task_title,
            description=task_description,
            responsible_id=1,  # Assign to main manager
            deadline=datetime.now().strftime('%Y-%m-%d 18:00:00')
        )
        
        if result.get('success'):
            await callback.message.answer(f"""
‚úÖ **–ó–ê–î–ê–ß–ê –°–û–ó–î–ê–ù–ê –í BITRIX24**

üìã **–ó–∞–¥–∞—á–∞:** {task_title}
üÜî **ID:** {result.get('task_id')}
‚è∞ **–°—Ä–æ–∫:** –¥–æ 18:00 —Å–µ–≥–æ–¥–Ω—è

**–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —É–≤–µ–¥–æ–º–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏**

–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–∂–Ω–æ –≤ Bitrix24 –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è: "–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {result.get('task_id')}"
""", parse_mode="Markdown")
        else:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {result.get('error')}")
            
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query(F.data == "detailed_houses_analysis")
async def detailed_houses_analysis_callback(callback: types.CallbackQuery):
    await callback.message.answer("üîç –ó–∞–ø—É—Å–∫–∞—é —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–º–æ–≤...")
    
    try:
        bx24 = await get_bitrix24_service()
        cleaning_houses = await bx24.get_cleaning_houses_deals()
        
        # Analyze by stages
        stage_analysis = {}
        problem_houses = []
        
        for house in cleaning_houses:
            stage_id = house.get("STAGE_ID", "")
            title = house.get("TITLE", "")
            
            if stage_id not in stage_analysis:
                stage_analysis[stage_id] = 0
            stage_analysis[stage_id] += 1
            
            # Identify potential problems
            if "–ø—Ä–æ–±–ª–µ–º" in title.lower() or "–∂–∞–ª–æ–±" in title.lower():
                problem_houses.append(title)
        
        analysis_text = f"""
üîç **–£–ì–õ–£–ë–õ–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –î–û–ú–û–í**

**üìä –ü–æ —Å—Ç–∞–¥–∏—è–º:**
"""
        for stage, count in stage_analysis.items():
            analysis_text += f"‚Ä¢ {stage}: {count} –¥–æ–º–æ–≤\n"
        
        if problem_houses:
            analysis_text += f"""
‚ö†Ô∏è **–ü–†–û–ë–õ–ï–ú–ù–´–ï –û–ë–™–ï–ö–¢–´ ({len(problem_houses)}):**
"""
            for house in problem_houses[:5]:  # Show first 5
                analysis_text += f"‚Ä¢ {house[:50]}...\n"
        
        analysis_text += f"""
üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
1. –£—Å–∏–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–æ–º–∞—Ö
2. –ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
3. –°–≤—è–∑–∞—Ç—å—Å—è —Å —É–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏
4. –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ –¥–ª—è –æ—Ç—Å—Ç–∞—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤

**–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π?**
"""
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìã –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π", callback_data="create_action_plan")],
                [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –£–ö", callback_data="contact_management")]
            ]
        )
        
        await callback.message.answer(analysis_text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

# Callback for analytics request
@dp.callback_query(F.data == "show_analytics")
async def show_analytics_callback(callback: types.CallbackQuery):
    await callback.message.answer("üìä –ì–æ—Ç–æ–≤–ª—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç...")
    
    # Send analytics data
    try:
        from analytics_service import get_performance_metrics
        metrics = await get_performance_metrics()
        
        analytics_text = f"""
üìä **–û–ü–ï–†–ê–¢–ò–í–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê**

**–ü–†–û–î–ê–ñ–ò:**
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {metrics.get('sales_metrics', {}).get('conversion_rate', 0)}%
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {metrics.get('sales_metrics', {}).get('avg_deal_size', 0):,.0f} ‚ÇΩ
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {metrics.get('client_metrics', {}).get('active_clients', 0)}

**–û–ü–ï–†–ê–¶–ò–ò:**  
‚Ä¢ –ö–∞–ª—É–≥–∞: {metrics.get('operational_metrics', {}).get('kaluga_team', 0)} —á–µ–ª
‚Ä¢ –ö–µ–º–µ—Ä–æ–≤–æ: {metrics.get('operational_metrics', {}).get('kemerovo_team', 0)} —á–µ–ª
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {metrics.get('operational_metrics', {}).get('avg_response_time_hours', 2)}—á

**–†–û–°–¢:**
‚Ä¢ –ó–∞ –∫–≤–∞—Ä—Ç–∞–ª: +{metrics.get('growth_metrics', {}).get('quarterly_growth', '15%')}
‚Ä¢ –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω: {metrics.get('growth_metrics', {}).get('revenue_target_achievement', 92)}%

**–ù—É–∂–Ω–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é?**
"""
        
        await callback.message.answer(analytics_text, parse_mode="Markdown")
        
    except Exception as e:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–∞–º...")

# Handle feedback input
@dp.message(StateFilter(ConversationState.waiting_for_feedback))
async def process_feedback(message: types.Message, state: FSMContext):
    feedback_text = message.text
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # Here you would typically save feedback to database
    logger.info(f"Feedback from {user_name}: {feedback_text}")
    
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—á—Ç–µ–Ω–æ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ.")
    await state.clear()

# Error handler
@dp.error()
async def error_handler(update: types.Update, exception: Exception):
    logger.error(f"Update {update} caused error {exception}")
    return True

# Start bot function
async def start_bot():
    logger.info("üöÄ Starting Telegram bot...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot error: {e}")
    finally:
        await bot.session.close()

# Function to run bot in background
def run_bot_background():
    """Run bot in background thread"""
    asyncio.create_task(start_bot())

if __name__ == "__main__":
    asyncio.run(start_bot())