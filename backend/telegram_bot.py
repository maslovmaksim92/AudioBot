import os
import asyncio
import logging
from typing import Dict, Any
from datetime import datetime
import json

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from ai_service import ai_assistant
from bitrix24_service import get_bitrix24_service

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot configuration
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN not found in environment variables")

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# States for conversation
class ConversationState(StatesGroup):
    waiting_for_feedback = State()
    waiting_for_meeting_transcript = State()
    waiting_for_deal_info = State()

# Create main menu keyboard
def get_main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –î–∞—à–±–æ—Ä–¥"), KeyboardButton(text="üè† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–æ–≤")],
            [KeyboardButton(text="üíº –°–¥–µ–ª–∫–∏ Bitrix24"), KeyboardButton(text="üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")],
            [KeyboardButton(text="üéôÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–µ—Ä–∫–∏"), KeyboardButton(text="üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")],
            [KeyboardButton(text="ü§ñ AI –ü–æ–º–æ—â—å"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )
    return keyboard

# Inline keyboard for feedback
def get_feedback_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ", callback_data="suggest_improvement")],
            [InlineKeyboardButton(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="rate_work")],
            [InlineKeyboardButton(text="üêõ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data="report_issue")]
        ]
    )
    return keyboard

# Start command handler
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    welcome_text = f"""
ü§ñ **–ü—Ä–∏–≤–µ—Ç, {user_name}!** 

–Ø —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π! 

**–ß—Ç–æ —è —É–º–µ—é:**
‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Bitrix24
‚úÖ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–¥–µ–ª–∫–∞–º–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏  
‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–µ—Ä–∫–∏ (–≥–æ–ª–æ—Å–æ–º!)
‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫—É
‚úÖ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–±–æ—Ç–µ
‚úÖ –°–æ–±–∏—Ä–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –∫–æ–º–∞–Ω–¥—ã

**üéØ –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ!**
"""
    
    await message.answer(welcome_text, reply_markup=get_main_menu(), parse_mode="Markdown")

# Dashboard handler
@dp.message(F.text == "üìä –î–∞—à–±–æ—Ä–¥")
async def dashboard_handler(message: types.Message):
    try:
        # Get Bitrix24 service
        bx24 = await get_bitrix24_service()
        stats = await bx24.get_cleaning_statistics()
        
        dashboard_text = f"""
üìä **–î–ê–®–ë–û–†–î –ö–û–ú–ü–ê–ù–ò–ò**

**Bitrix24 –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üî∏ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats.get('total_deals', 0)}
üî∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {stats.get('total_contacts', 0)} 
üî∏ –ö–æ–º–ø–∞–Ω–∏–∏: {stats.get('total_companies', 0)}

**–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –±–∏–∑–Ω–µ—Å–∞:**
üè† –ö–∞–ª—É–≥–∞: {stats.get('kaluga_properties', 0)} –æ–±—ä–µ–∫—Ç–æ–≤
üèòÔ∏è –ö–µ–º–µ—Ä–æ–≤–æ: {stats.get('kemerovo_properties', 0)} –æ–±—ä–µ–∫—Ç–æ–≤
üìç –í—Å–µ–≥–æ: {stats.get('kaluga_properties', 0) + stats.get('kemerovo_properties', 0)} –æ–±—ä–µ–∫—Ç–æ–≤

‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M %d.%m.%Y')}
"""
        
        await message.answer(dashboard_text, parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# Houses statistics handler
@dp.message(F.text == "üè† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–æ–≤")
async def houses_stats_handler(message: types.Message):
    try:
        bx24 = await get_bitrix24_service()
        
        # Get companies (buildings)
        companies = await bx24.get_companies()
        contacts = await bx24.get_contacts()
        
        kaluga_count = 0
        kemerovo_count = 0
        
        # Count by city from companies
        for company in companies:
            address = company.get("ADDRESS", "").lower()
            if "–∫–∞–ª—É–≥–∞" in address:
                kaluga_count += 1
            elif "–∫–µ–º–µ—Ä–æ–≤–æ" in address:
                kemerovo_count += 1
        
        # Count by city from contacts
        for contact in contacts:
            address = contact.get("ADDRESS", "").lower()
            if "–∫–∞–ª—É–≥–∞" in address:
                kaluga_count += 1
            elif "–∫–µ–º–µ—Ä–æ–≤–æ" in address:
                kemerovo_count += 1
        
        houses_text = f"""
üè† **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û–ú–û–í**

**–ü–æ –≥–æ—Ä–æ–¥–∞–º:**
üî∏ –ö–∞–ª—É–≥–∞: {kaluga_count} –¥–æ–º–æ–≤
üî∏ –ö–µ–º–µ—Ä–æ–≤–æ: {kemerovo_count} –¥–æ–º–æ–≤
üìä **–í—Å–µ–≥–æ –ø–æ–¥ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º: {kaluga_count + kemerovo_count} –¥–æ–º–æ–≤**

**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –ö–æ–º–ø–∞–Ω–∏–∏ –≤ Bitrix24: {len(companies)}
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã –≤ Bitrix24: {len(contacts)}

üí° *–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–æ–º–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–æ—Ä–æ–Ω–∫—É "–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤" –≤ Bitrix24*
"""
        
        await message.answer(houses_text, parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# Bitrix24 deals handler
@dp.message(F.text == "üíº –°–¥–µ–ª–∫–∏ Bitrix24")
async def deals_handler(message: types.Message):
    try:
        bx24 = await get_bitrix24_service()
        deals = await bx24.get_deals()
        
        if not deals:
            await message.answer("üìã –°–¥–µ–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É –≤ Bitrix24!")
            return
        
        deals_text = f"üíº **–ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò** (–≤—Å–µ–≥–æ: {len(deals)})\n\n"
        
        # Show last 5 deals
        for i, deal in enumerate(deals[:5]):
            title = deal.get("TITLE", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")[:50]
            deal_id = deal.get("ID")
            stage = deal.get("STAGE_ID", "")
            
            deals_text += f"üî∏ **#{deal_id}**: {title}\n"
            if len(title) > 47:
                deals_text += "...\n"
        
        if len(deals) > 5:
            deals_text += f"\n‚ûï –ò –µ—â—ë {len(deals) - 5} —Å–¥–µ–ª–æ–∫ –≤ Bitrix24"
        
        await message.answer(deals_text, parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# Meeting analysis handler
@dp.message(F.text == "üéôÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–µ—Ä–∫–∏")
async def meeting_analysis_handler(message: types.Message, state: FSMContext):
    await state.set_state(ConversationState.waiting_for_meeting_transcript)
    
    instruction_text = """
üéôÔ∏è **–ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–ï–†–ö–ò**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:
üó£Ô∏è **–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ** —Å –∑–∞–ø–∏—Å—å—é –ø–ª–∞–Ω–µ—Ä–∫–∏
üìù **–¢–µ–∫—Å—Ç** —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º –≤—Å—Ç—Ä–µ—á–∏

–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –≤—ã–¥–µ–ª—é:
‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
‚úÖ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏  
‚úÖ –í–∞–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
‚úÖ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

**–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–ø–∏—Å—å!** üéØ
"""
    
    await message.answer(instruction_text, parse_mode="Markdown")

# Handle meeting transcript (voice or text)
@dp.message(StateFilter(ConversationState.waiting_for_meeting_transcript))
async def process_meeting_transcript(message: types.Message, state: FSMContext):
    try:
        transcript_text = ""
        
        if message.voice:
            # TODO: Implement voice to text conversion
            await message.answer("üéôÔ∏è –ü–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! (–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            transcript_text = "–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ..."
        elif message.text:
            transcript_text = message.text
        else:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–ª–∞–Ω–µ—Ä–∫—É —Å –ø–æ–º–æ—â—å—é AI...")
        
        # Analyze with AI
        analysis = await ai_assistant.analyze_meeting_transcript(transcript_text)
        
        result_text = f"""
üìù **–ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–ï–†–ö–ò**

{analysis.get('summary', '–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω')}

‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%H:%M %d.%m.%Y')}
"""
        
        await message.answer(result_text, parse_mode="Markdown")
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        await state.clear()

# Feedback handler
@dp.message(F.text == "üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def feedback_handler(message: types.Message):
    feedback_text = """
üìù **–û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨**

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã! 

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:
"""
    
    await message.answer(feedback_text, reply_markup=get_feedback_keyboard(), parse_mode="Markdown")

# Feedback callback handlers
@dp.callback_query(F.data == "suggest_improvement")
async def suggest_improvement_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ConversationState.waiting_for_feedback)
    await callback.message.answer("üí° –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã:")

@dp.callback_query(F.data == "rate_work")
async def rate_work_handler(callback: types.CallbackQuery):
    rating_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚≠ê", callback_data="rate_1"),
             InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data="rate_2"),
             InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data="rate_3")],
            [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_4"),
             InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_5")]
        ]
    )
    await callback.message.answer("‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã:", reply_markup=rating_keyboard)

# Rating handlers
@dp.callback_query(F.data.startswith("rate_"))
async def rating_handler(callback: types.CallbackQuery):
    rating = callback.data.split("_")[1]
    await callback.message.answer(f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating}/5! –í–∞—à –æ—Ç–∑—ã–≤ —É—á—Ç–µ–Ω.")

# AI Help handler
@dp.message(F.text == "ü§ñ AI –ü–æ–º–æ—â—å")
async def ai_help_handler(message: types.Message):
    help_text = """
ü§ñ **AI –ü–û–ú–û–©–¨**

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å! –Ø –º–æ–≥—É:

üî∏ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-—Å–∏—Ç—É–∞—Ü–∏—é
üî∏ –î–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é
üî∏ –ü–æ–º–æ—á—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç
üî∏ –û–±—ä—è—Å–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Bitrix24
üî∏ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å?"
‚Ä¢ "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
‚Ä¢ "–ö–∞–∫–∏–µ –¥–æ–º–∞ –Ω—É–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?"

**–ü–∏—à–∏—Ç–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ - —è —É–º–Ω—ã–π! üß†**
"""
    
    await message.answer(help_text, parse_mode="Markdown")

# Handle any text message as AI chat
@dp.message(F.text & ~F.text.in_(["üìä –î–∞—à–±–æ—Ä–¥", "üè† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–æ–≤", "üíº –°–¥–µ–ª–∫–∏ Bitrix24", 
                                 "üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", "üéôÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–µ—Ä–∫–∏", "üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", 
                                 "ü§ñ AI –ü–æ–º–æ—â—å", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]))
async def ai_chat_handler(message: types.Message):
    try:
        user_message = message.text
        user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # Add context about user
        contextual_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {user_message}"
        
        await message.answer("ü§ñ –î—É–º–∞—é...")
        
        # Get AI response
        response = await ai_assistant.chat(contextual_message, f"telegram_{message.from_user.id}")
        
        ai_text = response.get("response", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å")
        
        # Add improvement suggestion button to every AI response
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è", callback_data="suggest_improvement")]
            ]
        )
        
        await message.answer(f"ü§ñ {ai_text}", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"AI chat error: {e}")
        await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

# Handle feedback input
@dp.message(StateFilter(ConversationState.waiting_for_feedback))
async def process_feedback(message: types.Message, state: FSMContext):
    feedback_text = message.text
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # Here you would typically save feedback to database
    logger.info(f"Feedback from {user_name}: {feedback_text}")
    
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—á—Ç–µ–Ω–æ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ.")
    await state.clear()

# Error handler
@dp.error()
async def error_handler(update: types.Update, exception: Exception):
    logger.error(f"Update {update} caused error {exception}")
    return True

# Start bot function
async def start_bot():
    logger.info("üöÄ Starting Telegram bot...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot error: {e}")
    finally:
        await bot.session.close()

# Function to run bot in background
def run_bot_background():
    """Run bot in background thread"""
    asyncio.create_task(start_bot())

if __name__ == "__main__":
    asyncio.run(start_bot())