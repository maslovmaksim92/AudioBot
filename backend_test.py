#!/usr/bin/env python3
"""
Backend Test Suite for VasDom AudioBot System
Testing Finance Module and Plannerka functionality

This test validates:
FINANCE MODULE:
1. GET /api/finances/cash-flow - –¥–≤–∏–∂–µ–Ω–∏–µ –¥–µ–Ω–µ–≥
2. GET /api/finances/profit-loss - –ø—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–∏  
3. GET /api/finances/balance-sheet - –±–∞–ª–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç
4. GET /api/finances/expense-analysis - –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
5. GET /api/finances/available-months - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã
6. GET /api/finances/debts - –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏
7. GET /api/finances/inventory - —Ç–æ–≤–∞—Ä–Ω—ã–µ –∑–∞–ø–∞—Å—ã
8. GET /api/finances/dashboard - —Å–≤–æ–¥–∫–∞
9. GET /api/finances/transactions - —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
10. POST /api/finances/transactions - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
11. GET /api/finances/revenue/monthly - —Ä—É—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞

PLANNERKA MODULE:
1. POST /api/plannerka/create - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω—ë—Ä–∫–∏
2. POST /api/plannerka/analyze/{id} - AI-–∞–Ω–∞–ª–∏–∑ —Å GPT-4o
3. GET /api/plannerka/list - —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω—ë—Ä–æ–∫
"""

import asyncio
import httpx
import json
from datetime import datetime
from typing import Dict, List, Any, Optional
import os

# Backend URL from environment
BACKEND_URL = "https://finreport-dashboard.preview.emergentagent.com"
API_BASE = f"{BACKEND_URL}/api"

class TestResults:
    def __init__(self):
        # Plannerka results
        self.created_meeting_id = None
        self.created_meeting_data = None
        self.analysis_result = None
        self.meetings_list = []
        self.openai_working = False
        self.tasks_extracted = []
        self.summary_generated = False
        
        # Finance results
        self.finance_endpoints = {}
        self.created_transaction_id = None
        self.database_working = False
        
        # Common
        self.errors = []

async def test_finance_cash_flow():
    """Test finance cash flow endpoint"""
    print("=== –¢–ï–°–¢ –î–í–ò–ñ–ï–ù–ò–Ø –î–ï–ù–ï–ì (CASH FLOW) ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/cash-flow...")
            
            response = await client.get(f"{API_BASE}/finances/cash-flow")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ cash-flow: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['cash_flow'] = data
            
            print("‚úÖ Cash flow –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:")
            
            # Validate structure
            required_fields = ['cash_flow', 'summary']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ cash-flow")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # Check summary structure
            if 'summary' in data:
                summary = data['summary']
                summary_fields = ['total_income', 'total_expense', 'net_cash_flow']
                for field in summary_fields:
                    if field not in summary:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ summary")
                    else:
                        print(f"‚úÖ Summary –ø–æ–ª–µ '{field}': {summary[field]}")
            
            # Check cash flow items
            cash_flow_items = data.get('cash_flow', [])
            print(f"üìà –ó–∞–ø–∏—Å–µ–π –¥–≤–∏–∂–µ–Ω–∏—è –¥–µ–Ω–µ–≥: {len(cash_flow_items)}")
            
            if cash_flow_items:
                sample_item = cash_flow_items[0]
                item_fields = ['date', 'income', 'expense', 'balance']
                for field in item_fields:
                    if field not in sample_item:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –∑–∞–ø–∏—Å–∏ cash_flow")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ –∑–∞–ø–∏—Å–∏ '{field}': {sample_item[field]}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ cash-flow: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_profit_loss():
    """Test finance profit loss endpoint"""
    print("\n=== –¢–ï–°–¢ –ü–†–ò–ë–´–õ–ï–ô –ò –£–ë–´–¢–ö–û–í (PROFIT LOSS) ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/profit-loss...")
            
            response = await client.get(f"{API_BASE}/finances/profit-loss")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ profit-loss: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['profit_loss'] = data
            
            print("‚úÖ Profit loss –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:")
            
            # Validate structure
            required_fields = ['profit_loss', 'summary']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ profit-loss")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # Check summary structure
            if 'summary' in data:
                summary = data['summary']
                summary_fields = ['total_revenue', 'total_expenses', 'net_profit', 'average_margin']
                for field in summary_fields:
                    if field not in summary:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ summary")
                    else:
                        print(f"‚úÖ Summary –ø–æ–ª–µ '{field}': {summary[field]}")
            
            # Check profit loss items
            profit_loss_items = data.get('profit_loss', [])
            print(f"üìà –ó–∞–ø–∏—Å–µ–π –ø—Ä–∏–±—ã–ª–µ–π/—É–±—ã—Ç–∫–æ–≤: {len(profit_loss_items)}")
            
            if profit_loss_items:
                sample_item = profit_loss_items[0]
                item_fields = ['period', 'revenue', 'expenses', 'profit', 'margin']
                for field in item_fields:
                    if field not in sample_item:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –∑–∞–ø–∏—Å–∏ profit_loss")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ –∑–∞–ø–∏—Å–∏ '{field}': {sample_item[field]}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ profit-loss: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_expense_analysis():
    """Test finance expense analysis endpoint"""
    print("\n=== –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –†–ê–°–•–û–î–û–í (EXPENSE ANALYSIS) ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üí∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/expense-analysis...")
            
            # Test without month filter
            response = await client.get(f"{API_BASE}/finances/expense-analysis")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞): {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ expense-analysis: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['expense_analysis'] = data
            
            print("‚úÖ Expense analysis –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # Validate structure
            required_fields = ['expenses', 'total']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ expense-analysis")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # Check expenses structure
            expenses = data.get('expenses', [])
            print(f"üìà –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤: {len(expenses)}")
            print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {data.get('total', 0)}")
            
            if expenses:
                sample_expense = expenses[0]
                expense_fields = ['category', 'amount', 'percentage']
                for field in expense_fields:
                    if field not in sample_expense:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –∑–∞–ø–∏—Å–∏ expense")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ —Ä–∞—Å—Ö–æ–¥–∞ '{field}': {sample_expense[field]}")
            
            # Test with month filter
            print("\nüóìÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –º–µ—Å—è—Ü—É...")
            response_month = await client.get(f"{API_BASE}/finances/expense-analysis?month=–Ø–Ω–≤–∞—Ä—å 2025")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Å —Ñ–∏–ª—å—Ç—Ä–æ–º): {response_month.status_code}")
            
            if response_month.status_code == 200:
                month_data = response_month.json()
                print(f"‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü—É —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"üìÖ –ú–µ—Å—è—Ü: {month_data.get('month')}")
                print(f"üí∞ –†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {len(month_data.get('expenses', []))}")
            else:
                print(f"‚ö†Ô∏è –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response_month.status_code}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ expense-analysis: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_available_months():
    """Test finance available months endpoint"""
    print("\n=== –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–´–• –ú–ï–°–Ø–¶–ï–í ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/available-months...")
            
            response = await client.get(f"{API_BASE}/finances/available-months")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ available-months: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['available_months'] = data
            
            print("‚úÖ Available months –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # Validate structure
            required_fields = ['months', 'total']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ available-months")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            months = data.get('months', [])
            print(f"üìÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤: {data.get('total', 0)}")
            
            if months:
                print(f"üìã –ü—Ä–∏–º–µ—Ä—ã –º–µ—Å—è—Ü–µ–≤: {months[:5]}")
            else:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ available-months: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_balance_sheet():
    """Test finance balance sheet endpoint (mock data)"""
    print("\n=== –¢–ï–°–¢ –ë–ê–õ–ê–ù–°–û–í–û–ì–û –û–¢–ß–Å–¢–ê ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üè¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/balance-sheet...")
            
            response = await client.get(f"{API_BASE}/finances/balance-sheet")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ balance-sheet: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['balance_sheet'] = data
            
            print("‚úÖ Balance sheet –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ (mock –¥–∞–Ω–Ω—ã–µ)")
            
            # Validate structure
            required_sections = ['assets', 'liabilities', 'equity']
            for section in required_sections:
                if section not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è '{section}' –≤ balance-sheet")
                else:
                    print(f"‚úÖ –°–µ–∫—Ü–∏—è '{section}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    section_data = data[section]
                    if 'total' in section_data:
                        print(f"   üí∞ –ò—Ç–æ–≥–æ {section}: {section_data['total']}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ balance-sheet: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_debts():
    """Test finance debts endpoint (mock data)"""
    print("\n=== –¢–ï–°–¢ –ó–ê–î–û–õ–ñ–ï–ù–ù–û–°–¢–ï–ô ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üí≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/debts...")
            
            response = await client.get(f"{API_BASE}/finances/debts")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ debts: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['debts'] = data
            
            print("‚úÖ Debts –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ (mock –¥–∞–Ω–Ω—ã–µ)")
            
            # Validate structure
            required_fields = ['debts', 'summary']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ debts")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            debts = data.get('debts', [])
            summary = data.get('summary', {})
            
            print(f"üí≥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π: {len(debts)}")
            print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {summary.get('total', 0)}")
            print(f"‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {summary.get('overdue', 0)}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ debts: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_inventory():
    """Test finance inventory endpoint (mock data)"""
    print("\n=== –¢–ï–°–¢ –¢–û–í–ê–†–ù–´–• –ó–ê–ü–ê–°–û–í ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/inventory...")
            
            response = await client.get(f"{API_BASE}/finances/inventory")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ inventory: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['inventory'] = data
            
            print("‚úÖ Inventory –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ (mock –¥–∞–Ω–Ω—ã–µ)")
            
            # Validate structure
            required_fields = ['inventory', 'summary']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ inventory")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            inventory = data.get('inventory', [])
            summary = data.get('summary', {})
            
            print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {len(inventory)}")
            print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {summary.get('total_value', 0)}")
            print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {summary.get('total_items', 0)}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ inventory: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_dashboard():
    """Test finance dashboard endpoint"""
    print("\n=== –¢–ï–°–¢ –§–ò–ù–ê–ù–°–û–í–û–ô –°–í–û–î–ö–ò (DASHBOARD) ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:  # Longer timeout as it aggregates data
            print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/dashboard...")
            
            response = await client.get(f"{API_BASE}/finances/dashboard")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ dashboard: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['dashboard'] = data
            
            print("‚úÖ Dashboard –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # Validate structure - dashboard aggregates all other endpoints
            expected_sections = ['cash_flow', 'profit_loss', 'balance', 'expenses', 'debts', 'inventory']
            for section in expected_sections:
                if section not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è '{section}' –≤ dashboard")
                else:
                    print(f"‚úÖ –°–µ–∫—Ü–∏—è '{section}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            print("üìä –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º –ø–æ–ª—É—á–µ–Ω–∞")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ dashboard: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_transactions_list():
    """Test finance transactions list endpoint"""
    print("\n=== –¢–ï–°–¢ –°–ü–ò–°–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üíº –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/transactions...")
            
            response = await client.get(f"{API_BASE}/finances/transactions?limit=10&offset=0")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ transactions list: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['transactions_list'] = data
            
            print("‚úÖ Transactions list –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(data)}")
            
            if data:
                sample_transaction = data[0]
                required_fields = ['id', 'date', 'amount', 'category', 'type', 'created_at']
                for field in required_fields:
                    if field not in sample_transaction:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ '{field}': {sample_transaction[field]}")
            else:
                print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ transactions list: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_create_transaction():
    """Test finance create transaction endpoint"""
    print("\n=== –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ò ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /api/finances/transactions...")
            
            # Test data as specified in the review request
            test_transaction = {
                "date": "2025-10-17T00:00:00Z",
                "amount": 1000,
                "category": "–ó–∞—Ä–ø–ª–∞—Ç–∞",
                "type": "expense",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API",
                "payment_method": "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥",
                "counterparty": "–¢–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫",
                "project": "–Ø–Ω–≤–∞—Ä—å 2025"
            }
            
            print(f"üìù –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {json.dumps(test_transaction, ensure_ascii=False, indent=2)}")
            
            response = await client.post(
                f"{API_BASE}/finances/transactions",
                json=test_transaction,
                headers={"Content-Type": "application/json"}
            )
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.created_transaction_id = data.get('id')
            results.finance_endpoints['created_transaction'] = data
            
            print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {results.created_transaction_id}")
            
            # Validate response structure
            required_fields = ['id', 'date', 'amount', 'category', 'type', 'created_at']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –æ—Ç–≤–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}': {data[field]}")
            
            # Validate data integrity
            if data.get('amount') != test_transaction['amount']:
                results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞: –æ–∂–∏–¥–∞–ª–∞—Å—å {test_transaction['amount']}, –ø–æ–ª—É—á–µ–Ω–∞ {data.get('amount')}")
            
            if data.get('category') != test_transaction['category']:
                results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: –æ–∂–∏–¥–∞–ª–∞—Å—å '{test_transaction['category']}', –ø–æ–ª—É—á–µ–Ω–∞ '{data.get('category')}'")
            
            if data.get('type') != test_transaction['type']:
                results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: –æ–∂–∏–¥–∞–ª—Å—è '{test_transaction['type']}', –ø–æ–ª—É—á–µ–Ω '{data.get('type')}'")
            
            if not results.errors:
                print("‚úÖ –í—Å–µ –ø–æ–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_revenue_monthly():
    """Test finance monthly revenue endpoint"""
    print("\n=== –¢–ï–°–¢ –†–£–ß–ù–û–ô –í–´–†–£–ß–ö–ò ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üíµ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/revenue/monthly...")
            
            response = await client.get(f"{API_BASE}/finances/revenue/monthly")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ revenue monthly: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['revenue_monthly'] = data
            
            print("‚úÖ Revenue monthly –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # Validate structure
            required_fields = ['revenues']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ revenue monthly")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            revenues = data.get('revenues', [])
            print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤—ã—Ä—É—á–∫–∏: {len(revenues)}")
            
            if revenues:
                sample_revenue = revenues[0]
                revenue_fields = ['month', 'revenue']
                for field in revenue_fields:
                    if field not in sample_revenue:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –∑–∞–ø–∏—Å–∏ –≤—ã—Ä—É—á–∫–∏")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ –≤—ã—Ä—É—á–∫–∏ '{field}': {sample_revenue[field]}")
            else:
                print("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤—ã—Ä—É—á–∫–∏ (—Ç–∞–±–ª–∏—Ü–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π)")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ revenue monthly: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_expense_details():
    """Test new expense details endpoint for specific months"""
    print("\n=== –¢–ï–°–¢ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò –†–ê–°–•–û–î–û–í –ü–û –ú–ï–°–Ø–¶–ê–ú ===\n")
    
    results = TestResults()
    
    # Test months as specified in the review request
    test_months = ["–ò—é–ª—å 2025", "–ú–∞—Ä—Ç 2025", "–°–µ–Ω—Ç—è–±—Ä—å 2025"]
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            for month in test_months:
                print(f"üí∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/expense-details?month={month}...")
                
                response = await client.get(f"{API_BASE}/finances/expense-details", params={"month": month})
                print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è {month}: {response.status_code}")
                
                if response.status_code != 200:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ expense-details –¥–ª—è {month}: {response.status_code} - {response.text}"
                    results.errors.append(error_msg)
                    print(error_msg)
                    continue
                
                data = response.json()
                results.finance_endpoints[f'expense_details_{month}'] = data
                
                print(f"‚úÖ Expense details –¥–ª—è {month} –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # Validate response structure
                required_fields = ['transactions', 'total', 'month', 'count']
                for field in required_fields:
                    if field not in data:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ expense-details –¥–ª—è {month}")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # Validate month field
                if data.get('month') != month:
                    results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü –≤ –æ—Ç–≤–µ—Ç–µ: –æ–∂–∏–¥–∞–ª—Å—è '{month}', –ø–æ–ª—É—á–µ–Ω '{data.get('month')}'")
                else:
                    print(f"‚úÖ –ú–µ—Å—è—Ü –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {data.get('month')}")
                
                # Check transactions structure
                transactions = data.get('transactions', [])
                total = data.get('total', 0)
                count = data.get('count', 0)
                
                print(f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: {count}")
                print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total}")
                
                # Validate count matches transactions length
                if len(transactions) != count:
                    results.errors.append(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ count ({count}) –∏ –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞ transactions ({len(transactions)}) –¥–ª—è {month}")
                else:
                    print(f"‚úÖ Count —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                
                # Validate total calculation
                if transactions:
                    calculated_total = sum(t.get('amount', 0) for t in transactions)
                    if abs(calculated_total - total) > 0.01:  # Allow small floating point differences
                        results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç total –¥–ª—è {month}: –æ–∂–∏–¥–∞–ª–æ—Å—å {calculated_total}, –ø–æ–ª—É—á–µ–Ω–æ {total}")
                    else:
                        print(f"‚úÖ Total –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω")
                
                # Check transaction structure
                if transactions:
                    sample_transaction = transactions[0]
                    required_transaction_fields = ['id', 'date', 'category', 'amount', 'description', 'payment_method', 'counterparty']
                    
                    print(f"üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
                    for field in required_transaction_fields:
                        if field not in sample_transaction:
                            results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è {month}")
                        else:
                            value = sample_transaction[field]
                            print(f"‚úÖ –ü–æ–ª–µ '{field}': {value}")
                    
                    # Validate that all transactions are expenses (type='expense')
                    # Note: The endpoint filters by type='expense' in SQL, so we assume all returned are expenses
                    print(f"‚úÖ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —è–≤–ª—è—é—Ç—Å—è —Ä–∞—Å—Ö–æ–¥–∞–º–∏ (—Ñ–∏–ª—å—Ç—Ä type='expense' –ø—Ä–∏–º–µ–Ω–µ–Ω –≤ SQL)")
                    
                    # Show sample transaction details
                    print(f"üìù –ü—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
                    print(f"   - ID: {sample_transaction.get('id')}")
                    print(f"   - –î–∞—Ç–∞: {sample_transaction.get('date')}")
                    print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {sample_transaction.get('category')}")
                    print(f"   - –°—É–º–º–∞: {sample_transaction.get('amount')}")
                    print(f"   - –û–ø–∏—Å–∞–Ω–∏–µ: {sample_transaction.get('description')}")
                    print(f"   - –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {sample_transaction.get('payment_method')}")
                    print(f"   - –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {sample_transaction.get('counterparty')}")
                else:
                    print(f"‚ö†Ô∏è –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –º–µ—Å—è—Ü–∞ {month}")
                
                print(f"")  # Empty line for readability
            
            # Test existing expense-analysis endpoint to ensure it still works
            print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º endpoint expense-analysis...")
            
            for month in test_months:
                response = await client.get(f"{API_BASE}/finances/expense-analysis", params={"month": month})
                print(f"üì° expense-analysis –¥–ª—è {month}: {response.status_code}")
                
                if response.status_code != 200:
                    error_msg = f"‚ùå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint expense-analysis –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {month}: {response.status_code}"
                    results.errors.append(error_msg)
                else:
                    print(f"‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint expense-analysis —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {month}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ expense-details: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_consolidated_financial_model():
    """Test consolidated financial model for –û–û–û –í–ê–® –î–û–ú + –£–§–ò–¶"""
    print("\n=== –¢–ï–°–¢ –ö–û–ù–°–û–õ–ò–î–ò–†–û–í–ê–ù–ù–û–ô –§–ò–ù–ê–ù–°–û–í–û–ô –ú–û–î–ï–õ–ò –û–û–û –í–ê–® –î–û–ú + –£–§–ò–¶ ===\n")
    
    results = TestResults()
    consolidated_company = "–û–û–û –í–ê–® –î–û–ú + –£–§–ò–¶"
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print(f"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è: {consolidated_company}")
            print("üìã –õ–æ–≥–∏–∫–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏:")
            print("   - –í—ã—Ä—É—á–∫–∞ = –û–û–û –í–ê–® –î–û–ú –º–∏–Ω—É—Å '–®–≤–µ–∏' –∏ '–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥'")
            print("   - –†–∞—Å—Ö–æ–¥—ã = –û–û–û –í–ê–® –î–û–ú + –£–§–ò–¶ –º–∏–Ω—É—Å '–ö—Ä–µ–¥–∏—Ç—ã', '–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ —Å –Æ/–¶–õ', '–®–≤–µ–∏'")
            print("")
            
            # 1. Test consolidated profit-loss
            print("üí∞ 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/profit-loss?company=–û–û–û+–í–ê–®+–î–û–ú+%2B+–£–§–ò–¶")
            
            response = await client.get(f"{API_BASE}/finances/profit-loss", params={"company": consolidated_company})
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ consolidated profit-loss: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                data = response.json()
                results.finance_endpoints['consolidated_profit_loss'] = data
                print("‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                
                # Validate structure
                required_fields = ['profit_loss', 'summary']
                for field in required_fields:
                    if field not in data:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ consolidated profit-loss")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # Check summary
                if 'summary' in data:
                    summary = data['summary']
                    print(f"üìä –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞:")
                    print(f"   - –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {summary.get('total_revenue', 0)}")
                    print(f"   - –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {summary.get('total_expenses', 0)}")
                    print(f"   - –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {summary.get('net_profit', 0)}")
                    print(f"   - –°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞: {summary.get('average_margin', 0)}%")
            
            print("")
            
            # 2. Test consolidated expense-analysis
            print("üí∏ 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/expense-analysis?company=–û–û–û+–í–ê–®+–î–û–ú+%2B+–£–§–ò–¶")
            
            response = await client.get(f"{API_BASE}/finances/expense-analysis", params={"company": consolidated_company})
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ consolidated expense-analysis: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                data = response.json()
                results.finance_endpoints['consolidated_expense_analysis'] = data
                print("‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # Validate structure
                required_fields = ['expenses', 'total']
                for field in required_fields:
                    if field not in data:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ consolidated expense-analysis")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # Check excluded categories are not present
                excluded_categories = ['–ö—Ä–µ–¥–∏—Ç—ã', '–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ —Å –Æ/–¶–õ', '–®–≤–µ–∏']
                expenses = data.get('expenses', [])
                
                print(f"üìä –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:")
                print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤: {len(expenses)}")
                print(f"   - –û–±—â–∞—è —Å—É–º–º–∞: {data.get('total', 0)}")
                
                # Check for excluded categories
                found_excluded = []
                for expense in expenses:
                    category = expense.get('category', '')
                    if category in excluded_categories:
                        found_excluded.append(category)
                
                if found_excluded:
                    error_msg = f"‚ùå –ù–∞–π–¥–µ–Ω—ã –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö: {found_excluded}"
                    results.errors.append(error_msg)
                    print(error_msg)
                else:
                    print("‚úÖ –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
                
                # Show top categories
                if expenses:
                    print("üìã –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:")
                    for i, expense in enumerate(expenses[:5], 1):
                        print(f"   {i}. {expense.get('category')}: {expense.get('amount')} ({expense.get('percentage')}%)")
            
            print("")
            
            # 3. Test consolidated expense-analysis with month filter
            print("üìÖ 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/expense-analysis?company=–û–û–û+–í–ê–®+–î–û–ú+%2B+–£–§–ò–¶&month=–Ø–Ω–≤–∞—Ä—å+2025")
            
            response = await client.get(f"{API_BASE}/finances/expense-analysis", params={
                "company": consolidated_company,
                "month": "–Ø–Ω–≤–∞—Ä—å 2025"
            })
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ consolidated expense-analysis —Å –º–µ—Å—è—Ü–µ–º: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                data = response.json()
                results.finance_endpoints['consolidated_expense_analysis_monthly'] = data
                print("‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # Validate month field
                if data.get('month') != "–Ø–Ω–≤–∞—Ä—å 2025":
                    results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü –≤ –æ—Ç–≤–µ—Ç–µ: –æ–∂–∏–¥–∞–ª—Å—è '–Ø–Ω–≤–∞—Ä—å 2025', –ø–æ–ª—É—á–µ–Ω '{data.get('month')}'")
                else:
                    print(f"‚úÖ –ú–µ—Å—è—Ü –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {data.get('month')}")
                
                expenses = data.get('expenses', [])
                print(f"üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ø–Ω–≤–∞—Ä—å 2025:")
                print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(expenses)}")
                print(f"   - –û–±—â–∞—è —Å—É–º–º–∞: {data.get('total', 0)}")
            
            print("")
            
            # 4. Test consolidated revenue-analysis
            print("üíµ 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/revenue-analysis?company=–û–û–û+–í–ê–®+–î–û–ú+%2B+–£–§–ò–¶")
            
            response = await client.get(f"{API_BASE}/finances/revenue-analysis", params={"company": consolidated_company})
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ consolidated revenue-analysis: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                data = response.json()
                results.finance_endpoints['consolidated_revenue_analysis'] = data
                print("‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # Validate structure
                required_fields = ['revenue', 'total']
                for field in required_fields:
                    if field not in data:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ consolidated revenue-analysis")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # Check excluded categories for revenue (–®–≤–µ–∏, –ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥)
                excluded_revenue_categories = ['–®–≤–µ–∏', '–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥']
                revenues = data.get('revenue', [])
                
                print(f"üìä –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Ä—É—á–∫–∞:")
                print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π –≤—ã—Ä—É—á–∫–∏: {len(revenues)}")
                print(f"   - –û–±—â–∞—è —Å—É–º–º–∞: {data.get('total', 0)}")
                
                # Check for excluded categories
                found_excluded_revenue = []
                for revenue in revenues:
                    category = revenue.get('category', '')
                    if category in excluded_revenue_categories:
                        found_excluded_revenue.append(category)
                
                if found_excluded_revenue:
                    error_msg = f"‚ùå –ù–∞–π–¥–µ–Ω—ã –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Ä—É—á–∫–µ: {found_excluded_revenue}"
                    results.errors.append(error_msg)
                    print(error_msg)
                else:
                    print("‚úÖ –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—Ä—É—á–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
                
                # Show revenue categories
                if revenues:
                    print("üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—Ä—É—á–∫–∏:")
                    for i, revenue in enumerate(revenues[:5], 1):
                        print(f"   {i}. {revenue.get('category')}: {revenue.get('amount')} ({revenue.get('percentage')}%)")
            
            print("")
            
            # 5. Test individual company endpoints still work
            print("üîÑ 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É endpoints –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π...")
            
            individual_companies = ["–û–û–û –í–ê–® –î–û–ú", "–£–§–ò–¶"]
            
            for company in individual_companies:
                print(f"\nüè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–∞–Ω–∏—é: {company}")
                
                # Test profit-loss for individual company
                response = await client.get(f"{API_BASE}/finances/profit-loss", params={"company": company})
                print(f"üì° profit-loss –¥–ª—è {company}: {response.status_code}")
                
                if response.status_code != 200:
                    error_msg = f"‚ùå Endpoint profit-loss –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {company}: {response.status_code}"
                    results.errors.append(error_msg)
                else:
                    print(f"‚úÖ Endpoint profit-loss —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {company}")
                
                # Test expense-analysis for individual company
                response = await client.get(f"{API_BASE}/finances/expense-analysis", params={"company": company})
                print(f"üì° expense-analysis –¥–ª—è {company}: {response.status_code}")
                
                if response.status_code != 200:
                    error_msg = f"‚ùå Endpoint expense-analysis –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {company}: {response.status_code}"
                    results.errors.append(error_msg)
                else:
                    print(f"‚úÖ Endpoint expense-analysis —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {company}")
            
            print("")
            
            # 6. Validate consolidation logic by comparing individual vs consolidated
            print("üßÆ 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏...")
            
            # Get individual company data for validation
            vasdom_response = await client.get(f"{API_BASE}/finances/expense-analysis", params={"company": "–û–û–û –í–ê–® –î–û–ú"})
            ufic_response = await client.get(f"{API_BASE}/finances/expense-analysis", params={"company": "–£–§–ò–¶"})
            
            if vasdom_response.status_code == 200 and ufic_response.status_code == 200:
                vasdom_data = vasdom_response.json()
                ufic_data = ufic_response.json()
                
                vasdom_total = vasdom_data.get('total', 0)
                ufic_total = ufic_data.get('total', 0)
                
                print(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏:")
                print(f"   - –û–û–û –í–ê–® –î–û–ú –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {vasdom_total}")
                print(f"   - –£–§–ò–¶ –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {ufic_total}")
                
                # Get excluded amounts from –û–û–û –í–ê–® –î–û–ú
                excluded_amount = 0
                vasdom_expenses = vasdom_data.get('expenses', [])
                for expense in vasdom_expenses:
                    if expense.get('category') in ['–ö—Ä–µ–¥–∏—Ç—ã', '–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ —Å –Æ/–¶–õ', '–®–≤–µ–∏']:
                        excluded_amount += expense.get('amount', 0)
                
                expected_consolidated_total = vasdom_total + ufic_total - excluded_amount
                
                # Get actual consolidated total
                if 'consolidated_expense_analysis' in results.finance_endpoints:
                    actual_consolidated_total = results.finance_endpoints['consolidated_expense_analysis'].get('total', 0)
                    
                    print(f"   - –ò—Å–∫–ª—é—á–∞–µ–º–∞—è —Å—É–º–º–∞: {excluded_amount}")
                    print(f"   - –û–∂–∏–¥–∞–µ–º–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {expected_consolidated_total}")
                    print(f"   - –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {actual_consolidated_total}")
                    
                    # Allow small differences due to floating point arithmetic
                    if abs(expected_consolidated_total - actual_consolidated_total) < 1.0:
                        print("‚úÖ –õ–æ–≥–∏–∫–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    else:
                        error_msg = f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_consolidated_total}, –ø–æ–ª—É—á–µ–Ω–æ {actual_consolidated_total}"
                        results.errors.append(error_msg)
                        print(error_msg)
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_plannerka_create_endpoint():
    """Test plannerka creation endpoint"""
    print("\n=== –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–ù–Å–†–ö–ò ===\n")
    
    results = TestResults()
    
    # Test data from the review request
    test_data = {
        "title": "–¢–µ—Å—Ç–æ–≤–∞—è –ø–ª–∞–Ω—ë—Ä–∫–∞",
        "transcription": "–û–±—Å—É–∂–¥–∞–ª–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é. –ò–≤–∞–Ω–æ–≤—É –ø–æ—Ä—É—á–µ–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç –¥–æ –ø—è—Ç–Ω–∏—Ü—ã. –ü–µ—Ç—Ä–æ–≤—É –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ —Å—Ä–µ–¥—ã. –°–∏–¥–æ—Ä–æ–≤—É –ø–æ—Ä—É—á–µ–Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–æ —á–µ—Ç–≤–µ—Ä–≥–∞.",
        "participants": ["–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–∏–¥–æ—Ä–æ–≤"]
    }
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üîç –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω—ë—Ä–∫—É...")
            print(f"üìù –î–∞–Ω–Ω—ã–µ: {json.dumps(test_data, ensure_ascii=False, indent=2)}")
            
            # Test the create endpoint
            response = await client.post(
                f"{API_BASE}/plannerka/create",
                json=test_data,
                headers={"Content-Type": "application/json"}
            )
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω—ë—Ä–∫–∏: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.created_meeting_data = data
            results.created_meeting_id = data.get('id')
            results.database_working = True
            
            print(f"‚úÖ –ü–ª–∞–Ω—ë—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {results.created_meeting_id}")
            print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:")
            print(f"   - ID: {data.get('id')}")
            print(f"   - Title: {data.get('title')}")
            print(f"   - Date: {data.get('date')}")
            print(f"   - Participants: {data.get('participants')}")
            print(f"   - Transcription length: {len(data.get('transcription', ''))}")
            print(f"   - Summary: {data.get('summary')}")
            print(f"   - Tasks: {data.get('tasks')}")
            
            # Validate response structure
            required_fields = ['id', 'title', 'date', 'transcription', 'participants', 'created_at']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –æ—Ç–≤–µ—Ç–µ")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # Validate data integrity
            if data.get('title') != test_data['title']:
                results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π title: –æ–∂–∏–¥–∞–ª—Å—è '{test_data['title']}', –ø–æ–ª—É—á–µ–Ω '{data.get('title')}'")
            
            if data.get('transcription') != test_data['transcription']:
                results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è transcription")
            
            if data.get('participants') != test_data['participants']:
                results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ participants")
            
            if not results.errors:
                print("‚úÖ –í—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω—ë—Ä–∫–∏: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_plannerka_analyze_endpoint(meeting_id: str):
    """Test plannerka AI analysis endpoint"""
    print("\n=== –¢–ï–°–¢ AI-–ê–ù–ê–õ–ò–ó–ê –ü–õ–ê–ù–Å–†–ö–ò ===\n")
    
    results = TestResults()
    results.created_meeting_id = meeting_id
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:  # Longer timeout for AI analysis
            print(f"ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω—ë—Ä–∫–∏ ID: {meeting_id}")
            
            # Test the analyze endpoint
            response = await client.post(f"{API_BASE}/plannerka/analyze/{meeting_id}")
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                
                # Check for specific OpenAI errors
                if "OPENAI_API_KEY" in response.text:
                    results.errors.append("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                elif "transcription is too short" in response.text:
                    results.errors.append("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è")
                
                return results
            
            data = response.json()
            results.analysis_result = data
            results.openai_working = True
            
            print(f"‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
            print(f"   - Success: {data.get('success')}")
            print(f"   - Tasks count: {data.get('tasks_count')}")
            
            # Check summary
            summary = data.get('summary', '')
            if summary:
                results.summary_generated = True
                print(f"‚úÖ –°–∞–º–º–∞—Ä–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ({len(summary)} —Å–∏–º–≤–æ–ª–æ–≤)")
                print(f"üìù –°–∞–º–º–∞—Ä–∏: {summary[:200]}{'...' if len(summary) > 200 else ''}")
            else:
                results.errors.append("‚ùå –°–∞–º–º–∞—Ä–∏ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            
            # Check tasks
            tasks = data.get('tasks', [])
            results.tasks_extracted = tasks
            
            if tasks:
                print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
                print("üìã –ó–∞–¥–∞—á–∏:")
                
                for i, task in enumerate(tasks, 1):
                    title = task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    assignee = task.get('assignee', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')
                    deadline = task.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
                    priority = task.get('priority', 'medium')
                    
                    print(f"   {i}. {title}")
                    print(f"      - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee}")
                    print(f"      - –°—Ä–æ–∫: {deadline}")
                    print(f"      - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
                    
                    # Validate task structure
                    required_task_fields = ['title']
                    for field in required_task_fields:
                        if field not in task or not task[field]:
                            results.errors.append(f"‚ùå –ó–∞–¥–∞—á–∞ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}'")
                
                # Check if expected tasks are found
                expected_assignees = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–°–∏–¥–æ—Ä–æ–≤']
                found_assignees = [task.get('assignee', '') for task in tasks]
                
                for expected in expected_assignees:
                    if any(expected in assignee for assignee in found_assignees):
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è {expected}")
                    else:
                        print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è {expected}")
                
            else:
                results.errors.append("‚ùå –ó–∞–¥–∞—á–∏ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
            
            # Validate response structure
            required_fields = ['success', 'summary', 'tasks', 'tasks_count']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –æ—Ç–≤–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∞")
            
            # Check if success is true
            if not data.get('success'):
                results.errors.append("‚ùå –ü–æ–ª–µ 'success' –Ω–µ —Ä–∞–≤–Ω–æ true")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AI-–∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_plannerka_list_endpoint():
    """Test plannerka list endpoint"""
    print("\n=== –¢–ï–°–¢ –°–ü–ò–°–ö–ê –ü–õ–ê–ù–Å–†–û–ö ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω—ë—Ä–æ–∫...")
            
            # Test the list endpoint
            response = await client.get(f"{API_BASE}/plannerka/list?limit=20&offset=0")
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.meetings_list = data.get('meetings', [])
            
            print(f"‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–Ω—ë—Ä–æ–∫: {data.get('count', 0)}")
            print(f"   - –ü–ª–∞–Ω—ë—Ä–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ: {len(results.meetings_list)}")
            
            # Validate response structure
            required_fields = ['meetings', 'count']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –æ—Ç–≤–µ—Ç–µ —Å–ø–∏—Å–∫–∞")
            
            # Check meetings structure
            if results.meetings_list:
                print("üìã –ü—Ä–∏–º–µ—Ä—ã –ø–ª–∞–Ω—ë—Ä–æ–∫:")
                
                for i, meeting in enumerate(results.meetings_list[:3], 1):  # Show first 3
                    meeting_id = meeting.get('id', 'N/A')
                    title = meeting.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    date = meeting.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                    participants_count = len(meeting.get('participants', []))
                    tasks_count = len(meeting.get('tasks', []))
                    has_summary = bool(meeting.get('summary'))
                    
                    print(f"   {i}. ID: {meeting_id}")
                    print(f"      - –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                    print(f"      - –î–∞—Ç–∞: {date}")
                    print(f"      - –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}")
                    print(f"      - –ó–∞–¥–∞—á: {tasks_count}")
                    print(f"      - –ï—Å—Ç—å —Å–∞–º–º–∞—Ä–∏: {has_summary}")
                
                # Validate meeting structure
                sample_meeting = results.meetings_list[0]
                expected_meeting_fields = ['id', 'title', 'date', 'transcription', 'participants']
                
                for field in expected_meeting_fields:
                    if field not in sample_meeting:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–ª–∞–Ω—ë—Ä–∫–∏")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
            else:
                print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω—ë—Ä–æ–∫ –ø—É—Å—Ç")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω—ë—Ä–æ–∫: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_openai_configuration():
    """Test OpenAI API configuration"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é OpenAI...")
    
    try:
        # Check if OPENAI_API_KEY is configured by testing a simple endpoint
        async with httpx.AsyncClient(timeout=15.0) as client:
            # We'll test this indirectly through the health endpoint
            response = await client.get(f"{API_BASE}/health")
            if response.status_code == 200:
                print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                
        # Check environment variables (we can't directly access them, but we can infer from API responses)
        print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —á–µ—Ä–µ–∑ API –≤—ã–∑–æ–≤—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")

async def test_database_connection():
    """Test database connection through plannerka endpoints"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            # Test database connection by trying to get the list
            response = await client.get(f"{API_BASE}/plannerka/list?limit=1")
            
            if response.status_code == 200:
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
                return True
            elif response.status_code == 500 and "Database connection error" in response.text:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.status_code}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {str(e)}")
        return False

async def test_vasdom_fact_forecast_endpoint():
    """Test –í–ê–® –î–û–ú –§–ê–ö–¢ forecast endpoint with updated requirements from review request"""
    print("\n=== –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ü–†–û–ì–ù–û–ó–ê –í–ê–® –î–û–ú –§–ê–ö–¢ ===\n")
    
    results = TestResults()
    scenarios = ["pessimistic", "realistic", "optimistic"]
    company = "–í–ê–® –î–û–ú –§–ê–ö–¢"
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print(f"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {company}")
            print("üìã –ù–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ:")
            print("   –ü–ï–°–°–ò–ú–ò–°–¢–ò–ß–ù–´–ô:")
            print("   - 2026: –≤—ã—Ä—É—á–∫–∞ = 56,539,380 ‚ÇΩ")
            print("   - 2027-2030: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +10% –µ–∂–µ–≥–æ–¥–Ω–æ")
            print("   - –†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +9.7% –µ–∂–µ–≥–æ–¥–Ω–æ")
            print("")
            print("   –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ô:")
            print("   - –†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +20% –µ–∂–µ–≥–æ–¥–Ω–æ")
            print("   - –†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +16.2% –µ–∂–µ–≥–æ–¥–Ω–æ")
            print("   - –ú–∞—Ä–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 26.48% - 36.61%")
            print("")
            print("   –û–ü–¢–ò–ú–ò–°–¢–ò–ß–ù–´–ô:")
            print("   - –†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +30% –µ–∂–µ–≥–æ–¥–Ω–æ")
            print("   - –†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +18.9% –µ–∂–µ–≥–æ–¥–Ω–æ")
            print("")
            print("   –î–õ–Ø –í–°–ï–• –°–¶–ï–ù–ê–†–ò–ï–í:")
            print("   - –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ù–ï –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å: –∫—Ä–µ–¥–∏—Ç—ã, –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥, –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è")
            print("   - –í –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—É—â–∏–π —Ä–µ–º–æ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ 70% –º–µ–Ω—å—à–µ")
            print("   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è '–∑–∞—Ä–ø–ª–∞—Ç–∞' –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã")
            print("")
            
            scenario_results = {}
            
            for scenario in scenarios:
                print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")
                
                # Test the forecast endpoint
                response = await client.get(
                    f"{API_BASE}/finances/forecast",
                    params={"company": company, "scenario": scenario}
                )
                
                print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è {scenario}: {response.status_code}")
                
                # Check 200 status
                if response.status_code != 200:
                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –æ—à–∏–±–∫–∞ {response.status_code} - {response.text}"
                    results.errors.append(error_msg)
                    print(error_msg)
                    continue
                
                data = response.json()
                scenario_results[scenario] = data
                print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: 200 —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
                
                # Validate response structure
                required_fields = ['company', 'scenario', 'base_year', 'base_data', 'forecast']
                for field in required_fields:
                    if field not in data:
                        error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}'"
                        results.errors.append(error_msg)
                        print(error_msg)
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # Check forecast data for years 2026-2030
                forecast = data.get('forecast', [])
                if len(forecast) < 5:
                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–µ—Ç –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ (–æ–∂–∏–¥–∞–ª–æ—Å—å 5, –ø–æ–ª—É—á–µ–Ω–æ {len(forecast)})"
                    results.errors.append(error_msg)
                    print(error_msg)
                    continue
                
                print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(forecast)} –ª–µ—Ç (2026-2030)")
                
                # Get base year data
                base_data = data.get('base_data', {})
                base_revenue = base_data.get('revenue', 0)
                base_expenses = base_data.get('expenses', 0)
                
                print(f"üìä –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ 2025:")
                print(f"   - –í—ã—Ä—É—á–∫–∞: {base_revenue:,.0f} ‚ÇΩ")
                print(f"   - –†–∞—Å—Ö–æ–¥—ã: {base_expenses:,.0f} ‚ÇΩ")
                
                # Check scenario-specific requirements
                if scenario == "pessimistic":
                    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ü–ï–°–°–ò–ú–ò–°–¢–ò–ß–ù–´–ô —Å—Ü–µ–Ω–∞—Ä–∏–π:")
                    
                    # Check 2026 specific revenue requirement
                    year_2026 = next((y for y in forecast if y.get('year') == 2026), None)
                    if year_2026:
                        revenue_2026 = year_2026.get('revenue', 0)
                        expected_2026_revenue = 56539380
                        
                        revenue_diff_pct = abs(revenue_2026 - expected_2026_revenue) / expected_2026_revenue * 100
                        if revenue_diff_pct > 1.0:  # Allow 1% tolerance
                            error_msg = f"‚ùå –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π 2026: –Ω–µ–≤–µ—Ä–Ω–∞—è –≤—ã—Ä—É—á–∫–∞. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_2026_revenue:,.0f} ‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {revenue_2026:,.0f} ‚ÇΩ"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ 2026: –≤—ã—Ä—É—á–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ({revenue_2026:,.0f} ‚ÇΩ)")
                    
                    # Check 10% annual revenue growth for 2027-2030
                    prev_revenue = year_2026.get('revenue', 0) if year_2026 else 0
                    for year_data in forecast[1:]:  # Skip 2026, check 2027-2030
                        year = year_data.get('year')
                        revenue = year_data.get('revenue', 0)
                        
                        expected_revenue = prev_revenue * 1.10
                        revenue_diff_pct = abs(revenue - expected_revenue) / expected_revenue * 100
                        
                        if revenue_diff_pct > 1.0:
                            error_msg = f"‚ùå –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π {year}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +10%. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue:,.0f} ‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {revenue:,.0f} ‚ÇΩ"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +10% –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({revenue:,.0f} ‚ÇΩ)")
                        
                        prev_revenue = revenue
                    
                    # Check 9.7% annual expense growth
                    prev_expenses = year_2026.get('expenses', 0) if year_2026 else 0
                    for year_data in forecast:
                        year = year_data.get('year')
                        expenses = year_data.get('expenses', 0)
                        
                        if year == 2026:
                            prev_expenses = expenses
                            continue
                            
                        expected_expenses = prev_expenses * 1.097
                        expense_diff_pct = abs(expenses - expected_expenses) / expected_expenses * 100
                        
                        if expense_diff_pct > 1.0:
                            error_msg = f"‚ùå –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π {year}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +9.7%. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_expenses:,.0f} ‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {expenses:,.0f} ‚ÇΩ"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +9.7% –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({expenses:,.0f} ‚ÇΩ)")
                        
                        prev_expenses = expenses
                
                elif scenario == "realistic":
                    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ô —Å—Ü–µ–Ω–∞—Ä–∏–π:")
                    
                    # Check 20% annual revenue growth
                    prev_revenue = base_revenue
                    for year_data in forecast:
                        year = year_data.get('year')
                        revenue = year_data.get('revenue', 0)
                        expenses = year_data.get('expenses', 0)
                        
                        expected_revenue = prev_revenue * 1.20
                        revenue_diff_pct = abs(revenue - expected_revenue) / expected_revenue * 100
                        
                        if revenue_diff_pct > 1.0:
                            error_msg = f"‚ùå –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π {year}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +20%. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue:,.0f} ‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {revenue:,.0f} ‚ÇΩ"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +20% –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({revenue:,.0f} ‚ÇΩ)")
                        
                        prev_revenue = revenue
                    
                    # Check 16.2% annual expense growth
                    prev_expenses = base_expenses
                    for year_data in forecast:
                        year = year_data.get('year')
                        expenses = year_data.get('expenses', 0)
                        
                        expected_expenses = prev_expenses * 1.162
                        expense_diff_pct = abs(expenses - expected_expenses) / expected_expenses * 100
                        
                        if expense_diff_pct > 1.0:
                            error_msg = f"‚ùå –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π {year}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +16.2%. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_expenses:,.0f} ‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {expenses:,.0f} ‚ÇΩ"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +16.2% –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({expenses:,.0f} ‚ÇΩ)")
                        
                        prev_expenses = expenses
                    
                    # Check margin range 26.48% - 36.61%
                    for year_data in forecast:
                        year = year_data.get('year')
                        revenue = year_data.get('revenue', 0)
                        expenses = year_data.get('expenses', 0)
                        
                        if revenue > 0:
                            margin = ((revenue - expenses) / revenue) * 100
                            
                            if margin < 26.48 or margin > 36.61:
                                error_msg = f"‚ùå –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π {year}: –º–∞—Ä–∂–∞ {margin:.2f}% –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 26.48% - 36.61%"
                                results.errors.append(error_msg)
                                print(error_msg)
                            else:
                                print(f"‚úÖ {year}: –º–∞—Ä–∂–∞ {margin:.2f}% –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
                
                elif scenario == "optimistic":
                    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –û–ü–¢–ò–ú–ò–°–¢–ò–ß–ù–´–ô —Å—Ü–µ–Ω–∞—Ä–∏–π:")
                    
                    # Check 30% annual revenue growth
                    prev_revenue = base_revenue
                    for year_data in forecast:
                        year = year_data.get('year')
                        revenue = year_data.get('revenue', 0)
                        
                        expected_revenue = prev_revenue * 1.30
                        revenue_diff_pct = abs(revenue - expected_revenue) / expected_revenue * 100
                        
                        if revenue_diff_pct > 1.0:
                            error_msg = f"‚ùå –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π {year}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +30%. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue:,.0f} ‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {revenue:,.0f} ‚ÇΩ"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +30% –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({revenue:,.0f} ‚ÇΩ)")
                        
                        prev_revenue = revenue
                    
                    # Check 18.9% annual expense growth
                    prev_expenses = base_expenses
                    for year_data in forecast:
                        year = year_data.get('year')
                        expenses = year_data.get('expenses', 0)
                        
                        expected_expenses = prev_expenses * 1.189
                        expense_diff_pct = abs(expenses - expected_expenses) / expected_expenses * 100
                        
                        if expense_diff_pct > 1.0:
                            error_msg = f"‚ùå –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π {year}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +18.9%. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_expenses:,.0f} ‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {expenses:,.0f} ‚ÇΩ"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +18.9% –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({expenses:,.0f} ‚ÇΩ)")
                        
                        prev_expenses = expenses
                
                # Check expense breakdown for all scenarios
                print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario}:")
                
                # Check that expense_breakdown is present
                has_expense_breakdown = False
                for year_data in forecast:
                    if 'expense_breakdown' in year_data:
                        has_expense_breakdown = True
                        break
                
                if not has_expense_breakdown:
                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç expense_breakdown –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ"
                    results.errors.append(error_msg)
                    print(error_msg)
                else:
                    print(f"‚úÖ expense_breakdown –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    # Check excluded categories
                    excluded_categories = ['–∫—Ä–µ–¥–∏—Ç—ã', '–∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥', '–ø—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è']
                    found_excluded = []
                    
                    sample_year = forecast[0] if forecast else {}
                    expense_breakdown = sample_year.get('expense_breakdown', {})
                    
                    for category_key, amount in expense_breakdown.items():
                        category_lower = category_key.lower()
                        for excluded in excluded_categories:
                            if excluded in category_lower:
                                found_excluded.append(category_key)
                    
                    if found_excluded:
                        error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –Ω–∞–π–¥–µ–Ω—ã –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: {found_excluded}"
                        results.errors.append(error_msg)
                        print(error_msg)
                    else:
                        print(f"‚úÖ –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
                    
                    # Check for salary redistribution
                    salary_categories = [k for k in expense_breakdown.keys() if '–∑–∞—Ä–ø–ª–∞—Ç–∞' in k.lower() or '–∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è' in k.lower()]
                    if salary_categories:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã: {salary_categories}")
                    else:
                        print(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
                    
                    # Check current repair reduction (should be 70% less)
                    repair_categories = [k for k in expense_breakdown.keys() if '—Ç–µ–∫—É—â–∏–π —Ä–µ–º–æ–Ω—Ç' in k.lower() or '—Ä–µ–º–æ–Ω—Ç' in k.lower()]
                    if repair_categories:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–º–æ–Ω—Ç–∞: {repair_categories}")
                        print(f"   (–ü—Ä–æ–≤–µ—Ä–∫–∞ 70% —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)")
                    else:
                        print(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–º–æ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
                
                print(f"")  # Empty line for readability
            
            # Store results
            results.finance_endpoints['vasdom_fact_forecast'] = scenario_results
            
            # Summary
            print("üìã –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:")
            success_count = len([s for s in scenarios if s in scenario_results])
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {success_count}/3")
            
            if results.errors:
                print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(results.errors)}")
                for error in results.errors[-5:]:  # Show last 5 errors
                    print(f"   - {error}")
            else:
                print(f"üéâ –í—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –í–ê–® –î–û–ú –§–ê–ö–¢: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results
                    # Check 40% growth for 2026, then x1.40 annually; 30% expense growth for 2026, then x1.30 annually
                    for i, year_data in enumerate(forecast):
                        year = year_data.get('year')
                        revenue = year_data.get('revenue', 0)
                        expenses = year_data.get('expenses', 0)
                        
                        if year == 2026:
                            # First year: 40% revenue growth, 30% expense growth
                            expected_revenue = base_revenue * 1.40
                            expected_expenses = base_expenses * 1.30
                        else:
                            # Subsequent years: multiply by 1.40 and 1.30 respectively
                            years_after_2026 = year - 2026
                            expected_revenue = base_revenue * 1.40 * (1.40 ** years_after_2026)
                            expected_expenses = base_expenses * 1.30 * (1.30 ** years_after_2026)
                        
                        # Check revenue
                        revenue_diff_pct = abs(revenue - expected_revenue) / expected_revenue * 100
                        if revenue_diff_pct > 1.0:
                            error_msg = f"‚ùå –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π {year}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue:,.0f}, –ø–æ–ª—É—á–µ–Ω–æ {revenue:,.0f}"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({revenue:,.0f})")
                        
                        # Check expenses
                        expense_diff_pct = abs(expenses - expected_expenses) / expected_expenses * 100
                        if expense_diff_pct > 1.0:
                            error_msg = f"‚ùå –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π {year}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_expenses:,.0f}, –ø–æ–ª—É—á–µ–Ω–æ {expenses:,.0f}"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({expenses:,.0f})")
                
                elif scenario == "optimistic":
                    # Check 60% growth for 2026, then x1.60 annually; 40% expense growth for 2026, then x1.40 annually
                    for i, year_data in enumerate(forecast):
                        year = year_data.get('year')
                        revenue = year_data.get('revenue', 0)
                        expenses = year_data.get('expenses', 0)
                        
                        if year == 2026:
                            # First year: 60% revenue growth, 40% expense growth
                            expected_revenue = base_revenue * 1.60
                            expected_expenses = base_expenses * 1.40
                        else:
                            # Subsequent years: multiply by 1.60 and 1.40 respectively
                            years_after_2026 = year - 2026
                            expected_revenue = base_revenue * 1.60 * (1.60 ** years_after_2026)
                            expected_expenses = base_expenses * 1.40 * (1.40 ** years_after_2026)
                        
                        # Check revenue
                        revenue_diff_pct = abs(revenue - expected_revenue) / expected_revenue * 100
                        if revenue_diff_pct > 1.0:
                            error_msg = f"‚ùå –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π {year}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue:,.0f}, –ø–æ–ª—É—á–µ–Ω–æ {revenue:,.0f}"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({revenue:,.0f})")
                        
                        # Check expenses
                        expense_diff_pct = abs(expenses - expected_expenses) / expected_expenses * 100
                        if expense_diff_pct > 1.0:
                            error_msg = f"‚ùå –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π {year}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_expenses:,.0f}, –ø–æ–ª—É—á–µ–Ω–æ {expenses:,.0f}"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({expenses:,.0f})")
                
                # Check expense breakdown for all scenarios
                print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario}...")
                
                for year_data in forecast:
                    year = year_data.get('year')
                    expense_breakdown = year_data.get('expense_breakdown', {})
                    
                    if not expense_breakdown:
                        error_msg = f"‚ùå {scenario} {year}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç expense_breakdown"
                        results.errors.append(error_msg)
                        print(error_msg)
                        continue
                    
                    print(f"‚úÖ {year}: expense_breakdown –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç ({len(expense_breakdown)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π)")
                    
                    # Check for excluded categories (–õ–µ–Ω–∏–Ω—Å–∫-–ö—É–∑–Ω–µ—Ü–∫–∏–π)
                    excluded_found = []
                    for category, amount in expense_breakdown.items():
                        category_lower = category.lower()
                        if '–ª–µ–Ω–∏–Ω—Å–∫' in category_lower or '–∫—É–∑–Ω–µ—Ü' in category_lower:
                            excluded_found.append(category)
                    
                    if excluded_found:
                        error_msg = f"‚ùå {scenario} {year}: –Ω–∞–π–¥–µ–Ω—ã –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {excluded_found}"
                        results.errors.append(error_msg)
                        print(error_msg)
                    else:
                        print(f"‚úÖ {year}: –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    
                    # Show sample categories
                    if year == 2026:  # Show for first forecast year
                        print(f"üìã –ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤ {year}:")
                        for i, (category, amount) in enumerate(list(expense_breakdown.items())[:5], 1):
                            print(f"   {i}. {category}: {amount:,.0f}")
                
                print(f"")  # Empty line for readability
            
            # Summary check
            print("üìä –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –°–¶–ï–ù–ê–†–ò–ï–í:")
            
            success_criteria = {
                "all_scenarios_200": len(scenario_results) == 3,
                "leninsk_excluded": True,
                "pessimistic_margin_20": True,
                "growth_requirements": True,
                "expense_breakdown_present": True
            }
            
            # Check if all scenarios returned 200
            if success_criteria["all_scenarios_200"]:
                print("‚úÖ –í—Å–µ —Ç—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
            else:
                print(f"‚ùå –ù–µ –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç ({len(scenario_results)}/3)")
                success_criteria["all_scenarios_200"] = False
            
            # Final validation summary
            total_success_criteria = sum(success_criteria.values())
            print(f"\nüéØ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê: {total_success_criteria}/5")
            
            for criterion, passed in success_criteria.items():
                status = "‚úÖ" if passed else "‚ùå"
                print(f"{status} {criterion}")
            
            if total_success_criteria == 5:
                print("\nüéâ –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê –í–´–ü–û–õ–ù–ï–ù–´!")
            else:
                print(f"\n‚ö†Ô∏è –í–´–ü–û–õ–ù–ï–ù–û {total_success_criteria}/5 –ö–†–ò–¢–ï–†–ò–ï–í")
            
            results.finance_endpoints['vasdom_fact_forecast'] = scenario_results
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –í–ê–® –î–û–ú –§–ê–ö–¢: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_ufic_forecast_endpoint():
    """Test –£–§–ò–¶ –º–æ–¥–µ–ª—å forecast endpoint with exact Excel data"""
    print("\n=== –¢–ï–°–¢ –ü–†–û–ì–ù–û–ó–ê –£–§–ò–¶ –ú–û–î–ï–õ–¨ –° –î–ê–ù–ù–´–ú–ò –ò–ó EXCEL ===\n")
    
    results = TestResults()
    scenarios = ["pessimistic", "realistic", "optimistic"]
    company = "–£–§–ò–¶ –º–æ–¥–µ–ª—å"
    
    # Expected data from Excel file "–ú–æ–¥–µ–ª—å –£–§–ò–¶.xlsx"
    expected_data = {
        "pessimistic": {
            "revenue_2025": 38645410,
            "expenses_2025": 27289899,
            "revenue_2026": 51458491,
            "expenses_2026": 34101464
        },
        "realistic": {
            "revenue_2025": 38645410,
            "expenses_2025": 27289900,
            "revenue_2026": 54687416,
            "expenses_2026": 36947205
        },
        "optimistic": {
            "revenue_2025": 38865910,
            "expenses_2025": 27396013,
            "revenue_2026": 58491350,
            "expenses_2026": 39840376
        }
    }
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print(f"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {company}")
            print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑ Excel —Ñ–∞–π–ª–∞ '–ú–æ–¥–µ–ª—å –£–§–ò–¶.xlsx':")
            print("   1. –í—Å–µ —Ç—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 200 —Å—Ç–∞—Ç—É—Å")
            print("   2. –ë–∞–∑–æ–≤—ã–π –≥–æ–¥ 2025 —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel:")
            print("      - –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π: revenue 38,645,410, expenses 27,289,899")
            print("      - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π: revenue 38,645,410, expenses 27,289,900")
            print("      - –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π: revenue 38,865,910, expenses 27,396,013")
            print("   3. –î–ª—è 2026 –≥–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel:")
            print("      - –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π: revenue 51,458,491, expenses 34,101,464")
            print("      - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π: revenue 54,687,416, expenses 36,947,205")
            print("      - –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π: revenue 58,491,350, expenses 39,840,376")
            print("   4. –î–ª—è 2027-2030 –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ 6% –∫ –¥–∞–Ω–Ω—ã–º 2026")
            print("   5. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è")
            print("   6. –ú–∞—Ä–∂–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("")
            
            scenario_results = {}
            
            for scenario in scenarios:
                print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")
                
                # Test the forecast endpoint
                response = await client.get(
                    f"{API_BASE}/finances/forecast",
                    params={"company": company, "scenario": scenario}
                )
                
                print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è {scenario}: {response.status_code}")
                
                # Criterion 1: Check 200 status
                if response.status_code != 200:
                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –æ—à–∏–±–∫–∞ {response.status_code} - {response.text}"
                    results.errors.append(error_msg)
                    print(error_msg)
                    continue
                
                data = response.json()
                scenario_results[scenario] = data
                print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: 200 —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
                
                # Validate response structure (Criterion 5)
                required_fields = ['company', 'scenario', 'base_year', 'base_data', 'forecast', 'investor_metrics', 'scenario_info']
                for field in required_fields:
                    if field not in data:
                        error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}'"
                        results.errors.append(error_msg)
                        print(error_msg)
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # Criterion 2: Check base year 2025 data from Excel
                base_data = data.get('base_data', {})
                base_revenue = base_data.get('revenue', 0)
                base_expenses = base_data.get('expenses', 0)
                
                expected_scenario_data = expected_data[scenario]
                expected_revenue_2025 = expected_scenario_data["revenue_2025"]
                expected_expenses_2025 = expected_scenario_data["expenses_2025"]
                
                print(f"üìä –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ 2025 (–∏–∑ Excel):")
                print(f"   - –í—ã—Ä—É—á–∫–∞: {base_revenue:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue_2025:,})")
                print(f"   - –†–∞—Å—Ö–æ–¥—ã: {base_expenses:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_expenses_2025:,})")
                
                # Check exact values from Excel (allow small rounding differences)
                if abs(base_revenue - expected_revenue_2025) > 1:
                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –≤—ã—Ä—É—á–∫–∞ 2025 –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Excel: {base_revenue:,.0f} vs {expected_revenue_2025:,}"
                    results.errors.append(error_msg)
                    print(error_msg)
                else:
                    print(f"‚úÖ –í—ã—Ä—É—á–∫–∞ 2025 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Excel –¥–∞–Ω–Ω—ã–º")
                
                if abs(base_expenses - expected_expenses_2025) > 1:
                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: —Ä–∞—Å—Ö–æ–¥—ã 2025 –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç Excel: {base_expenses:,.0f} vs {expected_expenses_2025:,}"
                    results.errors.append(error_msg)
                    print(error_msg)
                else:
                    print(f"‚úÖ –†–∞—Å—Ö–æ–¥—ã 2025 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç Excel –¥–∞–Ω–Ω—ã–º")
                
                # Criterion 3: Check 2026 data from Excel
                forecast = data.get('forecast', [])
                if forecast:
                    # Find 2026 data
                    year_2026_data = None
                    for year_data in forecast:
                        if year_data.get('year') == 2026:
                            year_2026_data = year_data
                            break
                    
                    if year_2026_data:
                        revenue_2026 = year_2026_data.get('revenue', 0)
                        expenses_2026 = year_2026_data.get('expenses', 0)
                        expected_revenue_2026 = expected_scenario_data["revenue_2026"]
                        expected_expenses_2026 = expected_scenario_data["expenses_2026"]
                        
                        print(f"üìä –î–∞–Ω–Ω—ã–µ 2026 –≥–æ–¥–∞ (–∏–∑ Excel):")
                        print(f"   - –í—ã—Ä—É—á–∫–∞: {revenue_2026:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue_2026:,})")
                        print(f"   - –†–∞—Å—Ö–æ–¥—ã: {expenses_2026:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_expenses_2026:,})")
                        
                        # Check 2026 values from Excel
                        if abs(revenue_2026 - expected_revenue_2026) > 1:
                            error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –≤—ã—Ä—É—á–∫–∞ 2026 –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Excel: {revenue_2026:,.0f} vs {expected_revenue_2026:,}"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ –í—ã—Ä—É—á–∫–∞ 2026 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Excel –¥–∞–Ω–Ω—ã–º")
                        
                        if abs(expenses_2026 - expected_expenses_2026) > 1:
                            error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: —Ä–∞—Å—Ö–æ–¥—ã 2026 –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç Excel: {expenses_2026:,.0f} vs {expected_expenses_2026:,}"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ –†–∞—Å—Ö–æ–¥—ã 2026 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç Excel –¥–∞–Ω–Ω—ã–º")
                    else:
                        error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –¥–∞–Ω–Ω—ã–µ –∑–∞ 2026 –≥–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ"
                        results.errors.append(error_msg)
                        print(error_msg)
                
                # Criterion 4: Check 6% annual indexation for 2027-2030 based on 2026 data
                if len(forecast) >= 2:
                    print(f"üìà –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é 6% –µ–∂–µ–≥–æ–¥–Ω–æ —Å 2027 –≥–æ–¥–∞ (–∫ –¥–∞–Ω–Ω—ã–º 2026):")
                    
                    # Find 2026 as base for indexation
                    base_2026_data = None
                    for year_data in forecast:
                        if year_data.get('year') == 2026:
                            base_2026_data = year_data
                            break
                    
                    if base_2026_data:
                        base_revenue_2026 = base_2026_data.get('revenue', 0)
                        base_expenses_2026 = base_2026_data.get('expenses', 0)
                        
                        # Check indexation for years 2027-2030
                        for year_data in forecast:
                            year = year_data.get('year', 0)
                            if year >= 2027 and year <= 2030:
                                years_from_2026 = year - 2026
                                expected_revenue = base_revenue_2026 * (1.06 ** years_from_2026)
                                expected_expenses = base_expenses_2026 * (1.06 ** years_from_2026)
                                
                                actual_revenue = year_data.get('revenue', 0)
                                actual_expenses = year_data.get('expenses', 0)
                                
                                print(f"   {year}: –≤—ã—Ä—É—á–∫–∞ {actual_revenue:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue:,.0f})")
                                print(f"        —Ä–∞—Å—Ö–æ–¥—ã {actual_expenses:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_expenses:,.0f})")
                                
                                # Allow small rounding differences
                                if abs(actual_revenue - expected_revenue) > 100:
                                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤—ã—Ä—É—á–∫–∏ {year}: {actual_revenue:,.0f} vs {expected_revenue:,.0f}"
                                    results.errors.append(error_msg)
                                    print(f"        ‚ùå –í—ã—Ä—É—á–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ 6%")
                                else:
                                    print(f"        ‚úÖ –í—ã—Ä—É—á–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ 6%")
                                
                                if abs(actual_expenses - expected_expenses) > 100:
                                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ {year}: {actual_expenses:,.0f} vs {expected_expenses:,.0f}"
                                    results.errors.append(error_msg)
                                    print(f"        ‚ùå –†–∞—Å—Ö–æ–¥—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ 6%")
                                else:
                                    print(f"        ‚úÖ –†–∞—Å—Ö–æ–¥—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ 6%")
                    else:
                        error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ 2026 –≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"
                        results.errors.append(error_msg)
                        print(error_msg)
                
                # Criterion 6: Check margin calculation correctness
                if forecast:
                    print(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏:")
                    
                    for year_data in forecast:
                        year = year_data.get('year', 0)
                        revenue = year_data.get('revenue', 0)
                        expenses = year_data.get('expenses', 0)
                        profit = year_data.get('profit', 0)
                        margin = year_data.get('margin', 0)
                        
                        # Calculate expected margin
                        expected_profit = revenue - expenses
                        expected_margin = (expected_profit / revenue * 100) if revenue > 0 else 0
                        
                        print(f"   {year}: –º–∞—Ä–∂–∞ {margin:.2f}% (—Ä–∞—Å—á–µ—Ç–Ω–∞—è {expected_margin:.2f}%)")
                        
                        # Check profit calculation
                        if abs(profit - expected_profit) > 1:
                            error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ {year}: {profit:,.0f} vs {expected_profit:,.0f}"
                            results.errors.append(error_msg)
                            print(f"        ‚ùå –ü—Ä–∏–±—ã–ª—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ")
                        else:
                            print(f"        ‚úÖ –ü—Ä–∏–±—ã–ª—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        
                        # Check margin calculation
                        if abs(margin - expected_margin) > 0.1:
                            error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏ {year}: {margin:.2f}% vs {expected_margin:.2f}%"
                            results.errors.append(error_msg)
                            print(f"        ‚ùå –ú–∞—Ä–∂–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ")
                        else:
                            print(f"        ‚úÖ –ú–∞—Ä–∂–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    
                    # Show average margin
                    margins = [f.get('margin', 0) for f in forecast]
                    avg_margin = sum(margins) / len(margins) if margins else 0
                    print(f"üìä –°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞: {avg_margin:.2f}%")
                
                # Show forecast summary
                if forecast:
                    print(f"üìã –ü—Ä–æ–≥–Ω–æ–∑ {scenario} (2026-2030):")
                    for f in forecast:
                        print(f"   {f['year']}: –≤—ã—Ä—É—á–∫–∞ {f['revenue']:,.0f}, —Ä–∞—Å—Ö–æ–¥—ã {f['expenses']:,.0f}, –ø—Ä–∏–±—ã–ª—å {f['profit']:,.0f}, –º–∞—Ä–∂–∞ {f['margin']:.1f}%")
                
                print("")  # Empty line for readability
            
            # Summary of all scenarios
            print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ü–û –í–°–ï–ú –°–¶–ï–ù–ê–†–ò–Ø–ú:")
            print("=" * 60)
            
            successful_scenarios = []
            failed_scenarios = []
            
            for scenario in scenarios:
                if scenario in scenario_results:
                    successful_scenarios.append(scenario)
                    data = scenario_results[scenario]
                    forecast = data.get('forecast', [])
                    if forecast:
                        first_year = forecast[0]
                        last_year = forecast[-1]
                        cleaners = first_year.get('cleaners_count', 'N/A')
                        avg_margin = sum(f.get('margin', 0) for f in forecast) / len(forecast)
                        
                        print(f"‚úÖ {scenario.upper()}: {cleaners} –º–µ—Å—Ç, –º–∞—Ä–∂–∞ {avg_margin:.1f}%")
                        print(f"   2026: {first_year['revenue']:,.0f} / {first_year['expenses']:,.0f}")
                        print(f"   2030: {last_year['revenue']:,.0f} / {last_year['expenses']:,.0f}")
                else:
                    failed_scenarios.append(scenario)
                    print(f"‚ùå {scenario.upper()}: –û–®–ò–ë–ö–ê")
            
            print("")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(successful_scenarios)}/3")
            if failed_scenarios:
                print(f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(failed_scenarios)}/3 - {failed_scenarios}")
            
            # Store results
            results.finance_endpoints['ufic_forecast'] = scenario_results
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –£–§–ò–¶: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_ufic_forecast_detailed_breakdown():
    """Test –£–§–ò–¶ –º–æ–¥–µ–ª—å forecast endpoint with detailed revenue and expense breakdown"""
    print("\n=== –¢–ï–°–¢ –ü–†–û–ì–ù–û–ó–ê –£–§–ò–¶ –ú–û–î–ï–õ–¨ –° –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ï–ô –î–û–•–û–î–û–í –ò –†–ê–°–•–û–î–û–í ===\n")
    
    results = TestResults()
    company = "–£–§–ò–¶ –º–æ–¥–µ–ª—å"
    scenario = "realistic"
    
    # Expected detailed breakdown for 2026 realistic scenario
    expected_2026_breakdown = {
        "revenue_breakdown": {
            "sewing": 15739136,
            "cleaning": 24615780,
            "outsourcing": 14332500
        },
        "expense_breakdown": {
            "labor": 36947205
        }
    }
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print(f"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è: {company}")
            print(f"üìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")
            print("üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:")
            print("   1. Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å—Ç–∞—Ç—É—Å")
            print("   2. –ö–∞–∂–¥—ã–π –≥–æ–¥ –≤ –º–∞—Å—Å–∏–≤–µ forecast —Å–æ–¥–µ—Ä–∂–∏—Ç:")
            print("      - revenue_breakdown —Å –ø–æ–ª—è–º–∏: sewing, cleaning, outsourcing")
            print("      - expense_breakdown —Å –ø–æ–ª–µ–º: labor")
            print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ 2026 –≥–æ–¥ (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π):")
            print(f"      - sewing ~{expected_2026_breakdown['revenue_breakdown']['sewing']:,}")
            print(f"      - cleaning ~{expected_2026_breakdown['revenue_breakdown']['cleaning']:,}")
            print(f"      - outsourcing ~{expected_2026_breakdown['revenue_breakdown']['outsourcing']:,}")
            print(f"      - labor ~{expected_2026_breakdown['expense_breakdown']['labor']:,}")
            print("   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é 6% –µ–∂–µ–≥–æ–¥–Ω–æ –¥–ª—è 2027-2030")
            print("   5. –°—É–º–º—ã –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –æ–±—â–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏")
            print("")
            
            # Test the forecast endpoint
            response = await client.get(
                f"{API_BASE}/finances/forecast",
                params={"company": company, "scenario": scenario}
            )
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            # Criterion 1: Check 200 status
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            print(f"‚úÖ Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å—Ç–∞—Ç—É—Å")
            
            # Check forecast array exists
            forecast = data.get('forecast', [])
            if not forecast:
                error_msg = "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ forecast"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            print(f"üìä –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(forecast)} –ª–µ—Ç")
            
            # Criterion 2: Check each year has breakdown fields
            breakdown_errors = []
            for year_data in forecast:
                year = year_data.get('year')
                
                # Check revenue_breakdown
                revenue_breakdown = year_data.get('revenue_breakdown')
                if not revenue_breakdown:
                    breakdown_errors.append(f"‚ùå –ì–æ–¥ {year}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç revenue_breakdown")
                else:
                    required_revenue_fields = ['sewing', 'cleaning', 'outsourcing']
                    for field in required_revenue_fields:
                        if field not in revenue_breakdown:
                            breakdown_errors.append(f"‚ùå –ì–æ–¥ {year}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field} –≤ revenue_breakdown")
                
                # Check expense_breakdown
                expense_breakdown = year_data.get('expense_breakdown')
                if not expense_breakdown:
                    breakdown_errors.append(f"‚ùå –ì–æ–¥ {year}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç expense_breakdown")
                else:
                    if 'labor' not in expense_breakdown:
                        breakdown_errors.append(f"‚ùå –ì–æ–¥ {year}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ labor –≤ expense_breakdown")
            
            if breakdown_errors:
                results.errors.extend(breakdown_errors)
                for error in breakdown_errors:
                    print(error)
            else:
                print("‚úÖ –í—Å–µ –≥–æ–¥—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
            
            # Criterion 3: Check 2026 detailed breakdown values
            year_2026 = None
            for year_data in forecast:
                if year_data.get('year') == 2026:
                    year_2026 = year_data
                    break
            
            if not year_2026:
                error_msg = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≥–æ–¥ 2026 –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                print(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é 2026 –≥–æ–¥–∞:")
                
                # Check revenue breakdown 2026
                revenue_breakdown_2026 = year_2026.get('revenue_breakdown', {})
                for category, expected_value in expected_2026_breakdown['revenue_breakdown'].items():
                    actual_value = revenue_breakdown_2026.get(category, 0)
                    tolerance = expected_value * 0.05  # 5% tolerance
                    
                    print(f"   - {category}: {actual_value:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å ~{expected_value:,})")
                    
                    if abs(actual_value - expected_value) > tolerance:
                        error_msg = f"‚ùå 2026 {category}: {actual_value:,.0f} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É ~{expected_value:,}"
                        results.errors.append(error_msg)
                        print(f"     {error_msg}")
                    else:
                        print(f"     ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
                
                # Check expense breakdown 2026
                expense_breakdown_2026 = year_2026.get('expense_breakdown', {})
                expected_labor = expected_2026_breakdown['expense_breakdown']['labor']
                actual_labor = expense_breakdown_2026.get('labor', 0)
                labor_tolerance = expected_labor * 0.05  # 5% tolerance
                
                print(f"   - labor: {actual_labor:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å ~{expected_labor:,})")
                
                if abs(actual_labor - expected_labor) > labor_tolerance:
                    error_msg = f"‚ùå 2026 labor: {actual_labor:,.0f} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É ~{expected_labor:,}"
                    results.errors.append(error_msg)
                    print(f"     {error_msg}")
                else:
                    print(f"     ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
            
            # Criterion 4: Check 6% indexation for 2027-2030
            print(f"\nüìà –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é 6% –µ–∂–µ–≥–æ–¥–Ω–æ –¥–ª—è 2027-2030:")
            
            if year_2026:
                base_revenue_breakdown = year_2026.get('revenue_breakdown', {})
                base_expense_breakdown = year_2026.get('expense_breakdown', {})
                
                for year_data in forecast:
                    year = year_data.get('year')
                    if year in [2027, 2028, 2029, 2030]:
                        years_from_2026 = year - 2026
                        expected_multiplier = 1.06 ** years_from_2026
                        
                        print(f"   –ì–æ–¥ {year} (–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è {expected_multiplier:.4f}):")
                        
                        # Check revenue breakdown indexation
                        current_revenue_breakdown = year_data.get('revenue_breakdown', {})
                        for category, base_value in base_revenue_breakdown.items():
                            expected_indexed_value = base_value * expected_multiplier
                            actual_indexed_value = current_revenue_breakdown.get(category, 0)
                            indexation_tolerance = expected_indexed_value * 0.02  # 2% tolerance for rounding
                            
                            if abs(actual_indexed_value - expected_indexed_value) > indexation_tolerance:
                                error_msg = f"‚ùå {year} {category}: {actual_indexed_value:,.0f} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é {expected_indexed_value:,.0f}"
                                results.errors.append(error_msg)
                                print(f"     {error_msg}")
                            else:
                                print(f"     ‚úÖ {category}: {actual_indexed_value:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_indexed_value:,.0f})")
                        
                        # Check expense breakdown indexation
                        current_expense_breakdown = year_data.get('expense_breakdown', {})
                        for category, base_value in base_expense_breakdown.items():
                            expected_indexed_value = base_value * expected_multiplier
                            actual_indexed_value = current_expense_breakdown.get(category, 0)
                            indexation_tolerance = expected_indexed_value * 0.02  # 2% tolerance for rounding
                            
                            if abs(actual_indexed_value - expected_indexed_value) > indexation_tolerance:
                                error_msg = f"‚ùå {year} {category}: {actual_indexed_value:,.0f} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é {expected_indexed_value:,.0f}"
                                results.errors.append(error_msg)
                                print(f"     {error_msg}")
                            else:
                                print(f"     ‚úÖ {category}: {actual_indexed_value:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_indexed_value:,.0f})")
            
            # Criterion 5: Check that breakdown sums match total revenue and expenses
            print(f"\nüßÆ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—â–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º:")
            
            for year_data in forecast:
                year = year_data.get('year')
                total_revenue = year_data.get('revenue', 0)
                total_expenses = year_data.get('expenses', 0)
                
                # Sum revenue breakdown
                revenue_breakdown = year_data.get('revenue_breakdown', {})
                breakdown_revenue_sum = sum(revenue_breakdown.values())
                
                # Sum expense breakdown
                expense_breakdown = year_data.get('expense_breakdown', {})
                breakdown_expense_sum = sum(expense_breakdown.values())
                
                # Check revenue sum
                revenue_tolerance = max(total_revenue * 0.01, 1)  # 1% tolerance or 1 ruble minimum
                if abs(breakdown_revenue_sum - total_revenue) > revenue_tolerance:
                    error_msg = f"‚ùå {year}: —Å—É–º–º–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã—Ä—É—á–∫–∏ ({breakdown_revenue_sum:,.0f}) –Ω–µ —Ä–∞–≤–Ω–∞ –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–µ ({total_revenue:,.0f})"
                    results.errors.append(error_msg)
                    print(f"   {error_msg}")
                else:
                    print(f"   ‚úÖ {year}: —Å—É–º–º–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã—Ä—É—á–∫–∏ = –æ–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ ({total_revenue:,.0f})")
                
                # Check expense sum
                expense_tolerance = max(total_expenses * 0.01, 1)  # 1% tolerance or 1 ruble minimum
                if abs(breakdown_expense_sum - total_expenses) > expense_tolerance:
                    error_msg = f"‚ùå {year}: —Å—É–º–º–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ ({breakdown_expense_sum:,.0f}) –Ω–µ —Ä–∞–≤–Ω–∞ –æ–±—â–∏–º —Ä–∞—Å—Ö–æ–¥–∞–º ({total_expenses:,.0f})"
                    results.errors.append(error_msg)
                    print(f"   {error_msg}")
                else:
                    print(f"   ‚úÖ {year}: —Å—É–º–º–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ = –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã ({total_expenses:,.0f})")
            
            # Summary
            if not results.errors:
                print(f"\nüéâ –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
                print("‚úÖ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –≤—Å–µ—Ö –≥–æ–¥–æ–≤")
                print("‚úÖ –ß–∏—Å–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º")
                print("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
                print("‚úÖ –°—É–º–º—ã –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ = –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            else:
                print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π: {len(results.errors)} –æ—à–∏–±–æ–∫")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_ufic_forecast_updated_optimistic():
    """Test updated –£–§–ò–¶ –º–æ–¥–µ–ª—å forecast endpoint with 10% indexation for optimistic scenario"""
    print("\n=== –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ü–†–û–ì–ù–û–ó–ê –£–§–ò–¶ –ú–û–î–ï–õ–¨ (–û–ü–¢–ò–ú–ò–°–¢–ò–ß–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô 10%) ===\n")
    
    results = TestResults()
    company = "–£–§–ò–¶ –º–æ–¥–µ–ª—å"
    
    # Expected staff counts in descriptions
    expected_descriptions = {
        "pessimistic": "–®–≤–µ–∏: 60, –£–±–æ—Ä—â–∏—Ü—ã: 60, –ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥: 14",
        "realistic": "–®–≤–µ–∏: 41, –£–±–æ—Ä—â–∏—Ü—ã: 40, –ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥: 5", 
        "optimistic": "–®–≤–µ–∏: 65, –£–±–æ—Ä—â–∏—Ü—ã: 70, –ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥: 20"
    }
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print(f"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {company}")
            print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:")
            print("   1. –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é 10% (–∞ –Ω–µ 6%)")
            print("   2. –û–ø–∏—Å–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞")
            print("   3. –î–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ—Å—Ç –º–µ–∂–¥—É –≥–æ–¥–∞–º–∏")
            print("   4. –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è (revenue_breakdown, expense_breakdown) –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 10%")
            print("")
            
            # Test all three scenarios to check descriptions
            for scenario in ["pessimistic", "realistic", "optimistic"]:
                print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")
                
                response = await client.get(
                    f"{API_BASE}/finances/forecast",
                    params={"company": company, "scenario": scenario}
                )
                
                print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è {scenario}: {response.status_code}")
                
                if response.status_code != 200:
                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –æ—à–∏–±–∫–∞ {response.status_code} - {response.text}"
                    results.errors.append(error_msg)
                    print(error_msg)
                    continue
                
                data = response.json()
                print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: 200 —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
                
                # Check scenario description contains staff counts
                scenario_info = data.get('scenario_info', {})
                description = scenario_info.get('description', '')
                expected_desc = expected_descriptions[scenario]
                
                print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {description}")
                print(f"üéØ –û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {expected_desc}")
                
                if expected_desc in description:
                    print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞")
                else:
                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é '{expected_desc}'"
                    results.errors.append(error_msg)
                    print(error_msg)
                
                # For optimistic scenario, check 10% indexation
                if scenario == "optimistic":
                    print(f"\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è (10% –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è):")
                    
                    forecast = data.get('forecast', [])
                    if not forecast:
                        error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ forecast –¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"
                        results.errors.append(error_msg)
                        print(error_msg)
                        continue
                    
                    # Find 2026 and subsequent years
                    year_2026_data = None
                    year_data = {}
                    
                    for year_item in forecast:
                        year = year_item.get('year')
                        if year == 2026:
                            year_2026_data = year_item
                        if year >= 2026:
                            year_data[year] = year_item
                    
                    if not year_2026_data:
                        error_msg = f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è 2026 –≥–æ–¥–∞ –≤ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏"
                        results.errors.append(error_msg)
                        print(error_msg)
                        continue
                    
                    # Get 2026 base values
                    revenue_2026 = year_2026_data.get('revenue', 0)
                    expenses_2026 = year_2026_data.get('expenses', 0)
                    
                    print(f"üìä –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è 2026:")
                    print(f"   - –í—ã—Ä—É—á–∫–∞: {revenue_2026:,.0f}")
                    print(f"   - –†–∞—Å—Ö–æ–¥—ã: {expenses_2026:,.0f}")
                    
                    # Check 10% growth for subsequent years
                    for year in [2027, 2028, 2029, 2030]:
                        if year not in year_data:
                            error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è {year} –≥–æ–¥–∞"
                            results.errors.append(error_msg)
                            print(error_msg)
                            continue
                        
                        year_item = year_data[year]
                        actual_revenue = year_item.get('revenue', 0)
                        actual_expenses = year_item.get('expenses', 0)
                        
                        # Calculate expected values with 10% compound growth
                        years_passed = year - 2026
                        growth_factor = 1.10 ** years_passed
                        expected_revenue = revenue_2026 * growth_factor
                        expected_expenses = expenses_2026 * growth_factor
                        
                        print(f"üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ {year} –≥–æ–¥–∞ (—Ä–æ—Å—Ç {years_passed} –ª–µ—Ç —Å 10% –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π):")
                        print(f"   - –í—ã—Ä—É—á–∫–∞: {actual_revenue:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue:,.0f})")
                        print(f"   - –†–∞—Å—Ö–æ–¥—ã: {actual_expenses:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_expenses:,.0f})")
                        
                        # Allow small rounding differences (0.1%)
                        revenue_diff_pct = abs(actual_revenue - expected_revenue) / expected_revenue * 100
                        expenses_diff_pct = abs(actual_expenses - expected_expenses) / expected_expenses * 100
                        
                        if revenue_diff_pct > 0.1:
                            error_msg = f"‚ùå {year}: –≤—ã—Ä—É—á–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 10% —Ä–æ—Å—Ç—É: {actual_revenue:,.0f} vs {expected_revenue:,.0f} (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {revenue_diff_pct:.2f}%)"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ –í—ã—Ä—É—á–∫–∞ {year} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 10% —Ä–æ—Å—Ç—É")
                        
                        if expenses_diff_pct > 0.1:
                            error_msg = f"‚ùå {year}: —Ä–∞—Å—Ö–æ–¥—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç 10% —Ä–æ—Å—Ç—É: {actual_expenses:,.0f} vs {expected_expenses:,.0f} (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {expenses_diff_pct:.2f}%)"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ –†–∞—Å—Ö–æ–¥—ã {year} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç 10% —Ä–æ—Å—Ç—É")
                    
                    # Check detailed breakdown indexation for optimistic scenario
                    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (revenue_breakdown, expense_breakdown):")
                    
                    # Check if 2026 has breakdown data
                    revenue_breakdown_2026 = year_2026_data.get('revenue_breakdown', {})
                    expense_breakdown_2026 = year_2026_data.get('expense_breakdown', {})
                    
                    if not revenue_breakdown_2026:
                        error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç revenue_breakdown –¥–ª—è 2026 –≥–æ–¥–∞"
                        results.errors.append(error_msg)
                        print(error_msg)
                    else:
                        print(f"‚úÖ revenue_breakdown –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è 2026")
                        print(f"   - sewing: {revenue_breakdown_2026.get('sewing', 0):,.0f}")
                        print(f"   - cleaning: {revenue_breakdown_2026.get('cleaning', 0):,.0f}")
                        print(f"   - outsourcing: {revenue_breakdown_2026.get('outsourcing', 0):,.0f}")
                    
                    if not expense_breakdown_2026:
                        error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç expense_breakdown –¥–ª—è 2026 –≥–æ–¥–∞"
                        results.errors.append(error_msg)
                        print(error_msg)
                    else:
                        print(f"‚úÖ expense_breakdown –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è 2026")
                        print(f"   - labor: {expense_breakdown_2026.get('labor', 0):,.0f}")
                    
                    # Check breakdown indexation for subsequent years
                    if revenue_breakdown_2026 and expense_breakdown_2026:
                        for year in [2027, 2028, 2029, 2030]:
                            if year not in year_data:
                                continue
                            
                            year_item = year_data[year]
                            revenue_breakdown = year_item.get('revenue_breakdown', {})
                            expense_breakdown = year_item.get('expense_breakdown', {})
                            
                            years_passed = year - 2026
                            growth_factor = 1.10 ** years_passed
                            
                            print(f"üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è {year} –≥–æ–¥–∞:")
                            
                            # Check revenue breakdown
                            for category in ['sewing', 'cleaning', 'outsourcing']:
                                base_value = revenue_breakdown_2026.get(category, 0)
                                expected_value = base_value * growth_factor
                                actual_value = revenue_breakdown.get(category, 0)
                                
                                if base_value > 0:  # Only check if base value exists
                                    diff_pct = abs(actual_value - expected_value) / expected_value * 100 if expected_value > 0 else 0
                                    
                                    if diff_pct > 0.1:
                                        error_msg = f"‚ùå {year}: revenue {category} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 10% —Ä–æ—Å—Ç—É: {actual_value:,.0f} vs {expected_value:,.0f}"
                                        results.errors.append(error_msg)
                                        print(f"   ‚ùå {category}: {actual_value:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_value:,.0f})")
                                    else:
                                        print(f"   ‚úÖ {category}: {actual_value:,.0f}")
                            
                            # Check expense breakdown
                            base_labor = expense_breakdown_2026.get('labor', 0)
                            expected_labor = base_labor * growth_factor
                            actual_labor = expense_breakdown.get('labor', 0)
                            
                            if base_labor > 0:
                                diff_pct = abs(actual_labor - expected_labor) / expected_labor * 100 if expected_labor > 0 else 0
                                
                                if diff_pct > 0.1:
                                    error_msg = f"‚ùå {year}: expense labor –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 10% —Ä–æ—Å—Ç—É: {actual_labor:,.0f} vs {expected_labor:,.0f}"
                                    results.errors.append(error_msg)
                                    print(f"   ‚ùå labor: {actual_labor:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_labor:,.0f})")
                                else:
                                    print(f"   ‚úÖ labor: {actual_labor:,.0f}")
                
                print("")  # Empty line for readability
            
            # Summary
            print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ü–†–û–ì–ù–û–ó–ê:")
            if not results.errors:
                print("üéâ –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê –í–´–ü–û–õ–ù–ï–ù–´:")
                print("‚úÖ –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è 10%")
                print("‚úÖ –û–ø–∏—Å–∞–Ω–∏—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–≤–µ–π, —É–±–æ—Ä—â–∏—Ü, –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥–∞")
                print("‚úÖ –†–∞—Å—á–µ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≥–æ–¥–æ–≤")
                print("‚úÖ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            else:
                print(f"‚ùå –ù–ê–ô–î–ï–ù–û –û–®–ò–ë–û–ö: {len(results.errors)}")
                for error in results.errors:
                    print(f"   - {error}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –£–§–ò–¶: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_forecast_updates_after_changes():
    """Test forecast updates after all changes as specified in review request"""
    print("\n=== –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ò–ô –ü–†–û–ì–ù–û–ó–û–í –ü–û–°–õ–ï –í–°–ï–• –ò–ó–ú–ï–ù–ï–ù–ò–ô ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é:")
            print("")
            
            # Test 1: –£–§–ò–¶ –º–æ–¥–µ–ª—å - –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å 10% –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π
            print("1Ô∏è‚É£ –£–§–ò–¶ –º–æ–¥–µ–ª—å - –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å 10% –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π")
            print("=" * 60)
            
            response = await client.get(
                f"{API_BASE}/finances/forecast",
                params={"company": "–£–§–ò–¶ –º–æ–¥–µ–ª—å", "scenario": "optimistic"}
            )
            
            print(f"üì° GET /api/finances/forecast?company=–£–§–ò–¶ –º–æ–¥–µ–ª—å&scenario=optimistic")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –£–§–ò–¶ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                data = response.json()
                results.finance_endpoints['ufic_optimistic'] = data
                
                print("‚úÖ –£–§–ò–¶ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # Check forecast years 2027-2030 for 10% indexation
                forecast = data.get('forecast', [])
                
                # Find 2026 base data for comparison
                base_2026 = None
                for year_data in forecast:
                    if year_data.get('year') == 2026:
                        base_2026 = year_data
                        break
                
                if base_2026:
                    base_revenue_2026 = base_2026.get('revenue', 0)
                    base_expenses_2026 = base_2026.get('expenses', 0)
                    
                    print(f"üìä –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ 2026:")
                    print(f"   - –í—ã—Ä—É—á–∫–∞: {base_revenue_2026:,.0f}")
                    print(f"   - –†–∞—Å—Ö–æ–¥—ã: {base_expenses_2026:,.0f}")
                    
                    # Check 10% indexation for years 2027-2030
                    indexation_years = [2027, 2028, 2029, 2030]
                    
                    for i, year in enumerate(indexation_years, 1):
                        year_data = None
                        for forecast_year in forecast:
                            if forecast_year.get('year') == year:
                                year_data = forecast_year
                                break
                        
                        if year_data:
                            actual_revenue = year_data.get('revenue', 0)
                            actual_expenses = year_data.get('expenses', 0)
                            
                            # Expected values with 10% indexation
                            expected_revenue = base_revenue_2026 * (1.10 ** i)
                            expected_expenses = base_expenses_2026 * (1.10 ** i)
                            
                            print(f"üìà {year} –≥–æ–¥ (10% –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è):")
                            print(f"   - –í—ã—Ä—É—á–∫–∞: {actual_revenue:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue:,.0f})")
                            print(f"   - –†–∞—Å—Ö–æ–¥—ã: {actual_expenses:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_expenses:,.0f})")
                            
                            # Check with 1% tolerance
                            revenue_diff = abs(actual_revenue - expected_revenue) / expected_revenue
                            expenses_diff = abs(actual_expenses - expected_expenses) / expected_expenses
                            
                            if revenue_diff > 0.01:
                                error_msg = f"‚ùå –£–§–ò–¶ {year}: –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤—ã—Ä—É—á–∫–∏ 10% (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {revenue_diff:.2%})"
                                results.errors.append(error_msg)
                                print(error_msg)
                            else:
                                print(f"‚úÖ –í—ã—Ä—É—á–∫–∞ {year}: –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è 10% –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                            
                            if expenses_diff > 0.01:
                                error_msg = f"‚ùå –£–§–ò–¶ {year}: –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ 10% (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {expenses_diff:.2%})"
                                results.errors.append(error_msg)
                                print(error_msg)
                            else:
                                print(f"‚úÖ –†–∞—Å—Ö–æ–¥—ã {year}: –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è 10% –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                        else:
                            error_msg = f"‚ùå –£–§–ò–¶: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è {year} –≥–æ–¥–∞"
                            results.errors.append(error_msg)
                            print(error_msg)
                    
                    # Check revenue_breakdown contains sewing, cleaning, outsourcing
                    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –¥–æ—Ö–æ–¥–æ–≤ (revenue_breakdown):")
                    
                    for year_data in forecast:
                        year = year_data.get('year')
                        if year >= 2027 and year <= 2030:
                            revenue_breakdown = year_data.get('revenue_breakdown', {})
                            
                            required_categories = ['sewing', 'cleaning', 'outsourcing']
                            for category in required_categories:
                                if category not in revenue_breakdown:
                                    error_msg = f"‚ùå –£–§–ò–¶ {year}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {category} –≤ revenue_breakdown"
                                    results.errors.append(error_msg)
                                    print(error_msg)
                                else:
                                    value = revenue_breakdown[category]
                                    print(f"‚úÖ {year} {category}: {value:,.0f}")
                else:
                    error_msg = "‚ùå –£–§–ò–¶: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ 2026 –≥–æ–¥–∞"
                    results.errors.append(error_msg)
                    print(error_msg)
            
            print("\n")
            
            # Test 2: –í–ê–® –î–û–ú –§–ê–ö–¢ - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å 30% –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π
            print("2Ô∏è‚É£ –í–ê–® –î–û–ú –§–ê–ö–¢ - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å 30% –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π")
            print("=" * 60)
            
            response = await client.get(
                f"{API_BASE}/finances/forecast",
                params={"company": "–í–ê–® –î–û–ú –§–ê–ö–¢", "scenario": "realistic"}
            )
            
            print(f"üì° GET /api/finances/forecast?company=–í–ê–® –î–û–ú –§–ê–ö–¢&scenario=realistic")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –í–ê–® –î–û–ú –§–ê–ö–¢ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                data = response.json()
                results.finance_endpoints['vasdom_fact_realistic'] = data
                
                print("‚úÖ –í–ê–® –î–û–ú –§–ê–ö–¢ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # Check forecast years 2027-2030 for 30% indexation
                forecast = data.get('forecast', [])
                
                # Find 2026 base data for comparison
                base_2026 = None
                for year_data in forecast:
                    if year_data.get('year') == 2026:
                        base_2026 = year_data
                        break
                
                if base_2026:
                    base_revenue_2026 = base_2026.get('revenue', 0)
                    base_expenses_2026 = base_2026.get('expenses', 0)
                    
                    print(f"üìä –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ 2026:")
                    print(f"   - –í—ã—Ä—É—á–∫–∞: {base_revenue_2026:,.0f}")
                    print(f"   - –†–∞—Å—Ö–æ–¥—ã: {base_expenses_2026:,.0f}")
                    
                    # Check 30% indexation for years 2027-2030
                    indexation_years = [2027, 2028, 2029, 2030]
                    
                    for i, year in enumerate(indexation_years, 1):
                        year_data = None
                        for forecast_year in forecast:
                            if forecast_year.get('year') == year:
                                year_data = forecast_year
                                break
                        
                        if year_data:
                            actual_revenue = year_data.get('revenue', 0)
                            actual_expenses = year_data.get('expenses', 0)
                            
                            # Expected values with 30% indexation
                            expected_revenue = base_revenue_2026 * (1.30 ** i)
                            expected_expenses = base_expenses_2026 * (1.30 ** i)
                            
                            print(f"üìà {year} –≥–æ–¥ (30% –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è):")
                            print(f"   - –í—ã—Ä—É—á–∫–∞: {actual_revenue:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue:,.0f})")
                            print(f"   - –†–∞—Å—Ö–æ–¥—ã: {actual_expenses:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_expenses:,.0f})")
                            
                            # Verify specific calculations
                            if year == 2027:
                                expected_2027 = base_revenue_2026 * 1.30
                                print(f"   - 2027 = 2026 * 1.30 = {base_revenue_2026:,.0f} * 1.30 = {expected_2027:,.0f}")
                            elif year == 2028:
                                expected_2028 = base_revenue_2026 * (1.30 ** 2)
                                print(f"   - 2028 = 2026 * 1.30^2 = {base_revenue_2026:,.0f} * {1.30**2:.4f} = {expected_2028:,.0f}")
                            elif year == 2029:
                                expected_2029 = base_revenue_2026 * (1.30 ** 3)
                                print(f"   - 2029 = 2026 * 1.30^3 = {base_revenue_2026:,.0f} * {1.30**3:.4f} = {expected_2029:,.0f}")
                            elif year == 2030:
                                expected_2030 = base_revenue_2026 * (1.30 ** 4)
                                print(f"   - 2030 = 2026 * 1.30^4 = {base_revenue_2026:,.0f} * {1.30**4:.4f} = {expected_2030:,.0f}")
                            
                            # Check with 1% tolerance
                            revenue_diff = abs(actual_revenue - expected_revenue) / expected_revenue
                            expenses_diff = abs(actual_expenses - expected_expenses) / expected_expenses
                            
                            if revenue_diff > 0.01:
                                error_msg = f"‚ùå –í–ê–® –î–û–ú –§–ê–ö–¢ {year}: –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤—ã—Ä—É—á–∫–∏ 30% (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {revenue_diff:.2%})"
                                results.errors.append(error_msg)
                                print(error_msg)
                            else:
                                print(f"‚úÖ –í—ã—Ä—É—á–∫–∞ {year}: –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è 30% –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                            
                            if expenses_diff > 0.01:
                                error_msg = f"‚ùå –í–ê–® –î–û–ú –§–ê–ö–¢ {year}: –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ 30% (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {expenses_diff:.2%})"
                                results.errors.append(error_msg)
                                print(error_msg)
                            else:
                                print(f"‚úÖ –†–∞—Å—Ö–æ–¥—ã {year}: –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è 30% –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                        else:
                            error_msg = f"‚ùå –í–ê–® –î–û–ú –§–ê–ö–¢: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è {year} –≥–æ–¥–∞"
                            results.errors.append(error_msg)
                            print(error_msg)
                    
                    # Check revenue_breakdown and expense_breakdown exist
                    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:")
                    
                    for year_data in forecast:
                        year = year_data.get('year')
                        if year >= 2027 and year <= 2030:
                            revenue_breakdown = year_data.get('revenue_breakdown', {})
                            expense_breakdown = year_data.get('expense_breakdown', {})
                            
                            if not revenue_breakdown:
                                error_msg = f"‚ùå –í–ê–® –î–û–ú –§–ê–ö–¢ {year}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç revenue_breakdown"
                                results.errors.append(error_msg)
                                print(error_msg)
                            else:
                                print(f"‚úÖ {year}: revenue_breakdown –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç ({len(revenue_breakdown)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π)")
                            
                            if not expense_breakdown:
                                error_msg = f"‚ùå –í–ê–® –î–û–ú –§–ê–ö–¢ {year}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç expense_breakdown"
                                results.errors.append(error_msg)
                                print(error_msg)
                            else:
                                print(f"‚úÖ {year}: expense_breakdown –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç ({len(expense_breakdown)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π)")
                else:
                    error_msg = "‚ùå –í–ê–® –î–û–ú –§–ê–ö–¢: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ 2026 –≥–æ–¥–∞"
                    results.errors.append(error_msg)
                    print(error_msg)
            
            print("\n")
            
            # Test 3: –í–ê–® –î–û–ú –º–æ–¥–µ–ª—å - —Ä–∞—Å—Ö–æ–¥—ã endpoint
            print("3Ô∏è‚É£ –í–ê–® –î–û–ú –º–æ–¥–µ–ª—å - —Ä–∞—Å—Ö–æ–¥—ã endpoint")
            print("=" * 60)
            
            response = await client.get(
                f"{API_BASE}/finances/expense-analysis",
                params={"company": "–í–ê–® –î–û–ú –º–æ–¥–µ–ª—å"}
            )
            
            print(f"üì° GET /api/finances/expense-analysis?company=–í–ê–® –î–û–ú –º–æ–¥–µ–ª—å")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –í–ê–® –î–û–ú –º–æ–¥–µ–ª—å —Ä–∞—Å—Ö–æ–¥—ã: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                data = response.json()
                results.finance_endpoints['vasdom_model_expenses'] = data
                
                print("‚úÖ –í–ê–® –î–û–ú –º–æ–¥–µ–ª—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                
                # Validate basic structure
                if 'expenses' in data:
                    expenses = data['expenses']
                    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤: {len(expenses)}")
                    
                    if 'total' in data:
                        total = data['total']
                        print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total:,.0f}")
                    
                    print("‚úÖ Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –æ—à–∏–±–æ–∫")
                else:
                    error_msg = "‚ùå –í–ê–® –î–û–ú –º–æ–¥–µ–ª—å: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'expenses')"
                    results.errors.append(error_msg)
                    print(error_msg)
            
            print("\n")
            
            # Summary of success criteria
            print("üìã –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:")
            print("=" * 60)
            
            success_criteria = [
                ("–£–§–ò–¶ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π: –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å 10% —Ä–∞–±–æ—Ç–∞–µ—Ç", 
                 'ufic_optimistic' in results.finance_endpoints and 
                 not any("–£–§–ò–¶" in str(error) and "10%" in str(error) for error in results.errors)),
                
                ("–í–ê–® –î–û–ú –§–ê–ö–¢: —Ä–æ—Å—Ç 30% + –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç", 
                 'vasdom_fact_realistic' in results.finance_endpoints and 
                 not any("–í–ê–® –î–û–ú –§–ê–ö–¢" in str(error) and "30%" in str(error) for error in results.errors)),
                
                ("–í–ê–® –î–û–ú –º–æ–¥–µ–ª—å: —Ä–∞—Å—Ö–æ–¥—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è", 
                 'vasdom_model_expenses' in results.finance_endpoints and 
                 not any("–í–ê–® –î–û–ú –º–æ–¥–µ–ª—å" in str(error) for error in results.errors))
            ]
            
            for criterion, is_met in success_criteria:
                status = "‚úÖ" if is_met else "‚ùå"
                print(f"{status} {criterion}")
            
            all_criteria_met = all(is_met for _, is_met in success_criteria)
            
            if all_criteria_met:
                print("\nüéâ –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê –í–´–ü–û–õ–ù–ï–ù–´!")
            else:
                print(f"\n‚ö†Ô∏è –ù–ï –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –í–´–ü–û–õ–ù–ï–ù–´")
                
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_forecast_endpoints_after_bugfix():
    """Test specific forecast endpoints after bug fix as requested in review"""
    print("\n=== –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–ì–ù–û–ó–û–í –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–®–ò–ë–ö–ò ===\n")
    
    results = TestResults()
    
    # Endpoints to test as specified in the review request
    test_endpoints = [
        ("–£–§–ò–¶ –º–æ–¥–µ–ª—å", "realistic"),
        ("–í–ê–® –î–û–ú –§–ê–ö–¢", "realistic"),
        ("–í–ê–® –î–û–ú –º–æ–¥–µ–ª—å", "realistic")
    ]
    
    print("üéØ –¶–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("   - –í—Å–µ —Ç—Ä–∏ endpoint –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 200 —Å—Ç–∞—Ç—É—Å")
    print("   - –ù–µ—Ç –æ—à–∏–±–æ–∫ 'cannot access local variable 'expense_breakdown_2025''")
    print("   - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π")
    print("   - –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è (revenue_breakdown, expense_breakdown) –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≥–¥–µ –Ω—É–∂–Ω–æ")
    print("")
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            for i, (company, scenario) in enumerate(test_endpoints, 1):
                print(f"üîç {i}. –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/forecast?company={company}&scenario={scenario}")
                
                # Test the forecast endpoint
                response = await client.get(
                    f"{API_BASE}/finances/forecast",
                    params={"company": company, "scenario": scenario}
                )
                
                print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
                
                # Check 200 status
                if response.status_code != 200:
                    error_msg = f"‚ùå {company}: –æ—à–∏–±–∫–∞ {response.status_code} - {response.text}"
                    results.errors.append(error_msg)
                    print(error_msg)
                    
                    # Check for specific error mentioned in review
                    if "cannot access local variable 'expense_breakdown_2025'" in response.text:
                        results.errors.append(f"‚ùå {company}: –Ω–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ 'expense_breakdown_2025'")
                        print("‚ùå –ù–∞–π–¥–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π!")
                    
                    continue
                
                print(f"‚úÖ {company}: 200 —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
                
                try:
                    data = response.json()
                    results.finance_endpoints[f'forecast_{company}_{scenario}'] = data
                    
                    # Check if forecast data is present
                    if 'forecast' not in data:
                        error_msg = f"‚ùå {company}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–æ–ª–µ 'forecast')"
                        results.errors.append(error_msg)
                        print(error_msg)
                        continue
                    
                    forecast_data = data.get('forecast', [])
                    if not forecast_data:
                        error_msg = f"‚ùå {company}: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞"
                        results.errors.append(error_msg)
                        print(error_msg)
                        continue
                    
                    print(f"‚úÖ {company}: –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç ({len(forecast_data)} –ª–µ—Ç)")
                    
                    # Check for detailed breakdown (revenue_breakdown, expense_breakdown)
                    has_revenue_breakdown = False
                    has_expense_breakdown = False
                    
                    for year_data in forecast_data:
                        if 'revenue_breakdown' in year_data:
                            has_revenue_breakdown = True
                        if 'expense_breakdown' in year_data:
                            has_expense_breakdown = True
                    
                    if has_revenue_breakdown:
                        print(f"‚úÖ {company}: –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Ö–æ–¥–æ–≤ (revenue_breakdown) –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    else:
                        print(f"‚ö†Ô∏è {company}: –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Ö–æ–¥–æ–≤ (revenue_breakdown) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    if has_expense_breakdown:
                        print(f"‚úÖ {company}: –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ (expense_breakdown) –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    else:
                        print(f"‚ö†Ô∏è {company}: –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ (expense_breakdown) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    # Show basic forecast info
                    if forecast_data:
                        first_year = forecast_data[0]
                        print(f"üìä {company}: –ø–µ—Ä–≤—ã–π –≥–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ - {first_year.get('year')}")
                        print(f"   - –í—ã—Ä—É—á–∫–∞: {first_year.get('revenue', 0):,.0f}")
                        print(f"   - –†–∞—Å—Ö–æ–¥—ã: {first_year.get('expenses', 0):,.0f}")
                        print(f"   - –ü—Ä–∏–±—ã–ª—å: {first_year.get('profit', 0):,.0f}")
                    
                    # Validate basic structure
                    required_fields = ['company', 'scenario', 'forecast']
                    for field in required_fields:
                        if field not in data:
                            error_msg = f"‚ùå {company}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}'"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {company}: –ø–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                except json.JSONDecodeError as e:
                    error_msg = f"‚ùå {company}: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON - {str(e)}"
                    results.errors.append(error_msg)
                    print(error_msg)
                except Exception as e:
                    error_msg = f"‚ùå {company}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ - {str(e)}"
                    results.errors.append(error_msg)
                    print(error_msg)
                
                print("")  # Empty line for readability
            
            # Summary of the quick check
            print("üìã –ò–¢–û–ì–ò –ë–´–°–¢–†–û–ô –ü–†–û–í–ï–†–ö–ò:")
            
            total_endpoints = len(test_endpoints)
            successful_endpoints = total_endpoints - len([e for e in results.errors if "–æ—à–∏–±–∫–∞" in e and ("200" not in e)])
            
            print(f"   - –í—Å–µ–≥–æ endpoint'–æ–≤: {total_endpoints}")
            print(f"   - –£—Å–ø–µ—à–Ω—ã—Ö (200 —Å—Ç–∞—Ç—É—Å): {successful_endpoints}")
            print(f"   - –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_endpoints - successful_endpoints}")
            
            # Check specific error
            expense_breakdown_errors = [e for e in results.errors if "expense_breakdown_2025" in e]
            if expense_breakdown_errors:
                print(f"   - ‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ —Å expense_breakdown_2025: {len(expense_breakdown_errors)}")
            else:
                print(f"   - ‚úÖ –û—à–∏–±–∫–∏ 'expense_breakdown_2025' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # Overall success criteria
            if not results.errors:
                print("\nüéâ –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê –í–´–ü–û–õ–ù–ï–ù–´:")
                print("   ‚úÖ –í—Å–µ endpoint –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 200 —Å—Ç–∞—Ç—É—Å")
                print("   ‚úÖ –ù–µ—Ç –æ—à–∏–±–æ–∫ 'cannot access local variable 'expense_breakdown_2025''")
                print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π")
                print("   ‚úÖ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≥–¥–µ –Ω—É–∂–Ω–æ")
            else:
                print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ ({len(results.errors)} –æ—à–∏–±–æ–∫)")
                for error in results.errors:
                    print(f"   {error}")
    
    except Exception as e:
        error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_vasdom_fact_forecast_critical_fix():
    """
    –ü–û–í–¢–û–†–ù–û–ï —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –í–ê–® –î–û–ú –§–ê–ö–¢ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    1. –í—Å–µ endpoint –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 200 —Å—Ç–∞—Ç—É—Å (–Ω–µ 500)
    2. –ù–µ—Ç –æ—à–∏–±–∫–∏ "annual_revenue_growth is not defined"
    3. –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    4. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ü–µ–Ω–∞—Ä–∏—è–º –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    """
    print("\n=== –ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ì–ù–û–ó–ê –í–ê–® –î–û–ú –§–ê–ö–¢ ===\n")
    
    results = TestResults()
    scenarios = ["pessimistic", "realistic", "optimistic"]
    company = "–í–ê–® –î–û–ú –§–ê–ö–¢"
    
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:")
    print("1. –í—Å–µ endpoint –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 200 —Å—Ç–∞—Ç—É—Å (–Ω–µ 500)")
    print("2. –ù–µ—Ç –æ—à–∏–±–∫–∏ 'annual_revenue_growth is not defined'")
    print("3. –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    print("")
    
    print("üìã –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–¶–ï–ù–ê–†–ò–Ø–ú:")
    print("–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ 2026 ~20%, –º–∞—Ä–∂–∞ ~20%, –ë–ï–ó –õ–µ–Ω–∏–Ω—Å–∫-–ö—É–∑–Ω–µ—Ü–∫–∏–π")
    print("–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ 2026 ~40%, –ë–ï–ó –õ–µ–Ω–∏–Ω—Å–∫-–ö—É–∑–Ω–µ—Ü–∫–∏–π")
    print("–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ 2026 ~60%, –ë–ï–ó –õ–µ–Ω–∏–Ω—Å–∫-–ö—É–∑–Ω–µ—Ü–∫–∏–π")
    print("")
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            critical_errors_found = False
            
            for scenario in scenarios:
                print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {scenario.upper()} —Å—Ü–µ–Ω–∞—Ä–∏–π...")
                
                # Test the forecast endpoint
                response = await client.get(
                    f"{API_BASE}/finances/forecast",
                    params={"company": company, "scenario": scenario}
                )
                
                print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê 1: –°—Ç–∞—Ç—É—Å 200
                if response.status_code != 200:
                    error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {scenario} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {response.status_code} –≤–º–µ—Å—Ç–æ 200"
                    results.errors.append(error_msg)
                    print(error_msg)
                    
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É annual_revenue_growth
                    if "annual_revenue_growth is not defined" in response.text:
                        critical_error = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {scenario} - 'annual_revenue_growth is not defined'"
                        results.errors.append(critical_error)
                        print(critical_error)
                        critical_errors_found = True
                    
                    print(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text[:500]}...")
                    continue
                
                print(f"‚úÖ {scenario}: 200 —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
                
                try:
                    data = response.json()
                    
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê 3: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                    if 'forecast' not in data or not data['forecast']:
                        error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {scenario} - –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
                        results.errors.append(error_msg)
                        print(error_msg)
                        continue
                    
                    forecast = data['forecast']
                    print(f"‚úÖ {scenario}: –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç ({len(forecast)} –ª–µ—Ç)")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    base_data = data.get('base_data', {})
                    base_revenue_2025 = base_data.get('revenue', 0)
                    
                    if len(forecast) > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º 2026 –≥–æ–¥ (–ø–µ—Ä–≤—ã–π –≥–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞)
                        year_2026 = forecast[0]
                        revenue_2026 = year_2026.get('revenue', 0)
                        expenses_2026 = year_2026.get('expenses', 0)
                        
                        if base_revenue_2025 > 0 and revenue_2026 > 0:
                            growth_rate = (revenue_2026 / base_revenue_2025 - 1) * 100
                            margin = ((revenue_2026 - expenses_2026) / revenue_2026) * 100 if revenue_2026 > 0 else 0
                            
                            print(f"üìä {scenario} 2026:")
                            print(f"   - –í—ã—Ä—É—á–∫–∞ 2025: {base_revenue_2025:,.0f}")
                            print(f"   - –í—ã—Ä—É—á–∫–∞ 2026: {revenue_2026:,.0f}")
                            print(f"   - –†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏: {growth_rate:.1f}%")
                            print(f"   - –ú–∞—Ä–∂–∞: {margin:.1f}%")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ü–µ–Ω–∞—Ä–∏—è–º
                            if scenario == "pessimistic":
                                if abs(growth_rate - 20) > 5:  # –î–æ–ø—É—Å–∫ ¬±5%
                                    print(f"‚ö†Ô∏è {scenario}: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ {growth_rate:.1f}% (–æ–∂–∏–¥–∞–ª–æ—Å—å ~20%)")
                                else:
                                    print(f"‚úÖ {scenario}: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
                                
                                if abs(margin - 20) > 5:  # –î–æ–ø—É—Å–∫ ¬±5%
                                    print(f"‚ö†Ô∏è {scenario}: –º–∞—Ä–∂–∞ {margin:.1f}% (–æ–∂–∏–¥–∞–ª–æ—Å—å ~20%)")
                                else:
                                    print(f"‚úÖ {scenario}: –º–∞—Ä–∂–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
                            
                            elif scenario == "realistic":
                                if abs(growth_rate - 40) > 5:  # –î–æ–ø—É—Å–∫ ¬±5%
                                    print(f"‚ö†Ô∏è {scenario}: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ {growth_rate:.1f}% (–æ–∂–∏–¥–∞–ª–æ—Å—å ~40%)")
                                else:
                                    print(f"‚úÖ {scenario}: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
                            
                            elif scenario == "optimistic":
                                if abs(growth_rate - 60) > 5:  # –î–æ–ø—É—Å–∫ ¬±5%
                                    print(f"‚ö†Ô∏è {scenario}: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ {growth_rate:.1f}% (–æ–∂–∏–¥–∞–ª–æ—Å—å ~60%)")
                                else:
                                    print(f"‚úÖ {scenario}: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ (–ë–ï–ó –õ–µ–Ω–∏–Ω—Å–∫-–ö—É–∑–Ω–µ—Ü–∫–∏–π)
                        expense_breakdown = year_2026.get('expense_breakdown', {})
                        if expense_breakdown:
                            print(f"‚úÖ {scenario}: –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –õ–µ–Ω–∏–Ω—Å–∫-–ö—É–∑–Ω–µ—Ü–∫–∏–π
                            leninsk_found = False
                            for category, amount in expense_breakdown.items():
                                if '–ª–µ–Ω–∏–Ω—Å–∫' in category.lower() or '–∫—É–∑–Ω–µ—Ü' in category.lower():
                                    leninsk_found = True
                                    error_msg = f"‚ùå {scenario}: –Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∞)"
                                    results.errors.append(error_msg)
                                    print(error_msg)
                            
                            if not leninsk_found:
                                print(f"‚úÖ {scenario}: –õ–µ–Ω–∏–Ω—Å–∫-–ö—É–∑–Ω–µ—Ü–∫–∏–π –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
                        else:
                            print(f"‚ö†Ô∏è {scenario}: –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    print("")
                    
                except json.JSONDecodeError as e:
                    error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {scenario} - –Ω–µ–≤–µ—Ä–Ω—ã–π JSON: {str(e)}"
                    results.errors.append(error_msg)
                    print(error_msg)
                    critical_errors_found = True
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            print("üéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
            
            if critical_errors_found:
                print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–´")
                results.errors.append("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò: annual_revenue_growth –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
            else:
                print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            
            working_scenarios = 0
            for scenario in scenarios:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (–±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫)
                scenario_errors = [e for e in results.errors if scenario in e and "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê" in e]
                if not scenario_errors:
                    working_scenarios += 1
            
            print(f"‚úÖ –†–∞–±–æ—á–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {working_scenarios}/3")
            
            if working_scenarios == 3:
                print("üéâ –í–°–ï –°–¶–ï–ù–ê–†–ò–ò –†–ê–ë–û–¢–ê–Æ–¢!")
            elif working_scenarios > 0:
                print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢")
            else:
                print("‚ùå –ù–ò –û–î–ò–ù –°–¶–ï–ù–ê–†–ò–ô –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
    
    except Exception as e:
        error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_vasdom_model_forecast_endpoint():
    """Test –í–ê–® –î–û–ú –º–æ–¥–µ–ª—å forecast endpoint after bugfix"""
    print("\n=== –¢–ï–°–¢ –ü–†–û–ì–ù–û–ó–ê –í–ê–® –î–û–ú –º–æ–¥–µ–ª—å –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–®–ò–ë–ö–ò ===\n")
    
    results = TestResults()
    company = "–í–ê–® –î–û–ú –º–æ–¥–µ–ª—å"
    scenario = "realistic"
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print(f"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {company}")
            print("üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:")
            print("   1. Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å—Ç–∞—Ç—É—Å (–Ω–µ 500)")
            print("   2. –ù–µ—Ç –æ—à–∏–±–∫–∏ 'cannot access local variable total_expenses_2025'")
            print("   3. –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç (5 –ª–µ—Ç)")
            print("   4. –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            print("")
            
            # Test the forecast endpoint
            response = await client.get(
                f"{API_BASE}/finances/forecast",
                params={"company": company, "scenario": scenario}
            )
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            # Check 200 status (not 500)
            if response.status_code != 200:
                error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {company} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {response.status_code} –≤–º–µ—Å—Ç–æ 200"
                results.errors.append(error_msg)
                print(error_msg)
                
                # Check for specific error
                if "cannot access local variable" in response.text and "total_expenses_2025" in response.text:
                    error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ 'cannot access local variable total_expenses_2025'"
                    results.errors.append(error_msg)
                    print(error_msg)
                
                print(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text[:500]}...")
                return results
            
            print(f"‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π 1: Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å—Ç–∞—Ç—É—Å ‚úì")
            
            data = response.json()
            
            # Check no error in response text
            response_text = response.text
            if "cannot access local variable" in response_text and "total_expenses_2025" in response_text:
                error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ 'cannot access local variable total_expenses_2025' –≤ –æ—Ç–≤–µ—Ç–µ"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            print(f"‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π 2: –ù–µ—Ç –æ—à–∏–±–∫–∏ 'cannot access local variable total_expenses_2025' ‚úì")
            
            # Validate response structure
            required_fields = ['company', 'scenario', 'base_year', 'base_data', 'forecast']
            for field in required_fields:
                if field not in data:
                    error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –æ—Ç–≤–µ—Ç–µ"
                    results.errors.append(error_msg)
                    print(error_msg)
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # Check forecast data for years 2026-2030
            forecast = data.get('forecast', [])
            if len(forecast) < 5:
                error_msg = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–µ—Ç –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å 5, –ø–æ–ª—É—á–µ–Ω–æ {len(forecast)}"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                print(f"‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π 3: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç ({len(forecast)} –ª–µ—Ç) ‚úì")
            
            # Check for detailed breakdown
            has_detailed_breakdown = False
            if forecast:
                sample_year = forecast[0]
                if 'revenue_breakdown' in sample_year and 'expense_breakdown' in sample_year:
                    has_detailed_breakdown = True
                    print(f"‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π 4: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚úì")
                else:
                    error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è (revenue_breakdown, expense_breakdown)"
                    results.errors.append(error_msg)
                    print(error_msg)
            
            # Show sample data
            if forecast:
                sample_year = forecast[0]
                year = sample_year.get('year')
                revenue = sample_year.get('revenue', 0)
                expenses = sample_year.get('expenses', 0)
                
                print(f"\nüìä –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {year}:")
                print(f"   - –í—ã—Ä—É—á–∫–∞: {revenue:,.0f} ‚ÇΩ")
                print(f"   - –†–∞—Å—Ö–æ–¥—ã: {expenses:,.0f} ‚ÇΩ")
                print(f"   - –ü—Ä–∏–±—ã–ª—å: {revenue - expenses:,.0f} ‚ÇΩ")
                
                if has_detailed_breakdown:
                    revenue_breakdown = sample_year.get('revenue_breakdown', {})
                    expense_breakdown = sample_year.get('expense_breakdown', {})
                    
                    print(f"   - –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Ö–æ–¥–æ–≤: {len(revenue_breakdown)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                    print(f"   - –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤: {len(expense_breakdown)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            
            # Get base year data
            base_data = data.get('base_data', {})
            base_revenue = base_data.get('revenue', 0)
            base_expenses = base_data.get('expenses', 0)
            
            print(f"\nüìä –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ 2025:")
            print(f"   - –í—ã—Ä—É—á–∫–∞: {base_revenue:,.0f} ‚ÇΩ")
            print(f"   - –†–∞—Å—Ö–æ–¥—ã: {base_expenses:,.0f} ‚ÇΩ")
            
            # Summary
            if not results.errors:
                print(f"\nüéâ –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê –í–´–ü–û–õ–ù–ï–ù–´!")
                print(f"‚úÖ –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
                print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            
    except Exception as e:
        error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {company}: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def main():
    """Main test execution - focused on –í–ê–® –î–û–ú –§–ê–ö–¢ forecast testing as per review request"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ü–†–û–ì–ù–û–ó–ê –í–ê–® –î–û–ú –§–ê–ö–¢ –° –ù–û–í–´–ú–ò –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú–ò")
    print("=" * 80)
    print(f"üåê Backend URL: {BACKEND_URL}")
    print(f"üîó API Base: {API_BASE}")
    print("=" * 80)
    
    # Check basic connectivity
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend...")
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(f"{API_BASE}/health")
            if response.status_code == 200:
                print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {str(e)}")
        return
    
    print("\n" + "=" * 80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ì–ù–û–ó–ê –í–ê–® –î–û–ú –§–ê–ö–¢")
    print("=" * 80)
    
    # Run the specific test for –í–ê–® –î–û–ú –§–ê–ö–¢ as requested
    result = await test_vasdom_fact_forecast_endpoint()
    
    # Print summary
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 80)
    
    if result.errors:
        print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(result.errors)}")
        print("\nüîç –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:")
        for i, error in enumerate(result.errors, 1):
            print(f"   {i}. {error}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        critical_errors = [e for e in result.errors if "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê" in e or "500" in e]
        if critical_errors:
            print(f"\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö: {len(critical_errors)}")
            print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–î–ê")
        else:
            print("\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            print("‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –º–∏–Ω–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –í—Å–µ —Ç—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚úÖ –†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        print("‚úÖ –†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        print("‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print("‚úÖ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –∑–∞—Ä–ø–ª–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    print("\n" + "=" * 80)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 80)
    
    return [("–í–ê–® –î–û–ú –§–ê–ö–¢ Forecast Test", result)]

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)