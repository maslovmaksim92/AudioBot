#!/usr/bin/env python3
"""
VasDom AudioBot - Backend API Testing
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–æ–º–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –£–ö –∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —É–±–æ—Ä–∫–∏
"""

import asyncio
import httpx
import json
import os
import sys
from datetime import datetime
from pathlib import Path

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ frontend/.env
def get_backend_url():
    """–ü–æ–ª—É—á–∏—Ç—å URL backend - —Å–Ω–∞—á–∞–ª–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π, –ø–æ—Ç–æ–º –∏–∑ frontend/.env"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π backend
    try:
        import httpx
        import asyncio
        
        async def check_local():
            try:
                async with httpx.AsyncClient(timeout=5.0) as client:
                    response = await client.get("http://localhost:8001/api/")
                    if response.status_code == 200:
                        return "http://localhost:8001/api"
            except:
                pass
            return None
        
        local_url = asyncio.run(check_local())
        if local_url:
            print("üè† Using local backend")
            return local_url
    except:
        pass
    
    # Fallback –∫ URL –∏–∑ frontend/.env
    try:
        frontend_env_path = Path(__file__).parent / "frontend" / ".env"
        if frontend_env_path.exists():
            with open(frontend_env_path, 'r') as f:
                for line in f:
                    if line.startswith('REACT_APP_BACKEND_URL='):
                        url = line.split('=', 1)[1].strip()
                        print("üåê Using external backend from .env")
                        return f"{url}/api"
        
        # Final fallback
        print("‚ö†Ô∏è Using fallback URL")
        return "https://crmunified.preview.emergentagent.com/api"
    except Exception as e:
        print(f"‚ùå Error reading backend URL: {e}")
        return "https://crmunified.preview.emergentagent.com/api"

BACKEND_URL = get_backend_url()
print(f"üîó Testing backend at: {BACKEND_URL}")

class HousesAPITester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è Houses API endpoints - –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –£–ö –∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —É–±–æ—Ä–∫–∏"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.houses_data = None
        
    async def test_get_houses(self):
        """–¢–µ—Å—Ç GET /api/cleaning/houses - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤ —Å –£–ö –∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
        print("\nüè† Testing GET /api/cleaning/houses...")
        
        try:
            async with httpx.AsyncClient(timeout=60.0) as client:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
                response = await client.get(f"{self.base_url}/cleaning/houses")
                
                print(f"Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ SUCCESS: API responded")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                    if "houses" in data:
                        houses = data.get("houses", [])
                        total = len(houses)
                        print(f"üìä Total houses loaded: {total}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        self.houses_data = houses
                        
                        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –£–ö
                        uk_analysis = self._analyze_management_companies(houses)
                        print(f"üè¢ Management Companies Analysis:")
                        print(f"   - Houses with –£–ö: {uk_analysis['filled']}/{total}")
                        print(f"   - Houses with null –£–ö: {uk_analysis['null']}/{total}")
                        print(f"   - Unique –£–ö found: {len(uk_analysis['unique_companies'])}")
                        
                        # –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —É–±–æ—Ä–∫–∏
                        schedule_analysis = self._analyze_cleaning_schedules(houses)
                        print(f"üìÖ Cleaning Schedules Analysis:")
                        print(f"   - Houses with september_schedule: {schedule_analysis['with_september']}/{total}")
                        print(f"   - Houses with cleaning dates: {schedule_analysis['with_dates']}/{total}")
                        print(f"   - Schedule fields found: {schedule_analysis['schedule_fields']}")
                        
                        # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                        source = data.get("source", "Unknown")
                        print(f"üîó Data source: {source}")
                        
                        return True
                    else:
                        print("‚ùå Invalid response structure - no 'houses' field")
                        return False
                else:
                    print(f"‚ùå FAILED: HTTP {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            return False
    
    async def test_get_houses_490(self):
        """–¢–µ—Å—Ç GET /api/cleaning/houses-490 - –ø–æ–ª—É—á–∏—Ç—å 490 –¥–æ–º–æ–≤"""
        print("\nüè† Testing GET /api/cleaning/houses-490...")
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.get(f"{self.base_url}/cleaning/houses-490")
                
                print(f"Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ SUCCESS: API responded")
                    
                    houses = data.get("houses", [])
                    total = len(houses)
                    print(f"üìä Houses loaded: {total} (expected: 490)")
                    
                    if total >= 490:
                        print("‚úÖ SUCCESS: 490+ houses loaded")
                    else:
                        print(f"‚ö†Ô∏è WARNING: Only {total} houses loaded, expected 490")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    category_used = data.get("category_used", "unknown")
                    print(f"üè∑Ô∏è Category used: {category_used}")
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö 5 –¥–æ–º–æ–≤
                    if houses:
                        sample_house = houses[0]
                        print(f"üìã Sample house fields: {list(sample_house.keys())}")
                        print(f"   - Address: {sample_house.get('address', 'N/A')}")
                        print(f"   - –£–ö: {sample_house.get('management_company', 'N/A')}")
                        print(f"   - Brigade: {sample_house.get('brigade', 'N/A')}")
                        print(f"   - September schedule: {bool(sample_house.get('september_schedule'))}")
                    
                    return True
                else:
                    print(f"‚ùå FAILED: HTTP {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            return False
    
    async def test_dashboard_stats(self):
        """–¢–µ—Å—Ç GET /api/dashboard - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–æ–≤"""
        print("\nüìä Testing GET /api/dashboard...")
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.get(f"{self.base_url}/dashboard")
                
                print(f"Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ SUCCESS: Dashboard API responded")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–º–æ–≤
                    stats = data.get("stats", {})
                    houses_count = stats.get("houses", 0)
                    employees_count = stats.get("employees", 0)
                    
                    print(f"üè† Houses in dashboard: {houses_count}")
                    print(f"üë• Employees: {employees_count}")
                    print(f"üè¢ Apartments: {stats.get('apartments', 0)}")
                    print(f"üö™ Entrances: {stats.get('entrances', 0)}")
                    print(f"üìä Floors: {stats.get('floors', 0)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
                    data_source = data.get("data_source", "Unknown")
                    print(f"üîó Data source: {data_source}")
                    
                    return True
                else:
                    print(f"‚ùå FAILED: HTTP {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            return False
    
    async def test_brigades_info(self):
        """–¢–µ—Å—Ç GET /api/cleaning/brigades - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∏–≥–∞–¥–∞—Ö"""
        print("\nüë• Testing GET /api/cleaning/brigades...")
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.get(f"{self.base_url}/cleaning/brigades")
                
                print(f"Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ SUCCESS: Brigades API responded")
                    
                    brigades = data.get("brigades", [])
                    total_employees = data.get("total_employees", 0)
                    total_brigades = data.get("total_brigades", 0)
                    
                    print(f"üë• Total brigades: {total_brigades}")
                    print(f"üë∑ Total employees: {total_employees}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∏–≥–∞–¥–∞—Ö
                    for brigade in brigades:
                        name = brigade.get("name", "Unknown")
                        employees = brigade.get("employees", 0)
                        areas = brigade.get("areas", [])
                        print(f"   - {name}: {employees} employees, areas: {areas}")
                    
                    return True
                else:
                    print(f"‚ùå FAILED: HTTP {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            return False
    
    async def test_production_debug_endpoints(self):
        """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö production debug endpoints"""
        print("\nüîç Testing Production Debug Endpoints...")
        
        debug_endpoints = [
            "/cleaning/production-debug",
            "/cleaning/fix-management-companies", 
            "/cleaning/houses-fixed"
        ]
        
        results = {}
        
        for endpoint in debug_endpoints:
            print(f"\nüîß Testing {endpoint}...")
            try:
                async with httpx.AsyncClient(timeout=30.0) as client:
                    response = await client.get(f"{self.base_url}{endpoint}")
                    
                    print(f"Status: {response.status_code}")
                    
                    if response.status_code == 200:
                        data = response.json()
                        print(f"‚úÖ SUCCESS: {endpoint}")
                        results[endpoint] = True
                        
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ endpoint
                        if "production-debug" in endpoint:
                            has_optimized = data.get("code_version_check", {}).get("has_optimized_loading", False)
                            has_enrichment = data.get("code_version_check", {}).get("has_enrichment_method", False)
                            print(f"   - Has optimized loading: {has_optimized}")
                            print(f"   - Has enrichment method: {has_enrichment}")
                        
                        elif "fix-management-companies" in endpoint:
                            fixed_houses = data.get("fixed_houses", [])
                            print(f"   - Fixed houses: {len(fixed_houses)}")
                            if fixed_houses:
                                sample = fixed_houses[0]
                                print(f"   - Sample –£–ö: {sample.get('fixed_management_company', 'N/A')}")
                        
                        elif "houses-fixed" in endpoint:
                            houses = data.get("houses", [])
                            print(f"   - Houses with forced enrichment: {len(houses)}")
                            
                    elif response.status_code == 404:
                        print(f"‚ùå NOT FOUND: {endpoint} - endpoint not deployed")
                        results[endpoint] = False
                    else:
                        print(f"‚ùå FAILED: HTTP {response.status_code}")
                        results[endpoint] = False
                        
            except Exception as e:
                print(f"‚ùå ERROR: {e}")
                results[endpoint] = False
        
        return results
    
    async def test_bitrix24_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Bitrix24"""
        print("\nüîó Testing Bitrix24 Integration...")
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.get(f"{self.base_url}/bitrix24/test")
                
                print(f"Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ SUCCESS: Bitrix24 integration working")
                    
                    connection = data.get("connection", "Unknown")
                    sample_deals = data.get("sample_deals", 0)
                    
                    print(f"üîó Connection status: {connection}")
                    print(f"üìä Sample deals loaded: {sample_deals}")
                    
                    return True
                else:
                    print(f"‚ùå FAILED: HTTP {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            return False
    
    def _analyze_management_companies(self, houses):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å —É–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏"""
        filled_count = 0
        null_count = 0
        unique_companies = set()
        
        for house in houses:
            uk = house.get("management_company")
            if uk and uk != "null" and uk.strip():
                filled_count += 1
                unique_companies.add(uk)
            else:
                null_count += 1
        
        return {
            "filled": filled_count,
            "null": null_count,
            "unique_companies": list(unique_companies)
        }
    
    def _analyze_cleaning_schedules(self, houses):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —É–±–æ—Ä–∫–∏"""
        with_september = 0
        with_dates = 0
        schedule_fields = set()
        
        for house in houses:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º september_schedule
            september_schedule = house.get("september_schedule")
            if september_schedule:
                with_september += 1
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä–∞—Ñ–∏–∫–∞
                if isinstance(september_schedule, dict):
                    if september_schedule.get("cleaning_date_1"):
                        with_dates += 1
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                    for key in september_schedule.keys():
                        schedule_fields.add(key)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è —Å –¥–∞—Ç–∞–º–∏ —É–±–æ—Ä–∫–∏
            for key, value in house.items():
                if "cleaning" in key.lower() or "schedule" in key.lower():
                    if value:
                        schedule_fields.add(key)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º UF_CRM –ø–æ–ª—è
                if key.startswith("UF_CRM_") and "174159" in key:
                    if value:
                        schedule_fields.add(key)
        
        return {
            "with_september": with_september,
            "with_dates": with_dates,
            "schedule_fields": list(schedule_fields)
        }

class MeetingsAPITester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è Meetings API endpoints"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.meeting_id = None
        
    async def test_get_meetings(self):
        """–¢–µ—Å—Ç GET /api/meetings - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ä–æ–∫"""
        print("\nüìã Testing GET /api/meetings...")
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.get(f"{self.base_url}/meetings")
                
                print(f"Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ SUCCESS: {data}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                    if "status" in data and "meetings" in data:
                        meetings_count = len(data.get("meetings", []))
                        print(f"üìä Found {meetings_count} meetings")
                        return True
                    else:
                        print("‚ùå Invalid response structure")
                        return False
                else:
                    print(f"‚ùå FAILED: HTTP {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            return False
    
    async def test_start_recording(self):
        """–¢–µ—Å—Ç POST /api/meetings/start-recording - –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏"""
        print("\nüé§ Testing POST /api/meetings/start-recording...")
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(f"{self.base_url}/meetings/start-recording")
                
                print(f"Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ SUCCESS: {data}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º meeting_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
                    if "meeting_id" in data:
                        self.meeting_id = data["meeting_id"]
                        print(f"üìù Meeting ID saved: {self.meeting_id}")
                        return True
                    else:
                        print("‚ùå No meeting_id in response")
                        return False
                else:
                    print(f"‚ùå FAILED: HTTP {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            return False
    
    async def test_stop_recording(self):
        """–¢–µ—Å—Ç POST /api/meetings/stop-recording - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏"""
        print("\n‚èπÔ∏è Testing POST /api/meetings/stop-recording...")
        
        if not self.meeting_id:
            print("‚ùå No meeting_id available, skipping test")
            return False
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º meeting_id –∫–∞–∫ query parameter
                response = await client.post(
                    f"{self.base_url}/meetings/stop-recording",
                    params={"meeting_id": self.meeting_id}
                )
                
                print(f"Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ SUCCESS: {data}")
                    return True
                else:
                    print(f"‚ùå FAILED: HTTP {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            return False

class VoiceAPITester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è Voice API endpoints"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url
    
    async def test_voice_process_post(self):
        """–¢–µ—Å—Ç POST /api/voice/process - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("\nüéôÔ∏è Testing POST /api/voice/process...")
        
        test_message = {
            "text": "–ü—Ä–∏–≤–µ—Ç! –°–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –¥–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏?",
            "user_id": "test_user_meetings"
        }
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    f"{self.base_url}/voice/process",
                    json=test_message
                )
                
                print(f"Status: {response.status_code}")
                print(f"Response text: {response.text}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ SUCCESS: {data}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                    if "response" in data:
                        ai_response = data["response"]
                        print(f"ü§ñ AI Response: {ai_response[:100]}...")
                        return True
                    else:
                        print("‚ùå Invalid response structure")
                        return False
                elif response.status_code == 422:
                    print("‚ùå Validation error - checking request format")
                    return False
                else:
                    print(f"‚ùå FAILED: HTTP {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    async def test_self_learning_status(self):
        """–¢–µ—Å—Ç GET /api/self-learning/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è"""
        print("\nüß† Testing GET /api/self-learning/status...")
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.get(f"{self.base_url}/self-learning/status")
                
                print(f"Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ SUCCESS: {data}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
                    status = data.get("status", "unknown")
                    emergent_llm = data.get("emergent_llm", {})
                    
                    print(f"üìä Self-learning status: {status}")
                    print(f"ü§ñ Emergent LLM mode: {emergent_llm.get('mode', 'unknown')}")
                    
                    return True
                else:
                    print(f"‚ùå FAILED: HTTP {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            return False

async def run_comprehensive_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ API –¥–æ–º–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º"""
    print("üöÄ VasDom AudioBot - Houses API Testing & Analysis")
    print("=" * 60)
    print("üéØ –¶–ï–õ–¨: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –£–ö –∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —É–±–æ—Ä–∫–∏")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–æ–≤
    houses_tester = HousesAPITester(BACKEND_URL)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Houses API
    print("\nüè† HOUSES API TESTING")
    print("-" * 30)
    
    results["get_houses"] = await houses_tester.test_get_houses()
    results["get_houses_490"] = await houses_tester.test_get_houses_490()
    results["dashboard_stats"] = await houses_tester.test_dashboard_stats()
    results["brigades_info"] = await houses_tester.test_brigades_info()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Production Debug Endpoints
    print("\nüîç PRODUCTION DEBUG ENDPOINTS")
    print("-" * 30)
    
    debug_results = await houses_tester.test_production_debug_endpoints()
    results.update(debug_results)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bitrix24 Integration
    print("\nüîó BITRIX24 INTEGRATION")
    print("-" * 30)
    
    results["bitrix24_integration"] = await houses_tester.test_bitrix24_integration()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìä TEST RESULTS SUMMARY")
    print("=" * 60)
    
    passed_tests = []
    failed_tests = []
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name:35} {status}")
        
        if result:
            passed_tests.append(test_name)
        else:
            failed_tests.append(test_name)
    
    print(f"\nüìà TOTAL: {len(passed_tests)}/{len(results)} tests passed")
    
    # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
    print("\nüîç CRITICAL ISSUES ANALYSIS")
    print("=" * 60)
    
    critical_issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –£–ö
    if not results.get("get_houses", False):
        critical_issues.append("‚ùå –ö–†–ò–¢–ò–ß–ù–û: –û—Å–Ω–æ–≤–Ω–æ–π API /api/cleaning/houses –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å 490 –¥–æ–º–∞–º–∏
    if not results.get("get_houses_490", False):
        critical_issues.append("‚ùå –ö–†–ò–¢–ò–ß–ù–û: API /api/cleaning/houses-490 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ endpoints
    debug_endpoints_working = any([
        results.get("/cleaning/production-debug", False),
        results.get("/cleaning/fix-management-companies", False),
        results.get("/cleaning/houses-fixed", False)
    ])
    
    if not debug_endpoints_working:
        critical_issues.append("‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–æ–≤—ã–µ production debug endpoints –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã (404)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Bitrix24
    if not results.get("bitrix24_integration", False):
        critical_issues.append("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Bitrix24")
    
    if critical_issues:
        print("üö® –ù–ê–ô–î–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
        for issue in critical_issues:
            print(f"  {issue}")
    else:
        print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 60)
    
    if failed_tests:
        print("üîß –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:")
        for test in failed_tests:
            if "production-debug" in test or "fix-management" in test or "houses-fixed" in test:
                print(f"  - {test}: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–ø–ª–æ–π –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –∫–æ–¥–∞ –Ω–∞ Render")
            elif "houses" in test:
                print(f"  - {test}: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –æ—Å–Ω–æ–≤–Ω—ã—Ö API endpoints")
            elif "bitrix24" in test:
                print(f"  - {test}: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Bitrix24 webhook")
    
    if passed_tests:
        print(f"\n‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò:")
        for test in passed_tests:
            print(f"  - {test}")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–æ–º–æ–≤
    if houses_tester.houses_data:
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –î–û–ú–û–í")
        print("=" * 60)
        
        houses = houses_tester.houses_data
        total = len(houses)
        
        # –ê–Ω–∞–ª–∏–∑ –£–ö
        uk_analysis = houses_tester._analyze_management_companies(houses)
        uk_percentage = (uk_analysis['filled'] / total * 100) if total > 0 else 0
        
        print(f"üè¢ –£–ü–†–ê–í–õ–Ø–Æ–©–ò–ï –ö–û–ú–ü–ê–ù–ò–ò:")
        print(f"   - –í—Å–µ–≥–æ –¥–æ–º–æ–≤: {total}")
        print(f"   - –° –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –£–ö: {uk_analysis['filled']} ({uk_percentage:.1f}%)")
        print(f"   - –° –ø—É—Å—Ç—ã–º–∏ –£–ö (null): {uk_analysis['null']} ({100-uk_percentage:.1f}%)")
        print(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –£–ö: {len(uk_analysis['unique_companies'])}")
        
        if uk_analysis['unique_companies']:
            print(f"   - –ü—Ä–∏–º–µ—Ä—ã –£–ö: {uk_analysis['unique_companies'][:5]}")
        
        # –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        schedule_analysis = houses_tester._analyze_cleaning_schedules(houses)
        schedule_percentage = (schedule_analysis['with_september'] / total * 100) if total > 0 else 0
        
        print(f"\nüìÖ –ì–†–ê–§–ò–ö–ò –£–ë–û–†–ö–ò:")
        print(f"   - –° –≥—Ä–∞—Ñ–∏–∫–æ–º —Å–µ–Ω—Ç—è–±—Ä—è: {schedule_analysis['with_september']} ({schedule_percentage:.1f}%)")
        print(f"   - –° –¥–∞—Ç–∞–º–∏ —É–±–æ—Ä–∫–∏: {schedule_analysis['with_dates']}")
        print(f"   - –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {len(schedule_analysis['schedule_fields'])}")
        
        if schedule_analysis['schedule_fields']:
            print(f"   - –ü–æ–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {schedule_analysis['schedule_fields'][:5]}")
    
    return results

if __name__ == "__main__":
    print(f"üîó Backend URL: {BACKEND_URL}")
    results = asyncio.run(run_comprehensive_tests())
    
    # Exit code –¥–ª—è CI/CD
    failed_count = sum(1 for result in results.values() if not result)
    sys.exit(failed_count)