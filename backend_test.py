#!/usr/bin/env python3
"""
Backend Test Suite for VasDom AudioBot System
Testing Finance Module and Plannerka functionality

This test validates:
FINANCE MODULE:
1. GET /api/finances/cash-flow - –¥–≤–∏–∂–µ–Ω–∏–µ –¥–µ–Ω–µ–≥
2. GET /api/finances/profit-loss - –ø—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–∏  
3. GET /api/finances/balance-sheet - –±–∞–ª–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç
4. GET /api/finances/expense-analysis - –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
5. GET /api/finances/available-months - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã
6. GET /api/finances/debts - –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏
7. GET /api/finances/inventory - —Ç–æ–≤–∞—Ä–Ω—ã–µ –∑–∞–ø–∞—Å—ã
8. GET /api/finances/dashboard - —Å–≤–æ–¥–∫–∞
9. GET /api/finances/transactions - —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
10. POST /api/finances/transactions - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
11. GET /api/finances/revenue/monthly - —Ä—É—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞

PLANNERKA MODULE:
1. POST /api/plannerka/create - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω—ë—Ä–∫–∏
2. POST /api/plannerka/analyze/{id} - AI-–∞–Ω–∞–ª–∏–∑ —Å GPT-4o
3. GET /api/plannerka/list - —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω—ë—Ä–æ–∫
"""

import asyncio
import httpx
import json
from datetime import datetime
from typing import Dict, List, Any, Optional
import os

# Backend URL from environment
BACKEND_URL = "https://airealtime.preview.emergentagent.com"
API_BASE = f"{BACKEND_URL}/api"

class TestResults:
    def __init__(self):
        # Plannerka results
        self.created_meeting_id = None
        self.created_meeting_data = None
        self.analysis_result = None
        self.meetings_list = []
        self.openai_working = False
        self.tasks_extracted = []
        self.summary_generated = False
        
        # Finance results
        self.finance_endpoints = {}
        self.created_transaction_id = None
        self.database_working = False
        
        # Common
        self.errors = []

async def test_plannerka_create_endpoint():
    """Test plannerka creation endpoint"""
    print("=== –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–ù–Å–†–ö–ò ===\n")
    
    results = PlannerkaTestResults()
    
    # Test data from the review request
    test_data = {
        "title": "–¢–µ—Å—Ç–æ–≤–∞—è –ø–ª–∞–Ω—ë—Ä–∫–∞",
        "transcription": "–û–±—Å—É–∂–¥–∞–ª–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é. –ò–≤–∞–Ω–æ–≤—É –ø–æ—Ä—É—á–µ–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç –¥–æ –ø—è—Ç–Ω–∏—Ü—ã. –ü–µ—Ç—Ä–æ–≤—É –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ —Å—Ä–µ–¥—ã. –°–∏–¥–æ—Ä–æ–≤—É –ø–æ—Ä—É—á–µ–Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–æ —á–µ—Ç–≤–µ—Ä–≥–∞.",
        "participants": ["–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–∏–¥–æ—Ä–æ–≤"]
    }
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üîç –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω—ë—Ä–∫—É...")
            print(f"üìù –î–∞–Ω–Ω—ã–µ: {json.dumps(test_data, ensure_ascii=False, indent=2)}")
            
            # Test the create endpoint
            response = await client.post(
                f"{API_BASE}/plannerka/create",
                json=test_data,
                headers={"Content-Type": "application/json"}
            )
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω—ë—Ä–∫–∏: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.created_meeting_data = data
            results.created_meeting_id = data.get('id')
            results.database_working = True
            
            print(f"‚úÖ –ü–ª–∞–Ω—ë—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {results.created_meeting_id}")
            print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:")
            print(f"   - ID: {data.get('id')}")
            print(f"   - Title: {data.get('title')}")
            print(f"   - Date: {data.get('date')}")
            print(f"   - Participants: {data.get('participants')}")
            print(f"   - Transcription length: {len(data.get('transcription', ''))}")
            print(f"   - Summary: {data.get('summary')}")
            print(f"   - Tasks: {data.get('tasks')}")
            
            # Validate response structure
            required_fields = ['id', 'title', 'date', 'transcription', 'participants', 'created_at']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –æ—Ç–≤–µ—Ç–µ")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # Validate data integrity
            if data.get('title') != test_data['title']:
                results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π title: –æ–∂–∏–¥–∞–ª—Å—è '{test_data['title']}', –ø–æ–ª—É—á–µ–Ω '{data.get('title')}'")
            
            if data.get('transcription') != test_data['transcription']:
                results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è transcription")
            
            if data.get('participants') != test_data['participants']:
                results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ participants")
            
            if not results.errors:
                print("‚úÖ –í—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω—ë—Ä–∫–∏: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_plannerka_analyze_endpoint(meeting_id: str):
    """Test plannerka AI analysis endpoint"""
    print("\n=== –¢–ï–°–¢ AI-–ê–ù–ê–õ–ò–ó–ê –ü–õ–ê–ù–Å–†–ö–ò ===\n")
    
    results = PlannerkaTestResults()
    results.created_meeting_id = meeting_id
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:  # Longer timeout for AI analysis
            print(f"ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω—ë—Ä–∫–∏ ID: {meeting_id}")
            
            # Test the analyze endpoint
            response = await client.post(f"{API_BASE}/plannerka/analyze/{meeting_id}")
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                
                # Check for specific OpenAI errors
                if "OPENAI_API_KEY" in response.text:
                    results.errors.append("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                elif "transcription is too short" in response.text:
                    results.errors.append("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è")
                
                return results
            
            data = response.json()
            results.analysis_result = data
            results.openai_working = True
            
            print(f"‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
            print(f"   - Success: {data.get('success')}")
            print(f"   - Tasks count: {data.get('tasks_count')}")
            
            # Check summary
            summary = data.get('summary', '')
            if summary:
                results.summary_generated = True
                print(f"‚úÖ –°–∞–º–º–∞—Ä–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ({len(summary)} —Å–∏–º–≤–æ–ª–æ–≤)")
                print(f"üìù –°–∞–º–º–∞—Ä–∏: {summary[:200]}{'...' if len(summary) > 200 else ''}")
            else:
                results.errors.append("‚ùå –°–∞–º–º–∞—Ä–∏ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            
            # Check tasks
            tasks = data.get('tasks', [])
            results.tasks_extracted = tasks
            
            if tasks:
                print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
                print("üìã –ó–∞–¥–∞—á–∏:")
                
                for i, task in enumerate(tasks, 1):
                    title = task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    assignee = task.get('assignee', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')
                    deadline = task.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
                    priority = task.get('priority', 'medium')
                    
                    print(f"   {i}. {title}")
                    print(f"      - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee}")
                    print(f"      - –°—Ä–æ–∫: {deadline}")
                    print(f"      - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
                    
                    # Validate task structure
                    required_task_fields = ['title']
                    for field in required_task_fields:
                        if field not in task or not task[field]:
                            results.errors.append(f"‚ùå –ó–∞–¥–∞—á–∞ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}'")
                
                # Check if expected tasks are found
                expected_assignees = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–°–∏–¥–æ—Ä–æ–≤']
                found_assignees = [task.get('assignee', '') for task in tasks]
                
                for expected in expected_assignees:
                    if any(expected in assignee for assignee in found_assignees):
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è {expected}")
                    else:
                        print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è {expected}")
                
            else:
                results.errors.append("‚ùå –ó–∞–¥–∞—á–∏ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
            
            # Validate response structure
            required_fields = ['success', 'summary', 'tasks', 'tasks_count']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –æ—Ç–≤–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∞")
            
            # Check if success is true
            if not data.get('success'):
                results.errors.append("‚ùå –ü–æ–ª–µ 'success' –Ω–µ —Ä–∞–≤–Ω–æ true")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AI-–∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_plannerka_list_endpoint():
    """Test plannerka list endpoint"""
    print("\n=== –¢–ï–°–¢ –°–ü–ò–°–ö–ê –ü–õ–ê–ù–Å–†–û–ö ===\n")
    
    results = PlannerkaTestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω—ë—Ä–æ–∫...")
            
            # Test the list endpoint
            response = await client.get(f"{API_BASE}/plannerka/list?limit=20&offset=0")
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.meetings_list = data.get('meetings', [])
            
            print(f"‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–Ω—ë—Ä–æ–∫: {data.get('count', 0)}")
            print(f"   - –ü–ª–∞–Ω—ë—Ä–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ: {len(results.meetings_list)}")
            
            # Validate response structure
            required_fields = ['meetings', 'count']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –æ—Ç–≤–µ—Ç–µ —Å–ø–∏—Å–∫–∞")
            
            # Check meetings structure
            if results.meetings_list:
                print("üìã –ü—Ä–∏–º–µ—Ä—ã –ø–ª–∞–Ω—ë—Ä–æ–∫:")
                
                for i, meeting in enumerate(results.meetings_list[:3], 1):  # Show first 3
                    meeting_id = meeting.get('id', 'N/A')
                    title = meeting.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    date = meeting.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                    participants_count = len(meeting.get('participants', []))
                    tasks_count = len(meeting.get('tasks', []))
                    has_summary = bool(meeting.get('summary'))
                    
                    print(f"   {i}. ID: {meeting_id}")
                    print(f"      - –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                    print(f"      - –î–∞—Ç–∞: {date}")
                    print(f"      - –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}")
                    print(f"      - –ó–∞–¥–∞—á: {tasks_count}")
                    print(f"      - –ï—Å—Ç—å —Å–∞–º–º–∞—Ä–∏: {has_summary}")
                
                # Validate meeting structure
                sample_meeting = results.meetings_list[0]
                expected_meeting_fields = ['id', 'title', 'date', 'transcription', 'participants']
                
                for field in expected_meeting_fields:
                    if field not in sample_meeting:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–ª–∞–Ω—ë—Ä–∫–∏")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
            else:
                print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω—ë—Ä–æ–∫ –ø—É—Å—Ç")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω—ë—Ä–æ–∫: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_openai_configuration():
    """Test OpenAI API configuration"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é OpenAI...")
    
    try:
        # Check if OPENAI_API_KEY is configured by testing a simple endpoint
        async with httpx.AsyncClient(timeout=15.0) as client:
            # We'll test this indirectly through the health endpoint
            response = await client.get(f"{API_BASE}/health")
            if response.status_code == 200:
                print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                
        # Check environment variables (we can't directly access them, but we can infer from API responses)
        print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —á–µ—Ä–µ–∑ API –≤—ã–∑–æ–≤—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")

async def test_database_connection():
    """Test database connection through plannerka endpoints"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            # Test database connection by trying to get the list
            response = await client.get(f"{API_BASE}/plannerka/list?limit=1")
            
            if response.status_code == 200:
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
                return True
            elif response.status_code == 500 and "Database connection error" in response.text:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.status_code}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {str(e)}")
        return False

async def main():
    """Main test function"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ü–ª–∞–Ω—ë—Ä–æ–∫ VasDom")
    print(f"üåê Backend URL: {BACKEND_URL}")
    print(f"üì° API Base: {API_BASE}")
    print("=" * 60)
    
    all_errors = []
    
    # Test database connection first
    db_working = await test_database_connection()
    if not db_working:
        all_errors.append("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    # Test OpenAI configuration
    await test_openai_configuration()
    
    # Test plannerka creation
    create_results = await test_plannerka_create_endpoint()
    all_errors.extend(create_results.errors)
    
    # Test AI analysis (only if creation was successful)
    analysis_results = None
    if create_results.created_meeting_id and not create_results.errors:
        analysis_results = await test_plannerka_analyze_endpoint(create_results.created_meeting_id)
        all_errors.extend(analysis_results.errors)
    else:
        print("\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç AI-–∞–Ω–∞–ª–∏–∑–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω—ë—Ä–∫–∏")
    
    # Test list endpoint
    list_results = await test_plannerka_list_endpoint()
    all_errors.extend(list_results.errors)
    
    # Final summary
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–õ–ê–ù–Å–†–û–ö:")
    print("=" * 60)
    
    if all_errors:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò:")
        for error in all_errors:
            print(f"   {error}")
    else:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç: {db_working}")
    print(f"   - –ü–ª–∞–Ω—ë—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {create_results.created_meeting_id is not None}")
    print(f"   - OpenAI –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç: {analysis_results.openai_working if analysis_results else False}")
    print(f"   - –°–∞–º–º–∞—Ä–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {analysis_results.summary_generated if analysis_results else False}")
    print(f"   - –ó–∞–¥–∞—á –∏–∑–≤–ª–µ—á–µ–Ω–æ: {len(analysis_results.tasks_extracted) if analysis_results else 0}")
    print(f"   - –ü–ª–∞–Ω—ë—Ä–æ–∫ –≤ —Å–ø–∏—Å–∫–µ: {len(list_results.meetings_list)}")
    
    # Detailed results
    if create_results.created_meeting_id:
        print(f"\nüÜî ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–ª–∞–Ω—ë—Ä–∫–∏: {create_results.created_meeting_id}")
    
    if analysis_results and analysis_results.tasks_extracted:
        print(f"\nüìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        for i, task in enumerate(analysis_results.tasks_extracted, 1):
            print(f"   {i}. {task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ‚Üí {task.get('assignee', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}")
    
    # Return success/failure
    return len(all_errors) == 0

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)