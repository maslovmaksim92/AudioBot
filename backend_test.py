#!/usr/bin/env python3
"""
Backend Test Suite for VasDom AudioBot System
Testing Finance Module and Plannerka functionality

This test validates:
FINANCE MODULE:
1. GET /api/finances/cash-flow - –¥–≤–∏–∂–µ–Ω–∏–µ –¥–µ–Ω–µ–≥
2. GET /api/finances/profit-loss - –ø—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–∏  
3. GET /api/finances/balance-sheet - –±–∞–ª–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç
4. GET /api/finances/expense-analysis - –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
5. GET /api/finances/available-months - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã
6. GET /api/finances/debts - –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏
7. GET /api/finances/inventory - —Ç–æ–≤–∞—Ä–Ω—ã–µ –∑–∞–ø–∞—Å—ã
8. GET /api/finances/dashboard - —Å–≤–æ–¥–∫–∞
9. GET /api/finances/transactions - —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
10. POST /api/finances/transactions - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
11. GET /api/finances/revenue/monthly - —Ä—É—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞

PLANNERKA MODULE:
1. POST /api/plannerka/create - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω—ë—Ä–∫–∏
2. POST /api/plannerka/analyze/{id} - AI-–∞–Ω–∞–ª–∏–∑ —Å GPT-4o
3. GET /api/plannerka/list - —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω—ë—Ä–æ–∫
"""

import asyncio
import httpx
import json
from datetime import datetime
from typing import Dict, List, Any, Optional
import os

# Backend URL from environment
BACKEND_URL = "https://finance-forecast-14.preview.emergentagent.com"
API_BASE = f"{BACKEND_URL}/api"

class TestResults:
    def __init__(self):
        # Plannerka results
        self.created_meeting_id = None
        self.created_meeting_data = None
        self.analysis_result = None
        self.meetings_list = []
        self.openai_working = False
        self.tasks_extracted = []
        self.summary_generated = False
        
        # Finance results
        self.finance_endpoints = {}
        self.created_transaction_id = None
        self.database_working = False
        
        # Common
        self.errors = []

async def test_finance_cash_flow():
    """Test finance cash flow endpoint"""
    print("=== –¢–ï–°–¢ –î–í–ò–ñ–ï–ù–ò–Ø –î–ï–ù–ï–ì (CASH FLOW) ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/cash-flow...")
            
            response = await client.get(f"{API_BASE}/finances/cash-flow")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ cash-flow: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['cash_flow'] = data
            
            print("‚úÖ Cash flow –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:")
            
            # Validate structure
            required_fields = ['cash_flow', 'summary']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ cash-flow")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # Check summary structure
            if 'summary' in data:
                summary = data['summary']
                summary_fields = ['total_income', 'total_expense', 'net_cash_flow']
                for field in summary_fields:
                    if field not in summary:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ summary")
                    else:
                        print(f"‚úÖ Summary –ø–æ–ª–µ '{field}': {summary[field]}")
            
            # Check cash flow items
            cash_flow_items = data.get('cash_flow', [])
            print(f"üìà –ó–∞–ø–∏—Å–µ–π –¥–≤–∏–∂–µ–Ω–∏—è –¥–µ–Ω–µ–≥: {len(cash_flow_items)}")
            
            if cash_flow_items:
                sample_item = cash_flow_items[0]
                item_fields = ['date', 'income', 'expense', 'balance']
                for field in item_fields:
                    if field not in sample_item:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –∑–∞–ø–∏—Å–∏ cash_flow")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ –∑–∞–ø–∏—Å–∏ '{field}': {sample_item[field]}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ cash-flow: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_profit_loss():
    """Test finance profit loss endpoint"""
    print("\n=== –¢–ï–°–¢ –ü–†–ò–ë–´–õ–ï–ô –ò –£–ë–´–¢–ö–û–í (PROFIT LOSS) ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/profit-loss...")
            
            response = await client.get(f"{API_BASE}/finances/profit-loss")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ profit-loss: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['profit_loss'] = data
            
            print("‚úÖ Profit loss –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:")
            
            # Validate structure
            required_fields = ['profit_loss', 'summary']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ profit-loss")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # Check summary structure
            if 'summary' in data:
                summary = data['summary']
                summary_fields = ['total_revenue', 'total_expenses', 'net_profit', 'average_margin']
                for field in summary_fields:
                    if field not in summary:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ summary")
                    else:
                        print(f"‚úÖ Summary –ø–æ–ª–µ '{field}': {summary[field]}")
            
            # Check profit loss items
            profit_loss_items = data.get('profit_loss', [])
            print(f"üìà –ó–∞–ø–∏—Å–µ–π –ø—Ä–∏–±—ã–ª–µ–π/—É–±—ã—Ç–∫–æ–≤: {len(profit_loss_items)}")
            
            if profit_loss_items:
                sample_item = profit_loss_items[0]
                item_fields = ['period', 'revenue', 'expenses', 'profit', 'margin']
                for field in item_fields:
                    if field not in sample_item:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –∑–∞–ø–∏—Å–∏ profit_loss")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ –∑–∞–ø–∏—Å–∏ '{field}': {sample_item[field]}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ profit-loss: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_expense_analysis():
    """Test finance expense analysis endpoint"""
    print("\n=== –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –†–ê–°–•–û–î–û–í (EXPENSE ANALYSIS) ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üí∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/expense-analysis...")
            
            # Test without month filter
            response = await client.get(f"{API_BASE}/finances/expense-analysis")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞): {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ expense-analysis: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['expense_analysis'] = data
            
            print("‚úÖ Expense analysis –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # Validate structure
            required_fields = ['expenses', 'total']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ expense-analysis")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # Check expenses structure
            expenses = data.get('expenses', [])
            print(f"üìà –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤: {len(expenses)}")
            print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {data.get('total', 0)}")
            
            if expenses:
                sample_expense = expenses[0]
                expense_fields = ['category', 'amount', 'percentage']
                for field in expense_fields:
                    if field not in sample_expense:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –∑–∞–ø–∏—Å–∏ expense")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ —Ä–∞—Å—Ö–æ–¥–∞ '{field}': {sample_expense[field]}")
            
            # Test with month filter
            print("\nüóìÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –º–µ—Å—è—Ü—É...")
            response_month = await client.get(f"{API_BASE}/finances/expense-analysis?month=–Ø–Ω–≤–∞—Ä—å 2025")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Å —Ñ–∏–ª—å—Ç—Ä–æ–º): {response_month.status_code}")
            
            if response_month.status_code == 200:
                month_data = response_month.json()
                print(f"‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü—É —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"üìÖ –ú–µ—Å—è—Ü: {month_data.get('month')}")
                print(f"üí∞ –†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {len(month_data.get('expenses', []))}")
            else:
                print(f"‚ö†Ô∏è –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response_month.status_code}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ expense-analysis: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_available_months():
    """Test finance available months endpoint"""
    print("\n=== –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–´–• –ú–ï–°–Ø–¶–ï–í ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/available-months...")
            
            response = await client.get(f"{API_BASE}/finances/available-months")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ available-months: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['available_months'] = data
            
            print("‚úÖ Available months –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # Validate structure
            required_fields = ['months', 'total']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ available-months")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            months = data.get('months', [])
            print(f"üìÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤: {data.get('total', 0)}")
            
            if months:
                print(f"üìã –ü—Ä–∏–º–µ—Ä—ã –º–µ—Å—è—Ü–µ–≤: {months[:5]}")
            else:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ available-months: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_balance_sheet():
    """Test finance balance sheet endpoint (mock data)"""
    print("\n=== –¢–ï–°–¢ –ë–ê–õ–ê–ù–°–û–í–û–ì–û –û–¢–ß–Å–¢–ê ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üè¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/balance-sheet...")
            
            response = await client.get(f"{API_BASE}/finances/balance-sheet")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ balance-sheet: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['balance_sheet'] = data
            
            print("‚úÖ Balance sheet –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ (mock –¥–∞–Ω–Ω—ã–µ)")
            
            # Validate structure
            required_sections = ['assets', 'liabilities', 'equity']
            for section in required_sections:
                if section not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è '{section}' –≤ balance-sheet")
                else:
                    print(f"‚úÖ –°–µ–∫—Ü–∏—è '{section}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    section_data = data[section]
                    if 'total' in section_data:
                        print(f"   üí∞ –ò—Ç–æ–≥–æ {section}: {section_data['total']}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ balance-sheet: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_debts():
    """Test finance debts endpoint (mock data)"""
    print("\n=== –¢–ï–°–¢ –ó–ê–î–û–õ–ñ–ï–ù–ù–û–°–¢–ï–ô ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üí≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/debts...")
            
            response = await client.get(f"{API_BASE}/finances/debts")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ debts: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['debts'] = data
            
            print("‚úÖ Debts –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ (mock –¥–∞–Ω–Ω—ã–µ)")
            
            # Validate structure
            required_fields = ['debts', 'summary']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ debts")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            debts = data.get('debts', [])
            summary = data.get('summary', {})
            
            print(f"üí≥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π: {len(debts)}")
            print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {summary.get('total', 0)}")
            print(f"‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {summary.get('overdue', 0)}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ debts: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_inventory():
    """Test finance inventory endpoint (mock data)"""
    print("\n=== –¢–ï–°–¢ –¢–û–í–ê–†–ù–´–• –ó–ê–ü–ê–°–û–í ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/inventory...")
            
            response = await client.get(f"{API_BASE}/finances/inventory")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ inventory: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['inventory'] = data
            
            print("‚úÖ Inventory –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ (mock –¥–∞–Ω–Ω—ã–µ)")
            
            # Validate structure
            required_fields = ['inventory', 'summary']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ inventory")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            inventory = data.get('inventory', [])
            summary = data.get('summary', {})
            
            print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {len(inventory)}")
            print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {summary.get('total_value', 0)}")
            print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {summary.get('total_items', 0)}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ inventory: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_dashboard():
    """Test finance dashboard endpoint"""
    print("\n=== –¢–ï–°–¢ –§–ò–ù–ê–ù–°–û–í–û–ô –°–í–û–î–ö–ò (DASHBOARD) ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:  # Longer timeout as it aggregates data
            print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/dashboard...")
            
            response = await client.get(f"{API_BASE}/finances/dashboard")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ dashboard: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['dashboard'] = data
            
            print("‚úÖ Dashboard –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # Validate structure - dashboard aggregates all other endpoints
            expected_sections = ['cash_flow', 'profit_loss', 'balance', 'expenses', 'debts', 'inventory']
            for section in expected_sections:
                if section not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è '{section}' –≤ dashboard")
                else:
                    print(f"‚úÖ –°–µ–∫—Ü–∏—è '{section}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            print("üìä –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º –ø–æ–ª—É—á–µ–Ω–∞")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ dashboard: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_transactions_list():
    """Test finance transactions list endpoint"""
    print("\n=== –¢–ï–°–¢ –°–ü–ò–°–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üíº –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/transactions...")
            
            response = await client.get(f"{API_BASE}/finances/transactions?limit=10&offset=0")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ transactions list: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['transactions_list'] = data
            
            print("‚úÖ Transactions list –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(data)}")
            
            if data:
                sample_transaction = data[0]
                required_fields = ['id', 'date', 'amount', 'category', 'type', 'created_at']
                for field in required_fields:
                    if field not in sample_transaction:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ '{field}': {sample_transaction[field]}")
            else:
                print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ transactions list: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_create_transaction():
    """Test finance create transaction endpoint"""
    print("\n=== –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ò ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /api/finances/transactions...")
            
            # Test data as specified in the review request
            test_transaction = {
                "date": "2025-10-17T00:00:00Z",
                "amount": 1000,
                "category": "–ó–∞—Ä–ø–ª–∞—Ç–∞",
                "type": "expense",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API",
                "payment_method": "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥",
                "counterparty": "–¢–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫",
                "project": "–Ø–Ω–≤–∞—Ä—å 2025"
            }
            
            print(f"üìù –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {json.dumps(test_transaction, ensure_ascii=False, indent=2)}")
            
            response = await client.post(
                f"{API_BASE}/finances/transactions",
                json=test_transaction,
                headers={"Content-Type": "application/json"}
            )
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.created_transaction_id = data.get('id')
            results.finance_endpoints['created_transaction'] = data
            
            print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {results.created_transaction_id}")
            
            # Validate response structure
            required_fields = ['id', 'date', 'amount', 'category', 'type', 'created_at']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –æ—Ç–≤–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}': {data[field]}")
            
            # Validate data integrity
            if data.get('amount') != test_transaction['amount']:
                results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞: –æ–∂–∏–¥–∞–ª–∞—Å—å {test_transaction['amount']}, –ø–æ–ª—É—á–µ–Ω–∞ {data.get('amount')}")
            
            if data.get('category') != test_transaction['category']:
                results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: –æ–∂–∏–¥–∞–ª–∞—Å—å '{test_transaction['category']}', –ø–æ–ª—É—á–µ–Ω–∞ '{data.get('category')}'")
            
            if data.get('type') != test_transaction['type']:
                results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: –æ–∂–∏–¥–∞–ª—Å—è '{test_transaction['type']}', –ø–æ–ª—É—á–µ–Ω '{data.get('type')}'")
            
            if not results.errors:
                print("‚úÖ –í—Å–µ –ø–æ–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_revenue_monthly():
    """Test finance monthly revenue endpoint"""
    print("\n=== –¢–ï–°–¢ –†–£–ß–ù–û–ô –í–´–†–£–ß–ö–ò ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üíµ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/revenue/monthly...")
            
            response = await client.get(f"{API_BASE}/finances/revenue/monthly")
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ revenue monthly: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.finance_endpoints['revenue_monthly'] = data
            
            print("‚úÖ Revenue monthly –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # Validate structure
            required_fields = ['revenues']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ revenue monthly")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            revenues = data.get('revenues', [])
            print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤—ã—Ä—É—á–∫–∏: {len(revenues)}")
            
            if revenues:
                sample_revenue = revenues[0]
                revenue_fields = ['month', 'revenue']
                for field in revenue_fields:
                    if field not in sample_revenue:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –∑–∞–ø–∏—Å–∏ –≤—ã—Ä—É—á–∫–∏")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ –≤—ã—Ä—É—á–∫–∏ '{field}': {sample_revenue[field]}")
            else:
                print("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤—ã—Ä—É—á–∫–∏ (—Ç–∞–±–ª–∏—Ü–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π)")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ revenue monthly: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_finance_expense_details():
    """Test new expense details endpoint for specific months"""
    print("\n=== –¢–ï–°–¢ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò –†–ê–°–•–û–î–û–í –ü–û –ú–ï–°–Ø–¶–ê–ú ===\n")
    
    results = TestResults()
    
    # Test months as specified in the review request
    test_months = ["–ò—é–ª—å 2025", "–ú–∞—Ä—Ç 2025", "–°–µ–Ω—Ç—è–±—Ä—å 2025"]
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            for month in test_months:
                print(f"üí∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/expense-details?month={month}...")
                
                response = await client.get(f"{API_BASE}/finances/expense-details", params={"month": month})
                print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è {month}: {response.status_code}")
                
                if response.status_code != 200:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ expense-details –¥–ª—è {month}: {response.status_code} - {response.text}"
                    results.errors.append(error_msg)
                    print(error_msg)
                    continue
                
                data = response.json()
                results.finance_endpoints[f'expense_details_{month}'] = data
                
                print(f"‚úÖ Expense details –¥–ª—è {month} –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # Validate response structure
                required_fields = ['transactions', 'total', 'month', 'count']
                for field in required_fields:
                    if field not in data:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ expense-details –¥–ª—è {month}")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # Validate month field
                if data.get('month') != month:
                    results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü –≤ –æ—Ç–≤–µ—Ç–µ: –æ–∂–∏–¥–∞–ª—Å—è '{month}', –ø–æ–ª—É—á–µ–Ω '{data.get('month')}'")
                else:
                    print(f"‚úÖ –ú–µ—Å—è—Ü –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {data.get('month')}")
                
                # Check transactions structure
                transactions = data.get('transactions', [])
                total = data.get('total', 0)
                count = data.get('count', 0)
                
                print(f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: {count}")
                print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total}")
                
                # Validate count matches transactions length
                if len(transactions) != count:
                    results.errors.append(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ count ({count}) –∏ –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞ transactions ({len(transactions)}) –¥–ª—è {month}")
                else:
                    print(f"‚úÖ Count —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                
                # Validate total calculation
                if transactions:
                    calculated_total = sum(t.get('amount', 0) for t in transactions)
                    if abs(calculated_total - total) > 0.01:  # Allow small floating point differences
                        results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç total –¥–ª—è {month}: –æ–∂–∏–¥–∞–ª–æ—Å—å {calculated_total}, –ø–æ–ª—É—á–µ–Ω–æ {total}")
                    else:
                        print(f"‚úÖ Total –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω")
                
                # Check transaction structure
                if transactions:
                    sample_transaction = transactions[0]
                    required_transaction_fields = ['id', 'date', 'category', 'amount', 'description', 'payment_method', 'counterparty']
                    
                    print(f"üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
                    for field in required_transaction_fields:
                        if field not in sample_transaction:
                            results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è {month}")
                        else:
                            value = sample_transaction[field]
                            print(f"‚úÖ –ü–æ–ª–µ '{field}': {value}")
                    
                    # Validate that all transactions are expenses (type='expense')
                    # Note: The endpoint filters by type='expense' in SQL, so we assume all returned are expenses
                    print(f"‚úÖ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —è–≤–ª—è—é—Ç—Å—è —Ä–∞—Å—Ö–æ–¥–∞–º–∏ (—Ñ–∏–ª—å—Ç—Ä type='expense' –ø—Ä–∏–º–µ–Ω–µ–Ω –≤ SQL)")
                    
                    # Show sample transaction details
                    print(f"üìù –ü—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
                    print(f"   - ID: {sample_transaction.get('id')}")
                    print(f"   - –î–∞—Ç–∞: {sample_transaction.get('date')}")
                    print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {sample_transaction.get('category')}")
                    print(f"   - –°—É–º–º–∞: {sample_transaction.get('amount')}")
                    print(f"   - –û–ø–∏—Å–∞–Ω–∏–µ: {sample_transaction.get('description')}")
                    print(f"   - –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {sample_transaction.get('payment_method')}")
                    print(f"   - –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {sample_transaction.get('counterparty')}")
                else:
                    print(f"‚ö†Ô∏è –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –º–µ—Å—è—Ü–∞ {month}")
                
                print(f"")  # Empty line for readability
            
            # Test existing expense-analysis endpoint to ensure it still works
            print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º endpoint expense-analysis...")
            
            for month in test_months:
                response = await client.get(f"{API_BASE}/finances/expense-analysis", params={"month": month})
                print(f"üì° expense-analysis –¥–ª—è {month}: {response.status_code}")
                
                if response.status_code != 200:
                    error_msg = f"‚ùå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint expense-analysis –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {month}: {response.status_code}"
                    results.errors.append(error_msg)
                else:
                    print(f"‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint expense-analysis —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {month}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ expense-details: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_export_all_endpoint():
    """Test new export-all endpoint for XLSX export"""
    print("\n=== –¢–ï–°–¢ –≠–ö–°–ü–û–†–¢–ê –í–°–ï–• –§–ò–ù–ê–ù–°–û–í–´–• –î–ê–ù–ù–´–• –í XLSX ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/export-all...")
            print("üéØ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:")
            print("   1. ‚úÖ Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å—Ç–∞—Ç—É—Å")
            print("   2. ‚úÖ Content-Type –∑–∞–≥–æ–ª–æ–≤–æ–∫ = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'")
            print("   3. ‚úÖ Content-Disposition –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç filename —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xlsx")
            print("   4. ‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π binary data (XLSX —Ñ–∞–π–ª)")
            print("   5. ‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ > 10KB (—Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ)")
            print("")
            
            # Test the export-all endpoint
            response = await client.get(f"{API_BASE}/finances/export-all")
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            # 1. Check 200 status
            if response.status_code != 200:
                error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 1 –ù–ï –í–´–ü–û–õ–ù–ï–ù: –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
                results.errors.append(error_msg)
                print(error_msg)
                if response.text:
                    print(f"   –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text[:500]}")
                return results
            
            print("‚úÖ –ö–†–ò–¢–ï–†–ò–ô 1 –í–´–ü–û–õ–ù–ï–ù: Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å—Ç–∞—Ç—É—Å")
            
            # 2. Check Content-Type header
            content_type = response.headers.get('content-type', '').lower()
            expected_content_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            
            if content_type != expected_content_type:
                error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 2 –ù–ï –í–´–ü–û–õ–ù–ï–ù: Content-Type = '{content_type}', –æ–∂–∏–¥–∞–ª—Å—è '{expected_content_type}'"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                print(f"‚úÖ –ö–†–ò–¢–ï–†–ò–ô 2 –í–´–ü–û–õ–ù–ï–ù: Content-Type = '{content_type}'")
            
            # 3. Check Content-Disposition header
            content_disposition = response.headers.get('content-disposition', '')
            
            if not content_disposition:
                error_msg = "‚ùå –ö–†–ò–¢–ï–†–ò–ô 3 –ù–ï –í–´–ü–û–õ–ù–ï–ù: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Disposition"
                results.errors.append(error_msg)
                print(error_msg)
            elif not content_disposition.lower().endswith('.xlsx'):
                error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 3 –ù–ï –í–´–ü–û–õ–ù–ï–ù: Content-Disposition –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç .xlsx: '{content_disposition}'"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                print(f"‚úÖ –ö–†–ò–¢–ï–†–ò–ô 3 –í–´–ü–û–õ–ù–ï–ù: Content-Disposition = '{content_disposition}'")
                
                # Extract filename for validation
                if 'filename=' in content_disposition:
                    filename_part = content_disposition.split('filename=')[1].strip('"')
                    print(f"   üìÅ –ò–º—è —Ñ–∞–π–ª–∞: {filename_part}")
                    
                    # Check filename format (should be like "financial_data_YYYYMMDD_HHMMSS.xlsx")
                    if filename_part.startswith('financial_data_') and filename_part.endswith('.xlsx'):
                        print("‚úÖ –§–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {filename_part}")
            
            # 4. Check binary data (XLSX file)
            content = response.content
            
            if not content:
                error_msg = "‚ùå –ö–†–ò–¢–ï–†–ò–ô 4 –ù–ï –í–´–ü–û–õ–ù–ï–ù: –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö"
                results.errors.append(error_msg)
                print(error_msg)
            elif not isinstance(content, bytes):
                error_msg = "‚ùå –ö–†–ò–¢–ï–†–ò–ô 4 –ù–ï –í–´–ü–û–õ–ù–ï–ù: –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è binary data"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                print("‚úÖ –ö–†–ò–¢–ï–†–ò–ô 4 –í–´–ü–û–õ–ù–ï–ù: –û—Ç–≤–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π binary data")
                
                # Check XLSX file signature (first few bytes should be PK for ZIP format)
                if content.startswith(b'PK'):
                    print("‚úÖ –§–∞–π–ª –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é XLSX —Å–∏–≥–Ω–∞—Ç—É—Ä—É (ZIP-based)")
                else:
                    print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞: {content[:10]}")
            
            # 5. Check file size > 10KB
            file_size = len(content)
            min_size = 10 * 1024  # 10KB
            
            if file_size < min_size:
                error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 5 –ù–ï –í–´–ü–û–õ–ù–ï–ù: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {file_size} –±–∞–π—Ç < {min_size} –±–∞–π—Ç (10KB)"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                print(f"‚úÖ –ö–†–ò–¢–ï–†–ò–ô 5 –í–´–ü–û–õ–ù–ï–ù: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {file_size:,} –±–∞–π—Ç > {min_size:,} –±–∞–π—Ç (10KB)")
                
                # Show file size in human-readable format
                if file_size > 1024 * 1024:
                    size_str = f"{file_size / (1024 * 1024):.1f} MB"
                elif file_size > 1024:
                    size_str = f"{file_size / 1024:.1f} KB"
                else:
                    size_str = f"{file_size} bytes"
                
                print(f"   üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_str}")
            
            # Additional validation: Check all headers
            print(f"\nüìã –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:")
            for header_name, header_value in response.headers.items():
                print(f"   {header_name}: {header_value}")
            
            # Store results
            results.finance_endpoints['export_all'] = {
                'status_code': response.status_code,
                'content_type': content_type,
                'content_disposition': content_disposition,
                'file_size': file_size,
                'headers': dict(response.headers)
            }
            
            # Summary
            print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:")
            success_count = 5 - len([e for e in results.errors if '–ö–†–ò–¢–ï–†–ò–ô' in e])
            print(f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: {success_count}/5")
            print(f"   ‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: {len([e for e in results.errors if '–ö–†–ò–¢–ï–†–ò–ô' in e])}/5")
            
            if not [e for e in results.errors if '–ö–†–ò–¢–ï–†–ò–ô' in e]:
                print("üéâ –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê –í–´–ü–û–õ–ù–ï–ù–´!")
            else:
                print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ - —Å–º. –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ export-all: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_consolidated_financial_model():
    """Test consolidated financial model for –û–û–û –í–ê–® –î–û–ú + –£–§–ò–¶"""
    print("\n=== –¢–ï–°–¢ –ö–û–ù–°–û–õ–ò–î–ò–†–û–í–ê–ù–ù–û–ô –§–ò–ù–ê–ù–°–û–í–û–ô –ú–û–î–ï–õ–ò –û–û–û –í–ê–® –î–û–ú + –£–§–ò–¶ ===\n")
    
    results = TestResults()
    consolidated_company = "–û–û–û –í–ê–® –î–û–ú + –£–§–ò–¶"
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print(f"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è: {consolidated_company}")
            print("üìã –õ–æ–≥–∏–∫–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏:")
            print("   - –í—ã—Ä—É—á–∫–∞ = –û–û–û –í–ê–® –î–û–ú –º–∏–Ω—É—Å '–®–≤–µ–∏' –∏ '–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥'")
            print("   - –†–∞—Å—Ö–æ–¥—ã = –û–û–û –í–ê–® –î–û–ú + –£–§–ò–¶ –º–∏–Ω—É—Å '–ö—Ä–µ–¥–∏—Ç—ã', '–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ —Å –Æ/–¶–õ', '–®–≤–µ–∏'")
            print("")
            
            # 1. Test consolidated profit-loss
            print("üí∞ 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/profit-loss?company=–û–û–û+–í–ê–®+–î–û–ú+%2B+–£–§–ò–¶")
            
            response = await client.get(f"{API_BASE}/finances/profit-loss", params={"company": consolidated_company})
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ consolidated profit-loss: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                data = response.json()
                results.finance_endpoints['consolidated_profit_loss'] = data
                print("‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                
                # Validate structure
                required_fields = ['profit_loss', 'summary']
                for field in required_fields:
                    if field not in data:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ consolidated profit-loss")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # Check summary
                if 'summary' in data:
                    summary = data['summary']
                    print(f"üìä –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞:")
                    print(f"   - –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {summary.get('total_revenue', 0)}")
                    print(f"   - –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {summary.get('total_expenses', 0)}")
                    print(f"   - –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {summary.get('net_profit', 0)}")
                    print(f"   - –°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞: {summary.get('average_margin', 0)}%")
            
            print("")
            
            # 2. Test consolidated expense-analysis
            print("üí∏ 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/expense-analysis?company=–û–û–û+–í–ê–®+–î–û–ú+%2B+–£–§–ò–¶")
            
            response = await client.get(f"{API_BASE}/finances/expense-analysis", params={"company": consolidated_company})
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ consolidated expense-analysis: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                data = response.json()
                results.finance_endpoints['consolidated_expense_analysis'] = data
                print("‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # Validate structure
                required_fields = ['expenses', 'total']
                for field in required_fields:
                    if field not in data:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ consolidated expense-analysis")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # Check excluded categories are not present
                excluded_categories = ['–ö—Ä–µ–¥–∏—Ç—ã', '–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ —Å –Æ/–¶–õ', '–®–≤–µ–∏']
                expenses = data.get('expenses', [])
                
                print(f"üìä –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:")
                print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤: {len(expenses)}")
                print(f"   - –û–±—â–∞—è —Å—É–º–º–∞: {data.get('total', 0)}")
                
                # Check for excluded categories
                found_excluded = []
                for expense in expenses:
                    category = expense.get('category', '')
                    if category in excluded_categories:
                        found_excluded.append(category)
                
                if found_excluded:
                    error_msg = f"‚ùå –ù–∞–π–¥–µ–Ω—ã –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö: {found_excluded}"
                    results.errors.append(error_msg)
                    print(error_msg)
                else:
                    print("‚úÖ –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
                
                # Show top categories
                if expenses:
                    print("üìã –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:")
                    for i, expense in enumerate(expenses[:5], 1):
                        print(f"   {i}. {expense.get('category')}: {expense.get('amount')} ({expense.get('percentage')}%)")
            
            print("")
            
            # 3. Test consolidated expense-analysis with month filter
            print("üìÖ 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/expense-analysis?company=–û–û–û+–í–ê–®+–î–û–ú+%2B+–£–§–ò–¶&month=–Ø–Ω–≤–∞—Ä—å+2025")
            
            response = await client.get(f"{API_BASE}/finances/expense-analysis", params={
                "company": consolidated_company,
                "month": "–Ø–Ω–≤–∞—Ä—å 2025"
            })
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ consolidated expense-analysis —Å –º–µ—Å—è—Ü–µ–º: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                data = response.json()
                results.finance_endpoints['consolidated_expense_analysis_monthly'] = data
                print("‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # Validate month field
                if data.get('month') != "–Ø–Ω–≤–∞—Ä—å 2025":
                    results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü –≤ –æ—Ç–≤–µ—Ç–µ: –æ–∂–∏–¥–∞–ª—Å—è '–Ø–Ω–≤–∞—Ä—å 2025', –ø–æ–ª—É—á–µ–Ω '{data.get('month')}'")
                else:
                    print(f"‚úÖ –ú–µ—Å—è—Ü –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {data.get('month')}")
                
                expenses = data.get('expenses', [])
                print(f"üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ø–Ω–≤–∞—Ä—å 2025:")
                print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(expenses)}")
                print(f"   - –û–±—â–∞—è —Å—É–º–º–∞: {data.get('total', 0)}")
            
            print("")
            
            # 4. Test consolidated revenue-analysis
            print("üíµ 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/finances/revenue-analysis?company=–û–û–û+–í–ê–®+–î–û–ú+%2B+–£–§–ò–¶")
            
            response = await client.get(f"{API_BASE}/finances/revenue-analysis", params={"company": consolidated_company})
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ consolidated revenue-analysis: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                data = response.json()
                results.finance_endpoints['consolidated_revenue_analysis'] = data
                print("‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # Validate structure
                required_fields = ['revenue', 'total']
                for field in required_fields:
                    if field not in data:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ consolidated revenue-analysis")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # Check excluded categories for revenue (–®–≤–µ–∏, –ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥)
                excluded_revenue_categories = ['–®–≤–µ–∏', '–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥']
                revenues = data.get('revenue', [])
                
                print(f"üìä –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Ä—É—á–∫–∞:")
                print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π –≤—ã—Ä—É—á–∫–∏: {len(revenues)}")
                print(f"   - –û–±—â–∞—è —Å—É–º–º–∞: {data.get('total', 0)}")
                
                # Check for excluded categories
                found_excluded_revenue = []
                for revenue in revenues:
                    category = revenue.get('category', '')
                    if category in excluded_revenue_categories:
                        found_excluded_revenue.append(category)
                
                if found_excluded_revenue:
                    error_msg = f"‚ùå –ù–∞–π–¥–µ–Ω—ã –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Ä—É—á–∫–µ: {found_excluded_revenue}"
                    results.errors.append(error_msg)
                    print(error_msg)
                else:
                    print("‚úÖ –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—Ä—É—á–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
                
                # Show revenue categories
                if revenues:
                    print("üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—Ä—É—á–∫–∏:")
                    for i, revenue in enumerate(revenues[:5], 1):
                        print(f"   {i}. {revenue.get('category')}: {revenue.get('amount')} ({revenue.get('percentage')}%)")
            
            print("")
            
            # 5. Test individual company endpoints still work
            print("üîÑ 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É endpoints –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π...")
            
            individual_companies = ["–û–û–û –í–ê–® –î–û–ú", "–£–§–ò–¶"]
            
            for company in individual_companies:
                print(f"\nüè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–∞–Ω–∏—é: {company}")
                
                # Test profit-loss for individual company
                response = await client.get(f"{API_BASE}/finances/profit-loss", params={"company": company})
                print(f"üì° profit-loss –¥–ª—è {company}: {response.status_code}")
                
                if response.status_code != 200:
                    error_msg = f"‚ùå Endpoint profit-loss –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {company}: {response.status_code}"
                    results.errors.append(error_msg)
                else:
                    print(f"‚úÖ Endpoint profit-loss —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {company}")
                
                # Test expense-analysis for individual company
                response = await client.get(f"{API_BASE}/finances/expense-analysis", params={"company": company})
                print(f"üì° expense-analysis –¥–ª—è {company}: {response.status_code}")
                
                if response.status_code != 200:
                    error_msg = f"‚ùå Endpoint expense-analysis –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {company}: {response.status_code}"
                    results.errors.append(error_msg)
                else:
                    print(f"‚úÖ Endpoint expense-analysis —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {company}")
            
            print("")
            
            # 6. Validate consolidation logic by comparing individual vs consolidated
            print("üßÆ 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏...")
            
            # Get individual company data for validation
            vasdom_response = await client.get(f"{API_BASE}/finances/expense-analysis", params={"company": "–û–û–û –í–ê–® –î–û–ú"})
            ufic_response = await client.get(f"{API_BASE}/finances/expense-analysis", params={"company": "–£–§–ò–¶"})
            
            if vasdom_response.status_code == 200 and ufic_response.status_code == 200:
                vasdom_data = vasdom_response.json()
                ufic_data = ufic_response.json()
                
                vasdom_total = vasdom_data.get('total', 0)
                ufic_total = ufic_data.get('total', 0)
                
                print(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏:")
                print(f"   - –û–û–û –í–ê–® –î–û–ú –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {vasdom_total}")
                print(f"   - –£–§–ò–¶ –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {ufic_total}")
                
                # Get excluded amounts from –û–û–û –í–ê–® –î–û–ú
                excluded_amount = 0
                vasdom_expenses = vasdom_data.get('expenses', [])
                for expense in vasdom_expenses:
                    if expense.get('category') in ['–ö—Ä–µ–¥–∏—Ç—ã', '–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ —Å –Æ/–¶–õ', '–®–≤–µ–∏']:
                        excluded_amount += expense.get('amount', 0)
                
                expected_consolidated_total = vasdom_total + ufic_total - excluded_amount
                
                # Get actual consolidated total
                if 'consolidated_expense_analysis' in results.finance_endpoints:
                    actual_consolidated_total = results.finance_endpoints['consolidated_expense_analysis'].get('total', 0)
                    
                    print(f"   - –ò—Å–∫–ª—é—á–∞–µ–º–∞—è —Å—É–º–º–∞: {excluded_amount}")
                    print(f"   - –û–∂–∏–¥–∞–µ–º–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {expected_consolidated_total}")
                    print(f"   - –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {actual_consolidated_total}")
                    
                    # Allow small differences due to floating point arithmetic
                    if abs(expected_consolidated_total - actual_consolidated_total) < 1.0:
                        print("‚úÖ –õ–æ–≥–∏–∫–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    else:
                        error_msg = f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_consolidated_total}, –ø–æ–ª—É—á–µ–Ω–æ {actual_consolidated_total}"
                        results.errors.append(error_msg)
                        print(error_msg)
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_plannerka_create_endpoint():
    """Test plannerka creation endpoint"""
    print("\n=== –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–ù–Å–†–ö–ò ===\n")
    
    results = TestResults()
    
    # Test data from the review request
    test_data = {
        "title": "–¢–µ—Å—Ç–æ–≤–∞—è –ø–ª–∞–Ω—ë—Ä–∫–∞",
        "transcription": "–û–±—Å—É–∂–¥–∞–ª–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é. –ò–≤–∞–Ω–æ–≤—É –ø–æ—Ä—É—á–µ–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç –¥–æ –ø—è—Ç–Ω–∏—Ü—ã. –ü–µ—Ç—Ä–æ–≤—É –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ —Å—Ä–µ–¥—ã. –°–∏–¥–æ—Ä–æ–≤—É –ø–æ—Ä—É—á–µ–Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–æ —á–µ—Ç–≤–µ—Ä–≥–∞.",
        "participants": ["–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–∏–¥–æ—Ä–æ–≤"]
    }
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üîç –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω—ë—Ä–∫—É...")
            print(f"üìù –î–∞–Ω–Ω—ã–µ: {json.dumps(test_data, ensure_ascii=False, indent=2)}")
            
            # Test the create endpoint
            response = await client.post(
                f"{API_BASE}/plannerka/create",
                json=test_data,
                headers={"Content-Type": "application/json"}
            )
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω—ë—Ä–∫–∏: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.created_meeting_data = data
            results.created_meeting_id = data.get('id')
            results.database_working = True
            
            print(f"‚úÖ –ü–ª–∞–Ω—ë—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {results.created_meeting_id}")
            print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:")
            print(f"   - ID: {data.get('id')}")
            print(f"   - Title: {data.get('title')}")
            print(f"   - Date: {data.get('date')}")
            print(f"   - Participants: {data.get('participants')}")
            print(f"   - Transcription length: {len(data.get('transcription', ''))}")
            print(f"   - Summary: {data.get('summary')}")
            print(f"   - Tasks: {data.get('tasks')}")
            
            # Validate response structure
            required_fields = ['id', 'title', 'date', 'transcription', 'participants', 'created_at']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –æ—Ç–≤–µ—Ç–µ")
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # Validate data integrity
            if data.get('title') != test_data['title']:
                results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π title: –æ–∂–∏–¥–∞–ª—Å—è '{test_data['title']}', –ø–æ–ª—É—á–µ–Ω '{data.get('title')}'")
            
            if data.get('transcription') != test_data['transcription']:
                results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è transcription")
            
            if data.get('participants') != test_data['participants']:
                results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ participants")
            
            if not results.errors:
                print("‚úÖ –í—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω—ë—Ä–∫–∏: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_plannerka_analyze_endpoint(meeting_id: str):
    """Test plannerka AI analysis endpoint"""
    print("\n=== –¢–ï–°–¢ AI-–ê–ù–ê–õ–ò–ó–ê –ü–õ–ê–ù–Å–†–ö–ò ===\n")
    
    results = TestResults()
    results.created_meeting_id = meeting_id
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:  # Longer timeout for AI analysis
            print(f"ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω—ë—Ä–∫–∏ ID: {meeting_id}")
            
            # Test the analyze endpoint
            response = await client.post(f"{API_BASE}/plannerka/analyze/{meeting_id}")
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                
                # Check for specific OpenAI errors
                if "OPENAI_API_KEY" in response.text:
                    results.errors.append("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                elif "transcription is too short" in response.text:
                    results.errors.append("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è")
                
                return results
            
            data = response.json()
            results.analysis_result = data
            results.openai_working = True
            
            print(f"‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
            print(f"   - Success: {data.get('success')}")
            print(f"   - Tasks count: {data.get('tasks_count')}")
            
            # Check summary
            summary = data.get('summary', '')
            if summary:
                results.summary_generated = True
                print(f"‚úÖ –°–∞–º–º–∞—Ä–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ({len(summary)} —Å–∏–º–≤–æ–ª–æ–≤)")
                print(f"üìù –°–∞–º–º–∞—Ä–∏: {summary[:200]}{'...' if len(summary) > 200 else ''}")
            else:
                results.errors.append("‚ùå –°–∞–º–º–∞—Ä–∏ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            
            # Check tasks
            tasks = data.get('tasks', [])
            results.tasks_extracted = tasks
            
            if tasks:
                print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
                print("üìã –ó–∞–¥–∞—á–∏:")
                
                for i, task in enumerate(tasks, 1):
                    title = task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    assignee = task.get('assignee', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')
                    deadline = task.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
                    priority = task.get('priority', 'medium')
                    
                    print(f"   {i}. {title}")
                    print(f"      - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee}")
                    print(f"      - –°—Ä–æ–∫: {deadline}")
                    print(f"      - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
                    
                    # Validate task structure
                    required_task_fields = ['title']
                    for field in required_task_fields:
                        if field not in task or not task[field]:
                            results.errors.append(f"‚ùå –ó–∞–¥–∞—á–∞ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}'")
                
                # Check if expected tasks are found
                expected_assignees = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–°–∏–¥–æ—Ä–æ–≤']
                found_assignees = [task.get('assignee', '') for task in tasks]
                
                for expected in expected_assignees:
                    if any(expected in assignee for assignee in found_assignees):
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è {expected}")
                    else:
                        print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è {expected}")
                
            else:
                results.errors.append("‚ùå –ó–∞–¥–∞—á–∏ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
            
            # Validate response structure
            required_fields = ['success', 'summary', 'tasks', 'tasks_count']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –æ—Ç–≤–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∞")
            
            # Check if success is true
            if not data.get('success'):
                results.errors.append("‚ùå –ü–æ–ª–µ 'success' –Ω–µ —Ä–∞–≤–Ω–æ true")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AI-–∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_plannerka_list_endpoint():
    """Test plannerka list endpoint"""
    print("\n=== –¢–ï–°–¢ –°–ü–ò–°–ö–ê –ü–õ–ê–ù–Å–†–û–ö ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω—ë—Ä–æ–∫...")
            
            # Test the list endpoint
            response = await client.get(f"{API_BASE}/plannerka/list?limit=20&offset=0")
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            results.meetings_list = data.get('meetings', [])
            
            print(f"‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–Ω—ë—Ä–æ–∫: {data.get('count', 0)}")
            print(f"   - –ü–ª–∞–Ω—ë—Ä–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ: {len(results.meetings_list)}")
            
            # Validate response structure
            required_fields = ['meetings', 'count']
            for field in required_fields:
                if field not in data:
                    results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –æ—Ç–≤–µ—Ç–µ —Å–ø–∏—Å–∫–∞")
            
            # Check meetings structure
            if results.meetings_list:
                print("üìã –ü—Ä–∏–º–µ—Ä—ã –ø–ª–∞–Ω—ë—Ä–æ–∫:")
                
                for i, meeting in enumerate(results.meetings_list[:3], 1):  # Show first 3
                    meeting_id = meeting.get('id', 'N/A')
                    title = meeting.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    date = meeting.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                    participants_count = len(meeting.get('participants', []))
                    tasks_count = len(meeting.get('tasks', []))
                    has_summary = bool(meeting.get('summary'))
                    
                    print(f"   {i}. ID: {meeting_id}")
                    print(f"      - –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                    print(f"      - –î–∞—Ç–∞: {date}")
                    print(f"      - –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}")
                    print(f"      - –ó–∞–¥–∞—á: {tasks_count}")
                    print(f"      - –ï—Å—Ç—å —Å–∞–º–º–∞—Ä–∏: {has_summary}")
                
                # Validate meeting structure
                sample_meeting = results.meetings_list[0]
                expected_meeting_fields = ['id', 'title', 'date', 'transcription', 'participants']
                
                for field in expected_meeting_fields:
                    if field not in sample_meeting:
                        results.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–ª–∞–Ω—ë—Ä–∫–∏")
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
            else:
                print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω—ë—Ä–æ–∫ –ø—É—Å—Ç")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω—ë—Ä–æ–∫: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_openai_configuration():
    """Test OpenAI API configuration"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é OpenAI...")
    
    try:
        # Check if OPENAI_API_KEY is configured by testing a simple endpoint
        async with httpx.AsyncClient(timeout=15.0) as client:
            # We'll test this indirectly through the health endpoint
            response = await client.get(f"{API_BASE}/health")
            if response.status_code == 200:
                print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                
        # Check environment variables (we can't directly access them, but we can infer from API responses)
        print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —á–µ—Ä–µ–∑ API –≤—ã–∑–æ–≤—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")

async def test_database_connection():
    """Test database connection through plannerka endpoints"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            # Test database connection by trying to get the list
            response = await client.get(f"{API_BASE}/plannerka/list?limit=1")
            
            if response.status_code == 200:
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
                return True
            elif response.status_code == 500 and "Database connection error" in response.text:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.status_code}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {str(e)}")
        return False

async def test_vasdom_model_forecast_endpoint():
    """Test –í–ê–® –î–û–ú –º–æ–¥–µ–ª—å forecast endpoint with cleaners integration from review request"""
    print("\n=== –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–® –î–û–ú –ú–û–î–ï–õ–¨ ===\n")
    
    results = TestResults()
    scenarios = ["pessimistic", "realistic", "optimistic"]
    company = "–í–ê–® –î–û–ú –º–æ–¥–µ–ª—å"
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print(f"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –í–ê–® –î–û–ú –º–æ–¥–µ–ª—å —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —É–±–æ—Ä—â–∏—Ü –∏–∑ –£–§–ò–¶")
            print("üìã –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê –∏–∑ review request:")
            print("   1. Endpoint –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
            print("")
            print("   2. –í expense_breakdown –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞ (2026-2030) –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å")
            print("      –∫–∞—Ç–µ–≥–æ—Ä–∏—è '–∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥_–ø–µ—Ä—Å–æ–Ω–∞–ª–∞' —Å —Å—É–º–º–∞–º–∏:")
            print("      - PESSIMISTIC (—Å–∞–º—ã–µ –ë–û–õ–¨–®–ò–ï —Å—É–º–º—ã): 2026=34347600, 2027=35996285,")
            print("        2028=37724106, 2029=39534864, 2030=41432537")
            print("      - REALISTIC (—Å—Ä–µ–¥–Ω–∏–µ —Å—É–º–º—ã): 2026=24615780, 2027=25797337,")
            print("        2028=27035610, 2029=28333319, 2030=29693318")
            print("      - OPTIMISTIC (—Å–∞–º—ã–µ –ú–ê–õ–ï–ù–¨–ö–ò–ï —Å—É–º–º—ã): 2026=16028880, 2027=17134873,")
            print("        2028=18317179, 2029=19581064, 2030=20932158")
            print("")
            print("   3. –í revenue_breakdown –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—è:")
            print("      - vasdom_revenue (—á–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞ –í–ê–® –î–û–ú)")
            print("      - ufic_sewing (—à–≤–µ–∏ –∏–∑ –£–§–ò–¶)")
            print("      - ufic_outsourcing (–∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥ –∏–∑ –£–§–ò–¶)")
            print("      - total (–æ–±—â–∞—è –≤—ã—Ä—É—á–∫–∞)")
            print("")
            print("   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ vasdom_revenue + ufic_sewing + ufic_outsourcing = total")
            print("")
            
            scenario_results = {}
            
            for scenario in scenarios:
                print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")
                
                # Test the forecast endpoint
                response = await client.get(
                    f"{API_BASE}/finances/forecast",
                    params={"company": company, "scenario": scenario}
                )
                
                print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è {scenario}: {response.status_code}")
                
                # Check 200 status
                if response.status_code != 200:
                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –æ—à–∏–±–∫–∞ {response.status_code} - {response.text}"
                    results.errors.append(error_msg)
                    print(error_msg)
                    continue
                
                data = response.json()
                scenario_results[scenario] = data
                print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: 200 —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
                
                # Validate response structure
                required_fields = ['company', 'scenario', 'base_year', 'base_data', 'forecast']
                for field in required_fields:
                    if field not in data:
                        error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}'"
                        results.errors.append(error_msg)
                        print(error_msg)
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # Check forecast data for years 2026-2030
                forecast = data.get('forecast', [])
                if len(forecast) < 5:
                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–µ—Ç –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ (–æ–∂–∏–¥–∞–ª–æ—Å—å 5, –ø–æ–ª—É—á–µ–Ω–æ {len(forecast)})"
                    results.errors.append(error_msg)
                    print(error_msg)
                    continue
                
                print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(forecast)} –ª–µ—Ç (2026-2030)")
                
                # Get base year data
                base_data = data.get('base_data', {})
                base_revenue = base_data.get('revenue', 0)
                base_expenses = base_data.get('expenses', 0)
                
                print(f"üìä –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ 2025:")
                print(f"   - –í—ã—Ä—É—á–∫–∞: {base_revenue:,.0f} ‚ÇΩ")
                print(f"   - –†–∞—Å—Ö–æ–¥—ã: {base_expenses:,.0f} ‚ÇΩ")
                
                # Check expense_breakdown for –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥_–ø–µ—Ä—Å–æ–Ω–∞–ª–∞ category
                print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario.upper()}:")
                
                # Expected values for –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥_–ø–µ—Ä—Å–æ–Ω–∞–ª–∞ by scenario and year
                expected_outsourcing = {
                    "pessimistic": {2026: 34347600, 2027: 35996285, 2028: 37724106, 2029: 39534864, 2030: 41432537},
                    "realistic": {2026: 24615780, 2027: 25797337, 2028: 27035610, 2029: 28333319, 2030: 29693318},
                    "optimistic": {2026: 16028880, 2027: 17134873, 2028: 18317179, 2029: 19581064, 2030: 20932158}
                }
                
                scenario_expected = expected_outsourcing.get(scenario, {})
                
                # Check each year (2026-2030)
                for year_data in forecast:
                    year = year_data.get('year')
                    if year not in range(2026, 2031):
                        continue
                    
                    expense_breakdown = year_data.get('expense_breakdown', {})
                    
                    # Check if –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥_–ø–µ—Ä—Å–æ–Ω–∞–ª–∞ category exists
                    outsourcing_amount = expense_breakdown.get('–∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥_–ø–µ—Ä—Å–æ–Ω–∞–ª–∞', 0)
                    expected_amount = scenario_expected.get(year, 0)
                    
                    if '–∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥_–ø–µ—Ä—Å–æ–Ω–∞–ª–∞' not in expense_breakdown:
                        error_msg = f"‚ùå {scenario} {year}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è '–∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥_–ø–µ—Ä—Å–æ–Ω–∞–ª–∞' –≤ expense_breakdown"
                        results.errors.append(error_msg)
                        print(error_msg)
                        continue
                    
                    # Check if amount matches expected (allow 1% tolerance)
                    if expected_amount > 0:
                        diff_pct = abs(outsourcing_amount - expected_amount) / expected_amount * 100
                        if diff_pct > 1.0:
                            error_msg = f"‚ùå {scenario} {year}: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥–∞. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_amount:,.0f}, –ø–æ–ª—É—á–µ–Ω–æ {outsourcing_amount:,.0f} (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {diff_pct:.2f}%)"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥_–ø–µ—Ä—Å–æ–Ω–∞–ª–∞ = {outsourcing_amount:,.0f} ‚ÇΩ (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_amount:,.0f})")
                    else:
                        print(f"‚ö†Ô∏è {year}: –Ω–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è {scenario}")
                
                # Check revenue_breakdown structure
                print(f"\nüí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ã—Ä—É—á–∫–∏ –¥–ª—è {scenario}:")
                
                # Check first year as example
                if forecast:
                    first_year = forecast[0]
                    revenue_breakdown = first_year.get('revenue_breakdown', {})
                    
                    required_revenue_fields = ['vasdom_revenue', 'ufic_sewing', 'ufic_outsourcing', 'total']
                    
                    for field in required_revenue_fields:
                        if field not in revenue_breakdown:
                            error_msg = f"‚ùå {scenario}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ revenue_breakdown"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            value = revenue_breakdown[field]
                            print(f"‚úÖ {field}: {value:,.0f} ‚ÇΩ")
                    
                    # Check revenue calculation: vasdom_revenue + ufic_sewing + ufic_outsourcing = total
                    if all(field in revenue_breakdown for field in required_revenue_fields):
                        vasdom = revenue_breakdown['vasdom_revenue']
                        ufic_sewing = revenue_breakdown['ufic_sewing']
                        ufic_outsourcing = revenue_breakdown['ufic_outsourcing']
                        total = revenue_breakdown['total']
                        
                        calculated_total = vasdom + ufic_sewing + ufic_outsourcing
                        
                        if abs(calculated_total - total) > 1.0:  # Allow small rounding differences
                            error_msg = f"‚ùå {scenario}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç total. {vasdom:,.0f} + {ufic_sewing:,.0f} + {ufic_outsourcing:,.0f} = {calculated_total:,.0f}, –Ω–æ total = {total:,.0f}"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {vasdom:,.0f} + {ufic_sewing:,.0f} + {ufic_outsourcing:,.0f} = {total:,.0f}")
                
                print("")  # Empty line for readability
            
            # Store results for this scenario
            results.finance_endpoints[f'{company}_{scenario}_forecast'] = data
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –í–ê–® –î–û–ú –º–æ–¥–µ–ª—å: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def test_ufic_model_forecast_expense_breakdown():
    """Test –£–§–ò–¶ –º–æ–¥–µ–ª—å forecast endpoint expense_breakdown structure according to review request"""
    print("\n=== –¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ EXPENSE_BREAKDOWN –£–§–ò–¶ –ú–û–î–ï–õ–¨ ===\n")
    
    results = TestResults()
    company = "–£–§–ò–¶ –º–æ–¥–µ–ª—å"
    scenario = "realistic"
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print(f"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint: GET /api/finances/forecast?company={company}&scenario={scenario}")
            print("üìã –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê –∏–∑ review request:")
            print("   1. –í expense_breakdown –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–ª—é—á–∞ '–Ω–¥—Ñ–ª' –∏–ª–∏ 'ndfl'")
            print("   2. –í expense_breakdown –î–û–õ–ñ–ï–ù –±—ã—Ç—å –∫–ª—é—á '—Ç–µ–∫—É—â–∏–π_—Ä–µ–º–æ–Ω—Ç_–æ–±—É—á–µ–Ω–∏–µ'")
            print("   3. –í expense_breakdown –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π:")
            print("      '–≥–∞–∑–ø—Ä–æ–º', '–ø–µ—Ä–≤—ã–π_–≥–∞–∑–æ–≤—ã–π', '–≤–æ–¥–æ–∫–∞–Ω–∞–ª', '–∫—Ä—ç–æ', '–≤–¥–ø–æ', '–ø—Ä–∏–∫–∞–º—Å–∫–∏–π_–∏–Ω—Å—Ç–∏—Ç—É—Ç'")
            print("   4. –í—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ expense_breakdown –¥–ª—è 2026 –≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            print("")
            
            # Test the forecast endpoint
            response = await client.get(
                f"{API_BASE}/finances/forecast",
                params={"company": company, "scenario": scenario}
            )
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # Validate response structure
            required_fields = ['company', 'scenario', 'forecast']
            for field in required_fields:
                if field not in data:
                    error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –æ—Ç–≤–µ—Ç–µ"
                    results.errors.append(error_msg)
                    print(error_msg)
                else:
                    print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # Check forecast data
            forecast = data.get('forecast', [])
            if len(forecast) < 5:
                error_msg = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–µ—Ç –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ (–æ–∂–∏–¥–∞–ª–æ—Å—å 5, –ø–æ–ª—É—á–µ–Ω–æ {len(forecast)})"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(forecast)} –ª–µ—Ç")
            
            # Check expense_breakdown for each year (2026-2030)
            forbidden_keys = ["–Ω–¥—Ñ–ª", "ndfl", "–≥–∞–∑–ø—Ä–æ–º", "–ø–µ—Ä–≤—ã–π_–≥–∞–∑–æ–≤—ã–π", "–≤–æ–¥–æ–∫–∞–Ω–∞–ª", "–∫—Ä—ç–æ", "–≤–¥–ø–æ", "–ø—Ä–∏–∫–∞–º—Å–∫–∏–π_–∏–Ω—Å—Ç–∏—Ç—É—Ç"]
            required_keys = ["—Ç–µ–∫—É—â–∏–π_—Ä–µ–º–æ–Ω—Ç_–æ–±—É—á–µ–Ω–∏–µ"]
            
            expense_breakdown_2026 = None
            
            for year_data in forecast:
                year = year_data.get('year')
                if year not in range(2026, 2031):
                    continue
                
                expense_breakdown = year_data.get('expense_breakdown', {})
                
                if year == 2026:
                    expense_breakdown_2026 = expense_breakdown
                
                print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º expense_breakdown –¥–ª—è {year} –≥–æ–¥–∞:")
                print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π –≤ expense_breakdown: {len(expense_breakdown)}")
                
                # Check for forbidden keys
                found_forbidden = []
                for key in expense_breakdown.keys():
                    key_lower = key.lower()
                    for forbidden in forbidden_keys:
                        if forbidden.lower() in key_lower:
                            found_forbidden.append(key)
                
                if found_forbidden:
                    error_msg = f"‚ùå –ì–æ–¥ {year}: –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –≤ expense_breakdown: {found_forbidden}"
                    results.errors.append(error_msg)
                    print(error_msg)
                else:
                    print(f"‚úÖ –ì–æ–¥ {year}: –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                
                # Check for required keys
                found_required = []
                for key in expense_breakdown.keys():
                    key_lower = key.lower()
                    for required in required_keys:
                        if required.lower() in key_lower:
                            found_required.append(key)
                
                if not found_required:
                    error_msg = f"‚ùå –ì–æ–¥ {year}: –Ω–µ –Ω–∞–π–¥–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á '—Ç–µ–∫—É—â–∏–π_—Ä–µ–º–æ–Ω—Ç_–æ–±—É—á–µ–Ω–∏–µ' –≤ expense_breakdown"
                    results.errors.append(error_msg)
                    print(error_msg)
                else:
                    print(f"‚úÖ –ì–æ–¥ {year}: –Ω–∞–π–¥–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á: {found_required}")
                
                # Show all keys for debugging
                print(f"   - –í—Å–µ –∫–ª—é—á–∏ expense_breakdown: {list(expense_breakdown.keys())}")
            
            # Output expense_breakdown for 2026 as requested
            print(f"\nüìã –°–û–î–ï–†–ñ–ò–ú–û–ï EXPENSE_BREAKDOWN –î–õ–Ø 2026 –ì–û–î–ê:")
            print("=" * 60)
            
            if expense_breakdown_2026:
                for key, value in expense_breakdown_2026.items():
                    print(f"   {key}: {value:,.0f} ‚ÇΩ")
                
                print(f"\nüìä –ò—Ç–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(expense_breakdown_2026)}")
                total_amount = sum(expense_breakdown_2026.values())
                print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.0f} ‚ÇΩ")
            else:
                error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å expense_breakdown –¥–ª—è 2026 –≥–æ–¥–∞"
                results.errors.append(error_msg)
                print(error_msg)
            
            print("=" * 60)
            
            # Summary of test results
            print(f"\nüìà –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
            
            # Count forbidden keys across all years
            total_forbidden_found = sum(1 for error in results.errors if "–∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏" in error)
            if total_forbidden_found == 0:
                print("‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π 1: –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ ('–Ω–¥—Ñ–ª', 'ndfl', '–≥–∞–∑–ø—Ä–æ–º', –∏ –¥—Ä.) –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ –≤—Å–µ—Ö –≥–æ–¥–∞—Ö")
            else:
                print(f"‚ùå –ö—Ä–∏—Ç–µ—Ä–∏–π 1: –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –≤ {total_forbidden_found} –≥–æ–¥–∞—Ö")
            
            # Count missing required keys
            total_missing_required = sum(1 for error in results.errors if "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á" in error)
            if total_missing_required == 0:
                print("‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π 2: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á '—Ç–µ–∫—É—â–∏–π_—Ä–µ–º–æ–Ω—Ç_–æ–±—É—á–µ–Ω–∏–µ' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å–µ—Ö –≥–æ–¥–∞—Ö")
            else:
                print(f"‚ùå –ö—Ä–∏—Ç–µ—Ä–∏–π 2: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á –≤ {total_missing_required} –≥–æ–¥–∞—Ö")
            
            # Check if individual forbidden keys are absent
            individual_forbidden_absent = True
            if expense_breakdown_2026:
                for forbidden in ["–≥–∞–∑–ø—Ä–æ–º", "–ø–µ—Ä–≤—ã–π_–≥–∞–∑–æ–≤—ã–π", "–≤–æ–¥–æ–∫–∞–Ω–∞–ª", "–∫—Ä—ç–æ", "–≤–¥–ø–æ", "–ø—Ä–∏–∫–∞–º—Å–∫–∏–π_–∏–Ω—Å—Ç–∏—Ç—É—Ç"]:
                    if any(forbidden.lower() in key.lower() for key in expense_breakdown_2026.keys()):
                        individual_forbidden_absent = False
                        break
            
            if individual_forbidden_absent:
                print("‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π 3: –û—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            else:
                print("‚ùå –ö—Ä–∏—Ç–µ—Ä–∏–π 3: –ù–∞–π–¥–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏")
            
            print("‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π 4: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ expense_breakdown –¥–ª—è 2026 –≥–æ–¥–∞ –≤—ã–≤–µ–¥–µ–Ω–æ –≤—ã—à–µ")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –£–§–ò–¶ –º–æ–¥–µ–ª—å forecast: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def main():
    """Main test execution - focused on –£–§–ò–¶ –º–æ–¥–µ–ª—å forecast testing per review request"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ì–ù–û–ó–ê –£–§–ò–¶ –ú–û–î–ï–õ–¨ (REVIEW REQUEST)")
    print("=" * 80)
    print(f"üåê Backend URL: {BACKEND_URL}")
    print(f"üîó API Base: {API_BASE}")
    print("=" * 80)
    
    # Check basic connectivity
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend...")
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(f"{API_BASE}/health")
            if response.status_code == 200:
                print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {str(e)}")
        return
    
    print("\n" + "=" * 80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ EXPENSE_BREAKDOWN –£–§–ò–¶ –ú–û–î–ï–õ–¨")
    print("=" * 80)
    
    # Run the specific test for –£–§–ò–¶ –º–æ–¥–µ–ª—å forecast as requested
    result = await test_ufic_model_forecast_expense_breakdown()
    
    # Print summary
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 80)
    
    if result.errors:
        print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(result.errors)}")
        print("\nüîç –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:")
        for i, error in enumerate(result.errors, 1):
            print(f"   {i}. {error}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        critical_errors = [e for e in result.errors if "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –°–ë–û–ô" in e or "500" in e or "–ö–†–ò–¢–ï–†–ò–ô 1 –ù–ê–†–£–®–ï–ù" in e]
        if critical_errors:
            print(f"\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö: {len(critical_errors)}")
            print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–î–ê")
        else:
            print("\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            print("‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏")
    else:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:")
        print("   ‚úÖ –í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 200 —Å—Ç–∞—Ç—É—Å")
        print("   ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '–∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥_–ø–µ—Ä—Å–æ–Ω–∞–ª–∞' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å–µ—Ö –≥–æ–¥–∞—Ö")
        print("   ‚úÖ –°—É–º–º—ã –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º")
        print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ revenue_breakdown –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print("   ‚úÖ –†–∞—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏ vasdom_revenue + ufic_sewing + ufic_outsourcing = total")
    
    print("\n" + "=" * 80)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 80)
    
    return [("–í–ê–® –î–û–ú –º–æ–¥–µ–ª—å Forecast Test", result)]

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
