#!/usr/bin/env python3
"""
VasDom AudioBot - Backend API Testing
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö meetings API endpoints –∏ voice processing endpoints
"""

import asyncio
import httpx
import json
import os
import sys
from datetime import datetime
from pathlib import Path

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ frontend/.env
def get_backend_url():
    """–ü–æ–ª—É—á–∏—Ç—å URL backend –∏–∑ frontend/.env"""
    try:
        frontend_env_path = Path(__file__).parent / "frontend" / ".env"
        if frontend_env_path.exists():
            with open(frontend_env_path, 'r') as f:
                for line in f:
                    if line.startswith('REACT_APP_BACKEND_URL='):
                        url = line.split('=', 1)[1].strip()
                        return f"{url}/api"
        
        # Fallback
        return "https://crmunified.preview.emergentagent.com/api"
    except Exception as e:
        print(f"‚ùå Error reading backend URL: {e}")
        return "https://crmunified.preview.emergentagent.com/api"

BACKEND_URL = get_backend_url()
print(f"üîó Testing backend at: {BACKEND_URL}")

class MeetingsAPITester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è Meetings API endpoints"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.meeting_id = None
        
    async def test_get_meetings(self):
        """–¢–µ—Å—Ç GET /api/meetings - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ä–æ–∫"""
        print("\nüìã Testing GET /api/meetings...")
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.get(f"{self.base_url}/meetings")
                
                print(f"Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ SUCCESS: {data}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                    if "status" in data and "meetings" in data:
                        meetings_count = len(data.get("meetings", []))
                        print(f"üìä Found {meetings_count} meetings")
                        return True
                    else:
                        print("‚ùå Invalid response structure")
                        return False
                else:
                    print(f"‚ùå FAILED: HTTP {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            return False
    
    async def test_start_recording(self):
        """–¢–µ—Å—Ç POST /api/meetings/start-recording - –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏"""
        print("\nüé§ Testing POST /api/meetings/start-recording...")
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(f"{self.base_url}/meetings/start-recording")
                
                print(f"Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ SUCCESS: {data}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º meeting_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
                    if "meeting_id" in data:
                        self.meeting_id = data["meeting_id"]
                        print(f"üìù Meeting ID saved: {self.meeting_id}")
                        return True
                    else:
                        print("‚ùå No meeting_id in response")
                        return False
                else:
                    print(f"‚ùå FAILED: HTTP {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            return False
    
    async def test_stop_recording(self):
        """–¢–µ—Å—Ç POST /api/meetings/stop-recording - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏"""
        print("\n‚èπÔ∏è Testing POST /api/meetings/stop-recording...")
        
        if not self.meeting_id:
            print("‚ùå No meeting_id available, skipping test")
            return False
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º meeting_id –∫–∞–∫ query parameter
                response = await client.post(
                    f"{self.base_url}/meetings/stop-recording",
                    params={"meeting_id": self.meeting_id}
                )
                
                print(f"Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ SUCCESS: {data}")
                    return True
                else:
                    print(f"‚ùå FAILED: HTTP {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            return False

class VoiceAPITester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è Voice API endpoints"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url
    
    async def test_voice_process_post(self):
        """–¢–µ—Å—Ç POST /api/voice/process - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("\nüéôÔ∏è Testing POST /api/voice/process...")
        
        test_message = {
            "text": "–ü—Ä–∏–≤–µ—Ç! –°–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –¥–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏?",
            "user_id": "test_user_meetings"
        }
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    f"{self.base_url}/voice/process",
                    json=test_message
                )
                
                print(f"Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ SUCCESS: {data}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                    if "response" in data:
                        ai_response = data["response"]
                        print(f"ü§ñ AI Response: {ai_response[:100]}...")
                        return True
                    else:
                        print("‚ùå Invalid response structure")
                        return False
                else:
                    print(f"‚ùå FAILED: HTTP {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            return False
    
    async def test_self_learning_status(self):
        """–¢–µ—Å—Ç GET /api/self-learning/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è"""
        print("\nüß† Testing GET /api/self-learning/status...")
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.get(f"{self.base_url}/self-learning/status")
                
                print(f"Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ SUCCESS: {data}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
                    status = data.get("status", "unknown")
                    emergent_llm = data.get("emergent_llm", {})
                    
                    print(f"üìä Self-learning status: {status}")
                    print(f"ü§ñ Emergent LLM mode: {emergent_llm.get('mode', 'unknown')}")
                    
                    return True
                else:
                    print(f"‚ùå FAILED: HTTP {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            return False

async def run_comprehensive_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ meetings –∏ voice API"""
    print("üöÄ VasDom AudioBot - Meetings & Voice API Testing")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–æ–≤
    meetings_tester = MeetingsAPITester(BACKEND_URL)
    voice_tester = VoiceAPITester(BACKEND_URL)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Meetings API
    print("\nüé§ MEETINGS API TESTING")
    print("-" * 30)
    
    results["get_meetings"] = await meetings_tester.test_get_meetings()
    results["start_recording"] = await meetings_tester.test_start_recording()
    results["stop_recording"] = await meetings_tester.test_stop_recording()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Voice API
    print("\nüéôÔ∏è VOICE API TESTING")
    print("-" * 30)
    
    results["voice_process"] = await voice_tester.test_voice_process_post()
    results["self_learning_status"] = await voice_tester.test_self_learning_status()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìä TEST RESULTS SUMMARY")
    print("=" * 60)
    
    passed_tests = []
    failed_tests = []
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name:25} {status}")
        
        if result:
            passed_tests.append(test_name)
        else:
            failed_tests.append(test_name)
    
    print(f"\nüìà TOTAL: {len(passed_tests)}/{len(results)} tests passed")
    
    if failed_tests:
        print(f"\n‚ùå FAILED TESTS:")
        for test in failed_tests:
            print(f"  - {test}")
    
    if passed_tests:
        print(f"\n‚úÖ PASSED TESTS:")
        for test in passed_tests:
            print(f"  - {test}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    critical_tests = ["voice_process", "get_meetings"]
    critical_passed = all(results.get(test, False) for test in critical_tests)
    
    if critical_passed:
        print("\nüéâ CRITICAL FUNCTIONALITY: All core meetings and voice endpoints working!")
    else:
        print("\n‚ö†Ô∏è CRITICAL ISSUES: Some core endpoints are not working properly")
    
    return results

if __name__ == "__main__":
    print(f"üîó Backend URL: {BACKEND_URL}")
    results = asyncio.run(run_comprehensive_tests())
    
    # Exit code –¥–ª—è CI/CD
    failed_count = sum(1 for result in results.values() if not result)
    sys.exit(failed_count)