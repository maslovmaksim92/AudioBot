#!/usr/bin/env python3
"""
Critical Tests for VasDom AudioBot - Review Request Focus
Tests the specific endpoints mentioned in the review request
"""

import requests
import json
import sys
import time
from datetime import datetime

class CriticalTester:
    def __init__(self, base_url="http://localhost:8001"):
        self.base_url = base_url
        self.api_url = f"{base_url}/api"
        self.tests_run = 0
        self.tests_passed = 0
        self.failed_tests = []

    def log_test(self, name, success, details=""):
        """Log test results"""
        self.tests_run += 1
        if success:
            self.tests_passed += 1
            print(f"‚úÖ {name} - PASSED")
        else:
            self.failed_tests.append({"name": name, "details": details})
            print(f"‚ùå {name} - FAILED: {details}")

    def test_cleaning_houses_main(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 1: GET /api/cleaning/houses - –æ—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–æ–º–æ–≤"""
        try:
            print("\nüè† –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 1: GET /api/cleaning/houses")
            print("   –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –î–æ–º–∞ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏")
            print("   –ü—Ä–æ–≤–µ—Ä–∫–∞: apartments_count > 0, entrances_count > 0, floors_count > 0")
            print("   –ü—Ä–æ–≤–µ—Ä–∫–∞: management_company –Ω–µ null/–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞")
            
            response = requests.get(f"{self.api_url}/cleaning/houses", timeout=30)
            success = response.status_code == 200
            
            if success:
                data = response.json()
                success = (data.get("status") == "success" and 
                          "houses" in data and
                          isinstance(data["houses"], list))
                
                if success:
                    houses = data["houses"]
                    houses_count = len(houses)
                    total_from_api = data.get("total", houses_count)
                    
                    print(f"   üè† –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–º–æ–≤: {houses_count}")
                    print(f"   üè† Total –∏–∑ API: {total_from_api}")
                    
                    if houses_count > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª—è
                        houses_with_apartments = sum(1 for h in houses if (h.get('apartments_count') or 0) > 0)
                        houses_with_entrances = sum(1 for h in houses if (h.get('entrances_count') or 0) > 0)
                        houses_with_floors = sum(1 for h in houses if (h.get('floors_count') or 0) > 0)
                        houses_with_uc = sum(1 for h in houses if h.get('management_company') and h.get('management_company') != 'null')
                        
                        print(f"   üè† –î–æ–º–æ–≤ —Å apartments_count > 0: {houses_with_apartments}/{houses_count}")
                        print(f"   üè† –î–æ–º–æ–≤ —Å entrances_count > 0: {houses_with_entrances}/{houses_count}")
                        print(f"   üè† –î–æ–º–æ–≤ —Å floors_count > 0: {houses_with_floors}/{houses_count}")
                        print(f"   üè† –î–æ–º–æ–≤ —Å –£–ö –Ω–µ null: {houses_with_uc}/{houses_count}")
                        
                        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò
                        critical_issues = []
                        
                        if houses_with_apartments == 0:
                            critical_issues.append("–í—Å–µ apartments_count = 0")
                        if houses_with_entrances == 0:
                            critical_issues.append("–í—Å–µ entrances_count = 0")
                        if houses_with_floors == 0:
                            critical_issues.append("–í—Å–µ floors_count = 0")
                        if houses_with_uc == 0:
                            critical_issues.append("–í—Å–µ management_company = null")
                        
                        if critical_issues:
                            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
                            for issue in critical_issues:
                                print(f"      - {issue}")
                            success = False
                        else:
                            print(f"   ‚úÖ –í—Å–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
                        sample_house = houses[0]
                        print(f"   üìã –ü—Ä–∏–º–µ—Ä –¥–æ–º–∞:")
                        print(f"      - –ê–¥—Ä–µ—Å: {sample_house.get('address', '–ù–µ—Ç')}")
                        print(f"      - –ö–≤–∞—Ä—Ç–∏—Ä—ã: {sample_house.get('apartments_count', 0)}")
                        print(f"      - –ü–æ–¥—ä–µ–∑–¥—ã: {sample_house.get('entrances_count', 0)}")
                        print(f"      - –≠—Ç–∞–∂–∏: {sample_house.get('floors_count', 0)}")
                        print(f"      - –£–ö: {sample_house.get('management_company', 'null')}")
                
            self.log_test("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: GET /api/cleaning/houses", success, 
                         f"Status: {response.status_code}, Houses: {houses_count if 'houses_count' in locals() else 0}")
            return success
        except Exception as e:
            self.log_test("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: GET /api/cleaning/houses", False, str(e))
            return False

    def test_cleaning_houses_490(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 2: GET /api/cleaning/houses-490 - –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å exactly 490 –¥–æ–º–æ–≤"""
        try:
            print("\nüè† –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 2: GET /api/cleaning/houses-490")
            print("   –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –ó–∞–≥—Ä—É–∑–∫–∞ exactly 490 –¥–æ–º–æ–≤ –∏–∑ Bitrix24")
            print("   –ü—Ä–æ–≤–µ—Ä–∫–∞: apartments_count > 0, entrances_count > 0, floors_count > 0")
            print("   –ü—Ä–æ–≤–µ—Ä–∫–∞: management_company –Ω–µ null/–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞")
            
            response = requests.get(f"{self.api_url}/cleaning/houses-490", timeout=30)
            success = response.status_code == 200
            
            if success:
                data = response.json()
                success = (data.get("status") == "success" and 
                          "houses" in data and
                          isinstance(data["houses"], list))
                
                if success:
                    houses = data["houses"]
                    houses_count = len(houses)
                    total_from_api = data.get("total", houses_count)
                    
                    print(f"   üè† –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–º–æ–≤: {houses_count}")
                    print(f"   üè† Total –∏–∑ API: {total_from_api}")
                    
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: exactly 490 –¥–æ–º–æ–≤
                    if houses_count == 490:
                        print(f"   ‚úÖ EXACTLY 490 –¥–æ–º–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
                    else:
                        print(f"   ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û: {houses_count} != 490")
                        success = False
                    
                    if houses_count > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª—è
                        houses_with_apartments = sum(1 for h in houses if (h.get('apartments_count') or 0) > 0)
                        houses_with_entrances = sum(1 for h in houses if (h.get('entrances_count') or 0) > 0)
                        houses_with_floors = sum(1 for h in houses if (h.get('floors_count') or 0) > 0)
                        houses_with_uc = sum(1 for h in houses if h.get('management_company') and h.get('management_company') != 'null')
                        
                        print(f"   üè† –î–æ–º–æ–≤ —Å apartments_count > 0: {houses_with_apartments}/{houses_count}")
                        print(f"   üè† –î–æ–º–æ–≤ —Å entrances_count > 0: {houses_with_entrances}/{houses_count}")
                        print(f"   üè† –î–æ–º–æ–≤ —Å floors_count > 0: {houses_with_floors}/{houses_count}")
                        print(f"   üè† –î–æ–º–æ–≤ —Å –£–ö –Ω–µ null: {houses_with_uc}/{houses_count}")
                        
                        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò
                        if houses_with_apartments == 0:
                            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –í—Å–µ apartments_count = 0")
                            success = False
                        elif houses_with_apartments < houses_count * 0.8:
                            print(f"   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ú–∞–ª–æ –¥–æ–º–æ–≤ —Å apartments_count > 0")
                            success = False
                        else:
                            print(f"   ‚úÖ apartments_count –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        
                        if houses_with_entrances == 0:
                            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –í—Å–µ entrances_count = 0")
                            success = False
                        elif houses_with_entrances < houses_count * 0.8:
                            print(f"   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ú–∞–ª–æ –¥–æ–º–æ–≤ —Å entrances_count > 0")
                            success = False
                        else:
                            print(f"   ‚úÖ entrances_count –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        
                        if houses_with_floors == 0:
                            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –í—Å–µ floors_count = 0")
                            success = False
                        elif houses_with_floors < houses_count * 0.8:
                            print(f"   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ú–∞–ª–æ –¥–æ–º–æ–≤ —Å floors_count > 0")
                            success = False
                        else:
                            print(f"   ‚úÖ floors_count –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        
                        if houses_with_uc == 0:
                            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –í—Å–µ management_company = null")
                            success = False
                        elif houses_with_uc < houses_count * 0.5:
                            print(f"   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ú–∞–ª–æ –¥–æ–º–æ–≤ —Å –£–ö")
                            success = False
                        else:
                            print(f"   ‚úÖ management_company –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
                        sample_house = houses[0]
                        print(f"   üìã –ü—Ä–∏–º–µ—Ä –¥–æ–º–∞:")
                        print(f"      - –ê–¥—Ä–µ—Å: {sample_house.get('address', '–ù–µ—Ç')}")
                        print(f"      - –ö–≤–∞—Ä—Ç–∏—Ä—ã: {sample_house.get('apartments_count', 0)}")
                        print(f"      - –ü–æ–¥—ä–µ–∑–¥—ã: {sample_house.get('entrances_count', 0)}")
                        print(f"      - –≠—Ç–∞–∂–∏: {sample_house.get('floors_count', 0)}")
                        print(f"      - –£–ö: {sample_house.get('management_company', 'null')}")
                
            self.log_test("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: GET /api/cleaning/houses-490", success, 
                         f"Status: {response.status_code}, Houses: {houses_count if 'houses_count' in locals() else 0}")
            return success
        except Exception as e:
            self.log_test("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: GET /api/cleaning/houses-490", False, str(e))
            return False

    def test_bitrix24_connection(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 3: GET /api/bitrix24/test - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitrix24"""
        try:
            print("\nüîó –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 3: GET /api/bitrix24/test")
            print("   –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitrix24")
            print("   –û–∂–∏–¥–∞–µ—Ç—Å—è: –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
            
            response = requests.get(f"{self.api_url}/bitrix24/test", timeout=15)
            success = response.status_code == 200
            
            if success:
                data = response.json()
                success = data.get("status") == "success"
                
                if success:
                    bitrix_info = data.get("bitrix_info", {})
                    connection_status = bitrix_info.get("connection", "unknown")
                    sample_deals = bitrix_info.get("sample_deals", 0)
                    
                    print(f"   üîó –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connection_status}")
                    print(f"   üîó –ü—Ä–∏–º–µ—Ä–æ–≤ —Å–¥–µ–ª–æ–∫: {sample_deals}")
                    
                    if connection_status == "‚úÖ Connected":
                        print(f"   ‚úÖ Bitrix24 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    else:
                        print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Bitrix24")
                        success = False
                    
                    if sample_deals > 0:
                        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Bitrix24: {sample_deals} —Å–¥–µ–ª–æ–∫")
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Bitrix24")
                else:
                    print(f"   ‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data.get('message', 'Unknown error')}")
                
            self.log_test("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: GET /api/bitrix24/test", success, 
                         f"Status: {response.status_code}")
            return success
        except Exception as e:
            self.log_test("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: GET /api/bitrix24/test", False, str(e))
            return False

    def test_house_schema_structure(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö House schema"""
        try:
            print("\nüìã –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã House schema")
            print("   –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: House schema —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è")
            print("   –ü—Ä–æ–≤–µ—Ä–∫–∞: –ù–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–µ")
            
            response = requests.get(f"{self.api_url}/cleaning/houses?limit=1", timeout=15)
            success = response.status_code == 200
            
            if success:
                data = response.json()
                success = (data.get("status") == "success" and 
                          "houses" in data and
                          len(data["houses"]) > 0)
                
                if success:
                    house = data["houses"][0]
                    
                    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ review request
                    required_fields = [
                        'address', 'deal_id', 'brigade', 'management_company',
                        'apartments_count', 'entrances_count', 'floors_count'
                    ]
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                    additional_fields = [
                        'status', 'stage_id', 'assigned_by_id', 'company_id',
                        'contact_id', 'created_date', 'modified_date'
                    ]
                    
                    missing_required = []
                    present_required = []
                    missing_additional = []
                    present_additional = []
                    
                    for field in required_fields:
                        if field in house:
                            present_required.append(field)
                        else:
                            missing_required.append(field)
                    
                    for field in additional_fields:
                        if field in house:
                            present_additional.append(field)
                        else:
                            missing_additional.append(field)
                    
                    print(f"   üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(present_required)}/{len(required_fields)}")
                    print(f"   üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(present_additional)}/{len(additional_fields)}")
                    
                    if missing_required:
                        print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {missing_required}")
                        success = False
                    else:
                        print(f"   ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    
                    if missing_additional:
                        print(f"   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_additional}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    print(f"   üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ House:")
                    for field in present_required:
                        value = house.get(field)
                        print(f"      - {field}: {type(value).__name__} = {str(value)[:50]}")
                
            self.log_test("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: House Schema Structure", success, 
                         f"Status: {response.status_code}, Required fields: {len(present_required) if 'present_required' in locals() else 0}")
            return success
        except Exception as e:
            self.log_test("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: House Schema Structure", False, str(e))
            return False

    def run_critical_tests(self):
        """Run only critical tests from review request"""
        print("üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ VasDom AudioBot - Review Request")
        print(f"üîó Testing against: {self.base_url}")
        print("üìã –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–±–ª–µ–º–µ: –ü—Ä–æ–¥–∞–∫—à–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∫–∞–∫ '0'")
        print("üìã –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
        print("=" * 80)
        
        # –ö–†–ò–¢–ò–ß–ù–´–ï –¢–ï–°–¢–´ –∏–∑ review request
        test1 = self.test_cleaning_houses_main()      # GET /api/cleaning/houses
        test2 = self.test_cleaning_houses_490()       # GET /api/cleaning/houses-490
        test3 = self.test_bitrix24_connection()       # GET /api/bitrix24/test
        test4 = self.test_house_schema_structure()    # –ü—Ä–æ–≤–µ—Ä–∫–∞ House schema
        
        # Final summary
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –¢–ï–°–¢–û–í")
        print("=" * 80)
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {self.tests_passed}/{self.tests_run}")
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(self.failed_tests)}")
        
        if self.failed_tests:
            print("\n‚ùå –ü–†–û–í–ê–õ–ò–í–®–ò–ï–°–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´:")
            for i, test in enumerate(self.failed_tests, 1):
                print(f"{i}. {test['name']}")
                print(f"   –î–µ—Ç–∞–ª–∏: {test['details']}")
        
        success_rate = (self.tests_passed / self.tests_run) * 100 if self.tests_run > 0 else 0
        print(f"\nüìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è review request
        if success_rate == 100:
            print("üéâ –û–¢–õ–ò–ß–ù–û: –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ!")
            print("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª—è –±–æ–ª—å—à–µ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç '0'")
            print("‚úÖ management_company –±–æ–ª—å—à–µ –ù–ï null")
            print("‚úÖ Bitrix24 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("‚úÖ House schema —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è")
            print("üöÄ –ì–û–¢–û–í–û –ö –î–ï–ü–õ–û–Æ –ù–ê –ü–†–û–î–ê–ö–®–ù")
        elif success_rate >= 75:
            print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ù–û: –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ù–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            print("üö´ –ù–ï –ì–û–¢–û–í–û –∫ –¥–µ–ø–ª–æ—é –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω")
        
        print("=" * 80)
        return success_rate >= 75

def main():
    """Main test execution"""
    tester = CriticalTester()
    
    try:
        success = tester.run_critical_tests()
        return 0 if success else 1
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Tests interrupted by user")
        return 1
    except Exception as e:
        print(f"\nüí• Unexpected error: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())