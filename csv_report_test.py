#!/usr/bin/env python3
"""
CSV Report Test Suite for VasDom Cleaning System
Testing /api/cleaning/missing-data-report endpoint

This test validates:
1. CSV file generation with all houses (~500 houses + header)
2. CSV structure with all required columns
3. Specific house ID 8674 (–ö–∏–±–∞–ª—å—á–∏—á–∞ 3) contact verification
4. Statistics on houses with/without elder contacts
"""

import asyncio
import httpx
import csv
import io
from datetime import datetime
from typing import Dict, List, Any, Optional
import os

# Backend URL from environment
BACKEND_URL = "https://finance-forecast-14.preview.emergentagent.com"
API_BASE = f"{BACKEND_URL}/api"

class CSVReportResults:
    def __init__(self):
        self.csv_generated = False
        self.total_rows = 0
        self.header_columns = []
        self.expected_columns = [
            'ID', '–ê–¥—Ä–µ—Å', '–£–ö', '–ë—Ä–∏–≥–∞–¥–∞', '–ü–æ–¥—ä–µ–∑–¥—ã', '–≠—Ç–∞–∂–∏', 
            '–ö–≤–∞—Ä—Ç–∏—Ä—ã', '–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å', '–°—Ç–∞—Ä—à–∏–π (–§–ò–û)', '–°—Ç–∞—Ä—à–∏–π (—Ç–µ–ª–µ—Ñ–æ–Ω)', 
            '–°—Ç–∞—Ä—à–∏–π (email)', '–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è'
        ]
        self.house_8674_found = False
        self.house_8674_data = {}
        self.houses_with_contacts = 0
        self.houses_without_contacts = 0
        self.sample_houses = []
        self.errors = []
        self.csv_content = ""

async def test_csv_report_generation():
    """Test the CSV missing data report endpoint"""
    print("=== –¢–ï–°–¢ CSV –û–¢–ß–ï–¢–ê –° –ö–û–ù–¢–ê–ö–¢–ê–ú–ò –°–¢–ê–†–®–ï–ì–û ===\n")
    
    results = CSVReportResults()
    
    try:
        # Use 300 second timeout as specified
        timeout = httpx.Timeout(300.0)
        
        async with httpx.AsyncClient(timeout=timeout) as client:
            print("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º CSV –æ—Ç—á–µ—Ç —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ —Å—Ç–∞—Ä—à–µ–≥–æ...")
            print(f"üì° URL: {API_BASE}/cleaning/missing-data-report")
            print("‚è±Ô∏è Timeout: 300 —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω—É—Ç)")
            
            # Request the CSV report
            response = await client.get(f"{API_BASE}/cleaning/missing-data-report")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            # Check if response is CSV
            content_type = response.headers.get('content-type', '')
            if 'csv' not in content_type.lower():
                error_msg = f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}, –æ–∂–∏–¥–∞–ª—Å—è CSV"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            print("‚úÖ CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
            results.csv_generated = True
            
            # Parse CSV content
            csv_content = response.content.decode('utf-8-sig')  # Handle BOM
            results.csv_content = csv_content
            
            # Parse CSV
            csv_reader = csv.DictReader(io.StringIO(csv_content), delimiter=';')
            
            # Get header columns
            results.header_columns = csv_reader.fieldnames or []
            print(f"üìã –ö–æ–ª–æ–Ω–∫–∏ CSV: {results.header_columns}")
            
            # Check if all expected columns are present
            missing_columns = []
            for expected_col in results.expected_columns:
                if expected_col not in results.header_columns:
                    missing_columns.append(expected_col)
            
            if missing_columns:
                error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                print("‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            # Parse all rows
            houses = []
            for row in csv_reader:
                houses.append(row)
                results.total_rows += 1
            
            print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ CSV: {results.total_rows}")
            
            # Check if we have expected number of houses (~500)
            if results.total_rows < 400:
                error_msg = f"‚ö†Ô∏è –ú–∞–ª–æ –¥–æ–º–æ–≤ –≤ –æ—Ç—á–µ—Ç–µ: {results.total_rows}, –æ–∂–∏–¥–∞–ª–æ—Å—å ~500"
                results.errors.append(error_msg)
                print(error_msg)
            elif results.total_rows > 600:
                error_msg = f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–æ–º–æ–≤: {results.total_rows}, –æ–∂–∏–¥–∞–ª–æ—Å—å ~500"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–æ–≤ –≤ –Ω–æ—Ä–º–µ: {results.total_rows}")
            
            # Look for specific house ID 8674 (–ö–∏–±–∞–ª—å—á–∏—á–∞ 3)
            print(f"\nüîç –ü–æ–∏—Å–∫ –¥–æ–º–∞ ID 8674 (–ö–∏–±–∞–ª—å—á–∏—á–∞ 3)...")
            
            for house in houses:
                house_id = house.get('ID', '')
                address = house.get('–ê–¥—Ä–µ—Å', '')
                elder_name = house.get('–°—Ç–∞—Ä—à–∏–π (–§–ò–û)', '')
                elder_phone = house.get('–°—Ç–∞—Ä—à–∏–π (—Ç–µ–ª–µ—Ñ–æ–Ω)', '')
                
                # Check if this is house 8674
                if house_id == '8674' or '–∫–∏–±–∞–ª—å—á–∏—á–∞ 3' in address.lower():
                    results.house_8674_found = True
                    results.house_8674_data = house
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –¥–æ–º ID {house_id}: {address}")
                    print(f"   - –°—Ç–∞—Ä—à–∏–π: {elder_name}")
                    print(f"   - –¢–µ–ª–µ—Ñ–æ–Ω: {elder_phone}")
                    print(f"   - Email: {house.get('–°—Ç–∞—Ä—à–∏–π (email)', '')}")
                    
                    # Check if contact matches expected values
                    expected_name = "–Ω–æ–≤–∞—è —Å—Ç–∞—Ä—à–∞—è –°–≤–µ—Ç–ª–∞–Ω–∞"
                    expected_phone = "+79657005267"
                    
                    if expected_name.lower() in elder_name.lower():
                        print(f"‚úÖ –ò–º—è —Å—Ç–∞—Ä—à–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
                    else:
                        print(f"‚ö†Ô∏è –ò–º—è —Å—Ç–∞—Ä—à–µ–≥–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_name}', –ø–æ–ª—É—á–µ–Ω–æ '{elder_name}'")
                    
                    if expected_phone in elder_phone:
                        print(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å—Ç–∞—Ä—à–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
                    else:
                        print(f"‚ö†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω —Å—Ç–∞—Ä—à–µ–≥–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_phone}', –ø–æ–ª—É—á–µ–Ω–æ '{elder_phone}'")
                    
                    break
            
            if not results.house_8674_found:
                error_msg = "‚ùå –î–æ–º ID 8674 (–ö–∏–±–∞–ª—å—á–∏—á–∞ 3) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç—á–µ—Ç–µ"
                results.errors.append(error_msg)
                print(error_msg)
            
            # Calculate statistics on contacts
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å—Ç–∞—Ä—à–∏—Ö...")
            
            for house in houses:
                elder_name = house.get('–°—Ç–∞—Ä—à–∏–π (–§–ò–û)', '').strip()
                elder_phone = house.get('–°—Ç–∞—Ä—à–∏–π (—Ç–µ–ª–µ—Ñ–æ–Ω)', '').strip()
                
                # Check if house has valid elder contact
                has_contact = (
                    elder_name and elder_name != '–ù–µ —É–∫–∞–∑–∞–Ω' and len(elder_name) > 2 and
                    elder_phone and elder_phone != '–ù–µ —É–∫–∞–∑–∞–Ω' and len(elder_phone) > 5
                )
                
                if has_contact:
                    results.houses_with_contacts += 1
                else:
                    results.houses_without_contacts += 1
            
            print(f"‚úÖ –î–æ–º–æ–≤ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏: {results.houses_with_contacts}")
            print(f"‚ö†Ô∏è –î–æ–º–æ–≤ –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {results.houses_without_contacts}")
            
            # Show sample houses with and without contacts
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –¥–æ–º–æ–≤ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏:")
            houses_with_contacts_sample = []
            houses_without_contacts_sample = []
            
            for house in houses[:50]:  # Check first 50 houses
                elder_name = house.get('–°—Ç–∞—Ä—à–∏–π (–§–ò–û)', '').strip()
                elder_phone = house.get('–°—Ç–∞—Ä—à–∏–π (—Ç–µ–ª–µ—Ñ–æ–Ω)', '').strip()
                
                has_contact = (
                    elder_name and elder_name != '–ù–µ —É–∫–∞–∑–∞–Ω' and len(elder_name) > 2 and
                    elder_phone and elder_phone != '–ù–µ —É–∫–∞–∑–∞–Ω' and len(elder_phone) > 5
                )
                
                if has_contact and len(houses_with_contacts_sample) < 3:
                    houses_with_contacts_sample.append(house)
                elif not has_contact and len(houses_without_contacts_sample) < 3:
                    houses_without_contacts_sample.append(house)
                
                if len(houses_with_contacts_sample) >= 3 and len(houses_without_contacts_sample) >= 3:
                    break
            
            # Display samples
            for i, house in enumerate(houses_with_contacts_sample, 1):
                print(f"{i}. ID {house.get('ID')}: {house.get('–ê–¥—Ä–µ—Å')} - {house.get('–°—Ç–∞—Ä—à–∏–π (–§–ò–û)')}, {house.get('–°—Ç–∞—Ä—à–∏–π (—Ç–µ–ª–µ—Ñ–æ–Ω)')}")
            
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –¥–æ–º–æ–≤ –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:")
            for i, house in enumerate(houses_without_contacts_sample, 1):
                print(f"{i}. ID {house.get('ID')}: {house.get('–ê–¥—Ä–µ—Å')} - {house.get('–°—Ç–∞—Ä—à–∏–π (–§–ò–û)')}, {house.get('–°—Ç–∞—Ä—à–∏–π (—Ç–µ–ª–µ—Ñ–æ–Ω)')}")
            
            results.sample_houses = houses_with_contacts_sample + houses_without_contacts_sample
            
            # Validation checks
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            
            if results.total_rows == 0:
                results.errors.append("‚ùå CSV —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
            else:
                print(f"‚úÖ CSV —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ: {results.total_rows} —Å—Ç—Ä–æ–∫")
            
            if len(results.header_columns) != len(results.expected_columns):
                results.errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: {len(results.header_columns)}, –æ–∂–∏–¥–∞–ª–æ—Å—å {len(results.expected_columns)}")
            else:
                print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {len(results.header_columns)}")
            
            if results.houses_with_contacts == 0:
                results.errors.append("‚ùå –ù–µ—Ç –¥–æ–º–æ–≤ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ —Å—Ç–∞—Ä—à–∏—Ö")
            else:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–æ–º–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏: {results.houses_with_contacts}")
            
    except asyncio.TimeoutError:
        error_msg = "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω timeout 300 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"
        results.errors.append(error_msg)
        print(error_msg)
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def save_csv_sample():
    """Save a sample of the CSV for manual inspection"""
    try:
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–∑–µ—Ü CSV —Ñ–∞–π–ª–∞...")
        
        timeout = httpx.Timeout(300.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            response = await client.get(f"{API_BASE}/cleaning/missing-data-report")
            
            if response.status_code == 200:
                # Save to /tmp/test_report.csv as specified in the request
                with open('/tmp/test_report.csv', 'wb') as f:
                    f.write(response.content)
                print("‚úÖ CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ /tmp/test_report.csv")
                
                # Show file size
                file_size = len(response.content)
                print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV: {response.status_code}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ CSV: {e}")
        return False

async def main():
    """Main test function"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CSV –æ—Ç—á–µ—Ç–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ —Å—Ç–∞—Ä—à–µ–≥–æ")
    print(f"üåê Backend URL: {BACKEND_URL}")
    print(f"üì° API Base: {API_BASE}")
    print("=" * 70)
    
    # Test CSV report generation
    results = await test_csv_report_generation()
    
    # Save CSV sample
    await save_csv_sample()
    
    # Final summary
    print("\n" + "=" * 70)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ CSV:")
    print("=" * 70)
    
    if results.errors:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
        for error in results.errors:
            print(f"   {error}")
    else:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CSV –æ—Ç—á–µ—Ç–∞:")
    print(f"   - CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {'‚úÖ' if results.csv_generated else '‚ùå'}")
    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {results.total_rows}")
    print(f"   - –ö–æ–ª–æ–Ω–∫–∏ –≤ CSV: {len(results.header_columns)}")
    print(f"   - –î–æ–º 8674 –Ω–∞–π–¥–µ–Ω: {'‚úÖ' if results.house_8674_found else '‚ùå'}")
    print(f"   - –î–æ–º–æ–≤ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏: {results.houses_with_contacts}")
    print(f"   - –î–æ–º–æ–≤ –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {results.houses_without_contacts}")
    
    if results.house_8674_found:
        house_data = results.house_8674_data
        print(f"\nüè† –î–æ–º 8674 (–ö–∏–±–∞–ª—å—á–∏—á–∞ 3):")
        print(f"   - –ê–¥—Ä–µ—Å: {house_data.get('–ê–¥—Ä–µ—Å', 'N/A')}")
        print(f"   - –°—Ç–∞—Ä—à–∏–π: {house_data.get('–°—Ç–∞—Ä—à–∏–π (–§–ò–û)', 'N/A')}")
        print(f"   - –¢–µ–ª–µ—Ñ–æ–Ω: {house_data.get('–°—Ç–∞—Ä—à–∏–π (—Ç–µ–ª–µ—Ñ–æ–Ω)', 'N/A')}")
        print(f"   - Email: {house_data.get('–°—Ç–∞—Ä—à–∏–π (email)', 'N/A')}")
    
    # Return success/failure
    return len(results.errors) == 0

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)