#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
"""

import asyncio
import httpx
import urllib.parse

WEBHOOK_URL = "https://vas-dom.bitrix24.ru/rest/1/4l8hq1gqgodjt7yo/"

async def test_simple_api():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤"""
    print("üîç –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Bitrix24 API...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤
    params = {
        'select[0]': 'ID',
        'select[1]': 'TITLE', 
        'select[2]': 'STAGE_ID',
        'select[3]': 'ASSIGNED_BY_ID',       # ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ (–µ—Å—Ç—å)
        'select[4]': 'COMPANY_ID',           # ID –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å)
        'filter[CATEGORY_ID]': '34',
        'start': '0'
    }
    
    query_string = urllib.parse.urlencode(params)
    url = f"{WEBHOOK_URL}crm.deal.list.json?{query_string}"
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                deals = data.get('result', [])
                
                if deals:
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(deals)} —Å–¥–µ–ª–æ–∫")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ID –∫–æ–º–ø–∞–Ω–∏–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    company_ids = set()
                    user_ids = set() 
                    
                    for deal in deals[:5]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5
                        print(f"\nüè† –î–æ–º: {deal.get('TITLE')}")
                        print(f"   ID: {deal.get('ID')}")
                        print(f"   ASSIGNED_BY_ID: {deal.get('ASSIGNED_BY_ID')}")
                        print(f"   COMPANY_ID: {deal.get('COMPANY_ID')}")
                        
                        if deal.get('COMPANY_ID'):
                            company_ids.add(deal.get('COMPANY_ID'))
                        if deal.get('ASSIGNED_BY_ID'):
                            user_ids.add(deal.get('ASSIGNED_BY_ID'))
                    
                    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö COMPANY_ID: {len(company_ids)}")
                    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ASSIGNED_BY_ID: {len(user_ids)}")
                    print(f"   Company IDs: {list(company_ids)[:5]}...")
                    print(f"   User IDs: {list(user_ids)[:5]}...")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏–º –æ–¥–∏–Ω –∫–æ–º–ø–∞–Ω–∏—é –∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if company_ids:
                        company_id = list(company_ids)[0]
                        print(f"\nüè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–∞–Ω–∏—é ID: {company_id}")
                        await test_company_api(company_id)
                    
                    if user_ids:
                        user_id = list(user_ids)[0]
                        print(f"\nüë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
                        await test_user_api(user_id)
                    
                    return True
                else:
                    print("‚ùå –ù–µ—Ç —Å–¥–µ–ª–æ–∫")
                    return False
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_company_api(company_id):
    """–¢–µ—Å—Ç API –∫–æ–º–ø–∞–Ω–∏–∏"""
    try:
        params = {'id': str(company_id)}
        query_string = urllib.parse.urlencode(params)
        url = f"{WEBHOOK_URL}crm.company.get.json?{query_string}"
        
        async with httpx.AsyncClient() as client:
            response = await client.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                result = data.get('result')
                
                if result:
                    print(f"   ‚úÖ –ö–æ–º–ø–∞–Ω–∏—è: {result.get('TITLE', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                else:
                    print(f"   ‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {response.status_code}")
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")

async def test_user_api(user_id):
    """–¢–µ—Å—Ç API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        params = {'ID': str(user_id)}
        query_string = urllib.parse.urlencode(params)
        url = f"{WEBHOOK_URL}user.get.json?{query_string}"
        
        async with httpx.AsyncClient() as client:
            response = await client.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                result = data.get('result')
                
                if result and isinstance(result, list) and len(result) > 0:
                    user = result[0]
                    name = f"{user.get('NAME', '')} {user.get('LAST_NAME', '')}".strip()
                    print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}")
                else:
                    print(f"   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status_code}")
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def main():
    success = await test_simple_api()
    if success:
        print(f"\n‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
    else:
        print(f"\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")

if __name__ == "__main__":
    asyncio.run(main())