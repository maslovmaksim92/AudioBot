#!/usr/bin/env python3
"""
Final Comprehensive Test for VasDom AudioBot Hybrid Storage System
Testing all critical functionality as requested in the review
"""

import requests
import json
import time

class FinalTest:
    def __init__(self):
        self.base_url = "https://smart-audiobot.preview.emergentagent.com"
        self.api_url = f"{self.base_url}/api"
        self.session_id = f"final_test_{int(time.time())}"
        self.log_ids = []
        self.test_results = []
        
    def log_test(self, name, success, details=""):
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {name}: {details}")
        self.test_results.append((name, success, details))
        return success
    
    def make_request(self, method, endpoint, data=None):
        url = f"{self.api_url}/{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, timeout=30)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers, timeout=30)
            
            return response.status_code, response.json() if response.text else {}
        except Exception as e:
            return 0, {"error": str(e)}
    
    def test_storage_detection(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: Storage detection"""
        print("\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: Storage Detection")
        status, data = self.make_request('GET', 'health')
        
        if status == 200:
            services = data.get('services', {})
            database_status = services.get('database', None)
            storage_status = services.get('storage', None)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            storage_type = "PostgreSQL" if database_status else "In-Memory"
            return self.log_test("Storage Detection", True, 
                f"–¢–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {storage_type} (database={database_status}, storage={storage_status})")
        else:
            return self.log_test("Storage Detection", False, f"Health check failed: {status}")
    
    def test_full_ai_cycle(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ü–æ–ª–Ω—ã–π AI —Ü–∏–∫–ª"""
        print("\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: Full AI Cycle")
        
        # POST /api/voice/process
        message_data = {
            "message": "–ö–∞–∫–∏–µ –µ—Å—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É–±–æ—Ä–∫–µ –ø–æ–¥—ä–µ–∑–¥–æ–≤ –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã—Ö –¥–æ–º–æ–≤ –≤ –ö–∞–ª—É–≥–µ?",
            "session_id": self.session_id
        }
        
        status, response = self.make_request('POST', 'voice/process', message_data)
        if status != 200:
            return self.log_test("Full AI Cycle", False, f"Voice process failed: {status}")
        
        log_id = response.get('log_id')
        if not log_id:
            return self.log_test("Full AI Cycle", False, "No log_id returned")
        
        self.log_ids.append(log_id)
        ai_response = response.get('response', '')
        
        # POST /api/voice/feedback
        feedback_data = {
            "log_id": log_id,
            "rating": 5,
            "feedback_text": "–û—Ç–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–ª–∏–Ω–∏–Ω–≥—É!"
        }
        
        status, feedback_response = self.make_request('POST', 'voice/feedback', feedback_data)
        if status != 200:
            return self.log_test("Full AI Cycle", False, f"Feedback failed: {status}")
        
        # GET /api/learning/stats
        time.sleep(1)
        status, stats = self.make_request('GET', 'learning/stats')
        if status != 200:
            return self.log_test("Full AI Cycle", False, f"Stats failed: {status}")
        
        total_interactions = stats.get('total_interactions', 0)
        avg_rating = stats.get('avg_rating')
        
        return self.log_test("Full AI Cycle", True, 
            f"–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω: {len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞, {total_interactions} –¥–∏–∞–ª–æ–≥–æ–≤, —Ä–µ–π—Ç–∏–Ω–≥ {avg_rating}")
    
    def test_persistence(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: Persistence"""
        print("\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: Data Persistence")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
        message_data = {
            "message": "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —É–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–∞ –≤ –¥–æ–º–µ –Ω–∞ 50 –∫–≤–∞—Ä—Ç–∏—Ä?",
            "session_id": self.session_id
        }
        
        status, response = self.make_request('POST', 'voice/process', message_data)
        if status != 200:
            return self.log_test("Persistence Test", False, f"Failed to create dialog: {status}")
        
        log_id = response.get('log_id')
        self.log_ids.append(log_id)
        
        # –î–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        feedback_data = {
            "log_id": log_id,
            "rating": 4,
            "feedback_text": "–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö"
        }
        
        status, _ = self.make_request('POST', 'voice/feedback', feedback_data)
        if status != 200:
            return self.log_test("Persistence Test", False, f"Failed to rate dialog: {status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        time.sleep(1)
        status, stats = self.make_request('GET', 'learning/stats')
        if status != 200:
            return self.log_test("Persistence Test", False, f"Failed to get stats: {status}")
        
        total_interactions = stats.get('total_interactions', 0)
        positive_ratings = stats.get('positive_ratings', 0)
        
        return self.log_test("Persistence Test", True, 
            f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {total_interactions} –¥–∏–∞–ª–æ–≥–æ–≤, {positive_ratings} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
    
    def test_learning_endpoints(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: Learning endpoints"""
        print("\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: Learning Endpoints")
        
        # GET /api/learning/stats
        status, stats = self.make_request('GET', 'learning/stats')
        stats_ok = status == 200 and 'total_interactions' in stats
        
        # GET /api/learning/export
        status, export_data = self.make_request('GET', 'learning/export')
        export_ok = status == 200 and 'total_exported' in export_data
        
        if stats_ok and export_ok:
            total_interactions = stats.get('total_interactions', 0)
            total_exported = export_data.get('total_exported', 0)
            avg_rating = stats.get('avg_rating')
            
            return self.log_test("Learning Endpoints", True, 
                f"Stats: {total_interactions} –¥–∏–∞–ª–æ–≥–æ–≤ (—Ä–µ–π—Ç–∏–Ω–≥ {avg_rating}), Export: {total_exported} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö")
        else:
            return self.log_test("Learning Endpoints", False, 
                f"Stats OK: {stats_ok}, Export OK: {export_ok}")
    
    def test_health_check_database_status(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: Health check database status"""
        print("\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: Health Check Database Status")
        
        status, data = self.make_request('GET', 'health')
        if status != 200:
            return self.log_test("Health Database Status", False, f"Health check failed: {status}")
        
        services = data.get('services', {})
        database_status = services.get('database')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ç—É—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        expected_behavior = "PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω" if database_status else "Fallback –Ω–∞ in-memory"
        
        return self.log_test("Health Database Status", True, 
            f"–°—Ç–∞—Ç—É—Å –ë–î –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {expected_behavior} (database={database_status})")
    
    def test_fallback_mechanism(self):
        """–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢: Fallback mechanism transparency"""
        print("\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢: Fallback Mechanism")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        status, health = self.make_request('GET', 'health')
        if status != 200:
            return self.log_test("Fallback Mechanism", False, "Health check failed")
        
        services = health.get('services', {})
        database_available = services.get('database', False)
        storage_working = services.get('storage', False)
        
        # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        system_functional = storage_working and health.get('status') == 'healthy'
        
        storage_type = "PostgreSQL" if database_available else "In-Memory"
        
        return self.log_test("Fallback Mechanism", system_functional, 
            f"–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ —Å {storage_type} —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º")
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ë–†–ò–î–ù–û–ô –°–ò–°–¢–ï–ú–´ –•–†–ê–ù–ï–ù–ò–Ø")
        print("üéØ VasDom AudioBot - PostgreSQL + In-Memory Fallback")
        print("üåê URL:", self.base_url)
        print("=" * 80)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ review request
        tests = [
            self.test_storage_detection,
            self.test_full_ai_cycle,
            self.test_persistence,
            self.test_learning_endpoints,
            self.test_health_check_database_status,
            self.test_fallback_mechanism
        ]
        
        results = []
        for test in tests:
            results.append(test())
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        passed = sum(results)
        total = len(results)
        
        print("\n" + "=" * 80)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
        
        if passed == total:
            print("\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("‚úÖ –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ StorageAdapter –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            print("‚úÖ Fallback –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ")
            print("‚úÖ AI responses –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:")
        for name, success, details in self.test_results:
            status = "‚úÖ" if success else "‚ùå"
            print(f"  {status} {name}: {details}")
        
        return passed == total

if __name__ == "__main__":
    tester = FinalTest()
    success = tester.run_all_tests()
    exit(0 if success else 1)
