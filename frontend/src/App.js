import { useState, useEffect } from "react";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import axios from "axios";
import "./App.css";

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const Navigation = ({ activeSection, setActiveSection }) => {
  const sections = [
    { id: 'overview', name: '–û–±—â–µ–µ', icon: 'üè†' },
    { id: 'meetings', name: '–ü–ª–∞–Ω–µ—Ä–∫–∞', icon: 'üé§' },
    { id: 'live-chat', name: '–ñ–∏–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä', icon: 'üìû' },
    { id: 'ai-tasks', name: '–ó–∞–¥–∞—á–∏ –¥–ª—è AI', icon: 'ü§ñ' },
    { id: 'sales', name: '–ü—Ä–æ–¥–∞–∂–∏ / –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', icon: 'üí∞' },
    { id: 'employees', name: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ + HR', icon: 'üë•' },
    { id: 'work', name: '–†–∞–±–æ—Ç—ã', icon: 'üèóÔ∏è' },
    { id: 'training', name: '–û–±—É—á–µ–Ω–∏–µ', icon: 'üìö' },
    { id: 'finances', name: '–§–∏–Ω–∞–Ω—Å—ã', icon: 'üíπ' },
    { id: 'logs', name: '–õ–æ–≥–∏', icon: 'üìä' }
  ];

  return (
    <nav className="bg-gray-900 text-white h-screen w-64 fixed left-0 top-0 overflow-y-auto">
      <div className="p-4">
        <h1 className="text-xl font-bold mb-6">ü§ñ VasDom AI</h1>
        <div className="space-y-2">
          {sections.map(section => (
            <button
              key={section.id}
              onClick={() => setActiveSection(section.id)}
              className={`w-full text-left p-3 rounded-lg transition-colors flex items-center gap-3 ${
                activeSection === section.id 
                  ? 'bg-blue-600 text-white' 
                  : 'hover:bg-gray-700 text-gray-300'
              }`}
            >
              <span className="text-lg">{section.icon}</span>
              <span className="text-sm">{section.name}</span>
            </button>
          ))}
        </div>
      </div>
    </nav>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const StatCard = ({ title, value, icon, color = "bg-blue-500" }) => (
  <div className="bg-white rounded-lg shadow-md p-6">
    <div className="flex items-center justify-between">
      <div>
        <p className="text-gray-600 text-sm">{title}</p>
        <p className="text-2xl font-bold text-gray-900">{value}</p>
      </div>
      <div className={`${color} text-white p-3 rounded-full`}>
        <span className="text-xl">{icon}</span>
      </div>
    </div>
  </div>
);

// –†–∞–∑–¥–µ–ª "–û–±—â–µ–µ"
const OverviewSection = ({ dashboardData, aiInsights }) => (
  <div className="space-y-6">
    <div className="flex items-center justify-between mb-6">
      <h2 className="text-3xl font-bold text-gray-900">–û–±—â–∏–π –æ–±–∑–æ—Ä</h2>
      <div className="flex items-center gap-2">
        <span className={`px-3 py-1 rounded-full text-sm font-medium ${
          dashboardData?.system_health === 'excellent' ? 'bg-green-100 text-green-800' :
          dashboardData?.system_health === 'good' ? 'bg-yellow-100 text-yellow-800' :
          'bg-red-100 text-red-800'
        }`}>
          –°–∏—Å—Ç–µ–º–∞: {dashboardData?.system_health || '–ó–∞–≥—Ä—É–∑–∫–∞...'}
        </span>
      </div>
    </div>
    
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      <StatCard title="–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" value={dashboardData?.total_employees || 0} icon="üë•" color="bg-blue-500" />
      <StatCard title="–ü–ª–∞–Ω–µ—Ä–æ–∫" value={dashboardData?.total_meetings || 0} icon="üìÖ" color="bg-green-500" />
      <StatCard title="–°–æ–æ–±—â–µ–Ω–∏–π" value={dashboardData?.total_messages || 0} icon="üí¨" color="bg-purple-500" />
      <StatCard title="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π" value={dashboardData?.recent_alerts || 0} icon="‚ö†Ô∏è" color="bg-orange-500" />
    </div>

    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-xl font-bold mb-4">ü§ñ AI –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é</h3>
        {dashboardData?.ai_suggestions?.length > 0 ? (
          <div className="space-y-3">
            {dashboardData.ai_suggestions.map((suggestion, index) => (
              <div key={index} className="border-l-4 border-blue-500 pl-4">
                <h4 className="font-semibold text-gray-900">{suggestion.title}</h4>
                <p className="text-gray-600 text-sm">{suggestion.description}</p>
                <span className="text-xs text-blue-600">–í–ª–∏—è–Ω–∏–µ: {suggestion.impact_score}/10</span>
              </div>
            ))}
          </div>
        ) : (
          <p className="text-gray-500">–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ...</p>
        )}
      </div>

      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-xl font-bold mb-4">üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å AI</h3>
        <div className="space-y-3">
          <div className="flex justify-between">
            <span className="text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:</span>
            <span className="font-semibold">{aiInsights?.active_suggestions || 0}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-600">–í–Ω–µ–¥—Ä–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π:</span>
            <span className="font-semibold">{aiInsights?.implemented_improvements || 0}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-600">–°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è:</span>
            <span className="font-semibold text-green-600">{aiInsights?.ai_status || '–ê–∫—Ç–∏–≤–Ω–æ'}</span>
          </div>
        </div>
      </div>
    </div>
  </div>
);

// –†–∞–∑–¥–µ–ª "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"
const EmployeesSection = ({ employees }) => {
  const [selectedDepartment, setSelectedDepartment] = useState('all');
  
  const departments = [...new Set(employees?.map(emp => emp.department) || [])];
  const filteredEmployees = selectedDepartment === 'all' 
    ? employees || []
    : employees?.filter(emp => emp.department === selectedDepartment) || [];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-3xl font-bold text-gray-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏</h2>
        <select 
          value={selectedDepartment}
          onChange={(e) => setSelectedDepartment(e.target.value)}
          className="bg-white border border-gray-300 rounded-lg px-4 py-2"
        >
          <option value="all">–í—Å–µ –æ—Ç–¥–µ–ª—ã</option>
          {departments.map(dept => (
            <option key={dept} value={dept}>{dept}</option>
          ))}
        </select>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredEmployees.map(employee => (
          <div key={employee.id} className="bg-white rounded-lg shadow-md p-6">
            <div className="flex items-center justify-between mb-3">
              <h3 className="text-lg font-semibold text-gray-900">{employee.full_name}</h3>
              <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                employee.active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
              }`}>
                {employee.active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
              </span>
            </div>
            
            <div className="space-y-2 text-sm text-gray-600">
              <p><strong>–û—Ç–¥–µ–ª:</strong> {employee.department}</p>
              <p><strong>–†–æ–ª—å:</strong> {employee.role}</p>
              <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {employee.phone}</p>
              <div className="flex items-center gap-2">
                <strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong>
                <div className="w-16 bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-blue-600 h-2 rounded-full" 
                    style={{ width: `${(employee.performance_score / 10) * 100}%` }}
                  ></div>
                </div>
                <span>{employee.performance_score}/10</span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –†–∞–∑–¥–µ–ª "–ó–∞–¥–∞—á–∏"
const TasksSection = ({ tasks }) => {
  const [filterStatus, setFilterStatus] = useState('all');
  
  const filteredTasks = filterStatus === 'all' 
    ? tasks || []
    : tasks?.filter(task => task.status === filterStatus) || [];

  const statusColors = {
    pending: 'bg-yellow-100 text-yellow-800',
    in_progress: 'bg-blue-100 text-blue-800', 
    completed: 'bg-green-100 text-green-800',
    cancelled: 'bg-red-100 text-red-800'
  };

  const priorityColors = {
    low: 'bg-gray-100 text-gray-800',
    medium: 'bg-yellow-100 text-yellow-800',
    high: 'bg-orange-100 text-orange-800',
    urgent: 'bg-red-100 text-red-800'
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-3xl font-bold text-gray-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏</h2>
        <select 
          value={filterStatus}
          onChange={(e) => setFilterStatus(e.target.value)}
          className="bg-white border border-gray-300 rounded-lg px-4 py-2"
        >
          <option value="all">–í—Å–µ –∑–∞–¥–∞—á–∏</option>
          <option value="pending">–û–∂–∏–¥–∞—é—Ç</option>
          <option value="in_progress">–í —Ä–∞–±–æ—Ç–µ</option>
          <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω—ã</option>
        </select>
      </div>

      <div className="bg-white rounded-lg shadow-md">
        <div className="p-6">
          <div className="space-y-4">
            {filteredTasks.map(task => (
              <div key={task.id} className="border border-gray-200 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-lg font-semibold text-gray-900">{task.title}</h3>
                  <div className="flex items-center gap-2">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${priorityColors[task.priority] || 'bg-gray-100 text-gray-800'}`}>
                      {task.priority}
                    </span>
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusColors[task.status] || 'bg-gray-100 text-gray-800'}`}>
                      {task.status}
                    </span>
                  </div>
                </div>
                
                <p className="text-gray-600 mb-2">{task.description}</p>
                
                <div className="flex items-center justify-between text-sm text-gray-500">
                  <span>–°–æ–∑–¥–∞–Ω–æ: {new Date(task.created_at).toLocaleDateString()}</span>
                  {task.due_date && (
                    <span>–°—Ä–æ–∫: {new Date(task.due_date).toLocaleDateString()}</span>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

// –†–∞–∑–¥–µ–ª "–ñ–∏–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä" - –ì–û–õ–û–°–û–í–û–ô –ò–ù–¢–ï–†–§–ï–ô–° (–∫–∞–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫)
const LiveChatSection = () => {
  const [isCallActive, setIsCallActive] = useState(false);
  const [callId, setCallId] = useState(null);
  const [isRecording, setIsRecording] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [aiResponse, setAiResponse] = useState('');
  const [callHistory, setCallHistory] = useState([]);

  const startVoiceCall = async () => {
    try {
      const response = await axios.post(`${API}/voice/start-call`, {
        caller_id: 'dashboard_user'
      });
      
      if (response.data.status === 'success') {
        setCallId(response.data.call_id);
        setIsCallActive(true);
        setTranscript('');
        setAiResponse('');
      }
    } catch (error) {
      console.error('Error starting call:', error);
    }
  };

  const endVoiceCall = () => {
    setIsCallActive(false);
    setIsRecording(false);
    setCallId(null);
  };

  const startRecording = () => {
    setIsRecording(true);
    // –í production –∑–¥–µ—Å—å –±—É–¥–µ—Ç WebRTC –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ
    setTimeout(() => {
      setIsRecording(false);
      setTranscript("–≠—Ç–æ –¥–µ–º–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)");
      processVoiceMessage("–≠—Ç–æ –¥–µ–º–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
    }, 3000);
  };

  const processVoiceMessage = async (transcript) => {
    try {
      const response = await axios.post(`${API}/voice/process-audio`, {
        call_id: callId,
        transcript: transcript
      });
      
      if (response.data.status === 'success') {
        setAiResponse(response.data.ai_response);
        
        // –í production –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ TTS –∞—É–¥–∏–æ
        if ('speechSynthesis' in window) {
          const utterance = new SpeechSynthesisUtterance(response.data.ai_response);
          utterance.lang = 'ru-RU';
          speechSynthesis.speak(utterance);
        }
      }
    } catch (error) {
      console.error('Error processing voice:', error);
    }
  };

  return (
    <div className="space-y-6">
      <h2 className="text-3xl font-bold text-gray-900">üìû –ñ–∏–≤–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å AI</h2>
      
      <div className="bg-white rounded-lg shadow-md p-8">
        <div className="text-center">
          {!isCallActive ? (
            <div>
              <div className="mb-6">
                <div className="w-32 h-32 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-4xl text-white">üìû</span>
                </div>
                <h3 className="text-xl font-bold mb-2">–ì–æ–ª–æ—Å–æ–≤–æ–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</h3>
                <p className="text-gray-600">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å AI –∫–∞–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É</p>
              </div>
              
              <button
                onClick={startVoiceCall}
                className="bg-green-500 text-white px-8 py-4 rounded-full text-lg font-bold hover:bg-green-600 transition-colors"
              >
                üé§ –ù–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫
              </button>
            </div>
          ) : (
            <div>
              <div className="mb-6">
                <div className={`w-32 h-32 ${isRecording ? 'bg-red-500 animate-pulse' : 'bg-green-500'} rounded-full flex items-center justify-center mx-auto mb-4`}>
                  <span className="text-4xl text-white">{isRecording ? 'üî¥' : 'üé§'}</span>
                </div>
                <h3 className="text-xl font-bold mb-2">–ó–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω</h3>
                <p className="text-gray-600">
                  {isRecording ? '–ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞...' : '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ'}
                </p>
              </div>
              
              <div className="space-y-4 mb-6">
                {!isRecording && (
                  <button
                    onClick={startRecording}
                    className="bg-blue-500 text-white px-6 py-3 rounded-lg font-bold hover:bg-blue-600 mr-4"
                  >
                    üé§ –ì–æ–≤–æ—Ä–∏—Ç—å
                  </button>
                )}
                
                <button
                  onClick={endVoiceCall}
                  className="bg-red-500 text-white px-6 py-3 rounded-lg font-bold hover:bg-red-600"
                >
                  üìû –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
                </button>
              </div>
              
              {transcript && (
                <div className="bg-gray-100 p-4 rounded-lg mb-4">
                  <h4 className="font-bold text-sm mb-2">–í–∞—à–∞ —Ä–µ—á—å:</h4>
                  <p>{transcript}</p>
                </div>
              )}
              
              {aiResponse && (
                <div className="bg-blue-50 p-4 rounded-lg">
                  <h4 className="font-bold text-sm mb-2">ü§ñ AI –æ—Ç–≤–µ—Ç:</h4>
                  <p>{aiResponse}</p>
                  <p className="text-xs text-gray-500 mt-2">
                    üîä –ê—É–¥–∏–æ –æ—Ç–≤–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                  </p>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
      
      <div className="bg-gray-50 p-4 rounded-lg">
        <h4 className="font-bold text-sm mb-2">üí° –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:</h4>
        <ul className="text-sm text-gray-600 space-y-1">
          <li>‚Ä¢ WebRTC –¥–ª—è –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ</li>
          <li>‚Ä¢ Speech-to-Text —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
          <li>‚Ä¢ Text-to-Speech –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ AI</li>
          <li>‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤</li>
        </ul>
      </div>
    </div>
  );
};

// –†–∞–∑–¥–µ–ª "–ü–ª–∞–Ω–µ—Ä–∫–∞"
const MeetingsSection = () => {
  const [meetings, setMeetings] = useState([]);
  const [newMeetingText, setNewMeetingText] = useState('');
  const [creatingMeeting, setCreatingMeeting] = useState(false);

  const loadMeetings = async () => {
    try {
      const response = await axios.get(`${API}/meetings`);
      if (response.data.status === 'success') {
        setMeetings(response.data.meetings || []);
      }
    } catch (error) {
      console.error('Error loading meetings:', error);
    }
  };

  const createMeeting = async () => {
    if (!newMeetingText.trim() || creatingMeeting) return;
    
    setCreatingMeeting(true);
    try {
      const response = await axios.post(`${API}/meetings`, {
        title: `–ü–ª–∞–Ω–µ—Ä–∫–∞ ${new Date().toLocaleDateString()}`,
        description: '–ó–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏',
        participants: ['admin'],
        start_time: new Date().toISOString(),
        recording_text: newMeetingText
      });
      
      if (response.data.status === 'success') {
        await loadMeetings();
        setNewMeetingText('');
      }
    } catch (error) {
      console.error('Error creating meeting:', error);
    } finally {
      setCreatingMeeting(false);
    }
  };

  const analyzeMeeting = async (meetingId) => {
    try {
      const response = await axios.post(`${API}/meetings/${meetingId}/analyze`);
      if (response.data.status === 'success') {
        await loadMeetings();
        alert(`AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! ${response.data.bitrix_tasks?.length || 0} –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ –≤ Bitrix24.`);
      }
    } catch (error) {
      console.error('Error analyzing meeting:', error);
    }
  };

  useEffect(() => {
    loadMeetings();
  }, []);

  return (
    <div className="space-y-6">
      <h2 className="text-3xl font-bold text-gray-900">üìÖ –ü–ª–∞–Ω–µ—Ä–∫–∞ - –ó–∞–ø–∏—Å—å –∏ –∞–Ω–∞–ª–∏–∑</h2>
      
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-xl font-bold mb-4">–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏</h3>
        <div className="space-y-4">
          <textarea
            value={newMeetingText}
            onChange={(e) => setNewMeetingText(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏ –ø–ª–∞–Ω–µ—Ä–∫–∏ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞..."
            className="w-full h-32 border border-gray-300 rounded-lg p-4"
            disabled={creatingMeeting}
          />
          <button
            onClick={createMeeting}
            disabled={!newMeetingText.trim() || creatingMeeting}
            className="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 disabled:bg-gray-400"
          >
            {creatingMeeting ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω–µ—Ä–∫—É'}
          </button>
        </div>
      </div>

      <div className="space-y-4">
        {meetings.map(meeting => (
          <div key={meeting.id} className="bg-white rounded-lg shadow-md p-6">
            <div className="flex items-center justify-between mb-3">
              <h3 className="text-lg font-semibold">{meeting.title}</h3>
              <span className="text-sm text-gray-500">
                {new Date(meeting.start_time).toLocaleString()}
              </span>
            </div>
            
            <p className="text-gray-600 mb-3">{meeting.description}</p>
            
            {meeting.recording_text && (
              <div className="mb-3">
                <h4 className="font-semibold text-sm text-gray-700 mb-2">–ó–∞–ø–∏—Å—å:</h4>
                <p className="text-sm bg-gray-50 p-3 rounded">{meeting.recording_text}</p>
              </div>
            )}
            
            {meeting.ai_summary && (
              <div className="mb-3">
                <h4 className="font-semibold text-sm text-blue-700 mb-2">ü§ñ AI –ê–Ω–∞–ª–∏–∑:</h4>
                <div className="text-sm bg-blue-50 p-3 rounded">{meeting.ai_summary}</div>
              </div>
            )}
            
            <div className="flex gap-2">
              {!meeting.ai_summary && meeting.recording_text && (
                <button
                  onClick={() => analyzeMeeting(meeting.id)}
                  className="bg-blue-600 text-white px-4 py-2 rounded text-sm hover:bg-blue-700"
                >
                  ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å AI
                </button>
              )}
              
              {meeting.bitrix_tasks_created?.length > 0 && (
                <span className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm">
                  ‚úÖ {meeting.bitrix_tasks_created.length} –∑–∞–¥–∞—á –≤ Bitrix24
                </span>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –†–∞–∑–¥–µ–ª "–õ–æ–≥–∏"
const LogsSection = () => {
  const [logs, setLogs] = useState([]);
  const [filterLevel, setFilterLevel] = useState('all');
  const [filterComponent, setFilterComponent] = useState('all');

  const loadLogs = async () => {
    try {
      let url = `${API}/logs?limit=50`;
      if (filterLevel !== 'all') url += `&level=${filterLevel}`;
      if (filterComponent !== 'all') url += `&component=${filterComponent}`;
      
      const response = await axios.get(url);
      if (response.data.status === 'success') {
        setLogs(response.data.logs || []);
      }
    } catch (error) {
      console.error('Error loading logs:', error);
      setLogs([]);
    }
  };

  useEffect(() => {
    loadLogs();
    const interval = setInterval(loadLogs, 10000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    return () => clearInterval(interval);
  }, [filterLevel, filterComponent]);

  const getLevelColor = (level) => {
    switch (level) {
      case 'ERROR': return 'bg-red-100 text-red-800';
      case 'WARNING': return 'bg-yellow-100 text-yellow-800';
      case 'INFO': return 'bg-blue-100 text-blue-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getComponentIcon = (component) => {
    switch (component) {
      case 'telegram': return 'üì±';
      case 'bitrix24': return 'üè¢';
      case 'ai': return 'ü§ñ';
      case 'backend': return '‚öôÔ∏è';
      default: return 'üìä';
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-3xl font-bold text-gray-900">üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏</h2>
        <div className="flex gap-4">
          <select 
            value={filterLevel}
            onChange={(e) => setFilterLevel(e.target.value)}
            className="border border-gray-300 rounded-lg px-3 py-2"
          >
            <option value="all">–í—Å–µ —É—Ä–æ–≤–Ω–∏</option>
            <option value="ERROR">–û—à–∏–±–∫–∏</option>
            <option value="WARNING">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</option>
            <option value="INFO">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</option>
          </select>
          
          <select 
            value={filterComponent}
            onChange={(e) => setFilterComponent(e.target.value)}
            className="border border-gray-300 rounded-lg px-3 py-2"
          >
            <option value="all">–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</option>
            <option value="backend">Backend</option>
            <option value="telegram">Telegram</option>
            <option value="bitrix24">Bitrix24</option>
            <option value="ai">AI –°–∏—Å—Ç–µ–º–∞</option>
          </select>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow-md">
        <div className="p-6">
          <div className="space-y-3">
            {logs.map((log, index) => (
              <div key={index} className="border border-gray-200 rounded-lg p-4 flex items-start gap-3">
                <span className="text-xl">{getComponentIcon(log.component)}</span>
                
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-1">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getLevelColor(log.level)}`}>
                      {log.level}
                    </span>
                    <span className="text-sm text-gray-500">{log.component}</span>
                    <span className="text-sm text-gray-500">
                      {new Date(log.timestamp).toLocaleString()}
                    </span>
                  </div>
                  
                  <p className="text-gray-800">{log.message}</p>
                  
                  {log.data && Object.keys(log.data).length > 0 && (
                    <pre className="text-xs bg-gray-50 p-2 rounded mt-2 overflow-x-auto">
                      {JSON.stringify(log.data, null, 2)}
                    </pre>
                  )}
                </div>
              </div>
            ))}
            
            {logs.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};
const FinancesSection = ({ financialReport }) => (
  <div className="space-y-6">
    <h2 className="text-3xl font-bold text-gray-900">–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å</h2>
    
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
      <StatCard 
        title="–î–æ—Ö–æ–¥—ã" 
        value={`${(financialReport?.totals?.revenue || 0).toLocaleString()} ‚ÇΩ`}
        icon="üìà" 
        color="bg-green-500" 
      />
      <StatCard 
        title="–†–∞—Å—Ö–æ–¥—ã" 
        value={`${(financialReport?.totals?.expense || 0).toLocaleString()} ‚ÇΩ`}
        icon="üìâ" 
        color="bg-red-500" 
      />
      <StatCard 
        title="–ü—Ä–∏–±—ã–ª—å" 
        value={`${(financialReport?.profit || 0).toLocaleString()} ‚ÇΩ`}
        icon="üí∞" 
        color="bg-blue-500" 
      />
    </div>

    <div className="bg-white rounded-lg shadow-md p-6">
      <h3 className="text-xl font-bold mb-4">–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h3>
      {financialReport?.breakdown && Object.entries(financialReport.breakdown).map(([category, items]) => (
        <div key={category} className="mb-6">
          <h4 className="text-lg font-semibold mb-2 capitalize">{category}</h4>
          <div className="space-y-2">
            {Object.entries(items).map(([subcategory, data]) => (
              <div key={subcategory} className="flex justify-between items-center p-2 bg-gray-50 rounded">
                <span>{subcategory}</span>
                <div className="text-right">
                  <span className="font-semibold">{data.amount?.toLocaleString()} ‚ÇΩ</span>
                  <span className="text-gray-500 text-sm ml-2">({data.count} –∑–∞–ø–∏—Å–µ–π)</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
  </div>
);

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const Dashboard = () => {
  const [activeSection, setActiveSection] = useState('overview');
  const [dashboardData, setDashboardData] = useState(null);
  const [employees, setEmployees] = useState([]);
  const [tasks, setTasks] = useState([]);
  const [aiInsights, setAiInsights] = useState(null);
  const [financialReport, setFinancialReport] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadData();
    const interval = setInterval(loadData, 30000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    return () => clearInterval(interval);
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const [dashboardRes, employeesRes, tasksRes, logsRes] = await Promise.all([
        axios.get(`${API}/dashboard`).catch(() => ({ data: null })),
        axios.get(`${API}/employees`).catch(() => ({ data: [] })),
        axios.get(`${API}/tasks`).catch(() => ({ data: [] })),
        axios.get(`${API}/logs?limit=10`).catch(() => ({ data: null }))
      ]);

      setDashboardData(dashboardRes.data);
      setEmployees(employeesRes.data);
      setTasks(tasksRes.data);
      
      // AI insights –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
      setAiInsights({
        active_suggestions: 0,
        implemented_improvements: 0,
        ai_status: '–ê–∫—Ç–∏–≤–Ω–æ'
      });
      
      // Financial report –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞  
      setFinancialReport({
        totals: { revenue: 0, expense: 0, investment: 0 },
        profit: 0,
        breakdown: {}
      });
      
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  };

  const renderSection = () => {
    if (loading && !dashboardData) {
      return (
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
          </div>
        </div>
      );
    }

    switch (activeSection) {
      case 'overview':
        return <OverviewSection dashboardData={dashboardData} aiInsights={aiInsights} />;
      case 'employees':
        return <EmployeesSection employees={employees} />;
      case 'tasks':
        return <TasksSection tasks={tasks} />;
      case 'finances':
        return <FinancesSection financialReport={financialReport} />;
      case 'meetings':
        return <MeetingsSection />;
      case 'live-chat':
        return <LiveChatSection />;
      case 'logs':
        return <LogsSection />;
      case 'sales':
        return (
          <div className="text-center py-12">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">üí∞ –ü—Ä–æ–¥–∞–∂–∏ / –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</h2>
            <div className="bg-white rounded-lg shadow-md p-6 mx-auto max-w-2xl">
              <p className="text-gray-600 mb-4">–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Bitrix24 CRM –≥–æ—Ç–æ–≤–∞!</p>
              <div className="space-y-2 text-left">
                <p><strong>‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ:</strong> Bitrix24 –ø–æ—Ä—Ç–∞–ª vas-dom.bitrix24.ru</p>
                <p><strong>üìä –°–¥–µ–ª–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ:</strong> 50+ –∞–∫—Ç–∏–≤–Ω—ã—Ö</p>
                <p><strong>üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</strong> –í —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
                <p><strong>üéØ –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø:</strong> –í–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</p>
              </div>
            </div>
          </div>
        );
      case 'work':
        return (
          <div className="text-center py-12">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">üèóÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–º–∏</h2>
            <div className="bg-white rounded-lg shadow-md p-6 mx-auto max-w-2xl">
              <p className="text-gray-600 mb-4">–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ!</p>
              <div className="space-y-2 text-left">
                <p><strong>üè† –û–±—ä–µ–∫—Ç—ã:</strong> 400+ –¥–æ–º–æ–≤ –¥–ª—è —É–±–æ—Ä–∫–∏</p>
                <p><strong>üöó –ú–∞—Ä—à—Ä—É—Ç—ã:</strong> –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ –≤—Ä–µ–º–µ–Ω–∏</p>
                <p><strong>üì± –û—Ç—á–µ—Ç—ã:</strong> GPS –æ—Ç–º–µ—Ç–∫–∏ –∏ —Ñ–æ—Ç–æ –¥–æ/–ø–æ—Å–ª–µ</p>
                <p><strong>üéØ –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø:</strong> –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</p>
              </div>
            </div>
          </div>
        );
      default:
        return <OverviewSection dashboardData={dashboardData} aiInsights={aiInsights} />;
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      <Navigation activeSection={activeSection} setActiveSection={setActiveSection} />
      <main className="flex-1 ml-64 p-8 overflow-y-auto">
        <div className="mb-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date().toLocaleTimeString()}</p>
            </div>
            <button 
              onClick={loadData}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
            >
              <span>üîÑ</span>
              –û–±–Ω–æ–≤–∏—Ç—å
            </button>
          </div>
        </div>
        {renderSection()}
      </main>
    </div>
  );
};

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç App
function App() {
  return (
    <div className="App">
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<Dashboard />} />
        </Routes>
      </BrowserRouter>
    </div>
  );
}

export default App;