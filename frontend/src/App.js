import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import './App.css';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';
const API = `${BACKEND_URL}/api`;

// –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('üîó VasDom AudioBot Frontend initialized');
console.log('üîó Backend URL:', BACKEND_URL);
console.log('üîó API URL:', API);

// Main Dashboard Component  
function App() {
  const [currentSection, setCurrentSection] = useState('general');
  const [isMenuCollapsed, setIsMenuCollapsed] = useState(false);
  const [dashboardStats, setDashboardStats] = useState({
    employees: 82,
    houses: 491,  // –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ CRM CSV
    entrances: 1473,
    apartments: 25892,
    floors: 2123,
    meetings: 0,
    ai_tasks: 0
  }); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const [loading, setLoading] = useState(false);
  const [apiStatus, setApiStatus] = useState('connecting');

  useEffect(() => {
    console.log('üöÄ VasDom AudioBot App mounted with PostgreSQL...');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    const loadData = async () => {
      await fetchDashboardStats();
      
      // –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
      setTimeout(async () => {
        if (dashboardStats.houses === 0) {
          console.log('üîÑ Retry loading dashboard data...');
          await fetchDashboardStats();
        }
      }, 5000);
    };
    
    loadData();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    const interval = setInterval(() => {
      console.log('üîÑ Auto-refresh dashboard...');
      fetchDashboardStats();
    }, 120000);
    
    return () => clearInterval(interval);
  }, []);

  const fetchDashboardStats = async () => {
    setLoading(true);
    setApiStatus('fetching');
    
    try {
      console.log('üìä API Request to:', `${API}/dashboard`);
      
      const response = await axios.get(`${API}/dashboard`, {
        timeout: 15000,
        withCredentials: false,
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });
      
      console.log('‚úÖ API Response status:', response.status);
      console.log('‚úÖ API Response full:', response.data);
      
      if (response.data && response.data.stats) {
        const newStats = response.data.stats;
        console.log('üìä Stats from API:', newStats);
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º state
        setDashboardStats(prevStats => {
          console.log('üîÑ Updating stats from:', prevStats, 'to:', newStats);
          return {
            ...newStats,
            employees: newStats.employees || 82,
            houses: newStats.houses || 491, // Fallback –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
            entrances: newStats.entrances || 1473,
            apartments: newStats.apartments || 25892,
            floors: newStats.floors || 2123,
            meetings: newStats.meetings || 0,
            ai_tasks: newStats.ai_tasks || 0
          };
        });
        
        setApiStatus('connected');
        console.log('‚úÖ Stats FORCE updated successfully');
      } else {
        console.warn('‚ö†Ô∏è No stats in response, using current data');
      }
      
    } catch (error) {
      console.error('‚ùå API Error:', error);
      setApiStatus('error');
      
      // –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ fallback, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      console.log('üîÑ Keeping current stats after error:', dashboardStats);
    } finally {
      setLoading(false);
    }
  };

  const menuItems = [
    { id: 'general', label: 'üè† –û–±—â–µ–µ', icon: 'üè†' },
    { id: 'meetings', label: 'üé§ –ü–ª–∞–Ω–µ—Ä–∫–∞', icon: 'üé§' },
    { id: 'voice', label: 'üìû –ñ–∏–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä', icon: 'üìû' },
    { id: 'ai-tasks', label: 'ü§ñ –ó–∞–¥–∞—á–∏ –¥–ª—è AI', icon: 'ü§ñ' },
    { id: 'sales', label: 'üí∞ –ü—Ä–æ–¥–∞–∂–∏ / –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', icon: 'üí∞' },
    { id: 'employees', label: 'üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ + HR', icon: 'üë•' },
    { id: 'works', label: 'üèóÔ∏è –†–∞–±–æ—Ç—ã', icon: 'üèóÔ∏è' },
    { id: 'training', label: 'üìö –û–±—É—á–µ–Ω–∏–µ', icon: 'üìö' },
    { id: 'finance', label: 'üíπ –§–∏–Ω–∞–Ω—Å—ã', icon: 'üíπ' },
    { id: 'logs', label: 'üìã –õ–æ–≥–∏', icon: 'üìã' }
  ];

  const handleMenuClick = (sectionId) => {
    console.log(`üîÑ Switching to section: ${sectionId}`);
    setCurrentSection(sectionId);
  };

  const renderContent = () => {
    console.log(`üñºÔ∏è Rendering section: ${currentSection}`);
    
    switch (currentSection) {
      case 'general':
        return <GeneralDashboard stats={dashboardStats} onRefresh={fetchDashboardStats} loading={loading} />;
      case 'meetings':
        return <MeetingsSection />;
      case 'voice':
        return <VoiceSection />;
      case 'ai-tasks':
        return <AITasksSection />;
      case 'works':
        return <WorksSection />;
      case 'training':
        return <TrainingSection />;
      case 'logs':
        return <LogsSection />;
      case 'employees':
        return <EmployeesSection />;
      default:
        return (
          <div className="p-6">
            <h2 className="text-2xl font-bold mb-4">üöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h2>
            <p>–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.</p>
          </div>
        );
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar Navigation */}
      <div className={`bg-blue-900 text-white transition-all duration-300 ${isMenuCollapsed ? 'w-16' : 'w-64'}`}>
        <div className="p-4 border-b border-blue-800">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <div className="bg-blue-700 rounded-full p-2 mr-3">
                ü§ñ
              </div>
              {!isMenuCollapsed && (
                <div>
                  <h1 className="text-lg font-bold">VasDom AI</h1>
                  <p className="text-sm opacity-75">–°–∏—Å—Ç–µ–º–∞ excellent</p>
                </div>
              )}
            </div>
            <button 
              onClick={() => setIsMenuCollapsed(!isMenuCollapsed)}
              className="text-white hover:bg-blue-800 p-1 rounded"
            >
              {isMenuCollapsed ? '‚Üí' : '‚Üê'}
            </button>
          </div>
        </div>
        
        <nav className="mt-4">
          {menuItems.map((item) => (
            <button
              key={item.id}
              onClick={() => handleMenuClick(item.id)}
              className={`w-full text-left p-3 hover:bg-blue-800 transition-colors ${
                currentSection === item.id ? 'bg-blue-800 border-r-4 border-blue-400' : ''
              }`}
            >
              <div className="flex items-center">
                <span className="text-xl mr-3">{item.icon}</span>
                {!isMenuCollapsed && <span className="text-sm">{item.label.split(' ').slice(1).join(' ')}</span>}
              </div>
            </button>
          ))}
        </nav>
      </div>

      {/* Main content area */}
      <div className="flex-1 overflow-auto">
        {renderContent()}
      </div>
    </div>
  );
}

// Dashboard Overview Component
function GeneralDashboard({ stats, onRefresh, loading }) {
  const statCards = [
    { title: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', value: stats.employees || 0, icon: 'üë•', color: 'bg-blue-500' },
    { title: '–î–æ–º–æ–≤ –≤ CRM', value: stats.houses || 0, icon: 'üè†', color: 'bg-green-500' },
    { title: '–ü–æ–¥—ä–µ–∑–¥–æ–≤', value: stats.entrances || 0, icon: 'üö™', color: 'bg-purple-500' },
    { title: '–ö–≤–∞—Ä—Ç–∏—Ä', value: stats.apartments || 0, icon: 'üè†', color: 'bg-orange-500' },
    { title: '–≠—Ç–∞–∂–µ–π', value: stats.floors || 0, icon: 'üìä', color: 'bg-red-500' },
    { title: '–ü–ª–∞–Ω–µ—Ä–æ–∫', value: stats.meetings || 0, icon: 'üé§', color: 'bg-indigo-500' }
  ];

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">–û–±—â–∏–π –æ–±–∑–æ—Ä</h1>
          <p className="text-gray-600">VasDom AI - –°–∏—Å—Ç–µ–º–∞ excellent</p>
          <p className="text-sm text-gray-500">
            –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date().toLocaleString('ru-RU')}
          </p>
        </div>
        <button
          onClick={onRefresh}
          disabled={loading}
          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors disabled:opacity-50"
        >
          {loading ? 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'}
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {statCards.map((card, index) => (
          <div key={index} className="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow">
            <div className="flex items-center">
              <div className={`${card.color} rounded-full p-3 mr-4`}>
                <span className="text-2xl text-white">{card.icon}</span>
              </div>
              <div>
                <p className="text-sm text-gray-600">{card.title}</p>
                <p className="text-2xl font-bold text-gray-900">
                  {card.value?.toLocaleString('ru-RU') || '0'}
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="mt-8 bg-white rounded-lg shadow-lg p-6">
        <h2 className="text-xl font-semibold mb-4">üî• –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h2>
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
          <div className="flex items-center">
            <div className="w-3 h-3 bg-green-500 rounded-full mr-2 animate-pulse"></div>
            <span className="text-sm">Bitrix24 API</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-green-500 rounded-full mr-2 animate-pulse"></div>
            <span className="text-sm">GPT-4 mini (Emergent)</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-green-500 rounded-full mr-2 animate-pulse"></div>
            <span className="text-sm">–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-green-500 rounded-full mr-2 animate-pulse"></div>
            <span className="text-sm">–°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-green-500 rounded-full mr-2 animate-pulse"></div>
            <span className="text-sm">PostgreSQL</span>
          </div>
        </div>
        
        <div className="mt-4 p-3 bg-blue-50 rounded-lg">
          <p className="text-sm text-blue-800">
            üîó <strong>Backend:</strong> {BACKEND_URL}
          </p>
          <p className="text-sm text-blue-600">
            üìÖ <strong>–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞:</strong> {new Date().toLocaleString('ru-RU')}
          </p>
        </div>
      </div>
    </div>
  );
}

// Meeting Recording Section - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–õ–ê–ù–ï–†–ö–ê
function MeetingsSection() {
  const [isRecording, setIsRecording] = useState(false);
  const [meetings, setMeetings] = useState([]);
  const [currentMeetingId, setCurrentMeetingId] = useState(null);
  const [transcription, setTranscription] = useState('');
  const [realTimeText, setRealTimeText] = useState('');
  const recognitionRef = useRef(null);

  useEffect(() => {
    console.log('üé§ Meetings section mounted');
    fetchMeetings();
    initSpeechRecognition();
  }, []);

  const initSpeechRecognition = () => {
    if ('webkitSpeechRecognition' in window) {
      const recognition = new window.webkitSpeechRecognition();
      recognition.continuous = true;
      recognition.interimResults = true;
      recognition.lang = 'ru-RU';
      
      recognition.onresult = (event) => {
        let finalTranscript = '';
        let interimTranscript = '';
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
          const transcript = event.results[i][0].transcript;
          if (event.results[i].isFinal) {
            finalTranscript += transcript + ' ';
            console.log('üìù Final transcript:', transcript);
          } else {
            interimTranscript = transcript;
          }
        }
        
        if (finalTranscript) {
          setTranscription(prev => prev + finalTranscript);
        }
        setRealTimeText(interimTranscript);
      };
      
      recognition.onstart = () => {
        console.log('üé§ Speech recognition started');
      };
      
      recognition.onend = () => {
        console.log('‚èπÔ∏è Speech recognition ended');
        if (isRecording) {
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –µ—â–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
          setTimeout(() => {
            if (isRecording && recognitionRef.current) {
              recognitionRef.current.start();
            }
          }, 100);
        }
      };
      
      recognition.onerror = (event) => {
        console.error('‚ùå Speech recognition error:', event.error);
        setRealTimeText(`–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ${event.error}`);
      };
      
      recognitionRef.current = recognition;
      console.log('‚úÖ Speech recognition initialized');
    } else {
      console.error('‚ùå Speech recognition not supported');
      setRealTimeText('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    }
  };

  const fetchMeetings = async () => {
    try {
      console.log('üìã Fetching meetings...');
      const response = await axios.get(`${API}/meetings`);
      if (response.data.status === 'success') {
        setMeetings(response.data.meetings);
        console.log('‚úÖ Meetings loaded:', response.data.meetings.length);
      }
    } catch (error) {
      console.error('‚ùå Error fetching meetings:', error);
    }
  };

  const startRecording = async () => {
    try {
      console.log('üé§ Starting meeting recording...');
      
      const response = await axios.post(`${API}/meetings/start-recording`);
      if (response.data.status === 'success') {
        setCurrentMeetingId(response.data.meeting_id);
        setIsRecording(true);
        setTranscription('');
        setRealTimeText('');
        
        if (recognitionRef.current) {
          recognitionRef.current.start();
        }
        
        console.log('‚úÖ Meeting recording started:', response.data.meeting_id);
      } else {
        console.error('‚ùå Failed to start recording:', response.data);
      }
    } catch (error) {
      console.error('‚ùå Error starting recording:', error);
      alert('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏: ' + error.message);
    }
  };

  const stopRecording = async () => {
    try {
      console.log('‚èπÔ∏è Stopping meeting recording...');
      
      if (currentMeetingId) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
        setIsRecording(false);
        if (recognitionRef.current) {
          recognitionRef.current.stop();
        }
        
        const response = await axios.post(`${API}/meetings/stop-recording?meeting_id=${currentMeetingId}`);
        
        setCurrentMeetingId(null);
        setRealTimeText('');
        
        if (response.data.status === 'success') {
          console.log('‚úÖ Meeting stopped successfully');
          if (response.data.summary) {
            alert('‚úÖ –ü–ª–∞–Ω–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nAI —Å–æ–∑–¥–∞–ª —Ä–µ–∑—é–º–µ:\n' + response.data.summary);
          }
          fetchMeetings();
        }
      }
    } catch (error) {
      console.error('‚ùå Error stopping recording:', error);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">üé§ –ü–ª–∞–Ω–µ—Ä–∫–∞ - –î–∏–∫—Ç–æ—Ñ–æ–Ω + AI –∞–Ω–∞–ª–∏–∑</h1>
      
      <div className="grid grid-cols-1 xl:grid-cols-2 gap-6">
        {/* Recording Control Panel */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4">üéôÔ∏è –ó–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏</h2>
          
          <div className="text-center mb-6">
            <button
              onClick={isRecording ? stopRecording : startRecording}
              className={`w-32 h-32 rounded-full text-white text-3xl transition-all shadow-lg transform hover:scale-105 ${
                isRecording 
                  ? 'bg-red-500 hover:bg-red-600 animate-pulse' 
                  : 'bg-blue-500 hover:bg-blue-600'
              }`}
            >
              {isRecording ? '‚èπÔ∏è' : 'üé§'}
            </button>
            <p className="mt-4 text-lg font-medium text-gray-700">
              {isRecording ? 'üî¥ –ò–¥–µ—Ç –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏...' : '‚ö´ –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏'}
            </p>
          </div>

          {/* Live Transcription Display */}
          {isRecording && (
            <div className="bg-gray-50 rounded-lg p-4">
              <h3 className="font-semibold mb-2 text-green-600">üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:</h3>
              <div className="h-40 overflow-y-auto bg-white p-3 rounded border-2 border-green-200">
                <p className="text-sm text-gray-800 whitespace-pre-wrap">
                  {transcription}
                  <span className="text-blue-600 italic font-medium">{realTimeText}</span>
                  {isRecording && <span className="text-red-500 animate-ping">‚óè</span>}
                </p>
                {!transcription && !realTimeText && (
                  <p className="text-gray-400 italic">–ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...</p>
                )}
              </div>
              <p className="text-xs text-gray-500 mt-2">
                üí° AI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç —Ä–µ–∑—é–º–µ –∏ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.
              </p>
            </div>
          )}
        </div>

        {/* Meetings History */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4">üìã –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞–Ω–µ—Ä–æ–∫ ({meetings.length})</h2>
          
          <div className="space-y-4 max-h-96 overflow-y-auto">
            {meetings.length > 0 ? (
              meetings.map((meeting, index) => (
                <div key={index} className="border rounded-lg p-4 hover:bg-gray-50 transition-colors">
                  <h3 className="font-semibold text-gray-900">{meeting.title}</h3>
                  <p className="text-sm text-gray-600 mt-1">
                    üìÖ {new Date(meeting.created_at).toLocaleString('ru-RU')}
                  </p>
                  
                  {meeting.transcription && (
                    <div className="mt-2 p-2 bg-blue-50 rounded text-sm">
                      <strong>üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:</strong>
                      <p className="text-gray-700 mt-1">{meeting.transcription.substring(0, 150)}...</p>
                    </div>
                  )}
                  
                  {meeting.summary && (
                    <div className="mt-2 p-2 bg-green-50 rounded text-sm">
                      <strong>ü§ñ AI –†–µ–∑—é–º–µ:</strong>
                      <p className="text-gray-700 mt-1">{meeting.summary.substring(0, 200)}...</p>
                    </div>
                  )}
                  
                  <span className={`inline-block mt-2 px-2 py-1 rounded-full text-xs ${
                    meeting.status === 'completed' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                  }`}>
                    {meeting.status === 'completed' ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ' : 'üîÑ –ê–∫—Ç–∏–≤–Ω–æ'}
                  </span>
                </div>
              ))
            ) : (
              <div className="text-center py-12 text-gray-500">
                <p className="text-lg">üìù –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–ª–∞–Ω–µ—Ä–æ–∫</p>
                <p className="text-sm">–ù–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

// Voice Chat Section - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ñ–ò–í–û–ô –†–ê–ó–ì–û–í–û–†
function VoiceSection() {
  const [isListening, setIsListening] = useState(false);
  const [messages, setMessages] = useState([]);
  const [currentMessage, setCurrentMessage] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const recognitionRef = useRef(null);
  const synthRef = useRef(null);

  useEffect(() => {
    console.log('üìû Voice section mounted');
    initSpeechRecognition();
    initSpeechSynthesis();
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI
    setMessages([{
      type: 'ai',
      text: '–ü—Ä–∏–≤–µ—Ç! –Ø VasDom AI, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π. –£ –Ω–∞—Å 450+ –¥–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏ 6 —Ä–∞–±–æ—á–∏—Ö –±—Ä–∏–≥–∞–¥. –û —á–µ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?',
      timestamp: new Date()
    }]);
  }, []);

  const initSpeechRecognition = () => {
    if ('webkitSpeechRecognition' in window) {
      const recognition = new window.webkitSpeechRecognition();
      recognition.continuous = false;
      recognition.interimResults = true;
      recognition.lang = 'ru-RU';
      
      recognition.onresult = (event) => {
        let transcript = '';
        let interim = '';
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
          if (event.results[i].isFinal) {
            transcript = event.results[i][0].transcript;
            console.log('üé§ Final voice input:', transcript);
            handleVoiceMessage(transcript);
          } else {
            interim = event.results[i][0].transcript;
          }
        }
        
        setCurrentMessage(interim);
      };
      
      recognition.onend = () => {
        setIsListening(false);
        setCurrentMessage('');
        console.log('üé§ Voice recognition ended');
      };
      
      recognition.onerror = (event) => {
        console.error('‚ùå Speech recognition error:', event.error);
        setIsListening(false);
        setCurrentMessage('');
        alert(`–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: ${event.error}`);
      };
      
      recognitionRef.current = recognition;
      console.log('‚úÖ Speech recognition initialized for voice chat');
    }
  };

  const initSpeechSynthesis = () => {
    if ('speechSynthesis' in window) {
      synthRef.current = window.speechSynthesis;
      console.log('‚úÖ Speech synthesis initialized');
    }
  };

  const handleVoiceMessage = async (text) => {
    if (!text?.trim()) {
      console.warn('‚ö†Ô∏è Empty voice message received');
      return;
    }
    
    console.log('üé§ Processing voice message:', text);
    
    const userMessage = { type: 'user', text, timestamp: new Date() };
    setMessages(prev => [...prev, userMessage]);
    setIsProcessing(true);
    
    try {
      const response = await axios.post(`${API}/voice/process`, {
        text: text,
        user_id: 'voice_user'
      }, {
        timeout: 30000
      });
      
      console.log('ü§ñ AI response received:', response.data);
      
      if (response.data && response.data.response) {
        const aiResponse = {
          type: 'ai',
          text: response.data.response,
          timestamp: new Date()
        };
        
        setMessages(prev => [...prev, aiResponse]);
        
        // –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç AI
        if (synthRef.current && response.data.response) {
          const utterance = new SpeechSynthesisUtterance(response.data.response);
          utterance.lang = 'ru-RU';
          utterance.rate = 0.9;
          utterance.volume = 0.8;
          
          synthRef.current.cancel(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–µ—á—å
          synthRef.current.speak(utterance);
          
          console.log('üîä AI response spoken aloud');
        }
      } else {
        throw new Error('Invalid AI response format');
      }
      
    } catch (error) {
      console.error('‚ùå Voice message processing error:', error);
      
      const errorMessage = {
        type: 'ai',
        text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsProcessing(false);
    }
  };

  const startListening = () => {
    if (recognitionRef.current && !isListening && !isProcessing) {
      setIsListening(true);
      setCurrentMessage('');
      recognitionRef.current.start();
      console.log('üé§ Started listening for voice input');
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop();
      console.log('‚èπÔ∏è Stopped listening');
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">üìû –ñ–∏–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å VasDom AI</h1>
      <p className="text-gray-600 mb-6">–ì–æ–ª–æ—Å–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Voice Control */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4">üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
          
          <div className="text-center">
            <button
              onClick={isListening ? stopListening : startListening}
              disabled={isProcessing}
              className={`w-24 h-24 rounded-full text-white text-3xl transition-all shadow-lg transform hover:scale-105 ${
                isListening 
                  ? 'bg-red-500 hover:bg-red-600 animate-pulse' 
                  : isProcessing
                  ? 'bg-gray-400 cursor-not-allowed'
                  : 'bg-green-500 hover:bg-green-600'
              }`}
            >
              {isProcessing ? 'ü§ñ' : isListening ? '‚èπÔ∏è' : 'üé§'}
            </button>
            
            <p className="mt-3 text-gray-600 font-medium">
              {isProcessing ? 'ü§ñ AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç...' :
               isListening ? 'üëÇ –°–ª—É—à–∞—é –≤–∞—Å...' : 'üé§ –ù–∞–∂–º–∏—Ç–µ –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ'}
            </p>
            
            {currentMessage && (
              <div className="mt-4 p-3 bg-blue-50 rounded-lg border-2 border-blue-200">
                <p className="text-sm text-blue-800 font-medium">üé§ –í—ã –≥–æ–≤–æ—Ä–∏—Ç–µ:</p>
                <p className="text-blue-900">{currentMessage}</p>
              </div>
            )}
          </div>
          
          <div className="mt-6 p-4 bg-green-50 rounded-lg">
            <h3 className="font-semibold text-sm mb-2 text-green-800">üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å:</h3>
            <ul className="text-xs text-green-700 space-y-1">
              <li>‚Ä¢ "–°–∫–æ–ª—å–∫–æ –¥–æ–º–æ–≤ —É –Ω–∞—Å –≤ —Ä–∞–±–æ—Ç–µ?"</li>
              <li>‚Ä¢ "–ö–∞–∫–∏–µ –±—Ä–∏–≥–∞–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å–µ–≥–æ–¥–Ω—è?"</li>
              <li>‚Ä¢ "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞"</li>
              <li>‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–æ–π —É–ª–∏—Ü–µ"</li>
              <li>‚Ä¢ "–ö–∞–∫ –¥–µ–ª–∞ —Å —É–±–æ—Ä–∫–æ–π?"</li>
            </ul>
          </div>
        </div>
        
        {/* Chat Messages */}
        <div className="lg:col-span-2 bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4">üí¨ –î–∏–∞–ª–æ–≥ —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º</h2>
          
          <div className="h-96 overflow-y-auto border rounded-lg p-4 space-y-4 bg-gray-50">
            {messages.map((message, index) => (
              <div
                key={index}
                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-md rounded-lg p-4 shadow-sm ${
                    message.type === 'user'
                      ? 'bg-blue-500 text-white'
                      : 'bg-white text-gray-800 border border-gray-200'
                  }`}
                >
                  <p className="text-sm leading-relaxed">{message.text}</p>
                  <p className="text-xs opacity-75 mt-2">
                    {message.type === 'user' ? 'üë§ –í—ã' : 'ü§ñ VasDom AI'} ‚Ä¢ {message.timestamp.toLocaleTimeString('ru-RU')}
                  </p>
                </div>
              </div>
            ))}
            
            {isProcessing && (
              <div className="flex justify-start">
                <div className="bg-gray-200 rounded-lg p-4 animate-pulse">
                  <p className="text-sm">ü§ñ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å...</p>
                </div>
              </div>
            )}
          </div>
          
          <div className="mt-4 text-center p-3 bg-blue-50 rounded-lg">
            <p className="text-xs text-blue-700">
              ü§ñ <strong>Powered by GPT-4 mini (Emergent)</strong> | üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞ | üß† –°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

// Works Section - –í–°–ï –î–û–ú–ê –ò–ó CRM 1–í1
function WorksSection() {
  const [houses, setHouses] = useState([]);
  const [loading, setLoading] = useState(false);
  const [brigadeFilter, setBrigadeFilter] = useState('all');

  useEffect(() => {
    console.log('üèóÔ∏è Works section mounted');
    fetchAllHouses();
  }, []);

  const fetchAllHouses = async () => {
    setLoading(true);
    console.log('üè† Fetching ALL houses from Bitrix24...');
    
    try {
      const response = await axios.get(`${API}/cleaning/houses?limit=500`, {
        timeout: 30000
      });
      
      if (response.data.status === 'success') {
        setHouses(response.data.houses);
        console.log('‚úÖ All houses loaded:', response.data.houses.length, 'from', response.data.source);
      } else {
        console.error('‚ùå Houses API error:', response.data);
      }
    } catch (error) {
      console.error('‚ùå Error fetching all houses:', error);
    } finally {
      setLoading(false);
    }
  };

  const filteredHouses = brigadeFilter === 'all' 
    ? houses 
    : houses.filter(house => house.brigade === brigadeFilter);

  const brigadeOptions = ['all', '1 –±—Ä–∏–≥–∞–¥–∞', '2 –±—Ä–∏–≥–∞–¥–∞', '3 –±—Ä–∏–≥–∞–¥–∞', '4 –±—Ä–∏–≥–∞–¥–∞', '5 –±—Ä–∏–≥–∞–¥–∞', '6 –±—Ä–∏–≥–∞–¥–∞'];

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold">üèóÔ∏è –†–∞–±–æ—Ç—ã - –£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤</h1>
          <p className="text-gray-600">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏–∑ CRM –≤–æ—Ä–æ–Ω–∫–∏</p>
        </div>
        <button
          onClick={fetchAllHouses}
          disabled={loading}
          className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg disabled:opacity-50"
        >
          {loading ? 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ –¥–æ–º–∞...' : 'üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Bitrix24'}
        </button>
      </div>

      {/* Brigade Filter */}
      <div className="mb-6 bg-white rounded-lg shadow-lg p-4">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          üè∑Ô∏è –§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–∏–≥–∞–¥–∞–º:
        </label>
        <select
          value={brigadeFilter}
          onChange={(e) => setBrigadeFilter(e.target.value)}
          className="border border-gray-300 rounded-lg p-2 w-full md:w-auto"
        >
          {brigadeOptions.map(option => (
            <option key={option} value={option}>
              {option === 'all' ? 'üè† –í—Å–µ –¥–æ–º–∞' : `üë• ${option}`}
            </option>
          ))}
        </select>
        <p className="text-sm text-gray-500 mt-2">
          –ü–æ–∫–∞–∑–∞–Ω–æ: {filteredHouses.length} –∏–∑ {houses.length} –¥–æ–º–æ–≤
        </p>
      </div>

      {/* Houses Table */}
      <div className="bg-white rounded-lg shadow-lg overflow-hidden">
        <div className="p-4 border-b bg-gray-50">
          <h2 className="text-lg font-semibold">
            üìã –í—Å–µ –¥–æ–º–∞ –∏–∑ Bitrix24 CRM ({filteredHouses.length} –æ–±—ä–µ–∫—Ç–æ–≤)
          </h2>
          <p className="text-sm text-gray-600">
            –î–∞–Ω–Ω—ã–µ –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ "–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤" ‚Ä¢ 1–≤1 –∫–∞–∫ –≤ CRM
          </p>
        </div>
        
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-100">
              <tr>
                <th className="px-4 py-3 text-left text-sm font-semibold">üè† –ê–¥—Ä–µ—Å</th>
                <th className="px-4 py-3 text-left text-sm font-semibold">üìä –°—Ç–∞—Ç—É—Å</th>
                <th className="px-4 py-3 text-left text-sm font-semibold">üë• –ë—Ä–∏–≥–∞–¥–∞</th>
                <th className="px-4 py-3 text-left text-sm font-semibold">#Ô∏è‚É£ ID —Å–¥–µ–ª–∫–∏</th>
                <th className="px-4 py-3 text-left text-sm font-semibold">üìÖ –°–æ–∑–¥–∞–Ω–æ</th>
              </tr>
            </thead>
            <tbody>
              {filteredHouses.map((house, index) => (
                <tr key={index} className="border-b hover:bg-gray-50 transition-colors">
                  <td className="px-4 py-3">
                    <div className="font-medium text-gray-900">{house.address}</div>
                  </td>
                  <td className="px-4 py-3">
                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                      house.stage === 'C2:WON' 
                        ? 'bg-green-100 text-green-800'
                        : house.stage === 'C2:APOLOGY'
                        ? 'bg-red-100 text-red-800'
                        : 'bg-yellow-100 text-yellow-800'
                    }`}>
                      {house.status_text || house.stage}
                    </span>
                  </td>
                  <td className="px-4 py-3 text-gray-700">
                    {house.brigade || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}
                  </td>
                  <td className="px-4 py-3 text-gray-600 font-mono">
                    #{house.bitrix24_deal_id}
                  </td>
                  <td className="px-4 py-3 text-gray-600 text-sm">
                    {house.created_date ? new Date(house.created_date).toLocaleDateString('ru-RU') : '-'}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        
        {filteredHouses.length === 0 && !loading && (
          <div className="p-12 text-center text-gray-500">
            <p className="text-lg">üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
            <p className="text-sm">–ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Bitrix24" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</p>
          </div>
        )}
        
        {loading && (
          <div className="p-12 text-center">
            <p className="text-lg">üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ–º–∞ –∏–∑ CRM...</p>
            <p className="text-sm text-gray-500">–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</p>
          </div>
        )}
      </div>
    </div>
  );
}

// Training Section - Knowledge Base
function TrainingSection() {
  const [knowledgeBase, setKnowledgeBase] = useState([]);
  const [uploadFile, setUploadFile] = useState(null);
  const [uploadTitle, setUploadTitle] = useState('');
  const [isUploading, setIsUploading] = useState(false);

  useEffect(() => {
    console.log('üìö Training section mounted');
    fetchKnowledgeBase();
  }, []);

  const fetchKnowledgeBase = async () => {
    try {
      const response = await axios.get(`${API}/knowledge`);
      if (response.data.status === 'success') {
        setKnowledgeBase(response.data.knowledge_base);
        console.log('üìö Knowledge base loaded:', response.data.knowledge_base.length);
      }
    } catch (error) {
      console.error('‚ùå Error fetching knowledge base:', error);
    }
  };

  const handleFileUpload = async (e) => {
    e.preventDefault();
    if (!uploadFile || !uploadTitle) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ');
      return;
    }

    setIsUploading(true);
    console.log('üì§ Uploading knowledge file:', uploadTitle);

    const formData = new FormData();
    formData.append('file', uploadFile);
    formData.append('title', uploadTitle);

    try {
      const response = await axios.post(`${API}/knowledge/upload`, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        timeout: 30000
      });
      
      if (response.data.status === 'success') {
        alert('‚úÖ ' + response.data.message);
        setUploadFile(null);
        setUploadTitle('');
        fetchKnowledgeBase();
        console.log('‚úÖ Knowledge file uploaded successfully');
      }
    } catch (error) {
      console.error('‚ùå Knowledge upload error:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message);
    } finally {
      setIsUploading(false);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∏ –æ–±—É—á–µ–Ω–∏–µ AI</h1>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Upload Section */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4">üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h2>
          
          <form onSubmit={handleFileUpload} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
              </label>
              <input
                type="text"
                value={uploadTitle}
                onChange={(e) => setUploadTitle(e.target.value)}
                className="w-full border border-gray-300 rounded-lg p-3"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É–±–æ—Ä–∫–µ –ø–æ–¥—ä–µ–∑–¥–æ–≤"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                üìé –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª
              </label>
              <input
                type="file"
                onChange={(e) => setUploadFile(e.target.files[0])}
                className="w-full border border-gray-300 rounded-lg p-2"
                accept=".txt,.doc,.docx,.pdf"
                required
              />
            </div>
            
            <button
              type="submit"
              disabled={isUploading}
              className="w-full bg-blue-500 hover:bg-blue-600 text-white py-3 rounded-lg disabled:opacity-50 font-medium"
            >
              {isUploading ? '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...' : 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è AI'}
            </button>
          </form>
        </div>
        
        {/* Knowledge Base */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4">üß† –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ({knowledgeBase.length})</h2>
          
          <div className="space-y-3 max-h-96 overflow-y-auto">
            {knowledgeBase.length > 0 ? (
              knowledgeBase.map((kb, index) => (
                <div key={index} className="border rounded-lg p-3 hover:bg-gray-50">
                  <h3 className="font-medium text-gray-900">{kb.title}</h3>
                  <p className="text-sm text-gray-600 mt-1">
                    üìÖ {new Date(kb.created_at).toLocaleDateString('ru-RU')}
                  </p>
                  <p className="text-xs text-gray-500 mt-1">
                    üìÑ {kb.file_type} | üè∑Ô∏è –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {kb.keywords?.length || 0}
                  </p>
                </div>
              ))
            ) : (
              <div className="text-center py-8 text-gray-500">
                <p className="text-lg">üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞</p>
                <p className="text-sm">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è AI</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

// AI Tasks Section
function AITasksSection() {
  const [tasks, setTasks] = useState([]);

  useEffect(() => {
    console.log('ü§ñ AI Tasks section mounted');
    fetchTasks();
  }, []);

  const fetchTasks = async () => {
    try {
      const response = await axios.get(`${API}/ai-tasks`);
      if (response.data.status === 'success') {
        setTasks(response.data.tasks);
        console.log('ü§ñ AI tasks loaded:', response.data.tasks.length);
      }
    } catch (error) {
      console.error('‚ùå Error fetching AI tasks:', error);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">ü§ñ –ó–∞–¥–∞—á–∏ –¥–ª—è AI</h1>
      <p className="text-gray-600 mb-6">–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º</p>
      
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h2 className="text-xl font-semibold mb-4">üìÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ({tasks.length})</h2>
        
        {tasks.length > 0 ? (
          <div className="space-y-4">
            {tasks.map((task, index) => (
              <div key={index} className="border rounded-lg p-4">
                <h3 className="font-semibold">{task.title}</h3>
                <p className="text-gray-600">{task.description}</p>
                <p className="text-sm text-gray-500">
                  ‚è∞ {new Date(task.scheduled_time).toLocaleString('ru-RU')}
                </p>
              </div>
            ))}
          </div>
        ) : (
          <p className="text-gray-500 text-center py-8">ü§ñ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è AI</p>
        )}
      </div>
    </div>
  );
}

// Employees Section
function EmployeesSection() {
  const [employees, setEmployees] = useState([]);

  useEffect(() => {
    console.log('üë• Employees section mounted');
    fetchEmployees();
  }, []);

  const fetchEmployees = async () => {
    try {
      const response = await axios.get(`${API}/employees`);
      if (response.data.status === 'success') {
        setEmployees(response.data.employees);
        console.log('üë• Employees loaded:', response.data.employees.length);
      }
    } catch (error) {
      console.error('‚ùå Error fetching employees:', error);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ + HR</h1>
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h2 className="text-xl font-semibold mb-4">–ö–æ–º–∞–Ω–¥–∞ VasDom (82 —á–µ–ª–æ–≤–µ–∫–∞)</h2>
        
        {employees.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {employees.map((employee, index) => (
              <div key={index} className="border rounded-lg p-4">
                <h3 className="font-semibold">{employee.name}</h3>
                <p className="text-gray-600">{employee.role}</p>
                <p className="text-sm text-gray-500">{employee.phone}</p>
              </div>
            ))}
          </div>
        ) : (
          <p className="text-gray-500">üë• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...</p>
        )}
      </div>
    </div>
  );
}

// Logs Section
function LogsSection() {
  const [logs, setLogs] = useState([]);

  useEffect(() => {
    console.log('üìã Logs section mounted');
    fetchLogs();
  }, []);

  const fetchLogs = async () => {
    try {
      const response = await axios.get(`${API}/logs`);
      if (response.data.status === 'success') {
        setLogs(response.data.voice_logs || []);
        console.log('üìã Logs loaded:', response.data.voice_logs?.length || 0);
      }
    } catch (error) {
      console.error('‚ùå Error fetching logs:', error);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">üìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏</h1>
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h2 className="text-xl font-semibold mb-4">üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è ({logs.length})</h2>
        
        <div className="space-y-3 max-h-96 overflow-y-auto">
          {logs.length > 0 ? (
            logs.map((log, index) => (
              <div key={index} className="border-l-4 border-blue-500 pl-3 pb-3">
                <p className="text-sm text-gray-600">
                  üë§ <strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {log.user_message}
                </p>
                <p className="text-sm text-green-600 mt-1">
                  ü§ñ <strong>AI:</strong> {log.ai_response}
                </p>
                <p className="text-xs text-gray-500">
                  {new Date(log.timestamp).toLocaleString('ru-RU')}
                </p>
              </div>
            ))
          ) : (
            <p className="text-gray-500 text-center py-8">üìã –ü–æ–∫–∞ –Ω–µ—Ç –ª–æ–≥–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π</p>
          )}
        </div>
      </div>
    </div>
  );
}

export default App;