import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import './App.css';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

// Main Dashboard Component
function App() {
  const [currentSection, setCurrentSection] = useState('general');
  const [isMenuCollapsed, setIsMenuCollapsed] = useState(false);
  const [dashboardStats, setDashboardStats] = useState({});
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchDashboardStats();
  }, []);

  const fetchDashboardStats = async () => {
    setLoading(true);
    try {
      const response = await axios.get(`${API}/dashboard`);
      if (response.data.status === 'success') {
        setDashboardStats(response.data.stats);
      }
    } catch (error) {
      console.error('Error fetching dashboard stats:', error);
      // Mock data if API fails
      setDashboardStats({
        employees: 82,
        houses: 50,
        entrances: 0,
        apartments: 0,
        floors: 0,
        meetings: 3,
        ai_tasks: 5
      });
    } finally {
      setLoading(false);
    }
  };

  const menuItems = [
    { id: 'general', label: 'üè† –û–±—â–µ–µ', icon: 'üè†' },
    { id: 'meetings', label: 'üé§ –ü–ª–∞–Ω–µ—Ä–∫–∞', icon: 'üé§' },
    { id: 'voice', label: 'üìû –ñ–∏–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä', icon: 'üìû' },
    { id: 'ai-tasks', label: 'ü§ñ –ó–∞–¥–∞—á–∏ –¥–ª—è AI', icon: 'ü§ñ' },
    { id: 'sales', label: 'üí∞ –ü—Ä–æ–¥–∞–∂–∏ / –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', icon: 'üí∞' },
    { id: 'employees', label: 'üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ + HR', icon: 'üë•' },
    { id: 'works', label: 'üèóÔ∏è –†–∞–±–æ—Ç—ã', icon: 'üèóÔ∏è' },
    { id: 'training', label: 'üìö –û–±—É—á–µ–Ω–∏–µ', icon: 'üìö' },
    { id: 'finance', label: 'üíπ –§–∏–Ω–∞–Ω—Å—ã', icon: 'üíπ' },
    { id: 'logs', label: 'üìã –õ–æ–≥–∏', icon: 'üìã' }
  ];

  const renderContent = () => {
    switch (currentSection) {
      case 'general':
        return <GeneralDashboard stats={dashboardStats} onRefresh={fetchDashboardStats} loading={loading} />;
      case 'meetings':
        return <MeetingsSection />;
      case 'voice':
        return <VoiceSection />;
      case 'ai-tasks':
        return <AITasksSection />;
      case 'works':
        return <WorksSection />;
      default:
        return <div className="p-6"><h2>–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h2></div>;
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar */}
      <div className={`bg-blue-900 text-white transition-all duration-300 ${isMenuCollapsed ? 'w-16' : 'w-64'}`}>
        <div className="p-4 border-b border-blue-800">
          <div className="flex items-center">
            <div className="bg-blue-700 rounded-full p-2 mr-3">
              ü§ñ
            </div>
            {!isMenuCollapsed && (
              <div>
                <h1 className="text-lg font-bold">VasDom AI</h1>
                <p className="text-sm opacity-75">–°–∏—Å—Ç–µ–º–∞ excellent</p>
              </div>
            )}
            <button 
              onClick={() => setIsMenuCollapsed(!isMenuCollapsed)}
              className="ml-auto text-white hover:bg-blue-800 p-1 rounded"
            >
              {isMenuCollapsed ? '‚Üí' : '‚Üê'}
            </button>
          </div>
        </div>
        
        <nav className="mt-4">
          {menuItems.map((item) => (
            <button
              key={item.id}
              onClick={() => setCurrentSection(item.id)}
              className={`w-full text-left p-3 hover:bg-blue-800 transition-colors ${
                currentSection === item.id ? 'bg-blue-800 border-r-4 border-blue-400' : ''
              }`}
            >
              <div className="flex items-center">
                <span className="text-xl mr-3">{item.icon}</span>
                {!isMenuCollapsed && <span>{item.label.split(' ').slice(1).join(' ')}</span>}
              </div>
            </button>
          ))}
        </nav>
      </div>

      {/* Main content */}
      <div className="flex-1 overflow-hidden">
        {renderContent()}
      </div>
    </div>
  );
}

// General Dashboard Component
function GeneralDashboard({ stats, onRefresh, loading }) {
  const statCards = [
    { title: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', value: stats.employees || 0, icon: 'üë•', color: 'blue' },
    { title: '–î–æ–º–æ–≤ –≤ CRM', value: stats.houses || 0, icon: 'üè†', color: 'green' },
    { title: '–ü–æ–¥—ä–µ–∑–¥–æ–≤', value: stats.entrances || 0, icon: 'üö™', color: 'purple' },
    { title: '–ö–≤–∞—Ä—Ç–∏—Ä', value: stats.apartments || 0, icon: 'üîç', color: 'orange' },
    { title: '–≠—Ç–∞–∂–µ–π', value: stats.floors || 0, icon: 'üìä', color: 'red' },
    { title: '–ü–ª–∞–Ω–µ—Ä–æ–∫', value: stats.meetings || 0, icon: 'üé§', color: 'indigo' }
  ];

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">–û–±—â–∏–π –æ–±–∑–æ—Ä</h1>
          <p className="text-gray-600">–°–∏—Å—Ç–µ–º–∞ excellent</p>
          <p className="text-sm text-gray-500">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date().toLocaleString('ru-RU')}</p>
        </div>
        <button
          onClick={onRefresh}
          disabled={loading}
          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors disabled:opacity-50"
        >
          {loading ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {statCards.map((card, index) => (
          <div key={index} className="bg-white rounded-lg shadow-md p-6">
            <div className="flex items-center">
              <div className={`bg-${card.color}-100 rounded-full p-3 mr-4`}>
                <span className="text-2xl">{card.icon}</span>
              </div>
              <div>
                <p className="text-sm text-gray-600">{card.title}</p>
                <p className="text-2xl font-bold text-gray-900">{card.value}</p>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

// Meetings Section Component
function MeetingsSection() {
  const [isRecording, setIsRecording] = useState(false);
  const [meetings, setMeetings] = useState([]);
  const [currentMeetingId, setCurrentMeetingId] = useState(null);
  const [transcription, setTranscription] = useState('');
  const recognitionRef = useRef(null);

  useEffect(() => {
    fetchMeetings();
    initSpeechRecognition();
  }, []);

  const initSpeechRecognition = () => {
    if ('webkitSpeechRecognition' in window) {
      const recognition = new window.webkitSpeechRecognition();
      recognition.continuous = true;
      recognition.interimResults = true;
      recognition.lang = 'ru-RU';
      
      recognition.onresult = (event) => {
        let finalTranscript = '';
        let interimTranscript = '';
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
          const transcript = event.results[i][0].transcript;
          if (event.results[i].isFinal) {
            finalTranscript += transcript;
          } else {
            interimTranscript += transcript;
          }
        }
        
        setTranscription(prev => prev + finalTranscript + interimTranscript);
      };
      
      recognition.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
      };
      
      recognitionRef.current = recognition;
    }
  };

  const fetchMeetings = async () => {
    try {
      const response = await axios.get(`${API}/meetings`);
      if (response.data.status === 'success') {
        setMeetings(response.data.meetings);
      }
    } catch (error) {
      console.error('Error fetching meetings:', error);
    }
  };

  const startRecording = async () => {
    try {
      const response = await axios.post(`${API}/meetings/start-recording`);
      if (response.data.status === 'success') {
        setCurrentMeetingId(response.data.meeting_id);
        setIsRecording(true);
        setTranscription('');
        
        if (recognitionRef.current) {
          recognitionRef.current.start();
        }
      }
    } catch (error) {
      console.error('Error starting recording:', error);
    }
  };

  const stopRecording = async () => {
    try {
      if (currentMeetingId) {
        await axios.post(`${API}/meetings/stop-recording?meeting_id=${currentMeetingId}`);
        setIsRecording(false);
        setCurrentMeetingId(null);
        
        if (recognitionRef.current) {
          recognitionRef.current.stop();
        }
        
        fetchMeetings();
      }
    } catch (error) {
      console.error('Error stopping recording:', error);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">üé§ –ü–ª–∞–Ω–µ—Ä–∫–∞ - –î–∏–∫—Ç–æ—Ñ–æ–Ω + AI</h1>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Recording Panel */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4">–ó–∞–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ä–∫–∏</h2>
          
          <div className="text-center mb-6">
            <button
              onClick={isRecording ? stopRecording : startRecording}
              className={`w-24 h-24 rounded-full text-white text-2xl transition-colors ${
                isRecording 
                  ? 'bg-red-500 hover:bg-red-600 animate-pulse' 
                  : 'bg-blue-500 hover:bg-blue-600'
              }`}
            >
              {isRecording ? '‚èπÔ∏è' : 'üé§'}
            </button>
            <p className="mt-2 text-gray-600">
              {isRecording ? '–ò–¥–µ—Ç –∑–∞–ø–∏—Å—å...' : '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏'}
            </p>
          </div>

          {/* Live Transcription */}
          {isRecording && (
            <div className="bg-gray-50 rounded-lg p-4">
              <h3 className="font-semibold mb-2">–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:</h3>
              <div className="h-32 overflow-y-auto">
                <p className="text-sm">{transcription || '–ì–æ–≤–æ—Ä–∏—Ç–µ...'}</p>
              </div>
            </div>
          )}
        </div>

        {/* Meetings History */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4">–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞–Ω–µ—Ä–æ–∫</h2>
          
          <div className="space-y-3">
            {meetings.length > 0 ? (
              meetings.map((meeting, index) => (
                <div key={index} className="border rounded-lg p-3">
                  <h3 className="font-medium">{meeting.title}</h3>
                  <p className="text-sm text-gray-600">
                    {new Date(meeting.created_at).toLocaleString('ru-RU')}
                  </p>
                  <p className="text-sm mt-1">{meeting.transcription}</p>
                </div>
              ))
            ) : (
              <p className="text-gray-500">–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–ª–∞–Ω–µ—Ä–æ–∫</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

// Voice Section Component
function VoiceSection() {
  const [isListening, setIsListening] = useState(false);
  const [messages, setMessages] = useState([]);
  const [currentMessage, setCurrentMessage] = useState('');
  const recognitionRef = useRef(null);
  const synthRef = useRef(null);

  useEffect(() => {
    initSpeechRecognition();
    initSpeechSynthesis();
  }, []);

  const initSpeechRecognition = () => {
    if ('webkitSpeechRecognition' in window) {
      const recognition = new window.webkitSpeechRecognition();
      recognition.continuous = false;
      recognition.interimResults = true;
      recognition.lang = 'ru-RU';
      
      recognition.onresult = (event) => {
        let transcript = '';
        for (let i = event.resultIndex; i < event.results.length; i++) {
          if (event.results[i].isFinal) {
            transcript = event.results[i][0].transcript;
            handleVoiceMessage(transcript);
          } else {
            setCurrentMessage(event.results[i][0].transcript);
          }
        }
      };
      
      recognition.onend = () => {
        setIsListening(false);
        setCurrentMessage('');
      };
      
      recognitionRef.current = recognition;
    }
  };

  const initSpeechSynthesis = () => {
    if ('speechSynthesis' in window) {
      synthRef.current = window.speechSynthesis;
    }
  };

  const handleVoiceMessage = async (text) => {
    if (!text.trim()) return;
    
    const userMessage = { type: 'user', text, timestamp: new Date() };
    setMessages(prev => [...prev, userMessage]);
    
    try {
      const response = await axios.post(`${API}/voice/process`, {
        text: text,
        user_id: 'user'
      });
      
      const aiResponse = {
        type: 'ai',
        text: response.data.response,
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, aiResponse]);
      
      // Speak AI response
      if (synthRef.current) {
        const utterance = new SpeechSynthesisUtterance(response.data.response);
        utterance.lang = 'ru-RU';
        synthRef.current.speak(utterance);
      }
      
    } catch (error) {
      console.error('Error processing voice message:', error);
      const errorResponse = {
        type: 'ai',
        text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorResponse]);
    }
  };

  const startListening = () => {
    if (recognitionRef.current) {
      setIsListening(true);
      recognitionRef.current.start();
    }
  };

  const stopListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">üìû –ñ–∏–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å AI</h1>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Voice Control Panel */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4">–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
          
          <div className="text-center">
            <button
              onClick={isListening ? stopListening : startListening}
              className={`w-20 h-20 rounded-full text-white text-2xl transition-colors ${
                isListening 
                  ? 'bg-red-500 hover:bg-red-600 animate-pulse' 
                  : 'bg-green-500 hover:bg-green-600'
              }`}
            >
              {isListening ? '‚èπÔ∏è' : 'üé§'}
            </button>
            <p className="mt-2 text-gray-600">
              {isListening ? '–°–ª—É—à–∞—é...' : '–ù–∞–∂–º–∏—Ç–µ –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ'}
            </p>
            
            {currentMessage && (
              <div className="mt-4 p-3 bg-gray-100 rounded-lg">
                <p className="text-sm">{currentMessage}</p>
              </div>
            )}
          </div>
        </div>
        
        {/* Chat Messages */}
        <div className="lg:col-span-2 bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4">–î–∏–∞–ª–æ–≥ —Å AI</h2>
          
          <div className="h-96 overflow-y-auto border rounded-lg p-4 space-y-3">
            {messages.length === 0 ? (
              <p className="text-gray-500 text-center">–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä, –Ω–∞–∂–∞–≤ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω</p>
            ) : (
              messages.map((message, index) => (
                <div
                  key={index}
                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-xs rounded-lg p-3 ${
                      message.type === 'user'
                        ? 'bg-blue-500 text-white'
                        : 'bg-gray-200 text-gray-800'
                    }`}
                  >
                    <p className="text-sm">{message.text}</p>
                    <p className="text-xs opacity-75 mt-1">
                      {message.timestamp.toLocaleTimeString('ru-RU')}
                    </p>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

// AI Tasks Section
function AITasksSection() {
  const [tasks, setTasks] = useState([]);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [newTask, setNewTask] = useState({
    title: '',
    description: '',
    scheduled_time: ''
  });

  useEffect(() => {
    fetchTasks();
  }, []);

  const fetchTasks = async () => {
    try {
      const response = await axios.get(`${API}/ai-tasks`);
      if (response.data.status === 'success') {
        setTasks(response.data.tasks);
      }
    } catch (error) {
      console.error('Error fetching AI tasks:', error);
    }
  };

  const createTask = async (e) => {
    e.preventDefault();
    
    const formData = new FormData();
    formData.append('title', newTask.title);
    formData.append('description', newTask.description);
    formData.append('scheduled_time', newTask.scheduled_time);
    
    try {
      const response = await axios.post(`${API}/ai-tasks`, formData);
      if (response.data.status === 'success') {
        setNewTask({ title: '', description: '', scheduled_time: '' });
        setShowCreateForm(false);
        fetchTasks();
      }
    } catch (error) {
      console.error('Error creating task:', error);
    }
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">ü§ñ –ó–∞–¥–∞—á–∏ –¥–ª—è AI</h1>
        <button
          onClick={() => setShowCreateForm(true)}
          className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg"
        >
          –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
        </button>
      </div>

      {/* Create Task Form */}
      {showCreateForm && (
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4">–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è AI</h2>
          <form onSubmit={createTask} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
              </label>
              <input
                type="text"
                value={newTask.title}
                onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}
                className="w-full border border-gray-300 rounded-lg p-2"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –û–ø–∏—Å–∞–Ω–∏–µ
              </label>
              <textarea
                value={newTask.description}
                onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}
                className="w-full border border-gray-300 rounded-lg p-2 h-24"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
              </label>
              <input
                type="datetime-local"
                value={newTask.scheduled_time}
                onChange={(e) => setNewTask({ ...newTask, scheduled_time: e.target.value })}
                className="w-full border border-gray-300 rounded-lg p-2"
                required
              />
            </div>
            <div className="flex space-x-2">
              <button
                type="submit"
                className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg"
              >
                –°–æ–∑–¥–∞—Ç—å
              </button>
              <button
                type="button"
                onClick={() => setShowCreateForm(false)}
                className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Tasks List */}
      <div className="space-y-4">
        {tasks.length > 0 ? (
          tasks.map((task, index) => (
            <div key={index} className="bg-white rounded-lg shadow-md p-6">
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <h3 className="text-lg font-semibold">{task.title}</h3>
                  <p className="text-gray-600 mt-1">{task.description}</p>
                  <p className="text-sm text-gray-500 mt-2">
                    –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {new Date(task.scheduled_time).toLocaleString('ru-RU')}
                  </p>
                </div>
                <span className={`px-3 py-1 rounded-full text-sm ${
                  task.status === 'pending' 
                    ? 'bg-yellow-100 text-yellow-800'
                    : task.status === 'completed'
                    ? 'bg-green-100 text-green-800'
                    : 'bg-gray-100 text-gray-800'
                }`}>
                  {task.status === 'pending' ? '–í –æ–∂–∏–¥–∞–Ω–∏–∏' : 
                   task.status === 'completed' ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                </span>
              </div>
            </div>
          ))
        ) : (
          <div className="text-center py-12">
            <p className="text-gray-500">–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è AI</p>
          </div>
        )}
      </div>
    </div>
  );
}

// Works Section (Cleaning)
function WorksSection() {
  const [houses, setHouses] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchHouses();
  }, []);

  const fetchHouses = async () => {
    setLoading(true);
    try {
      const response = await axios.get(`${API}/cleaning/houses?limit=400`);
      if (response.data.status === 'success') {
        setHouses(response.data.houses);
      }
    } catch (error) {
      console.error('Error fetching houses:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">üèóÔ∏è –†–∞–±–æ—Ç—ã - –£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤</h1>
        <button
          onClick={fetchHouses}
          disabled={loading}
          className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg disabled:opacity-50"
        >
          {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM'}
        </button>
      </div>

      <div className="bg-white rounded-lg shadow-md">
        <div className="p-4 border-b">
          <h2 className="text-lg font-semibold">
            –í—Å–µ –¥–æ–º–∞ –∏–∑ Bitrix24 ({houses.length} –æ–±—ä–µ–∫—Ç–æ–≤)
          </h2>
          <p className="text-sm text-gray-600">–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ "–£–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤"</p>
        </div>
        
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-2 text-left">–ê–¥—Ä–µ—Å</th>
                <th className="px-4 py-2 text-left">–°—Ç–∞—Ç—É—Å</th>
                <th className="px-4 py-2 text-left">ID —Å–¥–µ–ª–∫–∏</th>
                <th className="px-4 py-2 text-left">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {houses.map((house, index) => (
                <tr key={index} className="border-b hover:bg-gray-50">
                  <td className="px-4 py-2 font-medium">{house.address}</td>
                  <td className="px-4 py-2">
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      house.stage?.includes('WON') 
                        ? 'bg-green-100 text-green-800'
                        : 'bg-yellow-100 text-yellow-800'
                    }`}>
                      {house.stage}
                    </span>
                  </td>
                  <td className="px-4 py-2 text-gray-600">#{house.bitrix24_deal_id}</td>
                  <td className="px-4 py-2 text-gray-600 text-sm">
                    {house.created_date ? new Date(house.created_date).toLocaleDateString('ru-RU') : '-'}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

export default App;