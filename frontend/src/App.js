import React, { useState, useEffect } from 'react';
import './App.css';
import axios from 'axios';
import VoiceAssistant from './VoiceAssistant';
import LiveVoiceChat from './LiveVoiceChat';
import OnboardingChat from './OnboardingChat';
import MeetingRecorder from './MeetingRecorder';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

// Navigation Component
const Navigation = ({ activeTab, setActiveTab }) => {
  const tabs = [
    { id: 'dashboard', name: 'üìä –î–∞—à–±–æ—Ä–¥', icon: 'üìä' },
    { id: 'employees', name: 'üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', icon: 'üë•' },
    { id: 'analytics', name: 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', icon: 'üìà' },
    { id: 'smart-planning', name: 'üß† Smart –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', icon: 'üß†' },
    { id: 'client-management', name: 'ü§ù –ö–ª–∏–µ–Ω—Ç—ã', icon: 'ü§ù' },
    { id: 'live-voice', name: 'üìû Live –ì–æ–ª–æ—Å', icon: 'üìû' },
    { id: 'meetings', name: 'üéôÔ∏è –ü–ª–∞–Ω–µ—Ä–∫–∞', icon: 'üéôÔ∏è' },
    { id: 'notifications', name: 'üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', icon: 'üì¢' },
    { id: 'telegram-info', name: 'üì± Telegram –ë–æ—Ç', icon: 'üì±' }
  ];

  return (
    <nav className="bg-white shadow-lg mb-8">
      <div className="container mx-auto px-4">
        <div className="flex space-x-8">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`py-4 px-6 border-b-2 font-medium text-sm transition-colors ${
                activeTab === tab.id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <span className="mr-2">{tab.icon}</span>
              {tab.name}
            </button>
          ))}
        </div>
      </div>
    </nav>
  );
};

// Main Dashboard Component
const Dashboard = () => {
  const [dashboardData, setDashboardData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchDashboardData();
  }, []);

  const fetchDashboardData = async () => {
    try {
      const response = await axios.get(`${API}/dashboard`);
      setDashboardData(response.data);
    } catch (error) {
      console.error('Error fetching dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-96">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* Metrics Cards */}
      {dashboardData && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <MetricCard
            title="–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
            value={dashboardData.metrics.total_employees}
            icon="üë•"
            color="bg-blue-500"
            change="+5 –∑–∞ –º–µ—Å—è—Ü"
          />
          <MetricCard
            title="–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"
            value={dashboardData.metrics.active_employees}
            icon="‚úÖ"
            color="bg-green-500"
            change="98% –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
          />
          <MetricCard
            title="–î–æ–º–∞ –≤ –ö–∞–ª—É–≥–µ"
            value={dashboardData.metrics.kaluga_houses}
            icon="üè†"
            color="bg-purple-500"
            change="500 –¥–æ–º–æ–≤"
          />
          <MetricCard
            title="–î–æ–º–∞ –≤ –ö–µ–º–µ—Ä–æ–≤–æ"
            value={dashboardData.metrics.kemerovo_houses}
            icon="üèòÔ∏è"
            color="bg-orange-500"
            change="100 –¥–æ–º–æ–≤"
          />
        </div>
      )}

      {/* Recent Activities and AI Insights */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          </h3>
          <div className="space-y-3">
            {dashboardData?.recent_activities.map((activity, index) => (
              <div key={index} className="flex items-start space-x-3">
                <div className="flex-shrink-0 w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                <div>
                  <p className="text-sm text-gray-900">{activity.message}</p>
                  <p className="text-xs text-gray-500">{activity.time}</p>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-lg p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            üß† AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
          </h3>
          <div className="space-y-3">
            {dashboardData?.ai_insights.map((insight, index) => (
              <div key={index} className="p-3 bg-blue-50 rounded-lg">
                <p className="text-sm text-blue-900">{insight}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

// Employees Component
const Employees = () => {
  const [employees, setEmployees] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showAddForm, setShowAddForm] = useState(false);

  useEffect(() => {
    fetchEmployees();
  }, []);

  const fetchEmployees = async () => {
    try {
      const response = await axios.get(`${API}/employees`);
      setEmployees(response.data);
    } catch (error) {
      console.error('Error fetching employees:', error);
    } finally {
      setLoading(false);
    }
  };

  const positionNames = {
    'general_director': '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
    'director': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
    'accountant': '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä',
    'hr_manager': 'HR –º–µ–Ω–µ–¥–∂–µ—Ä',
    'cleaning_manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –∫–ª–∏–Ω–∏–Ω–≥—É',
    'construction_manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Å—Ç—Ä–æ–π–∫–µ',
    'architect': '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä-—Å–º–µ—Ç—á–∏–∫',
    'cleaner': '–£–±–æ—Ä—â–∏—Ü–∞',
    'other': '–î—Ä—É–≥–æ–µ'
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold text-gray-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏</h2>
        <button
          onClick={() => setShowAddForm(true)}
          className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
        >
          + –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        </button>
      </div>

      {loading ? (
        <div className="flex justify-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {employees.length === 0 ? (
            <div className="col-span-full text-center py-8">
              <p className="text-gray-500">–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!</p>
            </div>
          ) : (
            employees.map((employee) => (
              <div key={employee.id} className="bg-white rounded-lg shadow-lg p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold">
                    {employee.name.charAt(0)}
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900">{employee.name}</h3>
                    <p className="text-sm text-gray-600">{positionNames[employee.position] || employee.position}</p>
                  </div>
                </div>
                <div className="space-y-2 text-sm">
                  <p><span className="font-medium">–ì–æ—Ä–æ–¥:</span> {employee.city}</p>
                  <p><span className="font-medium">Email:</span> {employee.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                  <p><span className="font-medium">–¢–µ–ª–µ—Ñ–æ–Ω:</span> {employee.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                  <p><span className="font-medium">–î–∞—Ç–∞ –Ω–∞–π–º–∞:</span> {new Date(employee.hire_date).toLocaleDateString('ru-RU')}</p>
                </div>
                <div className="mt-4 flex space-x-2">
                  <button className="flex-1 bg-gray-100 text-gray-700 py-2 px-3 rounded text-sm hover:bg-gray-200">
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </button>
                  <button className="bg-red-100 text-red-700 py-2 px-3 rounded text-sm hover:bg-red-200">
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
      )}
    </div>
  );
};

// Enhanced Analytics Component with CYCLE 1 features
const Analytics = () => {
  const [forecast, setForecast] = useState(null);
  const [insights, setInsights] = useState([]);
  const [metrics, setMetrics] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchAnalyticsData();
  }, []);

  const fetchAnalyticsData = async () => {
    try {
      setLoading(true);
      
      // Fetch all analytics data
      const [forecastRes, insightsRes, metricsRes] = await Promise.all([
        axios.get(`${API}/analytics/forecast?months=3`),
        axios.get(`${API}/analytics/insights?force_refresh=true`),
        axios.get(`${API}/analytics/performance`)
      ]);
      
      setForecast(forecastRes.data);
      setInsights(insightsRes.data.insights || []);
      setMetrics(metricsRes.data);
      
    } catch (error) {
      console.error('Error fetching analytics:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-96">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
        <span className="ml-3 text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É...</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold text-gray-900">üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã</h2>
        <button
          onClick={fetchAnalyticsData}
          className="bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-600 transition-colors"
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        </button>
      </div>
      
      {/* Financial Forecast */}
      {forecast && forecast.success && (
        <div className="bg-gradient-to-br from-green-50 to-blue-50 rounded-lg shadow-lg p-6">
          <h3 className="text-lg font-semibold mb-4 text-green-800">üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (3 –º–µ—Å—è—Ü–∞)</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {forecast.forecasts.map((f, index) => (
              <div key={index} className="bg-white rounded-lg p-4 shadow">
                <h4 className="font-medium text-gray-700">{f.period}</h4>
                <p className="text-2xl font-bold text-green-600">
                  {f.predicted_revenue.toLocaleString('ru-RU')} ‚ÇΩ
                </p>
                <p className="text-sm text-gray-500">
                  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {(f.confidence_score * 100).toFixed(0)}%
                </p>
                <div className="mt-2">
                  <div className="w-full bg-gray-200 rounded-full h-1">
                    <div 
                      className="bg-green-500 h-1 rounded-full transition-all"
                      style={{width: `${f.confidence_score * 100}%`}}
                    />
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          {forecast.historical_data && (
            <div className="mt-4 text-sm text-gray-600 bg-white rounded p-3">
              <p><strong>–ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong> {forecast.historical_data.total_deals} —Å–¥–µ–ª–æ–∫, 
              —Å—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ {forecast.historical_data.avg_monthly_revenue?.toLocaleString('ru-RU') || 0} ‚ÇΩ/–º–µ—Å—è—Ü</p>
            </div>
          )}
        </div>
      )}

      {/* Performance Metrics */}
      {metrics && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h3 className="text-lg font-semibold mb-4">üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥–∞–∂</h3>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:</span>
                <span className="font-semibold">{metrics.sales_metrics?.total_deals || 0}</span>
              </div>
              <div className="flex justify-between">
                <span>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</span>
                <span className="font-semibold text-blue-600">{metrics.sales_metrics?.conversion_rate || 0}%</span>
              </div>
              <div className="flex justify-between">
                <span>–°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞:</span>
                <span className="font-semibold">{(metrics.sales_metrics?.avg_deal_size || 0).toLocaleString('ru-RU')} ‚ÇΩ</span>
              </div>
              <div className="flex justify-between border-t pt-2">
                <span>–û–±—â–∏–π –æ–±—ä–µ–º:</span>
                <span className="font-semibold text-green-600">
                  {(metrics.sales_metrics?.total_pipeline_value || 0).toLocaleString('ru-RU')} ‚ÇΩ
                </span>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-lg p-6">
            <h3 className="text-lg font-semibold mb-4">üè¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏</h3>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span>–ö–æ–º–∞–Ω–¥–∞ –ö–∞–ª—É–≥–∞:</span>
                <span className="font-semibold">{metrics.operational_metrics?.kaluga_team || 0} —á–µ–ª</span>
              </div>
              <div className="flex justify-between">
                <span>–ö–æ–º–∞–Ω–¥–∞ –ö–µ–º–µ—Ä–æ–≤–æ:</span>
                <span className="font-semibold">{metrics.operational_metrics?.kemerovo_team || 0} —á–µ–ª</span>
              </div>
              <div className="flex justify-between">
                <span>–û–±—ä–µ–∫—Ç—ã:</span>
                <span className="font-semibold">{metrics.operational_metrics?.houses_managed || 600} –¥–æ–º–æ–≤</span>
              </div>
              <div className="flex justify-between border-t pt-2">
                <span>–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:</span>
                <span className="font-semibold text-blue-600">{metrics.operational_metrics?.avg_response_time_hours || 2} —á–∞—Å–∞</span>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* AI Business Insights */}
      {insights.length > 0 && (
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            üß† AI-–∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
            <span className="ml-2 text-sm bg-purple-100 text-purple-700 px-2 py-1 rounded-full">
              {insights.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            </span>
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {insights.map((insight, index) => (
              <div key={index} className="border-l-4 border-purple-500 bg-purple-50 p-4 rounded-r-lg">
                <div className="flex items-start space-x-2">
                  <span className="text-purple-600 font-bold text-sm uppercase tracking-wide">
                    {insight.category}
                  </span>
                  <span className="text-xs bg-purple-200 text-purple-700 px-2 py-1 rounded-full">
                    {(insight.confidence_score * 100).toFixed(0)}%
                  </span>
                </div>
                <p className="text-gray-800 mt-2 text-sm leading-relaxed">
                  {insight.insight}
                </p>
                <div className="mt-2 text-xs text-gray-500">
                  –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {insight.data_sources?.join(', ') || 'AI –∞–Ω–∞–ª–∏–∑'}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Growth Metrics */}
      {metrics?.growth_metrics && (
        <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg shadow-lg p-6">
          <h3 className="text-lg font-semibold mb-4">üìà –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–æ—Å—Ç–∞</h3>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <p className="text-2xl font-bold text-blue-600">{metrics.growth_metrics.quarterly_growth}</p>
              <p className="text-sm text-gray-600">–†–æ—Å—Ç –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-green-600">{metrics.growth_metrics.revenue_target_achievement}%</p>
              <p className="text-sm text-gray-600">–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-purple-600">{metrics.growth_metrics.new_clients_monthly}</p>
              <p className="text-sm text-gray-600">–ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤/–º–µ—Å</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-orange-600">{metrics.client_metrics?.client_satisfaction || 4.8}</p>
              <p className="text-sm text-gray-600">–†–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ–≤</p>
            </div>
          </div>
        </div>
      )}

      {/* Classic Analytics for comparison */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h3 className="text-lg font-semibold mb-4">üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –≥–æ—Ä–æ–¥–∞–º</h3>
        <div className="space-y-4">
          <div className="flex justify-between items-center">
            <span>–ö–∞–ª—É–≥–∞</span>
            <div className="flex items-center space-x-2">
              <div className="w-32 bg-gray-200 rounded-full h-2">
                <div className="bg-blue-500 h-2 rounded-full" style={{width: '85%'}}></div>
              </div>
              <span className="text-sm">85%</span>
            </div>
          </div>
          <div className="flex justify-between items-center">
            <span>–ö–µ–º–µ—Ä–æ–≤–æ</span>
            <div className="flex items-center space-x-2">
              <div className="w-32 bg-gray-200 rounded-full h-2">
                <div className="bg-green-500 h-2 rounded-full" style={{width: '92%'}}></div>
              </div>
              <span className="text-sm">92%</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Metric Card Component
const MetricCard = ({ title, value, icon, color, change }) => {
  return (
    <div className="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-600">{title}</p>
          <p className="text-3xl font-bold text-gray-900 mt-1">{value}</p>
          {change && <p className="text-xs text-gray-500 mt-1">{change}</p>}
        </div>
        <div className={`w-12 h-12 ${color} rounded-lg flex items-center justify-center text-white text-2xl`}>
          {icon}
        </div>
      </div>
    </div>
  );
};

// AI Chat Component removed - now all AI communication happens through Telegram

// Smart Planning Component
const SmartPlanning = () => {
  const [routes, setRoutes] = useState(null);
  const [predictions, setPredictions] = useState([]);
  const [schedule, setSchedule] = useState(null);
  const [loading, setLoading] = useState(true);
  const [selectedCity, setSelectedCity] = useState('–ö–∞–ª—É–≥–∞');

  useEffect(() => {
    fetchPlanningData();
  }, [selectedCity]);

  const fetchPlanningData = async () => {
    try {
      setLoading(true);
      
      const [routesRes, predictionsRes, scheduleRes] = await Promise.all([
        axios.get(`${API}/planning/routes/${selectedCity}`),
        axios.get(`${API}/planning/maintenance-predictions`),
        axios.get(`${API}/planning/weekly-schedule/${selectedCity}`)
      ]);
      
      setRoutes(routesRes.data);
      setPredictions(predictionsRes.data.predictions || []);
      setSchedule(scheduleRes.data);
      
    } catch (error) {
      console.error('Error fetching planning data:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-96">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
        <span className="ml-3 text-gray-600">–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã...</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold text-gray-900">üß† Smart –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
        <div className="flex space-x-4">
          <select
            value={selectedCity}
            onChange={(e) => setSelectedCity(e.target.value)}
            className="border border-gray-300 rounded-lg px-4 py-2"
          >
            <option value="–ö–∞–ª—É–≥–∞">–ö–∞–ª—É–≥–∞</option>
            <option value="–ö–µ–º–µ—Ä–æ–≤–æ">–ö–µ–º–µ—Ä–æ–≤–æ</option>
          </select>
          <button
            onClick={fetchPlanningData}
            className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
      </div>

      {/* Optimized Routes */}
      {routes && routes.success && (
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h3 className="text-lg font-semibold mb-4">üöó –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã - {selectedCity}</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {routes.routes.map((route, index) => (
              <div key={index} className="border rounded-lg p-4 bg-gray-50">
                <h4 className="font-medium text-blue-600">{route.route_id}</h4>
                <p className="text-sm text-gray-600 mt-1">
                  –î–æ–º–æ–≤: {route.houses.length} | –í—Ä–µ–º—è: {route.estimated_time}—á
                </p>
                <p className="text-sm text-gray-600">
                  –ö–æ–º–∞–Ω–¥–∞: {route.team_size} —á–µ–ª
                </p>
                <div className="mt-2">
                  <p className="text-xs text-gray-500">–ü–µ—Ä–≤—ã–µ –¥–æ–º–∞:</p>
                  {route.houses.slice(0, 3).map((house, i) => (
                    <p key={i} className="text-xs text-gray-700 truncate">‚Ä¢ {house}</p>
                  ))}
                </div>
              </div>
            ))}
          </div>
          <div className="mt-4 p-4 bg-blue-50 rounded-lg">
            <p className="text-sm">
              <strong>–ò—Ç–æ–≥–æ:</strong> {routes.total_houses} –¥–æ–º–æ–≤, {routes.teams_needed} –∫–æ–º–∞–Ω–¥, 
              ~{routes.routes.reduce((sum, r) => sum + r.estimated_time, 0).toFixed(1)} —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã
            </p>
          </div>
        </div>
      )}

      {/* Maintenance Predictions */}
      {predictions.length > 0 && (
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h3 className="text-lg font-semibold mb-4">üîÆ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</h3>
          <div className="space-y-3">
            {predictions.slice(0, 10).map((prediction, index) => (
              <div key={index} className={`p-3 rounded-lg border-l-4 ${
                prediction.priority === 'high' ? 'border-red-500 bg-red-50' :
                prediction.priority === 'medium' ? 'border-yellow-500 bg-yellow-50' :
                'border-green-500 bg-green-50'
              }`}>
                <div className="flex justify-between items-start">
                  <div>
                    <h4 className="font-medium">{prediction.house}</h4>
                    <p className="text-sm text-gray-600">{prediction.recommended_action}</p>
                  </div>
                  <div className="text-right">
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      prediction.priority === 'high' ? 'bg-red-200 text-red-800' :
                      prediction.priority === 'medium' ? 'bg-yellow-200 text-yellow-800' :
                      'bg-green-200 text-green-800'
                    }`}>
                      {prediction.priority}
                    </span>
                    <p className="text-xs text-gray-500 mt-1">
                      {prediction.predicted_maintenance_date}
                    </p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Weekly Schedule */}
      {schedule && schedule.success && (
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h3 className="text-lg font-semibold mb-4">üìÖ –ù–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - {selectedCity}</h3>
          <div className="space-y-3">
            {Object.entries(schedule.schedule).map(([date, daySchedule]) => (
              <div key={date} className="border rounded-lg p-4">
                <div className="flex justify-between items-center mb-2">
                  <h4 className="font-medium">{daySchedule.date} ({daySchedule.day})</h4>
                  <span className="text-sm text-gray-500">
                    {daySchedule.total_estimated_time.toFixed(1)} —á–∞—Å–æ–≤
                  </span>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm font-medium text-blue-600">–ü–ª–∞–Ω–æ–≤–∞—è —É–±–æ—Ä–∫–∞:</p>
                    <p className="text-sm">{daySchedule.route.houses.length} –¥–æ–º–æ–≤</p>
                    <p className="text-xs text-gray-600">
                      {daySchedule.route.houses.slice(0, 2).join(', ')}
                      {daySchedule.route.houses.length > 2 && '...'}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-red-600">–°—Ä–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:</p>
                    <p className="text-sm">{daySchedule.urgent_maintenance.length} –æ–±—ä–µ–∫—Ç–æ–≤</p>
                    {daySchedule.urgent_maintenance.length > 0 && (
                      <p className="text-xs text-gray-600">
                        {daySchedule.urgent_maintenance.slice(0, 1).join(', ')}
                      </p>
                    )}
                  </div>
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  {daySchedule.weather_consideration}
                </p>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

// Client Management Component
const ClientManagement = () => {
  const [satisfactionData, setSatisfactionData] = useState(null);
  const [houses, setHouses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedHouse, setSelectedHouse] = useState('');

  useEffect(() => {
    fetchClientData();
  }, []);

  const fetchClientData = async () => {
    try {
      setLoading(true);
      
      const [satisfactionRes, housesRes] = await Promise.all([
        axios.get(`${API}/clients/satisfaction-report`),
        axios.get(`${API}/bitrix24/cleaning-houses`)
      ]);
      
      setSatisfactionData(satisfactionRes.data);
      setHouses(housesRes.data.houses || []);
      
    } catch (error) {
      console.error('Error fetching client data:', error);
    } finally {
      setLoading(false);
    }
  };

  const sendNotification = async (notificationType) => {
    if (!selectedHouse) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      return;
    }

    try {
      const response = await axios.post(`${API}/clients/send-notification`, {
        house_id: selectedHouse,
        notification_type: notificationType
      });

      if (response.data.success) {
        alert(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "${notificationType}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`);
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞: ${response.data.error}`);
      }
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-96">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-500"></div>
        <span className="ml-3 text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤...</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-900">ü§ù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏</h2>

      {/* Client Satisfaction */}
      {satisfactionData && satisfactionData.success && (
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h3 className="text-lg font-semibold mb-4">üìä –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="text-center p-4 bg-blue-50 rounded-lg">
              <p className="text-2xl font-bold text-blue-600">
                {satisfactionData.satisfaction_data.average_rating.toFixed(1)}
              </p>
              <p className="text-sm text-gray-600">–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞</p>
            </div>
            <div className="text-center p-4 bg-green-50 rounded-lg">
              <p className="text-2xl font-bold text-green-600">
                {satisfactionData.satisfaction_data.nps_score}
              </p>
              <p className="text-sm text-gray-600">NPS Score</p>
            </div>
            <div className="text-center p-4 bg-purple-50 rounded-lg">
              <p className="text-2xl font-bold text-purple-600">
                {satisfactionData.satisfaction_data.total_surveys}
              </p>
              <p className="text-sm text-gray-600">–û–ø—Ä–æ—Å–æ–≤</p>
            </div>
            <div className="text-center p-4 bg-orange-50 rounded-lg">
              <p className="text-2xl font-bold text-orange-600">
                {(satisfactionData.satisfaction_data.response_rate * 100).toFixed(0)}%
              </p>
              <p className="text-sm text-gray-600">–û—Ç–∫–ª–∏–∫</p>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-medium mb-3">–û—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</h4>
              {Object.entries(satisfactionData.satisfaction_data.categories).map(([category, rating]) => (
                <div key={category} className="flex justify-between items-center mb-2">
                  <span className="text-sm capitalize">{category}</span>
                  <div className="flex items-center">
                    <div className="w-20 bg-gray-200 rounded-full h-2 mr-2">
                      <div 
                        className="bg-blue-500 h-2 rounded-full" 
                        style={{width: `${(rating/5)*100}%`}}
                      />
                    </div>
                    <span className="text-sm font-medium">{rating.toFixed(1)}</span>
                  </div>
                </div>
              ))}
            </div>
            
            <div>
              <h4 className="font-medium mb-3">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:</h4>
              <div className="space-y-2">
                {satisfactionData.satisfaction_data.recent_feedback.map((feedback, index) => (
                  <div key={index} className="p-3 bg-gray-50 rounded-lg">
                    <div className="flex justify-between items-start mb-1">
                      <div className="flex">
                        {[...Array(feedback.rating)].map((_, i) => (
                          <span key={i} className="text-yellow-400">‚≠ê</span>
                        ))}
                      </div>
                      <span className="text-xs text-gray-500">{feedback.date}</span>
                    </div>
                    <p className="text-sm text-gray-700">{feedback.comment}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>

          <div className="mt-6 p-4 bg-blue-50 rounded-lg">
            <h4 className="font-medium text-blue-800 mb-2">ü§ñ AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4>
            <div className="text-sm text-blue-700 whitespace-pre-line">
              {satisfactionData.ai_insights}
            </div>
          </div>
        </div>
      )}

      {/* Client Notifications */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h3 className="text-lg font-semibold mb-4">üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º</h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:
            </label>
            <select
              value={selectedHouse}
              onChange={(e) => setSelectedHouse(e.target.value)}
              className="w-full border border-gray-300 rounded-lg px-4 py-2"
            >
              <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º --</option>
              {houses.map((house) => (
                <option key={house.ID} value={house.ID}>
                  {house.TITLE}
                </option>
              ))}
            </select>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <button
              onClick={() => sendNotification('cleaning_scheduled')}
              disabled={!selectedHouse}
              className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 disabled:opacity-50"
            >
              üìÖ –£–±–æ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞
            </button>
            <button
              onClick={() => sendNotification('cleaning_completed')}
              disabled={!selectedHouse}
              className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 disabled:opacity-50"
            >
              ‚úÖ –£–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            </button>
            <button
              onClick={() => sendNotification('quality_check')}
              disabled={!selectedHouse}
              className="bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-600 disabled:opacity-50"
            >
              ‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ
            </button>
          </div>
        </div>

        <div className="mt-6 p-4 bg-gray-50 rounded-lg">
          <h4 className="font-medium mb-2">üì± –ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</h4>
          <div className="grid grid-cols-3 gap-4 text-center">
            <div className="p-2">
              <span className="text-2xl">üìß</span>
              <p className="text-xs">Email</p>
            </div>
            <div className="p-2">
              <span className="text-2xl">üí¨</span>
              <p className="text-xs">SMS</p>
            </div>
            <div className="p-2">
              <span className="text-2xl">üìû</span>
              <p className="text-xs">Telegram</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Telegram Bot Information Component
const TelegramInfo = () => {
  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-900">üì± Telegram –ë–æ—Ç –ú–ê–ö–°</h2>
      
      {/* Bot Information */}
      <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg shadow-lg p-6">
        <div className="flex items-center space-x-4 mb-4">
          <div className="bg-blue-500 text-white p-3 rounded-full">
            <span className="text-2xl">ü§ñ</span>
          </div>
          <div>
            <h3 className="text-xl font-bold text-blue-800">AI-–î–∏—Ä–µ–∫—Ç–æ—Ä –ú–ê–ö–°</h3>
            <p className="text-blue-600">@aitest123432_bot</p>
          </div>
        </div>
        
        <div className="bg-white rounded-lg p-4 mb-4">
          <h4 className="font-semibold text-gray-800 mb-2">üéØ –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h4>
          <p className="text-gray-700">
            –í—Å–µ –æ–±—â–µ–Ω–∏–µ —Å AI —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ Telegram. –ú–ê–ö–° —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≤–∞—à –ª–∏—á–Ω—ã–π AI-–¥–∏—Ä–µ–∫—Ç–æ—Ä:
            –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∏–∑–Ω–µ—Å, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏ –¥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="bg-white rounded-lg p-4">
            <h4 className="font-medium text-gray-800 mb-2">üëã –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ</h4>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ</li>
              <li>‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ –≤–∞—à—É —Ä–æ–ª—å –∏ –∑–∞–¥–∞—á–∏</li>
              <li>‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤</li>
            </ul>
          </div>
          
          <div className="bg-white rounded-lg p-4">
            <h4 className="font-medium text-gray-800 mb-2">üìä –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h4>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞</li>
              <li>‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã –ø–æ KPI</li>
              <li>‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</li>
            </ul>
          </div>
          
          <div className="bg-white rounded-lg p-4">
            <h4 className="font-medium text-gray-800 mb-2">üß† –ü–∞–º—è—Ç—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç</h4>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>‚Ä¢ –ü–æ–º–Ω–∏—Ç –≤—Å–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –∏ —Ä–µ—à–µ–Ω–∏—è</li>
              <li>‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á</li>
              <li>‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</li>
            </ul>
          </div>
          
          <div className="bg-white rounded-lg p-4">
            <h4 className="font-medium text-gray-800 mb-2">üéØ –î–∏—Ä–µ–∫—Ç–æ—Ä—Å–∫–∏–π —Å—Ç–∏–ª—å</h4>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>‚Ä¢ –ß–µ—Ç–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</li>
              <li>‚Ä¢ –§–æ–∫—É—Å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ü–∏—Ñ—Ä—ã</li>
              <li>‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ</li>
            </ul>
          </div>
        </div>
      </div>

      {/* How to Start */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h3 className="text-lg font-semibold mb-4">üöÄ –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É</h3>
        
        <div className="space-y-4">
          <div className="flex items-start space-x-3">
            <span className="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">1</span>
            <div>
              <h4 className="font-medium">–û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞</h4>
              <p className="text-gray-600 text-sm">–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: <a href="https://t.me/aitest123432_bot" target="_blank" rel="noopener noreferrer" className="text-blue-500 underline">@aitest123432_bot</a></p>
            </div>
          </div>
          
          <div className="flex items-start space-x-3">
            <span className="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">2</span>
            <div>
              <h4 className="font-medium">–ù–∞–∂–º–∏—Ç–µ "START BOT"</h4>
              <p className="text-gray-600 text-sm">–ú–ê–ö–° –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω–µ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏</p>
            </div>
          </div>
          
          <div className="flex items-start space-x-3">
            <span className="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">3</span>
            <div>
              <h4 className="font-medium">–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ú–ê–ö–°</h4>
              <p className="text-gray-600 text-sm">–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π —Ä–æ–ª–∏, –æ–ø—ã—Ç–µ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö –≤ —Ä–∞–±–æ—Ç–µ</p>
            </div>
          </div>
          
          <div className="flex items-start space-x-3">
            <span className="bg-green-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">‚úì</span>
            <div>
              <h4 className="font-medium">–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç</h4>
              <p className="text-gray-600 text-sm">–ú–ê–ö–° –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</p>
            </div>
          </div>
        </div>
      </div>

      {/* Sample Conversation */}
      <div className="bg-gray-50 rounded-lg p-6">
        <h3 className="text-lg font-semibold mb-4">üí¨ –ü—Ä–∏–º–µ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ú–ê–ö–°</h3>
        
        <div className="space-y-3">
          <div className="bg-blue-100 rounded-lg p-3">
            <p className="text-sm"><strong>ü§ñ –ú–ê–ö–°:</strong> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ú–ê–ö–° - –≤–∞—à AI-–¥–∏—Ä–µ–∫—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –í–∞—Å–î–æ–º. –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∏ –∫–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∑–∞–Ω–∏–º–∞–µ—Ç–µ?</p>
          </div>
          
          <div className="bg-white rounded-lg p-3 ml-6">
            <p className="text-sm"><strong>üë§ –í—ã:</strong> –ú–∞–∫—Å–∏–º –ú–∞—Å–ª–æ–≤, –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä</p>
          </div>
          
          <div className="bg-blue-100 rounded-lg p-3">
            <p className="text-sm"><strong>ü§ñ –ú–ê–ö–°:</strong> –û—Ç–ª–∏—á–Ω–æ, –ú–∞–∫—Å–∏–º! –ì–æ—Ç–æ–≤–ª—é —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É... –ü–æ –¥–∞–Ω–Ω—ã–º Bitrix24 —É –Ω–∞—Å 15 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–∞ 2.3 –º–ª–Ω ‚ÇΩ. –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ö–µ–º–µ—Ä–æ–≤–æ —É–ø–∞–ª–∞ –Ω–∞ 12%. –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å—Ä–æ—á–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–ª–∞–Ω–µ—Ä–∫—É —Å –∫–æ–º–∞–Ω–¥–æ–π. –ù—É–∂–Ω–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è?</p>
          </div>
        </div>
      </div>

      {/* Call to Action */}
      <div className="bg-gradient-to-r from-green-500 to-blue-500 text-white rounded-lg p-6 text-center">
        <h3 className="text-xl font-bold mb-2">üéØ –ì–æ—Ç–æ–≤—ã –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å AI?</h3>
        <p className="mb-4">–ú–ê–ö–° —É–∂–µ –∂–¥–µ—Ç –≤–∞—Å –≤ Telegram –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</p>
        <a 
          href="https://t.me/aitest123432_bot" 
          target="_blank" 
          rel="noopener noreferrer"
          className="bg-white text-blue-600 px-6 py-3 rounded-lg font-semibold hover:bg-gray-100 transition-colors inline-block"
        >
          üì± –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –≤ Telegram
        </a>
      </div>
    </div>
  );
};

// Smart Notifications Component  
const SmartNotifications = () => {
  const [notificationStats, setNotificationStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [telegramChatId, setTelegramChatId] = useState('');
  const [sendingDaily, setSendingDaily] = useState(false);

  useEffect(() => {
    fetchNotificationStats();
  }, []);

  const fetchNotificationStats = async () => {
    try {
      const response = await axios.get(`${API}/conversation/stats`);
      setNotificationStats(response.data);
    } catch (error) {
      console.error('Error fetching notification stats:', error);
    } finally {
      setLoading(false);
    }
  };

  const sendDailySummary = async () => {
    if (!telegramChatId.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ Telegram Chat ID');
      return;
    }

    setSendingDaily(true);
    try {
      const response = await axios.post(`${API}/notifications/daily-summary?chat_id=${telegramChatId}`);
      if (response.data.success) {
        alert('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram!');
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏');
      }
    } catch (error) {
      console.error('Error sending daily summary:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏');
    } finally {
      setSendingDaily(false);
    }
  };

  const sendTestAlert = async () => {
    if (!telegramChatId.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ Telegram Chat ID');
      return;
    }

    try {
      const response = await axios.post(`${API}/notifications/alert?chat_id=${telegramChatId}&alert_type=system_test`, {
        message: "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –í–∞—Å–î–æ–º"
      });
      if (response.data.success) {
        alert('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      }
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-32">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-900">üì¢ Smart —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
      
      {/* Stats */}
      {notificationStats && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-white rounded-lg shadow p-4">
            <h3 className="font-medium text-gray-700">–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π</h3>
            <p className="text-2xl font-bold text-blue-600">{notificationStats.total_sessions || 0}</p>
          </div>
          <div className="bg-white rounded-lg shadow p-4">
            <h3 className="font-medium text-gray-700">–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏</h3>
            <p className="text-2xl font-bold text-green-600">{notificationStats.active_sessions || 0}</p>
          </div>
          <div className="bg-white rounded-lg shadow p-4">
            <h3 className="font-medium text-gray-700">–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</h3>
            <p className="text-2xl font-bold text-purple-600">{notificationStats.total_messages || 0}</p>
          </div>
          <div className="bg-white rounded-lg shadow p-4">
            <h3 className="font-medium text-gray-700">–ó–∞ 24 —á–∞—Å–∞</h3>
            <p className="text-2xl font-bold text-orange-600">{notificationStats.recent_messages_24h || 0}</p>
          </div>
        </div>
      )}

      {/* Notification Controls */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h3 className="text-lg font-semibold mb-4">üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Telegram Chat ID (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
            </label>
            <input
              type="text"
              value={telegramChatId}
              onChange={(e) => setTelegramChatId(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram Chat ID"
              className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <p className="text-xs text-gray-500 mt-1">
              üí° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å Chat ID, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @userinfobot –≤ Telegram
            </p>
          </div>

          <div className="flex space-x-4">
            <button
              onClick={sendDailySummary}
              disabled={sendingDaily || !telegramChatId.trim()}
              className="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {sendingDaily ? '‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é...' : 'üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É'}
            </button>
            
            <button
              onClick={sendTestAlert}
              disabled={!telegramChatId.trim()}
              className="bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            </button>
          </div>
        </div>
      </div>

      {/* Notification Features */}
      <div className="bg-gradient-to-br from-purple-50 to-blue-50 rounded-lg p-6">
        <h3 className="text-lg font-semibold mb-4 text-purple-800">üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Smart —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4 className="font-medium text-gray-800 mb-2">üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</h4>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤ 8:00 —É—Ç—Ä–∞</li>
              <li>‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º</li>
              <li>‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö</li>
              <li>‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–∞–¥–µ–Ω–∏–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏</li>
              <li>‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö</li>
            </ul>
          </div>
          
          <div>
            <h4 className="font-medium text-gray-800 mb-2">ü§ñ AI-—Ñ—É–Ω–∫—Ü–∏–∏:</h4>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã</li>
              <li>‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</li>
              <li>‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –±–∏–∑–Ω–µ—Å–∞</li>
              <li>‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</li>
              <li>‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ KPI –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
            </ul>
          </div>
        </div>

        <div className="mt-4 p-4 bg-white rounded-lg border-l-4 border-blue-500">
          <p className="text-sm text-gray-700">
            <strong>üí° –°–æ–≤–µ—Ç:</strong> –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 
            –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–æ–¥–æ–∫ –∏ –≤–∞–∂–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä—è–º–æ –≤ Telegram. 
            AI –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
          </p>
        </div>
      </div>
    </div>
  );
};

// Main App Component
function App() {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [userProfile, setUserProfile] = useState(null);
  const [showOnboarding, setShowOnboarding] = useState(false);

  // Check if user needs onboarding
  useEffect(() => {
    const savedProfile = localStorage.getItem('userProfile');
    if (savedProfile) {
      setUserProfile(JSON.parse(savedProfile));
    } else {
      // Show onboarding for new users
      const hasVisited = localStorage.getItem('hasVisited');
      if (!hasVisited) {
        setShowOnboarding(true);
        localStorage.setItem('hasVisited', 'true');
      }
    }
  }, []);

  const handleOnboardingComplete = (profile) => {
    setUserProfile(profile);
    localStorage.setItem('userProfile', JSON.stringify(profile));
    setShowOnboarding(false);
  };

  const renderContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return <Dashboard />;
      case 'employees':
        return <Employees />;
      case 'analytics':
        return <Analytics />;
      case 'smart-planning':
        return <SmartPlanning />;
      case 'client-management':
        return <ClientManagement />;
      case 'live-voice':
        return <LiveVoiceChat />;
      case 'meetings':
        return <MeetingRecorder />;
      case 'notifications':
        return <SmartNotifications />;
      case 'telegram-info':
        return <TelegramInfo />;
      default:
        return <Dashboard />;
    }
  };

  // Show onboarding if needed
  if (showOnboarding) {
    return <OnboardingChat onComplete={handleOnboardingComplete} />;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">
            üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –í–∞—Å–îom
            {userProfile && (
              <span className="text-2xl text-blue-600 ml-4">
                –ü—Ä–∏–≤–µ—Ç, {userProfile.name}! üëã
              </span>
            )}
          </h1>
          <p className="text-gray-600">
            –ê–Ω–∞–ª–∏—Ç–∏–∫–∞, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ú–ê–ö–° —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Telegram: @aitest123432_bot
          </p>
          {userProfile && (
            <div className="mt-2 flex space-x-4 text-sm text-gray-500">
              <span>üíº {userProfile.role}</span>
              <span>‚≠ê –û–ø—ã—Ç: {userProfile.experience}</span>
              <button 
                onClick={() => setShowOnboarding(true)}
                className="text-blue-500 hover:underline"
              >
                ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
              </button>
            </div>
          )}
        </div>

        <Navigation activeTab={activeTab} setActiveTab={setActiveTab} />
        
        {renderContent()}
      </div>
    </div>
  );
}

export default App;