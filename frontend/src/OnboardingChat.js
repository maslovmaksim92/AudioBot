import React, { useState, useEffect } from 'react';
import axios from 'axios';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;

const OnboardingChat = ({ onComplete }) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [userProfile, setUserProfile] = useState({});
  const [chatMessages, setChatMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const onboardingQuestions = [
    {
      id: 'greeting',
      message: '–ü—Ä–∏–≤–µ—Ç! –Ø –ú–ê–ö–°, –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?',
      field: 'name',
      type: 'text'
    },
    {
      id: 'role',
      message: '–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏?',
      field: 'role',
      type: 'select',
      options: ['–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä', '–î–∏—Ä–µ–∫—Ç–æ—Ä', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫']
    },
    {
      id: 'experience',
      message: '–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–º –±–∏–∑–Ω–µ—Å–µ?',
      field: 'experience',
      type: 'text'
    },
    {
      id: 'goals',
      message: '–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏ —É –≤–∞—Å –≤ –∫–æ–º–ø–∞–Ω–∏–∏?',
      field: 'goals',
      type: 'textarea'
    },
    {
      id: 'challenges',
      message: '–° –∫–∞–∫–∏–º–∏ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –≤—ã —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å –≤ —Ä–∞–±–æ—Ç–µ?',
      field: 'challenges',
      type: 'textarea'
    },
    {
      id: 'expectations',
      message: '–ß—Ç–æ –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞? –ö–∞–∫ —è –º–æ–≥—É –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–º–æ—á—å?',
      field: 'expectations',
      type: 'textarea'
    },
    {
      id: 'schedule',
      message: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–±—ã—á–Ω–æ–º —Ä–∞–±–æ—á–µ–º –¥–Ω–µ –∏ –≥—Ä–∞—Ñ–∏–∫–µ',
      field: 'schedule',
      type: 'textarea'
    },
    {
      id: 'preferences',
      message: '–ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: –ø–æ–¥—Ä–æ–±–Ω–æ –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ? –ß–∞—Å—Ç–æ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω–æ–µ?',
      field: 'preferences',
      type: 'textarea'
    }
  ];

  useEffect(() => {
    // Start with greeting
    if (chatMessages.length === 0) {
      setChatMessages([{
        type: 'ai',
        content: onboardingQuestions[0].message,
        timestamp: new Date()
      }]);
    }
  }, []);

  const handleAnswer = async (answer) => {
    const currentQuestion = onboardingQuestions[currentStep];
    
    // Add user message
    setChatMessages(prev => [...prev, {
      type: 'user',
      content: answer,
      timestamp: new Date()
    }]);

    // Save answer to profile
    const newProfile = {
      ...userProfile,
      [currentQuestion.field]: answer
    };
    setUserProfile(newProfile);

    setIsLoading(true);

    try {
      // Send to AI for processing and storage
      await axios.post(`${BACKEND_URL}/api/user/profile/update`, {
        field: currentQuestion.field,
        value: answer,
        profile: newProfile
      });

      // Move to next question
      if (currentStep < onboardingQuestions.length - 1) {
        setTimeout(() => {
          const nextQuestion = onboardingQuestions[currentStep + 1];
          setChatMessages(prev => [...prev, {
            type: 'ai',
            content: nextQuestion.message,
            timestamp: new Date()
          }]);
          setCurrentStep(currentStep + 1);
          setIsLoading(false);
        }, 1000);
      } else {
        // Onboarding complete
        const finalMessage = `–û—Ç–ª–∏—á–Ω–æ, ${newProfile.name}! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é –≤–∞—Å –ª—É—á—à–µ –∏ —Å–º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–º–æ—â—å. 

üìã **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:**
üë§ –ò–º—è: ${newProfile.name}
üíº –†–æ–ª—å: ${newProfile.role}
‚≠ê –û–ø—ã—Ç: ${newProfile.experience}
üéØ –¶–µ–ª–∏: ${newProfile.goals}

–¢–µ–ø–µ—Ä—å —è –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ —Å—Ç–∏–ª—å —Ä–∞–±–æ—Ç—ã –≤–æ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–µ–π!`;

        setChatMessages(prev => [...prev, {
          type: 'ai',
          content: finalMessage,
          timestamp: new Date()
        }]);

        setTimeout(() => {
          onComplete(newProfile);
        }, 3000);
        setIsLoading(false);
      }
    } catch (error) {
      console.error('Error saving profile:', error);
      setIsLoading(false);
    }
  };

  const handleTextSubmit = () => {
    if (inputMessage.trim()) {
      handleAnswer(inputMessage);
      setInputMessage('');
    }
  };

  const currentQuestion = onboardingQuestions[currentStep];
  
  return (
    <div className="onboarding-chat min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-6">
      <div className="max-w-2xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4">
            <span className="text-white text-3xl">ü§ñ</span>
          </div>
          <h1 className="text-3xl font-bold text-gray-800 mb-2">–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –ú–ê–ö–°</h1>
          <p className="text-gray-600">–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, —á—Ç–æ–±—ã —è –º–æ–≥ –ª—É—á—à–µ –ø–æ–º–æ—á—å –≤–∞–º</p>
          
          {/* Progress Bar */}
          <div className="mt-6 bg-gray-200 rounded-full h-2 max-w-md mx-auto">
            <div 
              className="bg-gradient-to-r from-blue-500 to-purple-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${((currentStep + 1) / onboardingQuestions.length) * 100}%` }}
            />
          </div>
          <p className="text-sm text-gray-500 mt-2">
            –®–∞–≥ {currentStep + 1} –∏–∑ {onboardingQuestions.length}
          </p>
        </div>

        {/* Chat Messages */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6 max-h-96 overflow-y-auto">
          <div className="space-y-4">
            {chatMessages.map((message, index) => (
              <div
                key={index}
                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-xs lg:max-w-md px-4 py-3 rounded-lg ${
                    message.type === 'user'
                      ? 'bg-blue-500 text-white'
                      : 'bg-gray-100 text-gray-900'
                  }`}
                >
                  <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                  <p className="text-xs opacity-70 mt-1">
                    {message.timestamp.toLocaleTimeString()}
                  </p>
                </div>
              </div>
            ))}
            
            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-gray-100 rounded-lg px-4 py-2">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Input Section */}
        {currentStep < onboardingQuestions.length && !isLoading && (
          <div className="bg-white rounded-lg shadow-lg p-6">
            {currentQuestion.type === 'select' ? (
              <div className="space-y-3">
                <p className="font-medium text-gray-800">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:</p>
                <div className="grid grid-cols-1 gap-2">
                  {currentQuestion.options.map((option, index) => (
                    <button
                      key={index}
                      onClick={() => handleAnswer(option)}
                      className="text-left p-3 border border-gray-200 rounded-lg hover:bg-blue-50 hover:border-blue-300 transition-colors"
                    >
                      {option}
                    </button>
                  ))}
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                {currentQuestion.type === 'textarea' ? (
                  <textarea
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ..."
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
                    rows={4}
                    onKeyPress={(e) => {
                      if (e.key === 'Enter' && e.ctrlKey) {
                        handleTextSubmit();
                      }
                    }}
                  />
                ) : (
                  <input
                    type="text"
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    onKeyPress={(e) => {
                      if (e.key === 'Enter') {
                        handleTextSubmit();
                      }
                    }}
                  />
                )}
                
                <div className="flex justify-between items-center">
                  <p className="text-sm text-gray-500">
                    {currentQuestion.type === 'textarea' ? 'Ctrl+Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏' : 'Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏'}
                  </p>
                  <button
                    onClick={handleTextSubmit}
                    disabled={!inputMessage.trim()}
                    className="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    –û—Ç–≤–µ—Ç–∏—Ç—å
                  </button>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Skip Option */}
        {currentStep > 0 && currentStep < onboardingQuestions.length && !isLoading && (
          <div className="text-center mt-4">
            <button
              onClick={() => handleAnswer('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')}
              className="text-gray-500 text-sm hover:text-gray-700"
            >
              –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default OnboardingChat;