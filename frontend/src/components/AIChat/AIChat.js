import React, { useState, useEffect, useRef } from 'react';
import { useApp } from '../../context/AppContext';
import { apiService } from '../../services/apiService';
import { Card, Button, LoadingSpinner } from '../UI';

const AIChat = () => {
  const { actions } = useApp();
  const [isListening, setIsListening] = useState(false);
  const [messages, setMessages] = useState([]);
  const [currentMessage, setCurrentMessage] = useState('');
  const [textInput, setTextInput] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const recognitionRef = useRef(null);
  const synthRef = useRef(null);
  const messagesEndRef = useRef(null);

  useEffect(() => {
    console.log('üìû AI Chat mounted');
    initSpeechRecognition();
    initSpeechSynthesis();
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI
    setMessages([{
      type: 'ai',
      text: '–ü—Ä–∏–≤–µ—Ç! –Ø VasDom AI, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π. –£ –Ω–∞—Å 348 –¥–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏ 6 —Ä–∞–±–æ—á–∏—Ö –±—Ä–∏–≥–∞–¥. –û —á–µ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?',
      timestamp: new Date()
    }]);
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const initSpeechRecognition = () => {
    if ('webkitSpeechRecognition' in window) {
      const recognition = new window.webkitSpeechRecognition();
      recognition.continuous = false;
      recognition.interimResults = true;
      recognition.lang = 'ru-RU';
      
      recognition.onresult = (event) => {
        let transcript = '';
        let interim = '';
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
          if (event.results[i].isFinal) {
            transcript = event.results[i][0].transcript;
            console.log('üé§ Final voice input:', transcript);
            handleMessage(transcript);
          } else {
            interim = event.results[i][0].transcript;
          }
        }
        
        setCurrentMessage(interim);
      };
      
      recognition.onend = () => {
        setIsListening(false);
        setCurrentMessage('');
        console.log('üé§ Voice recognition ended');
      };
      
      recognition.onerror = (event) => {
        console.error('‚ùå Speech recognition error:', event.error);
        setIsListening(false);
        setCurrentMessage('');
        actions.addNotification({
          type: 'error',
          message: `–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: ${event.error}`
        });
      };
      
      recognitionRef.current = recognition;
      console.log('‚úÖ Speech recognition initialized');
    } else {
      console.warn('‚ö†Ô∏è Speech recognition not supported');
    }
  };

  const initSpeechSynthesis = () => {
    if ('speechSynthesis' in window) {
      synthRef.current = window.speechSynthesis;
      console.log('‚úÖ Speech synthesis initialized');
    } else {
      console.warn('‚ö†Ô∏è Speech synthesis not supported');
    }
  };

  const handleMessage = async (text) => {
    if (!text?.trim()) return;

    // Add user message
    const userMessage = {
      type: 'user',
      text: text.trim(),
      timestamp: new Date()
    };
    setMessages(prev => [...prev, userMessage]);
    setIsProcessing(true);

    try {
      console.log('ü§ñ Sending message to AI:', text);
      const response = await apiService.sendVoiceMessage(text);
      
      if (response && response.response) {
        const aiMessage = {
          type: 'ai',
          text: response.response,
          timestamp: new Date()
        };
        setMessages(prev => [...prev, aiMessage]);
        
        // Text-to-speech for AI response
        speakText(response.response);
        
        actions.addNotification({
          type: 'success',
          message: 'AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω'
        });
      } else {
        throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI');
      }
    } catch (error) {
      console.error('‚ùå AI chat error:', error);
      const errorMessage = {
        type: 'ai',
        text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        timestamp: new Date(),
        isError: true
      };
      setMessages(prev => [...prev, errorMessage]);
      
      actions.addNotification({
        type: 'error',
        message: '–û—à–∏–±–∫–∞ AI —á–∞—Ç–∞'
      });
    } finally {
      setIsProcessing(false);
    }
  };

  const speakText = (text) => {
    if (synthRef.current && text) {
      synthRef.current.cancel(); // Cancel any ongoing speech
      
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'ru-RU';
      utterance.rate = 0.9;
      utterance.pitch = 1;
      utterance.volume = 0.8;
      
      synthRef.current.speak(utterance);
      console.log('üîä Speaking AI response');
    }
  };

  const startListening = () => {
    if (recognitionRef.current && !isListening) {
      setIsListening(true);
      setCurrentMessage('');
      recognitionRef.current.start();
      console.log('üé§ Started listening...');
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop();
    }
  };

  const handleTextSubmit = (e) => {
    e.preventDefault();
    if (textInput.trim()) {
      handleMessage(textInput);
      setTextInput('');
    }
  };

  const clearChat = () => {
    setMessages([{
      type: 'ai',
      text: '–ß–∞—Ç –æ—á–∏—â–µ–Ω. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
      timestamp: new Date()
    }]);
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">AI –ß–∞—Ç</h1>
          <p className="text-gray-600">–ì–æ–ª–æ—Å–æ–≤–æ–µ –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ —Å VasDom AI</p>
        </div>
        <Button variant="secondary" onClick={clearChat}>
          üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç
        </Button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Chat Messages */}
        <div className="lg:col-span-2">
          <Card className="h-96 flex flex-col">
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {messages.map((message, index) => (
                <div
                  key={index}
                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                      message.type === 'user'
                        ? 'bg-blue-600 text-white'
                        : message.isError
                        ? 'bg-red-100 text-red-800 border border-red-200'
                        : 'bg-gray-100 text-gray-800'
                    }`}
                  >
                    <p className="text-sm">{message.text}</p>
                    <p className="text-xs opacity-70 mt-1">
                      {message.timestamp.toLocaleTimeString('ru-RU')}
                    </p>
                  </div>
                </div>
              ))}
              
              {isProcessing && (
                <div className="flex justify-start">
                  <div className="bg-gray-100 rounded-lg p-4">
                    <LoadingSpinner size="sm" text="AI –¥—É–º–∞–µ—Ç..." />
                  </div>
                </div>
              )}
              
              {currentMessage && (
                <div className="flex justify-end">
                  <div className="bg-blue-200 text-blue-800 px-4 py-2 rounded-lg max-w-xs lg:max-w-md">
                    <p className="text-sm">{currentMessage}</p>
                    <p className="text-xs opacity-70">–ì–æ–≤–æ—Ä–∏—Ç–µ...</p>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>

            {/* Text Input */}
            <div className="border-t p-4">
              <form onSubmit={handleTextSubmit} className="flex space-x-2">
                <input
                  type="text"
                  value={textInput}
                  onChange={(e) => setTextInput(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  disabled={isProcessing}
                />
                <Button type="submit" disabled={!textInput.trim() || isProcessing}>
                  üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </Button>
              </form>
            </div>
          </Card>
        </div>

        {/* Voice Controls */}
        <div className="space-y-4">
          <Card title="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ">
            <div className="space-y-4">
              <div className="text-center">
                <Button
                  onClick={isListening ? stopListening : startListening}
                  variant={isListening ? 'danger' : 'primary'}
                  size="lg"
                  className="w-full"
                  disabled={isProcessing}
                >
                  {isListening ? '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : 'üé§ –ù–∞—á–∞—Ç—å –≥–æ–≤–æ—Ä–∏—Ç—å'}
                </Button>
              </div>
              
              {!('webkitSpeechRecognition' in window) && (
                <p className="text-sm text-red-600 text-center">
                  –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
                </p>
              )}
              
              {isListening && (
                <div className="text-center">
                  <div className="inline-block w-4 h-4 bg-red-500 rounded-full animate-pulse"></div>
                  <p className="text-sm text-gray-600 mt-2">–°–ª—É—à–∞—é...</p>
                </div>
              )}
            </div>
          </Card>

          <Card title="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏">
            <div className="space-y-2 text-sm text-gray-600">
              <p>‚Ä¢ "–°–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –¥–æ–º–æ–≤?"</p>
              <p>‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—Ä–∏–≥–∞–¥–∞–º"</p>
              <p>‚Ä¢ "–ö–∞–∫–∏–µ –¥–æ–º–∞ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è?"</p>
              <p>‚Ä¢ "–ö–∞–∫ –¥–µ–ª–∞ —Å –ø–ª–∞–Ω–µ—Ä–∫–∞–º–∏?"</p>
            </div>
          </Card>

          <Card title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞">
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>–°–æ–æ–±—â–µ–Ω–∏–π:</span>
                <span className="font-semibold">{messages.length}</span>
              </div>
              <div className="flex justify-between">
                <span>–°—Ç–∞—Ç—É—Å AI:</span>
                <span className="text-green-600">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>
              </div>
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default AIChat;