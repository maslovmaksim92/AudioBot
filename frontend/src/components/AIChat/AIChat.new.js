import React, { useEffect, useRef, useState } from 'react';
import './AIChat.css';

const BACKEND_URL = (typeof import.meta !== 'undefined' && import.meta.env && import.meta.env.REACT_APP_BACKEND_URL) || process.env.REACT_APP_BACKEND_URL;

const AIChat = () => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const messagesEndRef = useRef(null);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const send = async () => {
    const q = input.trim();
    if (!q) return;

    const userMessage = {
      role: 'user',
      text: q,
      timestamp: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setLoading(true);

    try {
      const res = await fetch(`${BACKEND_URL}/api/ai-knowledge/answer`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ question: q })
      });
      
      const data = await res.json();
      const text = data.answer || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.';
      
      const assistantMessage = {
        role: 'assistant',
        text,
        timestamp: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (e) {
      const errorMessage = {
        role: 'assistant',
        text: '–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.',
        timestamp: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      send();
    }
  };

  return (
    <div className="ai-chat-container">
      <div className="ai-chat-header">
        <h1 className="ai-chat-title">ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫ VasDom</h1>
        <p className="ai-chat-subtitle">
          –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–º–∞—Ö, –≥—Ä–∞—Ñ–∏–∫–∞—Ö —É–±–æ—Ä–∫–∏, –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞—Ö
        </p>
      </div>

      <div className="ai-chat-messages">
        {messages.length === 0 && (
          <div className="empty-state">
            <div className="empty-state-icon">üí¨</div>
            <div className="empty-state-text">–ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º</div>
            <div className="empty-state-subtext">
              –ü—Ä–∏–º–µ—Ä—ã: "–ö–æ–≥–¥–∞ —É–±–æ—Ä–∫–∞ –ë–∏–ª–∏–±–∏–Ω–∞ 6?", "–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ç–∞—Ä—à–µ–≥–æ –ö—É–±—è–∫–∞ 5"
            </div>
          </div>
        )}

        {messages.map((m, i) => (
          <div key={i} className={`ai-chat-message ${m.role}`}>
            <div className={`message-avatar ${m.role}`}>
              {m.role === 'user' ? 'üë§' : 'ü§ñ'}
            </div>
            <div>
              <div className={`message-bubble ${m.role}`}>
                {m.text}
              </div>
              <div className="message-time">{m.timestamp}</div>
            </div>
          </div>
        ))}

        {loading && (
          <div className="ai-chat-message assistant">
            <div className="message-avatar assistant">ü§ñ</div>
            <div className="message-bubble assistant">
              <div className="typing-indicator">
                <div className="typing-dot"></div>
                <div className="typing-dot"></div>
                <div className="typing-dot"></div>
              </div>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      <div className="ai-chat-input-container">
        <input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={handleKeyPress}
          placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          className="ai-chat-input"
        />
        <button 
          onClick={send} 
          disabled={loading || !input.trim()} 
          className="ai-chat-send-btn"
        >
          {loading ? '‚è≥' : 'üì§'} {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
        </button>
      </div>
    </div>
  );
};

export default AIChat;