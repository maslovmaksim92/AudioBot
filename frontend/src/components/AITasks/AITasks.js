import React, { useState, useEffect } from 'react';
import { useApp } from '../../context/AppContext';
import { apiService } from '../../services/apiService';
import { Card, Button, LoadingSpinner } from '../UI';

const AITasks = () => {
  const { actions } = useApp();
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(false);
  const [newTaskTitle, setNewTaskTitle] = useState('');
  const [newTaskDescription, setNewTaskDescription] = useState('');

  useEffect(() => {
    fetchTasks();
  }, []);

  const fetchTasks = async () => {
    setLoading(true);
    try {
      const response = await apiService.getAITasks();
      if (response.status === 'success') {
        setTasks(response.tasks || []);
        actions.addNotification({
          type: 'success',
          message: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.tasks?.length || 0} AI –∑–∞–¥–∞—á`
        });
      }
    } catch (error) {
      console.error('‚ùå Error fetching AI tasks:', error);
      // Fallback demo data
      const mockTasks = [
        {
          id: 1,
          title: '–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—Ä–∏–≥–∞–¥',
          description: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –±—Ä–∏–≥–∞–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü',
          status: 'pending',
          scheduled_time: new Date(Date.now() + 86400000).toISOString(),
          created_at: new Date().toISOString()
        },
        {
          id: 2,
          title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤',
          description: '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –±—Ä–∏–≥–∞–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–æ–º–æ–≤',
          status: 'in_progress',
          scheduled_time: new Date(Date.now() + 172800000).toISOString(),
          created_at: new Date(Date.now() - 86400000).toISOString()
        }
      ];
      setTasks(mockTasks);
      actions.addNotification({
        type: 'warning',
        message: '–ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ–º–æ AI –∑–∞–¥–∞—á–∏'
      });
    } finally {
      setLoading(false);
    }
  };

  const createTask = async () => {
    if (!newTaskTitle.trim() || !newTaskDescription.trim()) {
      actions.addNotification({
        type: 'warning',
        message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'
      });
      return;
    }

    try {
      const taskData = {
        title: newTaskTitle,
        description: newTaskDescription,
        scheduled_time: new Date(Date.now() + 86400000).toISOString() // Tomorrow
      };

      const response = await apiService.createAITask(taskData);
      if (response.status === 'success') {
        setNewTaskTitle('');
        setNewTaskDescription('');
        await fetchTasks();
        actions.addNotification({
          type: 'success',
          message: 'AI –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞'
        });
      }
    } catch (error) {
      console.error('‚ùå Error creating AI task:', error);
      actions.addNotification({
        type: 'error',
        message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI –∑–∞–¥–∞—á–∏'
      });
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'pending': return 'bg-yellow-100 text-yellow-800';
      case 'in_progress': return 'bg-blue-100 text-blue-800';
      case 'completed': return 'bg-green-100 text-green-800';
      case 'failed': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusText = (status) => {
    const statusMap = {
      'pending': '–û–∂–∏–¥–∞–µ—Ç',
      'in_progress': '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
      'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
      'failed': '–û—à–∏–±–∫–∞'
    };
    return statusMap[status] || status;
  };

  return (
    &lt;div className="p-6"&gt;
      &lt;div className="flex justify-between items-center mb-6"&gt;
        &lt;div&gt;
          &lt;h1 className="text-3xl font-bold text-gray-900"&gt;AI –ó–∞–¥–∞—á–∏&lt;/h1&gt;
          &lt;p className="text-gray-600"&gt;–£–º–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è&lt;/p&gt;
        &lt;/div&gt;
        &lt;Button onClick={fetchTasks} loading={loading}&gt;
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        &lt;/Button&gt;
      &lt;/div&gt;

      {/* Create New Task */}
      &lt;Card title="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é AI –∑–∞–¥–∞—á—É" className="mb-6"&gt;
        &lt;div className="space-y-4"&gt;
          &lt;div&gt;
            &lt;label className="block text-sm font-medium text-gray-700 mb-1"&gt;
              –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            &lt;/label&gt;
            &lt;input
              type="text"
              value={newTaskTitle}
              onChange={(e) => setNewTaskTitle(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ..."
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            /&gt;
          &lt;/div&gt;
          
          &lt;div&gt;
            &lt;label className="block text-sm font-medium text-gray-700 mb-1"&gt;
              –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            &lt;/label&gt;
            &lt;textarea
              value={newTaskDescription}
              onChange={(e) => setNewTaskDescription(e.target.value)}
              placeholder="–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å AI..."
              rows={3}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            /&gt;
          &lt;/div&gt;
          
          &lt;Button onClick={createTask} disabled={!newTaskTitle.trim() || !newTaskDescription.trim()}&gt;
            üß† –°–æ–∑–¥–∞—Ç—å AI –∑–∞–¥–∞—á—É
          &lt;/Button&gt;
        &lt;/div&gt;
      &lt;/Card&gt;

      {/* Tasks List */}
      {loading ? (
        &lt;div className="flex justify-center py-12"&gt;
          &lt;LoadingSpinner size="lg" text="–ó–∞–≥—Ä—É–∑–∫–∞ AI –∑–∞–¥–∞—á..." /&gt;
        &lt;/div&gt;
      ) : tasks.length > 0 ? (
        &lt;div className="grid grid-cols-1 lg:grid-cols-2 gap-6"&gt;
          {tasks.map(task => (
            &lt;Card key={task.id} className="hover:shadow-lg transition-shadow"&gt;
              &lt;div className="space-y-4"&gt;
                &lt;div className="flex justify-between items-start"&gt;
                  &lt;h3 className="font-semibold text-gray-900"&gt;{task.title}&lt;/h3&gt;
                  &lt;span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(task.status)}`}&gt;
                    {getStatusText(task.status)}
                  &lt;/span&gt;
                &lt;/div&gt;
                
                &lt;p className="text-gray-700 text-sm"&gt;{task.description}&lt;/p&gt;
                
                &lt;div className="space-y-2 text-sm text-gray-600"&gt;
                  {task.scheduled_time && (
                    &lt;div className="flex justify-between"&gt;
                      &lt;span&gt;–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:&lt;/span&gt;
                      &lt;span&gt;{new Date(task.scheduled_time).toLocaleString('ru-RU')}&lt;/span&gt;
                    &lt;/div&gt;
                  )}
                  
                  {task.created_at && (
                    &lt;div className="flex justify-between"&gt;
                      &lt;span&gt;–°–æ–∑–¥–∞–Ω–∞:&lt;/span&gt;
                      &lt;span&gt;{new Date(task.created_at).toLocaleString('ru-RU')}&lt;/span&gt;
                    &lt;/div&gt;
                  )}
                  
                  {task.recurring && (
                    &lt;div className="flex justify-between"&gt;
                      &lt;span&gt;–ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è:&lt;/span&gt;
                      &lt;span className="text-blue-600"&gt;–î–∞&lt;/span&gt;
                    &lt;/div&gt;
                  )}
                &lt;/div&gt;
                
                &lt;div className="pt-3 border-t border-gray-100"&gt;
                  &lt;div className="flex justify-between items-center"&gt;
                    &lt;span className="text-xs text-gray-500"&gt;ID: {task.id}&lt;/span&gt;
                    &lt;div className="flex space-x-2"&gt;
                      {task.status === 'pending' && (
                        &lt;Button size="sm" variant="primary"&gt;‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å&lt;/Button&gt;
                      )}
                      {task.status === 'in_progress' && (
                        &lt;Button size="sm" variant="warning"&gt;‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å&lt;/Button&gt;
                      )}
                      &lt;Button size="sm" variant="ghost"&gt;üëÅÔ∏è –î–µ—Ç–∞–ª–∏&lt;/Button&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/Card&gt;
          ))}
        &lt;/div&gt;
      ) : (
        &lt;Card&gt;
          &lt;div className="text-center py-12"&gt;
            &lt;div className="text-6xl mb-4"&gt;üß†&lt;/div&gt;
            &lt;h3 className="text-lg font-medium text-gray-900 mb-2"&gt;–ù–µ—Ç AI –∑–∞–¥–∞—á&lt;/h3&gt;
            &lt;p className="text-gray-600"&gt;
              –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —É–º–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            &lt;/p&gt;
          &lt;/div&gt;
        &lt;/Card&gt;
      )}

      {/* AI Features Info */}
      &lt;Card title="ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI" className="mt-6"&gt;
        &lt;div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm text-gray-600"&gt;
          &lt;div&gt;
            &lt;h4 className="font-medium text-gray-900 mb-2"&gt;–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã:&lt;/h4&gt;
            &lt;ul className="space-y-1"&gt;
              &lt;li&gt;‚Ä¢ –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—Ä–∏–≥–∞–¥&lt;/li&gt;
              &lt;li&gt;‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ —Ä–∞–±–æ—Ç&lt;/li&gt;
              &lt;li&gt;‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–æ–º–æ–≤&lt;/li&gt;
              &lt;li&gt;‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
          &lt;div&gt;
            &lt;h4 className="font-medium text-gray-900 mb-2"&gt;–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:&lt;/h4&gt;
            &lt;ul className="space-y-1"&gt;
              &lt;li&gt;‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á&lt;/li&gt;
              &lt;li&gt;‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö&lt;/li&gt;
              &lt;li&gt;‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤&lt;/li&gt;
              &lt;li&gt;‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/Card&gt;
    &lt;/div&gt;
  );
};

export default AITasks;