import React, { useState, useEffect } from 'react';
import './AITasks.css';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || import.meta?.env?.REACT_APP_BACKEND_URL;

const AITasks = () => {
  const [aiTasks, setAiTasks] = useState([]);
  const [showAddModal, setShowAddModal] = useState(false);
  const [selectedDate, setSelectedDate] = useState(new Date());
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–ú–∞—Å–ª–æ–≤ –ú–∞–∫—Å–∏–º)
  const userId = '7be8f89e-f2bd-4f24-9798-286fddc58358';
  
  const [taskForm, setTaskForm] = useState({
    title: '',
    type: 'remind',
    time: '12:00',
    date: new Date().toISOString().split('T')[0],
    description: '',
    repeat: 'once'
  });

  useEffect(() => {
    loadAiTasks();
  }, []);

  const loadAiTasks = async () => {
    try {
      const res = await fetch(`${BACKEND_URL}/api/ai/tasks?user_id=${userId}&limit=100`);
      
      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }
      
      const data = await res.json();
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç UI
      const formattedTasks = data.map(task => ({
        id: task.id,
        title: task.title,
        type: mapTaskTypeToUI(task.task_type),
        time: task.scheduled_at ? new Date(task.scheduled_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }) : '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ',
        repeat: 'once', // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ is_recurring –≤ –º–æ–¥–µ–ª—å
        status: task.status === 'pending' ? 'active' : task.status,
        description: task.description || '',
        last_run: task.completed_at ? new Date(task.completed_at).toLocaleString('ru-RU') : '–ù–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å',
        next_run: task.scheduled_at ? new Date(task.scheduled_at).toLocaleString('ru-RU') : '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'
      }));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏
      const systemTasks = [
        {
          id: 'system-1',
          title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞–Ω–µ—Ä–∫–µ',
          type: 'telegram',
          time: '08:25',
          repeat: 'daily',
          status: 'active',
          description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ –ø–ª–∞–Ω–µ—Ä–∫–µ –≤ 8:30',
          last_run: new Date().toLocaleString('ru-RU'),
          next_run: new Date(Date.now() + 86400000).toLocaleString('ru-RU')
        },
        {
          id: 'system-2',
          title: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Bitrix24',
          type: 'sync',
          time: '–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω',
          repeat: 'interval',
          status: 'active',
          description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–æ–≤, –≥—Ä–∞—Ñ–∏–∫–æ–≤ —É–±–æ—Ä–∫–∏, –∑–∞–¥–∞—á –∏–∑ Bitrix24',
          last_run: new Date().toLocaleString('ru-RU'),
          next_run: new Date(Date.now() + 1800000).toLocaleString('ru-RU')
        }
      ];
      
      setAiTasks([...systemTasks, ...formattedTasks]);
    } catch (e) {
      console.error('Error loading AI tasks:', e);
      // Fallback –∫ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setAiTasks([
        {
          id: 'fallback-1',
          title: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Bitrix24',
          type: 'sync',
          time: '–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω',
          repeat: 'interval',
          status: 'active',
          description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–æ–≤, –≥—Ä–∞—Ñ–∏–∫–æ–≤ —É–±–æ—Ä–∫–∏, –∑–∞–¥–∞—á –∏–∑ Bitrix24',
          last_run: new Date().toLocaleString('ru-RU'),
          next_run: new Date(Date.now() + 1800000).toLocaleString('ru-RU')
        }
      ]);
    }
  };

  // –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –∏–∑ API –≤ UI
  const mapTaskTypeToUI = (apiType) => {
    const mapping = {
      'send_schedule': 'email',
      'reminder': 'remind',
      'report': 'report',
      'notification': 'telegram',
      'custom': 'remind'
    };
    return mapping[apiType] || 'remind';
  };

  // –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –∏–∑ UI –≤ API
  const mapTaskTypeToAPI = (uiType) => {
    const mapping = {
      'email': 'send_schedule',
      'remind': 'reminder',
      'report': 'report',
      'telegram': 'notification',
      'call': 'custom',
      'sync': 'custom'
    };
    return mapping[uiType] || 'custom';
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  const handleCreateTask = async () => {
    try {
      if (!taskForm.title.trim()) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
        return;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è scheduled_at
      const scheduledAt = `${taskForm.date}T${taskForm.time}:00`;
      
      const requestBody = {
        message: `–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: ${taskForm.title}. –¢–∏–ø: ${taskForm.type}. –û–ø–∏—Å–∞–Ω–∏–µ: ${taskForm.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}. –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: ${scheduledAt}`,
        user_id: userId
      };

      const res = await fetch(`${BACKEND_URL}/api/ai/chat`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody)
      });

      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
      setShowAddModal(false);
      setTaskForm({
        title: '',
        type: 'remind',
        time: '12:00',
        date: new Date().toISOString().split('T')[0],
        description: '',
        repeat: 'once'
      });
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      await loadAiTasks();
      
      alert('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
    } catch (e) {
      console.error('Error creating task:', e);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ${e.message}`);
    }
  };

  const taskTypes = [
    { value: 'remind', label: 'üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å', icon: 'üîî' },
    { value: 'call', label: 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å', icon: 'üìû' },
    { value: 'telegram', label: '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram', icon: '‚úâÔ∏è' },
    { value: 'email', label: 'üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å Email', icon: 'üìß' },
    { value: 'sync', label: 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è', icon: 'üîÑ' },
    { value: 'report', label: 'üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç', icon: 'üìä' }
  ];

  const getTypeIcon = (type) => {
    const typeObj = taskTypes.find(t => t.value === type);
    return typeObj ? typeObj.icon : 'üìã';
  };

  const getTypeColor = (type) => {
    const colors = {
      remind: '#3b82f6',
      call: '#8b5cf6',
      telegram: '#06b6d4',
      email: '#f59e0b',
      sync: '#10b981',
      report: '#6366f1'
    };
    return colors[type] || '#64748b';
  };

  // –ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –º–µ—Å—è—Ü
  const getDaysInMonth = (date) => {
    const year = date.getFullYear();
    const month = date.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const days = [];
    
    for (let d = 1; d <= lastDay.getDate(); d++) {
      days.push(new Date(year, month, d));
    }
    
    return days;
  };

  const monthDays = getDaysInMonth(selectedDate);

  return (
    <div className="ai-tasks-container">
      {/* –®–∞–ø–∫–∞ */}
      <div className="ai-tasks-header">
        <div>
          <h1>ü§ñ AI –ó–∞–¥–∞—á–∏ –∏ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</h1>
          <p className="subtitle">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é</p>
        </div>
        <button onClick={() => setShowAddModal(true)} className="btn btn-add">
          ‚ûï –°–æ–∑–¥–∞—Ç—å AI –∑–∞–¥–∞—á—É
        </button>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-icon" style={{background: '#dbeafe'}}>üìã</div>
          <div className="stat-content">
            <div className="stat-value">{aiTasks.length}</div>
            <div className="stat-label">–í—Å–µ–≥–æ –∑–∞–¥–∞—á</div>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon" style={{background: '#d1fae5'}}>üü¢</div>
          <div className="stat-content">
            <div className="stat-value">{aiTasks.filter(t => t.status === 'active').length}</div>
            <div className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon" style={{background: '#fef3c7'}}>‚è∞</div>
          <div className="stat-content">
            <div className="stat-value">24/7</div>
            <div className="stat-label">–†–∞–±–æ—Ç–∞–µ—Ç</div>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon" style={{background: '#e0e7ff'}}>üí∞</div>
          <div className="stat-content">
            <div className="stat-value">~2.5 —á</div>
            <div className="stat-label">–≠–∫–æ–Ω–æ–º–∏—è/–¥–µ–Ω—å</div>
          </div>
        </div>
      </div>

      {/* –ö–∞–ª–µ–Ω–¥–∞—Ä—å */}
      <div className="calendar-section">
        <h2>üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å AI –∑–∞–¥–∞—á - {selectedDate.toLocaleString('ru-RU', { month: 'long', year: 'numeric' })}</h2>
        <div className="calendar-grid">
          {['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'].map(day => (
            <div key={day} className="calendar-day-header">{day}</div>
          ))}
          {monthDays.map(day => {
            const isToday = day.toDateString() === new Date().toDateString();
            const hasTasks = aiTasks.some(t => t.repeat === 'daily' || t.repeat === 'interval');
            
            return (
              <div 
                key={day.toISOString()} 
                className={`calendar-day ${isToday ? 'today' : ''}`}
              >
                <div className="day-number">{day.getDate()}</div>
                {hasTasks && <div className="day-indicator">‚óè</div>}
              </div>
            );
          })}
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ AI –∑–∞–¥–∞—á */}
      <div className="ai-tasks-list">
        <h2>ü§ñ –ê–∫—Ç–∏–≤–Ω—ã–µ AI –∑–∞–¥–∞—á–∏</h2>
        <div className="tasks-grid">
          {aiTasks.map(task => (
            <div key={task.id} className="ai-task-card">
              <div className="task-header">
                <div className="task-icon" style={{background: getTypeColor(task.type)}}>
                  {getTypeIcon(task.type)}
                </div>
                <div className="task-info">
                  <h3>{task.title}</h3>
                  <p className="task-time">‚è∞ {task.time}</p>
                </div>
                <div className={`status-badge ${task.status}`}>
                  {task.status === 'active' ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' : '‚è∏Ô∏è –ü–∞—É–∑–∞'}
                </div>
              </div>

              <p className="task-description">{task.description}</p>

              <div className="task-schedule">
                <div className="schedule-item">
                  <span className="label">–ü–æ–≤—Ç–æ—Ä:</span>
                  <span className="value">
                    {task.repeat === 'daily' ? 'üìÜ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ' : 
                     task.repeat === 'interval' ? 'üîÑ –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω' : 
                     'üîò –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ'}
                  </span>
                </div>
                <div className="schedule-item">
                  <span className="label">–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫:</span>
                  <span className="value">{task.last_run}</span>
                </div>
                <div className="schedule-item">
                  <span className="label">–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫:</span>
                  <span className="value next">{task.next_run}</span>
                </div>
              </div>

              <div className="task-actions">
                <button className="btn-small">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button className="btn-small">‚ö° –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å</button>
                {task.status === 'active' ? (
                  <button className="btn-small">‚è∏Ô∏è –ü–∞—É–∑–∞</button>
                ) : (
                  <button className="btn-small">‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å</button>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* AI –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
      <div className="ai-suggestions">
        <h3>üí° AI –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á</h3>
        <div className="suggestions-grid">
          <div className="suggestion-card" onClick={() => {
            setTaskForm({
              ...taskForm,
              title: '–û–±–∑–≤–æ–Ω –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤',
              type: 'call',
              time: '14:00',
              description: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'
            });
            setShowAddModal(true);
          }}>
            <span className="suggestion-icon">üìû</span>
            <span className="suggestion-text">–û–±–∑–≤–æ–Ω –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤</span>
          </div>
          <div className="suggestion-card" onClick={() => {
            setTaskForm({
              ...taskForm,
              title: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º',
              type: 'report',
              time: '18:00',
              description: '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö –∑–∞ –Ω–µ–¥–µ–ª—é'
            });
            setShowAddModal(true);
          }}>
            <span className="suggestion-icon">üìä</span>
            <span className="suggestion-text">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º</span>
          </div>
          <div className="suggestion-card" onClick={() => {
            setTaskForm({
              ...taskForm,
              title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–∫—Ç–æ–≤',
              type: 'remind',
              time: '10:00',
              description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–º–∞ —Å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –∞–∫—Ç–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'
            });
            setShowAddModal(true);
          }}>
            <span className="suggestion-icon">üìã</span>
            <span className="suggestion-text">–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–∫—Ç–æ–≤</span>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ */}
      {showAddModal && (
        <div className="modal-overlay" onClick={() => setShowAddModal(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2>ü§ñ –°–æ–∑–¥–∞—Ç—å AI –∑–∞–¥–∞—á—É</h2>
              <button onClick={() => setShowAddModal(false)} className="close-btn">‚úï</button>
            </div>

            <div className="modal-body">
              <div className="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ *</label>
                <input
                  type="text"
                  value={taskForm.title}
                  onChange={(e) => setTaskForm({...taskForm, title: e.target.value})}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø–ª–∞–Ω–µ—Ä–∫–µ"
                />
              </div>

              <div className="form-group">
                <label>–¢–∏–ø –∑–∞–¥–∞—á–∏ *</label>
                <select
                  value={taskForm.type}
                  onChange={(e) => setTaskForm({...taskForm, type: e.target.value})}
                >
                  {taskTypes.map(type => (
                    <option key={type.value} value={type.value}>
                      {type.label}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>–î–∞—Ç–∞ *</label>
                  <input
                    type="date"
                    value={taskForm.date}
                    onChange={(e) => setTaskForm({...taskForm, date: e.target.value})}
                  />
                </div>

                <div className="form-group">
                  <label>–í—Ä–µ–º—è *</label>
                  <input
                    type="time"
                    value={taskForm.time}
                    onChange={(e) => setTaskForm({...taskForm, time: e.target.value})}
                  />
                </div>
              </div>

              <div className="form-group">
                <label>–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</label>
                <select
                  value={taskForm.repeat}
                  onChange={(e) => setTaskForm({...taskForm, repeat: e.target.value})}
                >
                  <option value="once">–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ</option>
                  <option value="daily">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</option>
                  <option value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</option>
                  <option value="monthly">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</option>
                </select>
              </div>

              <div className="form-group">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                  value={taskForm.description}
                  onChange={(e) => setTaskForm({...taskForm, description: e.target.value})}
                  rows="3"
                  placeholder="–ß—Ç–æ –¥–æ–ª–∂–Ω–∞ –¥–µ–ª–∞—Ç—å —ç—Ç–∞ –∑–∞–¥–∞—á–∞?"
                />
              </div>
            </div>

            <div className="modal-footer">
              <button onClick={() => setShowAddModal(false)} className="btn btn-cancel">
                –û—Ç–º–µ–Ω–∞
              </button>
              <button onClick={handleCreateTask} className="btn btn-save">
                –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AITasks;
