import React, { useState, useEffect, useRef } from 'react';
import { useApp } from '../../context/AppContext';
import { Card, Button, LoadingSpinner } from '../UI';

const LiveChat = () => {
  const { actions } = useApp();
  const [isConnected, setIsConnected] = useState(false);
  const [messages, setMessages] = useState([]);
  const [currentMessage, setCurrentMessage] = useState('');
  const [textInput, setTextInput] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [wsConnection, setWsConnection] = useState(null);
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [voiceEnabled, setVoiceEnabled] = useState(true);
  const messagesEndRef = useRef(null);
  const recognitionRef = useRef(null);
  const synthRef = useRef(null);

  useEffect(() => {
    console.log('üí¨ Live Chat mounted');
    initWebSocket();
    initSpeechRecognition();
    initSpeechSynthesis();
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    setMessages([{
      type: 'system',
      text: 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ VasDom. –ü–æ–¥–∫–ª—é—á–∞—é—Å—å...',
      timestamp: new Date()
    }]);

    return () => {
      if (wsConnection) {
        wsConnection.close();
      }
      if (synthRef.current) {
        synthRef.current.cancel();
      }
    };
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const initSpeechRecognition = () => {
    if ('webkitSpeechRecognition' in window) {
      const recognition = new window.webkitSpeechRecognition();
      recognition.continuous = false;
      recognition.interimResults = true;
      recognition.lang = 'ru-RU';
      
      recognition.onresult = (event) => {
        let transcript = '';
        let interim = '';
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
          if (event.results[i].isFinal) {
            transcript = event.results[i][0].transcript;
            console.log('üé§ Voice input:', transcript);
            handleMessage(transcript);
            setCurrentMessage('');
          } else {
            interim = event.results[i][0].transcript;
          }
        }
        
        setCurrentMessage(interim);
      };
      
      recognition.onend = () => {
        setIsListening(false);
        setCurrentMessage('');
      };
      
      recognition.onerror = (event) => {
        console.error('‚ùå Speech recognition error:', event.error);
        setIsListening(false);
        setCurrentMessage('');
      };
      
      recognitionRef.current = recognition;
    }
  };

  const initSpeechSynthesis = () => {
    if ('speechSynthesis' in window) {
      synthRef.current = window.speechSynthesis;
    }
  };

  const speakText = (text) => {
    if (synthRef.current && text && voiceEnabled) {
      synthRef.current.cancel();
      
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'ru-RU';
      utterance.rate = 0.85; // –ù–µ–º–Ω–æ–≥–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
      utterance.pitch = 1.1; // –ß—É—Ç—å –≤—ã—à–µ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏
      utterance.volume = 0.9;
      
      // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤—ã–±—Ä–∞—Ç—å –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
      const voices = synthRef.current.getVoices();
      const russianVoice = voices.find(voice => 
        voice.lang.includes('ru') && voice.name.toLowerCase().includes('woman')
      ) || voices.find(voice => voice.lang.includes('ru'));
      
      if (russianVoice) {
        utterance.voice = russianVoice;
      }
      
      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);
      utterance.onerror = () => setIsSpeaking(false);
      
      synthRef.current.speak(utterance);
    }
  };

  const startListening = () => {
    if (recognitionRef.current && !isListening) {
      setIsListening(true);
      setCurrentMessage('');
      recognitionRef.current.start();
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop();
    }
  };

  const initWebSocket = () => {
    try {
      const backendUrl = process.env.REACT_APP_BACKEND_URL;
      const wsUrl = backendUrl.replace('https://', 'wss://').replace('http://', 'ws://');
      const ws = new WebSocket(`${wsUrl}/api/live-chat/ws`);
      
      ws.onopen = () => {
        console.log('‚úÖ WebSocket connected');
        setIsConnected(true);
        setWsConnection(ws);
        
        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        setMessages(prev => [...prev, {
          type: 'system',
          text: '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å AI –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.',
          timestamp: new Date()
        }]);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ AI
        setTimeout(() => {
          setMessages(prev => [...prev, {
            type: 'ai',
            text: '–ü—Ä–∏–≤–µ—Ç! –Ø VasDom AI –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ì–æ—Ç–æ–≤ –∫ –∂–∏–≤–æ–º—É –æ–±—â–µ–Ω–∏—é! –£ –Ω–∞—Å 348 –¥–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, 6 —Ä–∞–±–æ—á–∏—Ö –±—Ä–∏–≥–∞–¥. –û —á–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º?',
            timestamp: new Date()
          }]);
        }, 1000);
      };

      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log('üì® WebSocket message received:', data);
          
          if (data.type === 'ai_response') {
            setMessages(prev => [...prev, {
              type: 'ai',
              text: data.message,
              timestamp: new Date()
            }]);
            setIsProcessing(false);
          }
        } catch (error) {
          console.error('‚ùå Error parsing WebSocket message:', error);
        }
      };

      ws.onclose = () => {
        console.log('üîå WebSocket disconnected');
        setIsConnected(false);
        setWsConnection(null);
        
        setMessages(prev => [...prev, {
          type: 'system',
          text: 'üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ. –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...',
          timestamp: new Date()
        }]);

        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          initWebSocket();
        }, 3000);
      };

      ws.onerror = (error) => {
        console.error('‚ùå WebSocket error:', error);
        actions.addNotification({
          type: 'error',
          message: '–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'
        });
      };

    } catch (error) {
      console.error('‚ùå WebSocket initialization error:', error);
      
      // Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
      setMessages(prev => [...prev, {
        type: 'system',
        text: '‚ö†Ô∏è WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π AI –ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è.',
        timestamp: new Date()
      }]);
    }
  };

  const handleMessage = async (text) => {
    if (!text?.trim()) return;

    // Add user message
    const userMessage = {
      type: 'user',
      text: text.trim(),
      timestamp: new Date()
    };
    setMessages(prev => [...prev, userMessage]);
    setIsProcessing(true);

    if (wsConnection && wsConnection.readyState === WebSocket.OPEN) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
      wsConnection.send(JSON.stringify({
        type: 'user_message',
        message: text.trim(),
        user_id: 'live_chat_user'
      }));
    } else {
      // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É API –µ—Å–ª–∏ WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      try {
        console.log('üîÑ WebSocket unavailable, using fallback API');
        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/voice/process`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            text: text.trim(),
            user_id: 'live_chat_user'
          })
        });

        const data = await response.json();
        
        if (data && data.response) {
          setMessages(prev => [...prev, {
            type: 'ai',
            text: data.response,
            timestamp: new Date()
          }]);
        }
      } catch (error) {
        console.error('‚ùå Fallback API error:', error);
        setMessages(prev => [...prev, {
          type: 'ai',
          text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          timestamp: new Date(),
          isError: true
        }]);
      }
      setIsProcessing(false);
    }
  };

  const handleTextSubmit = (e) => {
    e.preventDefault();
    if (textInput.trim()) {
      handleMessage(textInput);
      setTextInput('');
    }
  };

  const clearChat = () => {
    setMessages([{
      type: 'system',
      text: '–ß–∞—Ç –æ—á–∏—â–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ!',
      timestamp: new Date()
    }]);
  };

  const reconnectWebSocket = () => {
    if (wsConnection) {
      wsConnection.close();
    }
    initWebSocket();
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">–ñ–∏–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä</h1>
          <p className="text-gray-600">Real-time –æ–±—â–µ–Ω–∏–µ —Å VasDom AI —á–µ—Ä–µ–∑ WebSocket</p>
        </div>
        <div className="flex space-x-2">
          <Button variant="secondary" onClick={clearChat}>
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
          </Button>
          <Button 
            variant={isConnected ? "success" : "warning"} 
            onClick={reconnectWebSocket}
            disabled={isConnected}
          >
            {isConnected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : 'üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å'}
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Chat Messages */}
        <div className="lg:col-span-3">
          <Card className="h-96 flex flex-col">
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {messages.map((message, index) => (
                <div
                  key={index}
                  className={`flex ${
                    message.type === 'user' ? 'justify-end' : 
                    message.type === 'system' ? 'justify-center' : 'justify-start'
                  }`}
                >
                  <div
                    className={`px-4 py-2 rounded-lg ${
                      message.type === 'user'
                        ? 'bg-blue-600 text-white max-w-xs lg:max-w-md'
                        : message.type === 'system'
                        ? 'bg-yellow-100 text-yellow-800 border border-yellow-200 max-w-md text-center'
                        : message.isError
                        ? 'bg-red-100 text-red-800 border border-red-200 max-w-xs lg:max-w-md'
                        : 'bg-green-100 text-green-800 border border-green-200 max-w-xs lg:max-w-md'
                    }`}
                  >
                    <p className="text-sm">{message.text}</p>
                    <p className="text-xs opacity-70 mt-1">
                      {message.timestamp.toLocaleTimeString('ru-RU')}
                    </p>
                  </div>
                </div>
              ))}
              
              {isProcessing && (
                <div className="flex justify-start">
                  <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                    <LoadingSpinner size="sm" text="AI –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏..." />
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>

            {/* Text Input */}
            <div className="border-t p-4">
              <form onSubmit={handleTextSubmit} className="flex space-x-2">
                <input
                  type="text"
                  value={textInput}
                  onChange={(e) => setTextInput(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∂–∏–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞..."
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                  disabled={isProcessing}
                />
                <Button 
                  type="submit" 
                  disabled={!textInput.trim() || isProcessing}
                  variant="success"
                >
                  ‚ö° –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </Button>
              </form>
            </div>
          </Card>
        </div>

        {/* Status Panel */}
        <div className="space-y-4">
          <Card title="üîó –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è">
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm">WebSocket:</span>
                <span className={`text-xs px-2 py-1 rounded-full ${
                  isConnected 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-red-100 text-red-800'
                }`}>
                  {isConnected ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
                </span>
              </div>
              
              <div className="flex items-center justify-between">
                <span className="text-sm">–†–µ–∂–∏–º:</span>
                <span className="text-xs text-blue-600 font-semibold">
                  Real-time
                </span>
              </div>
              
              <div className="flex items-center justify-between">
                <span className="text-sm">AI –ú–æ–¥–µ–ª—å:</span>
                <span className="text-xs text-purple-600">
                  GPT-4 mini
                </span>
              </div>
            </div>
          </Card>

          <Card title="üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏">
            <div className="space-y-2 text-sm text-gray-600">
              <p>‚Ä¢ <strong>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã</strong> –æ—Ç AI</p>
              <p>‚Ä¢ <strong>–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</strong></p>
              <p>‚Ä¢ <strong>–ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</strong></p>
              <p>‚Ä¢ <strong>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤</strong></p>
            </div>
          </Card>

          <Card title="üè¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç VasDom">
            <div className="space-y-2 text-sm text-gray-600">
              <p>‚Ä¢ 348 –¥–æ–º–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏</p>
              <p>‚Ä¢ 6 —Ä–∞–±–æ—á–∏—Ö –±—Ä–∏–≥–∞–¥ –ö–∞–ª—É–≥–∏</p>
              <p>‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Bitrix24</p>
              <p>‚Ä¢ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
            </div>
          </Card>

          <Card title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞">
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>–°–æ–æ–±—â–µ–Ω–∏–π:</span>
                <span className="font-semibold">{messages.length}</span>
              </div>
              <div className="flex justify-between">
                <span>–¢–∏–ø —á–∞—Ç–∞:</span>
                <span className="text-green-600">üí¨ –ñ–∏–≤–æ–π</span>
              </div>
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default LiveChat;