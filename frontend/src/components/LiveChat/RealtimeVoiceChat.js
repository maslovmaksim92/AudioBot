import React, { useState, useEffect, useRef } from 'react';
import { useApp } from '../../context/AppContext';
import { Card, Button } from '../UI';

const RealtimeVoiceChat = () => {
  const { actions } = useApp();
  const [isConnected, setIsConnected] = useState(false);
  const [messages, setMessages] = useState([]);
  const [textInput, setTextInput] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [wsConnection, setWsConnection] = useState(null);
  const [realtimeAudio, setRealtimeAudio] = useState(null);
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [bitrixData, setBitrixData] = useState(null);
  const messagesEndRef = useRef(null);

  useEffect(() => {
    console.log('üé§ Realtime Voice Chat mounted');
    initRealtimeWebSocket();
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    setMessages([{
      type: 'system',
      text: 'üé§ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —Å–∏—Å—Ç–µ–º–µ GPT-4o Realtime –¥–ª—è –∂–∏–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è...',
      timestamp: new Date()
    }]);

    return () => {
      if (wsConnection) {
        wsConnection.close();
      }
      if (realtimeAudio) {
        realtimeAudio.cleanup();
      }
    };
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const initRealtimeWebSocket = () => {
    try {
      const backendUrl = process.env.REACT_APP_BACKEND_URL;
      const wsUrl = backendUrl.replace('https://', 'wss://').replace('http://', 'ws://');
      const ws = new WebSocket(`${wsUrl}/api/realtime-voice/ws`);
      
      ws.onopen = () => {
        console.log('üé§ Realtime WebSocket connected');
        setIsConnected(true);
        setWsConnection(ws);
        
        setMessages(prev => [...prev, {
          type: 'system',
          text: '‚ú® –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GPT-4o Realtime —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ê–ª–∏—Å–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∂–∏–≤–æ–º—É –æ–±—â–µ–Ω–∏—é.',
          timestamp: new Date()
        }]);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebRTC –∞—É–¥–∏–æ
        initWebRTCAudio();
      };

      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log('üé§ Realtime message received:', data);
          
          if (data.type === 'assistant_message') {
            const aiMessage = {
              type: 'ai',
              text: data.message,
              timestamp: new Date(),
              isRealtime: true
            };
            
            setMessages(prev => [...prev, aiMessage]);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Bitrix24 –µ—Å–ª–∏ –µ—Å—Ç—å
            if (data.bitrix_data) {
              setBitrixData(data.bitrix_data);
            }
            
            setIsProcessing(false);
            setIsSpeaking(false);
          }
        } catch (error) {
          console.error('‚ùå Error parsing realtime message:', error);
        }
      };

      ws.onclose = () => {
        console.log('üîå Realtime WebSocket disconnected');
        setIsConnected(false);
        setWsConnection(null);
        
        setMessages(prev => [...prev, {
          type: 'system',
          text: 'üòî –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–ª–æ—Å—å. –ü—ã—Ç–∞—é—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...',
          timestamp: new Date()
        }]);

        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => {
          initRealtimeWebSocket();
        }, 3000);
      };

      ws.onerror = (error) => {
        console.error('‚ùå Realtime WebSocket error:', error);
        actions.addNotification({
          type: 'error',
          message: '–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'
        });
      };

    } catch (error) {
      console.error('‚ùå Realtime WebSocket initialization error:', error);
      
      setMessages(prev => [...prev, {
        type: 'system',
        text: '‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º.',
        timestamp: new Date()
      }]);
    }
  };

  const initWebRTCAudio = async () => {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è WebRTC –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
      console.log('üéµ Initializing WebRTC Audio...');
      
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Å –ø–ª–∞–Ω–∞–º–∏ –Ω–∞ WebRTC
      setRealtimeAudio({
        status: 'text-mode',
        cleanup: () => console.log('üéµ Audio cleanup')
      });
      
    } catch (error) {
      console.error('‚ùå WebRTC Audio initialization error:', error);
    }
  };

  const handleMessage = async (text) => {
    if (!text?.trim()) return;

    // Add user message
    const userMessage = {
      type: 'user',
      text: text.trim(),
      timestamp: new Date()
    };
    setMessages(prev => [...prev, userMessage]);
    setIsProcessing(true);
    setIsSpeaking(true);

    if (wsConnection && wsConnection.readyState === WebSocket.OPEN) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Realtime WebSocket
      wsConnection.send(JSON.stringify({
        type: 'user_message',
        message: text.trim(),
        user_id: 'realtime_user',
        request_bitrix_data: true
      }));
    } else {
      // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É API
      try {
        console.log('üîÑ WebSocket unavailable, using fallback API');
        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/voice/process`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            text: text.trim(),
            user_id: 'realtime_fallback'
          })
        });

        const data = await response.json();
        
        if (data && data.response) {
          setMessages(prev => [...prev, {
            type: 'ai',
            text: data.response,
            timestamp: new Date(),
            isFallback: true
          }]);
        }
      } catch (error) {
        console.error('‚ùå Fallback API error:', error);
        setMessages(prev => [...prev, {
          type: 'ai',
          text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          timestamp: new Date(),
          isError: true
        }]);
      }
      setIsProcessing(false);
      setIsSpeaking(false);
    }
  };

  const handleTextSubmit = (e) => {
    e.preventDefault();
    if (textInput.trim()) {
      handleMessage(textInput);
      setTextInput('');
    }
  };

  const clearChat = () => {
    setMessages([{
      type: 'system',
      text: 'üßπ –ß–∞—Ç –æ—á–∏—â–µ–Ω. –ê–ª–∏—Å–∞ –≥–æ—Ç–æ–≤–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ!',
      timestamp: new Date()
    }]);
    setBitrixData(null);
  };

  const reconnectRealtime = () => {
    if (wsConnection) {
      wsConnection.close();
    }
    initRealtimeWebSocket();
  };

  const startVoiceMode = () => {
    setIsListening(true);
    actions.addNotification({
      type: 'info',
      message: '–ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!'
    });
  };

  return (
    <div className="p-6 bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-100 min-h-screen">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-800 flex items-center">
            üé§ –ê–ª–∏—Å–∞ GPT-4o Realtime
            {isSpeaking && <span className="ml-3 text-xl animate-pulse">üó£Ô∏è</span>}
            {isListening && <span className="ml-3 text-xl animate-pulse">üëÇ</span>}
          </h1>
          <p className="text-gray-600">–†–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≥–æ–ª–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Bitrix24</p>
        </div>
        <div className="flex space-x-2">
          <Button 
            variant="primary" 
            onClick={startVoiceMode}
            disabled={!isConnected}
          >
            üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º
          </Button>
          <Button variant="secondary" onClick={clearChat}>
            üßπ –û—á–∏—Å—Ç–∏—Ç—å
          </Button>
          <Button 
            variant={isConnected ? "success" : "warning"} 
            onClick={reconnectRealtime}
            disabled={isConnected}
          >
            {isConnected ? '‚ú® GPT-4o –∞–∫—Ç–∏–≤–µ–Ω' : 'üîÑ –ü–æ–¥–∫–ª—é—á–∏—Ç—å'}
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 xl:grid-cols-4 gap-6">
        {/* Chat Messages */}
        <div className="xl:col-span-3">
          <Card className="h-96 flex flex-col bg-white/90 backdrop-blur-sm shadow-xl border-0">
            <div className="flex-1 overflow-y-auto p-6 space-y-4">
              {messages.map((message, index) => (
                <div
                  key={index}
                  className={`flex ${
                    message.type === 'user' ? 'justify-end' : 
                    message.type === 'system' ? 'justify-center' : 'justify-start'
                  }`}
                >
                  <div
                    className={`px-4 py-3 rounded-2xl shadow-sm ${
                      message.type === 'user'
                        ? 'bg-purple-600 text-white max-w-xs lg:max-w-md shadow-lg font-medium'
                        : message.type === 'system'
                        ? 'bg-blue-50 text-blue-700 border border-blue-200 max-w-md text-center rounded-full'
                        : message.isError
                        ? 'bg-red-50 text-red-700 border border-red-200 max-w-xs lg:max-w-md'
                        : 'bg-gradient-to-r from-purple-50 to-indigo-50 text-gray-800 border border-purple-200 max-w-xs lg:max-w-md'
                    }`}
                  >
                    <div className="flex items-start space-x-2">
                      {message.type === 'ai' && (
                        <span className="text-sm">
                          {message.isRealtime ? 'üé§' : message.isFallback ? 'ü§ñ' : 'üé§'}
                        </span>
                      )}
                      <div>
                        <p className="text-sm leading-relaxed">{message.text}</p>
                        <div className="flex items-center justify-between mt-1">
                          <p className="text-xs opacity-60">
                            {message.timestamp.toLocaleTimeString('ru-RU')}
                          </p>
                          {message.isRealtime && (
                            <span className="text-xs bg-purple-100 text-purple-700 px-2 py-1 rounded-full">
                              GPT-4o
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
              
              {isProcessing && (
                <div className="flex justify-start">
                  <div className="bg-gradient-to-r from-purple-50 to-indigo-50 border border-purple-200 rounded-2xl p-4 shadow-sm">
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-purple-600"></div>
                      <span className="text-sm text-gray-600">
                        {isSpeaking ? '–ê–ª–∏—Å–∞ –≥–æ–≤–æ—Ä–∏—Ç —á–µ—Ä–µ–∑ GPT-4o...' : '–ê–ª–∏—Å–∞ –¥—É–º–∞–µ—Ç...'}
                      </span>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>

            {/* Input Area */}
            <div className="border-t bg-gray-50/50 p-4 rounded-b-lg">
              <form onSubmit={handleTextSubmit} className="flex space-x-3">
                <input
                  type="text"
                  value={textInput}
                  onChange={(e) => setTextInput(e.target.value)}
                  placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ –ê–ª–∏—Å—É –æ –¥–æ–º–∞—Ö, –±—Ä–∏–≥–∞–¥–∞—Ö, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ..."
                  className="flex-1 px-4 py-2 bg-white rounded-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent shadow-sm"
                  disabled={isProcessing}
                />
                <Button 
                  type="submit" 
                  disabled={!textInput.trim() || isProcessing}
                  variant="primary"
                  className="rounded-full bg-purple-600 hover:bg-purple-700"
                >
                  üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </Button>
              </form>
            </div>
          </Card>
        </div>

        {/* Status Panel */}
        <div className="space-y-4">
          <Card title="üé§ –°—Ç–∞—Ç—É—Å GPT-4o Realtime" className="bg-white/90 backdrop-blur-sm shadow-xl border-0">
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:</span>
                <span className={`text-xs px-3 py-1 rounded-full font-medium ${
                  isConnected 
                    ? 'bg-purple-100 text-purple-700' 
                    : 'bg-red-100 text-red-700'
                }`}>
                  {isConnected ? 'üé§ GPT-4o –∞–∫—Ç–∏–≤–µ–Ω' : 'üò¥ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
                </span>
              </div>
              
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">–ú–æ–¥–µ–ª—å:</span>
                <span className="text-xs text-purple-600 font-semibold px-3 py-1 bg-purple-100 rounded-full">
                  GPT-4o Realtime
                </span>
              </div>
              
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">–ì–æ–ª–æ—Å:</span>
                <span className="text-xs text-green-600 font-semibold px-3 py-1 bg-green-100 rounded-full">
                  –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π
                </span>
              </div>
              
              {isSpeaking && (
                <div className="flex items-center justify-center p-2 bg-purple-50 rounded-lg">
                  <span className="text-sm text-purple-700 animate-pulse">üó£Ô∏è –ê–ª–∏—Å–∞ –≥–æ–≤–æ—Ä–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–º –≥–æ–ª–æ—Å–æ–º...</span>
                </div>
              )}
            </div>
          </Card>

          <Card title="üè¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Bitrix24" className="bg-white/90 backdrop-blur-sm shadow-xl border-0">
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>üè† –î–æ–º–æ–≤ –≤ CRM:</span>
                <span className="font-semibold text-blue-600">50</span>
              </div>
              <div className="flex justify-between">
                <span>üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</span>
                <span className="font-semibold text-green-600">82</span>
              </div>
              <div className="flex justify-between">
                <span>üöõ –ë—Ä–∏–≥–∞–¥:</span>
                <span className="font-semibold text-purple-600">6</span>
              </div>
              <div className="flex justify-between">
                <span>üìç –ì–æ—Ä–æ–¥:</span>
                <span className="font-semibold text-orange-600">–ö–∞–ª—É–≥–∞</span>
              </div>
              <div className="flex justify-between">
                <span>üîó Bitrix24:</span>
                <span className="font-semibold text-green-600">–ü–æ–¥–∫–ª—é—á–µ–Ω</span>
              </div>
              
              {bitrixData && (
                <div className="mt-3 p-2 bg-blue-50 rounded-lg">
                  <p className="text-xs text-blue-700 font-medium">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:</p>
                  <p className="text-xs text-blue-600 mt-1">{bitrixData.substring(0, 100)}...</p>
                </div>
              )}
            </div>
          </Card>

          <Card title="üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ê–ª–∏—Å—ã" className="bg-white/90 backdrop-blur-sm shadow-xl border-0">
            <div className="space-y-2 text-sm text-gray-600">
              <p>üè† <strong>–°—Ç–∞—Ç—É—Å –¥–æ–º–æ–≤</strong> –∏–∑ CRM</p>
              <p>üìä <strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</strong> –ø–æ –±—Ä–∏–≥–∞–¥–∞–º</p>
              <p>üë• <strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</strong> –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö</p>
              <p>üé§ <strong>–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ</strong> (—Å–∫–æ—Ä–æ)</p>
              <p>üìà <strong>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</strong> —Ä–∞–±–æ—Ç—ã</p>
            </div>
          </Card>

          <Card title="üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤" className="bg-white/90 backdrop-blur-sm shadow-xl border-0">
            <div className="space-y-2 text-sm text-gray-600">
              <p>üè† "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞—à–∏—Ö –¥–æ–º–æ–≤"</p>
              <p>üìä "–ö–∞–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–∏–≥–∞–¥–∞–º?"</p>
              <p>üë• "–°–∫–æ–ª—å–∫–æ —É –Ω–∞—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤?"</p>
              <p>üîç "–ö–∞–∫–∏–µ –¥–æ–º–∞ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è?"</p>
              <p>üìà "–†–∞—Å—Å–∫–∞–∂–∏ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"</p>
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default RealtimeVoiceChat;