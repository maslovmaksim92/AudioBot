import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

const TelegramLogin = () => {
  const [username, setUsername] = useState('');
  const [authCode, setAuthCode] = useState('');
  const [qrCode, setQrCode] = useState('');
  const [botLink, setBotLink] = useState('');
  const [status, setStatus] = useState('idle'); // idle, waiting, error, success
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω
    const token = localStorage.getItem('access_token');
    if (token) {
      navigate('/');
    }
  }, [navigate]);

  useEffect(() => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å authCode, –Ω–∞—á–∏–Ω–∞–µ–º polling
    if (authCode && status === 'waiting') {
      const interval = setInterval(async () => {
        try {
          const response = await fetch(`${BACKEND_URL}/api/telegram-auth/status/${authCode}`);
          const data = await response.json();

          if (data.status === 'confirmed') {
            // –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è!
            localStorage.setItem('access_token', data.access_token);
            localStorage.setItem('user', JSON.stringify(data.user));
            setStatus('success');
            clearInterval(interval);
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            setTimeout(() => {
              navigate('/');
            }, 1000);
          } else if (data.status === 'expired' || data.status === 'invalid') {
            setStatus('error');
            setError('–ö–æ–¥ –∏—Å—Ç—ë–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            clearInterval(interval);
          }
        } catch (err) {
          console.error('Error checking auth status:', err);
        }
      }, 2000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã

      return () => clearInterval(interval);
    }
  }, [authCode, status, BACKEND_URL, navigate]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setStatus('loading');

    try {
      const response = await fetch(`${BACKEND_URL}/api/telegram-auth/init`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username })
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.detail || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
      }

      const data = await response.json();
      
      setAuthCode(data.auth_code);
      setQrCode(data.qr_code);
      setBotLink(data.bot_link);
      setStatus('waiting');

    } catch (err) {
      setStatus('error');
      setError(err.message);
    }
  };

  const handleReset = () => {
    setUsername('');
    setAuthCode('');
    setQrCode('');
    setBotLink('');
    setStatus('idle');
    setError('');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50 flex items-center justify-center p-4">
      <div className="max-w-md w-full">
        {/* –õ–æ–≥–æ—Ç–∏–ø */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-purple-600 to-blue-600 rounded-full mb-4 shadow-lg">
            <span className="text-4xl">üè†</span>
          </div>
          <h1 className="text-3xl font-bold text-gray-900">–í–∞—à–î–æ–º</h1>
          <p className="text-gray-600 mt-2">–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram</p>
        </div>

        {/* –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ */}
        <div className="bg-white rounded-2xl shadow-xl p-8">
          {status === 'idle' || status === 'loading' || status === 'error' ? (
            <form onSubmit={handleSubmit}>
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –õ–æ–≥–∏–Ω (email –∏–ª–∏ –∏–º—è)
                </label>
                <input
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω"
                  required
                  disabled={status === 'loading'}
                />
              </div>

              {error && (
                <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm">
                  ‚ùå {error}
                </div>
              )}

              <button
                type="submit"
                disabled={status === 'loading'}
                className="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed shadow-lg"
              >
                {status === 'loading' ? (
                  <div className="flex items-center justify-center gap-2">
                    <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    –ü—Ä–æ–≤–µ—Ä–∫–∞...
                  </div>
                ) : (
                  'üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram'
                )}
              </button>
            </form>
          ) : status === 'waiting' ? (
            <div className="text-center">
              <div className="mb-6">
                <div className="inline-block p-4 bg-purple-50 rounded-xl">
                  {qrCode && (
                    <img src={qrCode} alt="QR Code" className="w-48 h-48 mx-auto" />
                  )}
                </div>
              </div>

              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥
              </h3>
              <p className="text-gray-600 mb-4">
                –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ Telegram
              </p>

              {botLink && (
                <a
                  href={botLink}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="inline-block mb-6 px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-all"
                >
                  üí¨ –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram
                </a>
              )}

              <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                <p className="text-sm text-blue-800 mb-2">
                  üìù <strong>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</strong>
                </p>
                <ol className="text-sm text-blue-700 text-left space-y-1">
                  <li>1. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram</li>
                  <li>2. –ù–∞–∂–º–∏—Ç–µ "–°—Ç–∞—Ä—Ç"</li>
                  <li>3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥</li>
                  <li>4. –í—ã –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã</li>
                </ol>
              </div>

              <div className="mt-6 flex items-center justify-center gap-2 text-gray-500">
                <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                <span className="text-sm">–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...</span>
              </div>

              <button
                onClick={handleReset}
                className="mt-6 text-sm text-gray-500 hover:text-gray-700 transition-colors"
              >
                ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
              </button>
            </div>
          ) : status === 'success' ? (
            <div className="text-center">
              <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-4xl">‚úÖ</span>
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!
              </h3>
              <p className="text-gray-600">
                –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...
              </p>
            </div>
          ) : null}
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="mt-6 text-center text-sm text-gray-500">
          <p>üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram</p>
          <p className="mt-1">–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å</p>
        </div>
      </div>
    </div>
  );
};

export default TelegramLogin;
