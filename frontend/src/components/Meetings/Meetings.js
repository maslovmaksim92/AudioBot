import React, { useState, useEffect, useRef } from 'react';
import { useApp } from '../../context/AppContext';
import { apiService } from '../../services/apiService';
import { Card, Button, LoadingSpinner } from '../UI';

const Meetings = () => {
  const { actions } = useApp();
  const [isRecording, setIsRecording] = useState(false);
  const [meetings, setMeetings] = useState([]);
  const [currentMeetingId, setCurrentMeetingId] = useState(null);
  const [transcription, setTranscription] = useState('');
  const [realTimeText, setRealTimeText] = useState('');
  const [meetingTitle, setMeetingTitle] = useState('');
  const [loading, setLoading] = useState(false);
  const recognitionRef = useRef(null);

  useEffect(() => {
    console.log('üé§ Meetings component mounted');
    fetchMeetings();
    initSpeechRecognition();
  }, []);

  const initSpeechRecognition = () => {
    if ('webkitSpeechRecognition' in window) {
      const recognition = new window.webkitSpeechRecognition();
      recognition.continuous = true;
      recognition.interimResults = true;
      recognition.lang = 'ru-RU';
      
      recognition.onresult = (event) => {
        let finalTranscript = '';
        let interimTranscript = '';
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
          const transcript = event.results[i][0].transcript;
          if (event.results[i].isFinal) {
            finalTranscript += transcript + ' ';
            console.log('üìù Final transcript:', transcript);
          } else {
            interimTranscript = transcript;
          }
        }
        
        if (finalTranscript) {
          setTranscription(prev => prev + finalTranscript);
        }
        setRealTimeText(interimTranscript);
      };
      
      recognition.onstart = () => {
        console.log('üé§ Speech recognition started');
      };
      
      recognition.onend = () => {
        console.log('‚èπÔ∏è Speech recognition ended');
        if (isRecording) {
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –µ—â–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
          setTimeout(() => {
            if (isRecording && recognitionRef.current) {
              recognitionRef.current.start();
            }
          }, 100);
        }
      };
      
      recognition.onerror = (event) => {
        console.error('‚ùå Speech recognition error:', event.error);
        setRealTimeText(`–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ${event.error}`);
        actions.addNotification({
          type: 'error',
          message: `–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: ${event.error}`
        });
      };
      
      recognitionRef.current = recognition;
      console.log('‚úÖ Speech recognition initialized');
    } else {
      console.error('‚ùå Speech recognition not supported');
      setRealTimeText('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    }
  };

  const fetchMeetings = async () => {
    setLoading(true);
    try {
      console.log('üìã Fetching meetings...');
      const response = await apiService.getMeetings();
      if (response.status === 'success') {
        setMeetings(response.meetings);
        console.log('‚úÖ Meetings loaded:', response.meetings.length);
      }
    } catch (error) {
      console.error('‚ùå Error fetching meetings:', error);
      actions.addNotification({
        type: 'error',
        message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–µ—Ä–æ–∫'
      });
    } finally {
      setLoading(false);
    }
  };

  const startRecording = async () => {
    if (!meetingTitle.trim()) {
      actions.addNotification({
        type: 'warning',
        message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–µ—Ä–∫–∏'
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    try {
      await navigator.mediaDevices.getUserMedia({ audio: true });
    } catch (error) {
      console.error('‚ùå Microphone permission denied:', error);
      actions.addNotification({
        type: 'error',
        message: '–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–ª–∞–Ω–µ—Ä–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.'
      });
      return;
    }

    try {
      console.log('üé§ Starting meeting recording...');
      const response = await apiService.startMeeting(meetingTitle);
      
      if (response.status === 'success') {
        setCurrentMeetingId(response.meeting_id);
        setIsRecording(true);
        setTranscription('');
        setRealTimeText('');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
        if (recognitionRef.current) {
          recognitionRef.current.start();
        }
        
        actions.addNotification({
          type: 'success',
          message: `–ü–ª–∞–Ω–µ—Ä–∫–∞ "${meetingTitle}" –Ω–∞—á–∞—Ç–∞. –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ!`
        });
        
        console.log('‚úÖ Meeting started:', response.meeting_id);
      }
    } catch (error) {
      console.error('‚ùå Error starting meeting:', error);
      actions.addNotification({
        type: 'error',
        message: '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –ø–ª–∞–Ω–µ—Ä–∫–∏'
      });
    }
  };

  const stopRecording = async () => {
    if (!currentMeetingId) return;

    try {
      console.log('‚èπÔ∏è Stopping meeting recording...');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
      
      const response = await apiService.stopMeeting(currentMeetingId);
      
      if (response.status === 'success') {
        setIsRecording(false);
        setCurrentMeetingId(null);
        setMeetingTitle('');
        setRealTimeText('');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–µ—Ä–æ–∫
        await fetchMeetings();
        
        actions.addNotification({
          type: 'success',
          message: '–ü–ª–∞–Ω–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞'
        });
        
        console.log('‚úÖ Meeting stopped and saved');
      }
    } catch (error) {
      console.error('‚ùå Error stopping meeting:', error);
      actions.addNotification({
        type: 'error',
        message: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏ –ø–ª–∞–Ω–µ—Ä–∫–∏'
      });
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    try {
      return new Date(dateString).toLocaleString('ru-RU');
    } catch {
      return '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
    }
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">–ü–ª–∞–Ω–µ—Ä–∫–∏</h1>
          <p className="text-gray-600">–ó–∞–ø–∏—Å—å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—â–∞–Ω–∏—è–º–∏</p>
        </div>
        <Button variant="secondary" onClick={fetchMeetings} loading={loading}>
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Recording Panel */}
        <div>
          <Card title="üé§ –ù–æ–≤–∞—è –ø–ª–∞–Ω–µ—Ä–∫–∞" className="mb-6">
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–µ—Ä–∫–∏
                </label>
                <input
                  type="text"
                  value={meetingTitle}
                  onChange={(e) => setMeetingTitle(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  disabled={isRecording}
                />
              </div>

              <div className="flex space-x-2">
                {!isRecording ? (
                  <div className="flex-1">
                    <Button
                      onClick={startRecording}
                      variant="success"
                      disabled={!meetingTitle.trim()}
                      className="w-full"
                    >
                      üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
                    </Button>
                    {!meetingTitle.trim() && (
                      <p className="text-xs text-orange-600 mt-1 text-center">
                        üí° –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–µ—Ä–∫–∏, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É
                      </p>
                    )}
                  </div>
                ) : (
                  <Button
                    onClick={stopRecording}
                    variant="danger"
                    className="flex-1"
                  >
                    ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
                  </Button>
                )}
              </div>

              {isRecording && (
                <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                  <div className="flex items-center mb-2">
                    <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse mr-2"></div>
                    <span className="text-sm font-medium text-red-800">
                      –ò–¥–µ—Ç –∑–∞–ø–∏—Å—å: {meetingTitle}
                    </span>
                  </div>
                  <p className="text-xs text-red-600">
                    ID: {currentMeetingId}
                  </p>
                </div>
              )}
            </div>
          </Card>

          {/* Real-time Transcription */}
          {isRecording && (
            <Card title="üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏">
              <div className="space-y-4">
                <div className="h-32 p-3 bg-gray-50 border rounded-lg overflow-y-auto">
                  <p className="text-sm text-gray-700 whitespace-pre-wrap">
                    {transcription}
                  </p>
                  {realTimeText && (
                    <p className="text-sm text-blue-600 italic">
                      {realTimeText}
                    </p>
                  )}
                </div>
                <div className="text-xs text-gray-500">
                  –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {transcription.length}
                </div>
              </div>
            </Card>
          )}
        </div>

        {/* Meetings History */}
        <div>
          <Card title={`üìã –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞–Ω–µ—Ä–æ–∫ (${meetings.length})`}>
            {loading ? (
              <div className="flex justify-center py-8">
                <LoadingSpinner size="md" text="–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–µ—Ä–æ–∫..." />
              </div>
            ) : meetings.length > 0 ? (
              <div className="space-y-3 max-h-96 overflow-y-auto">
                {meetings.map((meeting, index) => (
                  <div
                    key={meeting.id || index}
                    className="p-3 border border-gray-200 rounded-lg hover:border-gray-300 transition-colors"
                  >
                    <div className="flex justify-between items-start mb-2">
                      <h4 className="font-medium text-gray-900">
                        {meeting.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
                      </h4>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                        meeting.status === 'active' 
                          ? 'bg-green-100 text-green-800'
                          : meeting.status === 'completed'
                          ? 'bg-blue-100 text-blue-800'
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        {meeting.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞' : 
                         meeting.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                      </span>
                    </div>
                    
                    <p className="text-xs text-gray-500 mb-2">
                      –°–æ–∑–¥–∞–Ω–∞: {formatDate(meeting.created_at)}
                    </p>
                    
                    {meeting.transcription && (
                      <p className="text-sm text-gray-700 truncate">
                        {meeting.transcription.substring(0, 100)}...
                      </p>
                    )}
                    
                    {meeting.summary && (
                      <div className="mt-2 p-2 bg-blue-50 rounded text-sm">
                        <strong>–†–µ–∑—é–º–µ:</strong> {meeting.summary}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-gray-500">
                <p>üìù –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ä–æ–∫</p>
                <p className="text-sm mt-1">–ù–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –≤—ã—à–µ</p>
              </div>
            )}
          </Card>
        </div>
      </div>

      {/* Info Card */}
      <Card title="üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" className="mt-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600">
          <div>
            <h4 className="font-medium text-gray-900 mb-2">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h4>
            <ul className="space-y-1">
              <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–µ—á–∏</li>
              <li>‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL</li>
              <li>‚Ä¢ AI-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–µ–∑—é–º–µ</li>
              <li>‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ä–æ–∫</li>
            </ul>
          </div>
          <div>
            <h4 className="font-medium text-gray-900 mb-2">–°–æ–≤–µ—Ç—ã:</h4>
            <ul className="space-y-1">
              <li>‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –≥—Ä–æ–º–∫–æ</li>
              <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chrome –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞</li>
              <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—åte —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞</li>
              <li>‚Ä¢ –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ñ–æ–Ω–æ–≤—ã–π —à—É–º</li>
            </ul>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default Meetings;