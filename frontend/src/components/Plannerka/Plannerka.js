import React, { useState, useEffect, useRef } from 'react';
import { Mic, MicOff, Save, Sparkles, CheckCircle, Calendar, Users, FileText } from 'lucide-react';

const Plannerka = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [interimTranscript, setInterimTranscript] = useState(''); // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
  const [title, setTitle] = useState(`–ü–ª–∞–Ω—ë—Ä–∫–∞ ${new Date().toLocaleDateString('ru-RU')}`);
  const [summary, setSummary] = useState('');
  const [tasks, setTasks] = useState([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [isSaved, setIsSaved] = useState(false);
  const [currentMeetingId, setCurrentMeetingId] = useState(null);
  
  const recognitionRef = useRef(null);
  const finalTranscriptRef = useRef(''); // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web Speech API
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      const recognition = new SpeechRecognition();
      
      recognition.continuous = true;
      recognition.interimResults = true;
      recognition.lang = 'ru-RU';
      
      recognition.onresult = (event) => {
        let interim = '';
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º, –æ–±–Ω–æ–≤–ª—è—è —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        for (let i = event.resultIndex; i < event.results.length; i++) {
          const transcriptPiece = event.results[i][0].transcript;
          
          if (event.results[i].isFinal) {
            // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª—è–µ–º –≤ ref –∏ state
            finalTranscriptRef.current += transcriptPiece + ' ';
            setTranscript(finalTranscriptRef.current);
            console.log('‚úÖ Final:', transcriptPiece);
          } else {
            // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            interim += transcriptPiece;
            console.log('‚è≥ Interim:', transcriptPiece);
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        setInterimTranscript(interim);
      };
      
      recognition.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        if (event.error === 'no-speech') {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        } else {
          alert(`–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: ${event.error}`);
        }
      };
      
      recognition.onend = () => {
        if (isRecording) {
          // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
          recognition.start();
        }
      };
      
      recognitionRef.current = recognition;
    } else {
      alert('‚ö†Ô∏è –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chrome –∏–ª–∏ Edge.');
    }
    
    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
    };
  }, [isRecording]);

  const startRecording = () => {
    if (recognitionRef.current) {
      try {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        finalTranscriptRef.current = transcript;
        setInterimTranscript('');
        
        recognitionRef.current.start();
        setIsRecording(true);
        setIsSaved(false);
        console.log('üé§ Recording started');
      } catch (error) {
        console.error('Error starting recognition:', error);
        alert(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏: ${error.message}`);
      }
    }
  };

  const stopRecording = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
      setIsRecording(false);
      setInterimTranscript(''); // –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
      console.log('üõë Recording stopped');
    }
  };

  const handleSaveAndAnalyze = async () => {
    if (!transcript || transcript.length < 50) {
      alert('‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∑–∞–ø–∏—Å—å.');
      return;
    }

    try {
      setIsAnalyzing(true);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω—ë—Ä–∫—É
      const saveResponse = await fetch(`${BACKEND_URL}/api/plannerka/create`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: title,
          transcription: transcript,
          participants: []
        })
      });

      if (!saveResponse.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω—ë—Ä–∫–∏');
      }

      const saveData = await saveResponse.json();
      setCurrentMeetingId(saveData.id);
      console.log('‚úÖ Meeting saved:', saveData.id);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ GPT-5
      const analyzeResponse = await fetch(`${BACKEND_URL}/api/plannerka/analyze/${saveData.id}`, {
        method: 'POST'
      });

      if (!analyzeResponse.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω—ë—Ä–∫–∏');
      }

      const analyzeData = await analyzeResponse.json();
      console.log('‚úÖ Analysis complete:', analyzeData);

      setSummary(analyzeData.summary);
      setTasks(analyzeData.tasks || []);
      setIsSaved(true);

      alert(`‚úÖ –ü–ª–∞–Ω—ë—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!\n–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${analyzeData.tasks_count}`);

    } catch (error) {
      console.error('Error:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleClear = () => {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?')) {
      setTranscript('');
      setSummary('');
      setTasks([]);
      setIsSaved(false);
      setCurrentMeetingId(null);
    }
  };

  return (
    <div className="max-w-7xl mx-auto p-6">
      <div className="mb-6">
        <h1 className="text-3xl font-bold flex items-center">
          <Calendar className="w-8 h-8 mr-3 text-purple-600" />
          –ü–ª–∞–Ω—ë—Ä–∫–∞ —Å –¥–∏–∫—Ç–æ—Ñ–æ–Ω–æ–º
        </h1>
        <p className="text-gray-600 mt-2">–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ä–µ—á—å, –ø–æ–ª—É—á–∞–π—Ç–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ AI-–∞–Ω–∞–ª–∏–∑</p>
      </div>

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–ª–∞–Ω—ë—Ä–∫–∏ */}
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω—ë—Ä–∫–∏
        </label>
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ..."
        />
      </div>

      {/* –ë–ª–æ–∫ –∑–∞–ø–∏—Å–∏ */}
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold flex items-center">
            <Mic className="w-5 h-5 mr-2 text-purple-600" />
            –ó–∞–ø–∏—Å—å –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
          </h2>
          
          <div className="flex gap-2">
            {!isRecording ? (
              <button
                onClick={startRecording}
                className="flex items-center gap-2 px-6 py-3 bg-red-600 hover:bg-red-700 text-white rounded-lg font-medium transition-colors"
              >
                <Mic className="w-5 h-5" />
                –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
              </button>
            ) : (
              <button
                onClick={stopRecording}
                className="flex items-center gap-2 px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-lg font-medium transition-colors animate-pulse"
              >
                <MicOff className="w-5 h-5" />
                –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
              </button>
            )}
          </div>
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ */}
        {isRecording && (
          <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg flex items-center gap-2">
            <div className="w-3 h-3 bg-red-600 rounded-full animate-pulse"></div>
            <span className="text-red-700 font-medium">üé§ –ò–¥–µ—Ç –∑–∞–ø–∏—Å—å... –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω</span>
          </div>
        )}

        {/* –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è */}
        <div className="relative">
          <textarea
            value={transcript + interimTranscript}
            onChange={(e) => {
              // –ü—Ä–∏ —Ä—É—á–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
              setTranscript(e.target.value);
              setInterimTranscript('');
              finalTranscriptRef.current = e.target.value;
            }}
            className="w-full h-64 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent font-mono text-sm"
            placeholder="–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–µ—á–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏..."
          />
          <div className="absolute bottom-3 right-3 flex gap-3 text-xs text-gray-500">
            {interimTranscript && (
              <span className="text-blue-600 animate-pulse">
                üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é...
              </span>
            )}
            <span>
              {(transcript + interimTranscript).length} —Å–∏–º–≤–æ–ª–æ–≤
            </span>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="mt-4 flex gap-3">
          <button
            onClick={handleSaveAndAnalyze}
            disabled={isAnalyzing || !transcript || transcript.length < 50}
            className="flex items-center gap-2 px-6 py-3 bg-purple-600 hover:bg-purple-700 text-white rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isAnalyzing ? (
              <>
                <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...
              </>
            ) : (
              <>
                <Sparkles className="w-5 h-5" />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
              </>
            )}
          </button>

          <button
            onClick={handleClear}
            disabled={isAnalyzing}
            className="px-6 py-3 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-lg font-medium transition-colors"
          >
            –û—á–∏—Å—Ç–∏—Ç—å
          </button>
        </div>
      </div>

      {/* –°–∞–º–º–∞—Ä–∏ */}
      {summary && (
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 className="text-xl font-semibold flex items-center mb-4">
            <FileText className="w-5 h-5 mr-2 text-blue-600" />
            –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏
          </h2>
          <div className="prose max-w-none">
            <p className="text-gray-700 whitespace-pre-wrap">{summary}</p>
          </div>
        </div>
      )}

      {/* –ó–∞–¥–∞—á–∏ */}
      {tasks.length > 0 && (
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold flex items-center mb-4">
            <CheckCircle className="w-5 h-5 mr-2 text-green-600" />
            –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({tasks.length})
          </h2>
          <div className="space-y-3">
            {tasks.map((task, index) => (
              <div
                key={index}
                className="p-4 border border-gray-200 rounded-lg hover:shadow-md transition-shadow"
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <h3 className="font-medium text-gray-900">{task.title}</h3>
                    <div className="mt-2 flex flex-wrap gap-3 text-sm">
                      {task.assignee && (
                        <span className="flex items-center gap-1 text-gray-600">
                          <Users className="w-4 h-4" />
                          {task.assignee}
                        </span>
                      )}
                      {task.deadline && (
                        <span className="flex items-center gap-1 text-gray-600">
                          <Calendar className="w-4 h-4" />
                          {task.deadline}
                        </span>
                      )}
                      <span
                        className={`px-2 py-1 rounded text-xs font-medium ${
                          task.priority === 'high'
                            ? 'bg-red-100 text-red-700'
                            : task.priority === 'medium'
                            ? 'bg-yellow-100 text-yellow-700'
                            : 'bg-green-100 text-green-700'
                        }`}
                      >
                        {task.priority === 'high' ? '–í—ã—Å–æ–∫–∏–π' : task.priority === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π'}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
      {isSaved && (
        <div className="fixed bottom-6 right-6 bg-green-600 text-white px-6 py-3 rounded-lg shadow-lg flex items-center gap-2 animate-bounce">
          <CheckCircle className="w-5 h-5" />
          –ü–ª–∞–Ω—ë—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!
        </div>
      )}
    </div>
  );
};

export default Plannerka;
