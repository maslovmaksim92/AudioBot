import React, { useState } from 'react';
import { Sparkles, Loader, CheckCircle } from 'lucide-react';
import { taskService } from '../../services/taskService';

const AITaskGenerator = () => {
  const [context, setContext] = useState({
    description: '',
    count: 3
  });
  const [generatedTasks, setGeneratedTasks] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleGenerate = async () => {
    if (!context.description.trim()) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á');
      return;
    }

    setLoading(true);
    setError('');
    setGeneratedTasks([]);

    try {
      const result = await taskService.generateAITasks(context);
      setGeneratedTasks(result.tasks);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  const presets = [
    {
      title: 'üìã –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å',
      description: '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç, –∞–∫—Ç–æ–≤, –æ–ø–ª–∞—Ç, —Ä–µ–∫–ª–∞–º–∞—Ü–∏–π'
    },
    {
      title: 'üè† –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç',
      description: '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞ –Ω–æ–≤–æ–º –æ–±—ä–µ–∫—Ç–µ: –æ—Å–º–æ—Ç—Ä, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞, –≤—ã–±–æ—Ä –±—Ä–∏–≥–∞–¥—ã, –ø–µ—Ä–≤–∞—è —É–±–æ—Ä–∫–∞'
    },
    {
      title: 'üîß –†–µ–∫–ª–∞–º–∞—Ü–∏—è',
      description: '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏: —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —É–±–æ—Ä–∫–∞, –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∞, –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω'
    },
    {
      title: 'üìû –û–±–∑–≤–æ–Ω –∫–ª–∏–µ–Ω—Ç–æ–≤',
      description: '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–∑–≤–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: —Å–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥'
    }
  ];

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <div className="mb-8">
        <h1 className="text-2xl font-bold mb-2">ü§ñ AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–¥–∞—á</h1>
        <p className="text-gray-600">
          –û–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é, –∏ AI —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        </p>
      </div>

      {/* –ü—Ä–µ—Å–µ—Ç—ã */}
      <div className="mb-6">
        <h3 className="font-medium mb-3">–ë—ã—Å—Ç—Ä—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:</h3>
        <div className="grid grid-cols-2 gap-3">
          {presets.map((preset, index) => (
            <button
              key={index}
              onClick={() => setContext({...context, description: preset.description})}
              className="p-4 text-left bg-white border rounded-lg hover:border-blue-500 hover:shadow-md transition-all"
            >
              <div className="font-medium mb-1">{preset.title}</div>
              <div className="text-sm text-gray-600">{preset.description}</div>
            </button>
          ))}
        </div>
      </div>

      {/* –§–æ—Ä–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
      <div className="bg-white rounded-lg border p-6 mb-6">
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">
              –û–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é *
            </label>
            <textarea
              value={context.description}
              onChange={(e) => setContext({...context, description: e.target.value})}
              className="w-full px-3 py-2 border rounded-lg"
              rows="4"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –£ –Ω–∞—Å –Ω–æ–≤—ã–π –¥–æ–º –Ω–∞ –ü—É—à–∫–∏–Ω–∞ 10, 3 –ø–æ–¥—ä–µ–∑–¥–∞, 5 —ç—Ç–∞–∂–µ–π. –ù—É–∂–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É, –≤—ã–±—Ä–∞—Ç—å –±—Ä–∏–≥–∞–¥—É –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤—É—é —É–±–æ—Ä–∫—É"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">
              –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
            </label>
            <input
              type="number"
              min="1"
              max="10"
              value={context.count}
              onChange={(e) => setContext({...context, count: parseInt(e.target.value)})}
              className="w-32 px-3 py-2 border rounded-lg"
            />
          </div>

          {error && (
            <div className="p-3 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm">
              {error}
            </div>
          )}

          <button
            onClick={handleGenerate}
            disabled={loading}
            className="w-full px-4 py-3 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg hover:from-purple-700 hover:to-blue-700 disabled:opacity-50 flex items-center justify-center gap-2"
          >
            {loading ? (
              <>
                <Loader className="w-5 h-5 animate-spin" />
                –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á...
              </>
            ) : (
              <>
                <Sparkles className="w-5 h-5" />
                –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏
              </>
            )}
          </button>
        </div>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
      {generatedTasks.length > 0 && (
        <div>
          <div className="flex items-center gap-2 mb-4">
            <CheckCircle className="w-5 h-5 text-green-600" />
            <h3 className="text-lg font-semibold">
              –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {generatedTasks.length} –∑–∞–¥–∞—á
            </h3>
          </div>

          <div className="space-y-4">
            {generatedTasks.map((task, index) => (
              <div key={task.id} className="bg-white border rounded-lg p-5 hover:shadow-md transition-shadow">
                <div className="flex justify-between items-start mb-3">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-2">
                      <span className="text-lg font-semibold">#{index + 1}</span>
                      <h4 className="text-lg font-semibold">{task.title}</h4>
                      <span className={`px-2 py-1 rounded text-xs font-medium ${
                        task.priority === 'urgent' ? 'bg-red-100 text-red-700' :
                        task.priority === 'high' ? 'bg-orange-100 text-orange-700' :
                        task.priority === 'medium' ? 'bg-blue-100 text-blue-700' :
                        'bg-gray-100 text-gray-700'
                      }`}>
                        {task.priority === 'urgent' ? 'üî• –°—Ä–æ—á–Ω–æ' :
                         task.priority === 'high' ? '‚ö° –í—ã—Å–æ–∫–∏–π' :
                         task.priority === 'medium' ? 'üìå –°—Ä–µ–¥–Ω–∏–π' :
                         'üìã –ù–∏–∑–∫–∏–π'}
                      </span>
                    </div>
                    <p className="text-gray-700 mb-3">{task.description}</p>
                    {task.ai_reasoning && (
                      <div className="bg-purple-50 border border-purple-200 rounded p-3">
                        <div className="text-sm font-medium text-purple-900 mb-1">
                          üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ AI:
                        </div>
                        <div className="text-sm text-purple-800">
                          {task.ai_reasoning}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div className="mt-6 p-4 bg-green-50 border border-green-200 rounded-lg text-center">
            <p className="text-green-800">
              ‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            </p>
          </div>
        </div>
      )}
    </div>
  );
};

export default AITaskGenerator;
