import React, { useState, useEffect } from 'react';
import { Card, Button, StatCard } from '../UI';

const Training = () => {
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(false);
  const [trainingData, setTrainingData] = useState([]);

  const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'https://audiobot-qci2.onrender.com';

  const fetchLearningStats = async () => {
    try {
      setLoading(true);
      const response = await fetch(`${BACKEND_URL}/api/learning/stats`);
      if (response.ok) {
        const data = await response.json();
        setStats(data);
      }
    } catch (error) {
      console.error('Error fetching learning stats:', error);
    } finally {
      setLoading(false);
    }
  };

  const exportTrainingData = async () => {
    try {
      const response = await fetch(`${BACKEND_URL}/api/learning/export`);
      if (response.ok) {
        const data = await response.json();
        setTrainingData(data.data || []);
        alert(`–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.total_exported} –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è`);
      }
    } catch (error) {
      console.error('Error exporting training data:', error);
      alert('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
    }
  };

  const triggerTraining = async () => {
    try {
      const response = await fetch(`${BACKEND_URL}/api/learning/train`, {
        method: 'POST'
      });
      if (response.ok) {
        const data = await response.json();
        alert('–û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
        fetchLearningStats(); // Refresh stats
      }
    } catch (error) {
      console.error('Error triggering training:', error);
      alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è');
    }
  };

  useEffect(() => {
    fetchLearningStats();
  }, []);

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">–û–±—É—á–µ–Ω–∏–µ AI</h1>
          <p className="text-gray-600">–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∏ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ</p>
        </div>
        <Button onClick={fetchLearningStats} loading={loading}>
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
      </div>

      {/* Learning Stats */}
      {stats && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <StatCard
            title="–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤"
            value={stats.total_interactions || 0}
            icon={<span className="text-2xl">üí¨</span>}
            color="blue"
            subtitle="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
          />
          <StatCard
            title="–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞"
            value={stats.avg_rating ? stats.avg_rating.toFixed(1) : 'N/A'}
            icon={<span className="text-2xl">‚≠ê</span>}
            color="yellow"
            subtitle="–ü–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ"
          />
          <StatCard
            title="–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ"
            value={stats.positive_ratings || 0}
            icon={<span className="text-2xl">üëç</span>}
            color="green"
            subtitle="–û—Ü–µ–Ω–∫–∏ 4-5 –∑–≤–µ–∑–¥"
          />
          <StatCard
            title="–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ"
            value={stats.negative_ratings || 0}
            icon={<span className="text-2xl">üëé</span>}
            color="red"
            subtitle="–û—Ü–µ–Ω–∫–∏ 1-2 –∑–≤–µ–∑–¥—ã"
          />
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Training Controls */}
        <Card title="üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–µ–º">
          <div className="space-y-4">
            <div>
              <h4 className="font-medium mb-2">–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è</h4>
              <p className="text-sm text-gray-600 mb-3">
                –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ (—Ä–µ–π—Ç–∏–Ω–≥ ‚â• 4 –∑–≤–µ–∑–¥) –¥–ª—è —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏.
              </p>
              <Button onClick={exportTrainingData} variant="secondary" className="w-full">
                üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
              </Button>
            </div>

            <div>
              <h4 className="font-medium mb-2">–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è</h4>
              <p className="text-sm text-gray-600 mb-3">
                –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
              </p>
              <Button onClick={triggerTraining} variant="primary" className="w-full">
                üß† –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ
              </Button>
            </div>

            {stats && stats.last_learning_update && (
              <div className="mt-4 p-3 bg-blue-50 rounded-lg">
                <p className="text-sm text-blue-800">
                  <strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ:</strong><br/>
                  {new Date(stats.last_learning_update).toLocaleString('ru-RU')}
                </p>
              </div>
            )}
          </div>
        </Card>

        {/* Training Data Preview */}
        <Card title="üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è">
          {trainingData.length > 0 ? (
            <div className="space-y-3 max-h-64 overflow-y-auto">
              {trainingData.slice(0, 5).map((item, index) => (
                <div key={index} className="border border-gray-200 rounded p-3 text-sm">
                  <div className="font-medium text-blue-600 mb-1">
                    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
                  </div>
                  <div className="mb-2 text-gray-700">
                    {item.messages[0]?.content}
                  </div>
                  <div className="font-medium text-green-600 mb-1">
                    AI –æ—Ç–≤–µ—Ç:
                  </div>
                  <div className="text-gray-700">
                    {item.messages[1]?.content}
                  </div>
                  <div className="mt-2 text-xs text-gray-500">
                    –†–µ–π—Ç–∏–Ω–≥: {item.metadata.rating}‚òÖ
                  </div>
                </div>
              ))}
              {trainingData.length > 5 && (
                <p className="text-sm text-gray-500 text-center">
                  ... –∏ –µ—â–µ {trainingData.length - 5} –¥–∏–∞–ª–æ–≥–æ–≤
                </p>
              )}
            </div>
          ) : (
            <div className="text-center text-gray-500">
              <p className="text-lg mb-2">üìö</p>
              <p>–ù–∞–∂–º–∏—Ç–µ "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω—ã–µ</p>
            </div>
          )}
        </Card>
      </div>
    </div>
  );
};

export default Training;