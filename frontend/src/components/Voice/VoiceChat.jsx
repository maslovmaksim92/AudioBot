import React, { useState, useRef, useEffect } from 'react';
import { Button } from '../ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';
import { Input } from '../ui/input';
import { ScrollArea } from '../ui/scroll-area';
import { Badge } from '../ui/badge';
import { Mic, Send, MessageCircle, Bot } from 'lucide-react';
import axios from 'axios';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

const VoiceChat = () => {
  const [currentSession, setCurrentSession] = useState(null);
  const [sessions, setSessions] = useState([]);
  const [messages, setMessages] = useState([]);
  const [isRecording, setIsRecording] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [textInput, setTextInput] = useState('');
  const [selectedSessionId, setSelectedSessionId] = useState(null);
  
  const mediaRecorderRef = useRef(null);
  const audioChunksRef = useRef([]);
  const messagesEndRef = useRef(null);

  useEffect(() => {
    fetchSessions();
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const fetchSessions = async () => {
    try {
      const response = await axios.get(`${API}/voice/sessions`);
      setSessions(response.data);
    } catch (error) {
      console.error('Error fetching sessions:', error);
    }
  };

  const startNewSession = async () => {
    try {
      const response = await axios.post(`${API}/voice/start-session`);
      setCurrentSession(response.data);
      setSelectedSessionId(response.data.id);
      setMessages([]);
      fetchSessions();
    } catch (error) {
      console.error('Error starting session:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏');
    }
  };

  const loadSession = async (sessionId) => {
    try {
      const response = await axios.get(`${API}/voice/${sessionId}/history`);
      setSelectedSessionId(sessionId);
      setCurrentSession({ id: sessionId });
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
      const sessionMessages = response.data.messages.map(msg => ([
        {
          type: 'user',
          content: msg.user_message,
          timestamp: msg.timestamp
        },
        {
          type: 'ai',
          content: msg.ai_response,
          timestamp: msg.timestamp
        }
      ])).flat();
      
      setMessages(sessionMessages);
    } catch (error) {
      console.error('Error loading session:', error);
    }
  };

  const sendTextMessage = async () => {
    if (!textInput.trim() || !currentSession) return;

    const userMessage = textInput.trim();
    setTextInput('');
    setIsProcessing(true);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUserMessage = {
      type: 'user',
      content: userMessage,
      timestamp: new Date().toISOString()
    };
    setMessages(prev => [...prev, newUserMessage]);

    try {
      const response = await axios.post(`${API}/voice/${currentSession.id}/chat`, {
        message: userMessage
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
      const aiMessage = {
        type: 'ai',
        content: response.data.ai_response,
        timestamp: new Date().toISOString()
      };
      setMessages(prev => [...prev, aiMessage]);

    } catch (error) {
      console.error('Error sending message:', error);
      setMessages(prev => [...prev, {
        type: 'ai',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.',
        timestamp: new Date().toISOString()
      }]);
    } finally {
      setIsProcessing(false);
    }
  };

  const startVoiceRecording = async () => {
    try {
      if (!currentSession) {
        await startNewSession();
        return;
      }

      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorderRef.current = new MediaRecorder(stream);
      
      mediaRecorderRef.current.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };
      
      mediaRecorderRef.current.onstop = async () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });
        audioChunksRef.current = [];
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        const recognizedText = "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"; // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        
        if (recognizedText) {
          setTextInput(recognizedText);
        }
      };
      
      mediaRecorderRef.current.start();
      setIsRecording(true);
      
    } catch (error) {
      console.error('Error starting voice recording:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
    }
  };

  const stopVoiceRecording = () => {
    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
      mediaRecorderRef.current.stop();
      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());
    }
    setIsRecording(false);
  };

  const endSession = async () => {
    if (!currentSession) return;
    
    try {
      await axios.post(`${API}/voice/${currentSession.id}/end`);
      setCurrentSession(null);
      setSelectedSessionId(null);
      setMessages([]);
      fetchSessions();
    } catch (error) {
      console.error('Error ending session:', error);
    }
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div>
        <h2 className="text-3xl font-bold tracking-tight">üí¨ –ñ–∏–≤–æ–π –†–∞–∑–≥–æ–≤–æ—Ä —Å –ò–ò</h2>
        <p className="text-muted-foreground">
          –û–±—â–∞–π—Ç–µ—Å—å —Å –ò–ò –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Å–µ—Å—Å–∏—è–º–∏ */}
        <Card className="lg:col-span-1">
          <CardHeader>
            <CardTitle className="text-lg">–°–µ—Å—Å–∏–∏</CardTitle>
            <Button onClick={startNewSession} className="w-full">
              <MessageCircle className="w-4 h-4 mr-2" />
              –ù–æ–≤—ã–π –ß–∞—Ç
            </Button>
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-60">
              <div className="space-y-2">
                {sessions.map((session) => (
                  <Button
                    key={session.id}
                    variant={selectedSessionId === session.id ? "default" : "ghost"}
                    className="w-full justify-start text-sm"
                    onClick={() => loadSession(session.id)}
                  >
                    <div className="flex items-center">
                      <MessageCircle className="w-3 h-3 mr-2" />
                      <span className="truncate">
                        {new Date(session.start_time).toLocaleDateString('ru-RU')}
                      </span>
                      <Badge 
                        variant={session.status === 'active' ? 'default' : 'secondary'}
                        className="ml-auto text-xs"
                      >
                        {session.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'}
                      </Badge>
                    </div>
                  </Button>
                ))}
                
                {sessions.length === 0 && (
                  <p className="text-center text-muted-foreground text-sm py-4">
                    –ù–µ—Ç —Å–µ—Å—Å–∏–π
                  </p>
                )}
              </div>
            </ScrollArea>
          </CardContent>
        </Card>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
        <Card className="lg:col-span-3">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle>
                {currentSession ? `–ß–∞—Ç ${currentSession.id.slice(0, 8)}...` : '–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏—é'}
              </CardTitle>
              {currentSession && (
                <Button variant="outline" onClick={endSession}>
                  –ó–∞–≤–µ—Ä—à–∏—Ç—å –°–µ—Å—Å–∏—é
                </Button>
              )}
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
            <ScrollArea className="h-96 w-full p-4 border rounded-lg">
              <div className="space-y-4">
                {messages.map((message, index) => (
                  <div
                    key={index}
                    className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div
                      className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                        message.type === 'user'
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-100 text-gray-900'
                      }`}
                    >
                      <div className="flex items-center mb-1">
                        {message.type === 'user' ? (
                          <MessageCircle className="w-3 h-3 mr-1" />
                        ) : (
                          <Bot className="w-3 h-3 mr-1" />
                        )}
                        <span className="text-xs opacity-75">
                          {message.type === 'user' ? '–í—ã' : '–ò–ò'}
                        </span>
                      </div>
                      <p className="text-sm">{message.content}</p>
                    </div>
                  </div>
                ))}
                
                {isProcessing && (
                  <div className="flex justify-start">
                    <div className="bg-gray-100 px-4 py-2 rounded-lg">
                      <div className="flex items-center space-x-1">
                        <Bot className="w-3 h-3" />
                        <span className="text-sm">–ò–ò –ø–µ—á–∞—Ç–∞–µ—Ç...</span>
                        <div className="flex space-x-1">
                          <div className="w-1 h-1 bg-gray-500 rounded-full animate-bounce"></div>
                          <div className="w-1 h-1 bg-gray-500 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                          <div className="w-1 h-1 bg-gray-500 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                
                {!currentSession && (
                  <div className="text-center text-muted-foreground py-8">
                    <MessageCircle className="w-12 h-12 mx-auto mb-4 opacity-20" />
                    <p>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</p>
                  </div>
                )}
                
                <div ref={messagesEndRef} />
              </div>
            </ScrollArea>

            {/* –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞ */}
            {currentSession && (
              <div className="space-y-2">
                <div className="flex space-x-2">
                  <Input
                    value={textInput}
                    onChange={(e) => setTextInput(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥..."
                    onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && sendTextMessage()}
                    disabled={isProcessing}
                  />
                  <Button
                    onClick={sendTextMessage}
                    disabled={!textInput.trim() || isProcessing}
                  >
                    <Send className="w-4 h-4" />
                  </Button>
                </div>
                
                {/* –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ */}
                <div className="flex justify-center">
                  <Button
                    onClick={isRecording ? stopVoiceRecording : startVoiceRecording}
                    variant={isRecording ? "destructive" : "outline"}
                    className="w-full max-w-md"
                  >
                    <Mic className="w-4 h-4 mr-2" />
                    {isRecording ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å' : '–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥'}
                    {isRecording && (
                      <div className="ml-2 w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                    )}
                  </Button>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default VoiceChat;