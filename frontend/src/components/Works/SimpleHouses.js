import React, { useState, useEffect } from 'react';

const SimpleHouses = () => {
  const [houses, setHouses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadHouses();
  }, []);

  const loadHouses = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || import.meta.env.REACT_APP_BACKEND_URL;
      console.log('üîó Loading houses from:', `${BACKEND_URL}/api/cleaning/houses-490`);
      
      const response = await fetch(`${BACKEND_URL}/api/cleaning/houses-490`);
      console.log('üì° Response status:', response.status);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      const data = await response.json();
      console.log('üìä API Data:', {
        status: data?.status,
        total: data?.total,
        houses_count: data?.houses?.length || 0
      });
      
      if (data?.status === 'success' && Array.isArray(data.houses)) {
        setHouses(data.houses);
        console.log('‚úÖ Houses loaded:', data.houses.length);
      } else {
        throw new Error('Invalid data format');
      }
      
    } catch (err) {
      console.error('‚ùå Error loading houses:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="p-8 text-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–æ–≤...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-8 text-center">
        <div className="text-red-500 mb-4">‚ùå –û—à–∏–±–∫–∞: {error}</div>
        <button 
          onClick={loadHouses}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
        </button>
      </div>
    );
  }

  return (
    <div className="p-6">
      <div className="mb-6">
        <h1 className="text-2xl font-bold mb-2">üè† –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤</h1>
        <p className="text-gray-600">–ó–∞–≥—Ä—É–∂–µ–Ω–æ: <strong>{houses.length}</strong> –¥–æ–º–æ–≤</p>
      </div>

      {houses.length === 0 ? (
        <div className="text-center py-12">
          <p className="text-gray-500 mb-4">–î–æ–º–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</p>
          <button 
            onClick={loadHouses}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ
          </button>
        </div>
      ) : (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {houses.slice(0, 12).map((house, index) => (
            <div key={house.deal_id || index} className="bg-white rounded-lg shadow border p-4">
              {/* –ê–¥—Ä–µ—Å */}
              <h3 className="font-semibold text-gray-900 mb-2">
                {house.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
              </h3>
              
              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
              <div className="grid grid-cols-3 gap-2 mb-3 text-center">
                <div className="bg-green-50 p-2 rounded">
                  <div className="font-bold text-green-600">{house.apartments_count || 0}</div>
                  <div className="text-xs text-green-700">–ö–≤–∞—Ä—Ç–∏—Ä</div>
                </div>
                <div className="bg-blue-50 p-2 rounded">
                  <div className="font-bold text-blue-600">{house.entrances_count || 0}</div>
                  <div className="text-xs text-blue-700">–ü–æ–¥—ä–µ–∑–¥–æ–≤</div>
                </div>
                <div className="bg-orange-50 p-2 rounded">
                  <div className="font-bold text-orange-600">{house.floors_count || 0}</div>
                  <div className="text-xs text-orange-700">–≠—Ç–∞–∂–µ–π</div>
                </div>
              </div>

              {/* –£–ö */}
              <div className="bg-gray-50 p-2 rounded mb-3">
                <div className="text-xs text-gray-600 mb-1">üè¢ –£–ö:</div>
                <div className="text-sm font-medium">
                  {house.management_company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                </div>
              </div>

              {/* –ì—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ */}
              {house.september_schedule?.has_schedule && (
                <div className="bg-green-50 p-2 rounded">
                  <div className="text-xs text-green-700 mb-1">üìÖ –ì—Ä–∞—Ñ–∏–∫:</div>
                  {house.september_schedule.cleaning_date_1 && (
                    <div className="text-xs">
                      <strong>–î–∞—Ç–∞ 1:</strong> {house.september_schedule.cleaning_date_1.map(d => 
                        new Date(d).toLocaleDateString()
                      ).join(', ')}
                    </div>
                  )}
                  {house.september_schedule.cleaning_type_1 && (
                    <div className="text-xs">
                      <strong>–¢–∏–ø 1:</strong> {house.september_schedule.cleaning_type_1}
                    </div>
                  )}
                </div>
              )}
            </div>
          ))}
        </div>
      )}

      {houses.length > 12 && (
        <div className="text-center mt-6 p-4 bg-blue-50 rounded">
          <p className="text-blue-800">
            –ü–æ–∫–∞–∑–∞–Ω–æ 12 –∏–∑ {houses.length} –¥–æ–º–æ–≤. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ.
          </p>
        </div>
      )}
    </div>
  );
};

export default SimpleHouses;