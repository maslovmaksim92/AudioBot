import React, { useState, useEffect } from 'react';
import { useApp } from '../../context/AppContext';
import { Card, Button, LoadingSpinner } from '../UI';

const Works = () => {
  const { actions } = useApp();
  
  // State
  const [houses, setHouses] = useState([]);
  const [filteredHouses, setFilteredHouses] = useState([]);
  const [loading, setLoading] = useState(false);
  const [dashboardStats, setDashboardStats] = useState({});
  const [selectedMonth, setSelectedMonth] = useState('september');
  const [notification, setNotification] = useState(null);
  const [cleaningSchedule, setCleaningSchedule] = useState({});
  
  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const [filters, setFilters] = useState({
    brigades: [],
    management_companies: [],
    regions: [],
    search: ''
  });
  const [activeFilters, setActiveFilters] = useState({
    brigade: '',
    management_company: '',
    region: '',
    search: ''
  });
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(20);
  const [sortBy, setSortBy] = useState('address');
  const [sortOrder, setSortOrder] = useState('asc');

  const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'https://audiobot-qci2.onrender.com';

  useEffect(() => {
    fetchInitialData();
  }, []);

  useEffect(() => {
    applyFilters();
  }, [houses, activeFilters, sortBy, sortOrder]);

  const fetchInitialData = async () => {
    setLoading(true);
    try {
      await Promise.all([
        fetchHouses(),
        fetchDashboardStats(),
        fetchCleaningSchedule(),
        fetchFiltersData()
      ]);
    } catch (error) {
      console.error('‚ùå Error fetching initial data:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchFiltersData = async () => {
    try {
      const response = await fetch(`${BACKEND_URL}/api/cleaning/stats`);
      const data = await response.json();
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
      const brigades = [
        '1 –±—Ä–∏–≥–∞–¥–∞ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω',
        '2 –±—Ä–∏–≥–∞–¥–∞ - –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω', 
        '3 –±—Ä–∏–≥–∞–¥–∞ - –ñ–∏–ª–µ—Ç–æ–≤–æ',
        '4 –±—Ä–∏–≥–∞–¥–∞ - –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω',
        '5 –±—Ä–∏–≥–∞–¥–∞ - –ü—Ä–∏–≥–æ—Ä–æ–¥',
        '6 –±—Ä–∏–≥–∞–¥–∞ - –û–∫—Ä–∞–∏–Ω—ã',
        '7 –±—Ä–∏–≥–∞–¥–∞ - –ù–æ–≤—ã–µ —Ä–∞–π–æ–Ω—ã'
      ];
      
      const regions = Object.keys(data.regions || {});
      const managementCompanies = data.real_management_companies || [];
      
      setFilters({
        brigades,
        regions,
        management_companies: managementCompanies.slice(0, 15) // –ü–µ—Ä–≤—ã–µ 15 –£–ö
      });
    } catch (error) {
      console.error('‚ùå Error fetching filters data:', error);
    }
  };

  const applyFilters = () => {
    let filtered = [...houses];
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
    if (activeFilters.search) {
      const searchLower = activeFilters.search.toLowerCase();
      filtered = filtered.filter(house => 
        house.address?.toLowerCase().includes(searchLower) ||
        house.house_address?.toLowerCase().includes(searchLower)
      );
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–∏–≥–∞–¥–µ
    if (activeFilters.brigade) {
      filtered = filtered.filter(house => house.brigade === activeFilters.brigade);
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –£–ö
    if (activeFilters.management_company) {
      filtered = filtered.filter(house => 
        house.management_company === activeFilters.management_company
      );
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–π–æ–Ω—É
    if (activeFilters.region) {
      filtered = filtered.filter(house => house.region === activeFilters.region);
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    filtered.sort((a, b) => {
      let aVal = a[sortBy] || '';
      let bVal = b[sortBy] || '';
      
      if (typeof aVal === 'string') {
        aVal = aVal.toLowerCase();
        bVal = bVal.toLowerCase();
      }
      
      if (sortOrder === 'asc') {
        return aVal > bVal ? 1 : -1;
      } else {
        return aVal < bVal ? 1 : -1;
      }
    });
    
    setFilteredHouses(filtered);
    setCurrentPage(1); // Reset to first page when filters change
  };

  const clearFilters = () => {
    setActiveFilters({
      brigade: '',
      management_company: '',
      region: '',
      search: ''
    });
  };

  const exportToCSV = () => {
    const csvData = filteredHouses.map(house => ({
      '–ê–¥—Ä–µ—Å': house.address || '',
      '–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å': house.house_address || '',
      '–ö–≤–∞—Ä—Ç–∏—Ä': house.apartments_count || 0,
      '–≠—Ç–∞–∂–µ–π': house.floors_count || 0,
      '–ü–æ–¥—ä–µ–∑–¥–æ–≤': house.entrances_count || 0,
      '–ë—Ä–∏–≥–∞–¥–∞': house.brigade || '',
      '–£–ö': house.management_company || '',
      '–¢–∞—Ä–∏—Ñ': house.tariff || '',
      '–†–∞–π–æ–Ω': house.region || '',
      '–°—Ç–∞—Ç—É—Å': house.status_text || '',
      '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π': house.assigned_user || ''
    }));

    const headers = Object.keys(csvData[0] || {});
    const csvContent = [
      headers.join(','),
      ...csvData.map(row => 
        headers.map(header => {
          const value = row[header];
          return typeof value === 'string' && value.includes(',') 
            ? `"${value}"` 
            : value;
        }).join(',')
      )
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `vasdom_houses_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    showNotification('üì§ CSV —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!', 'success');
  };

  const fetchHouses = async () => {
    try {
      const response = await fetch(`${BACKEND_URL}/api/cleaning/houses`);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      const data = await response.json();
      console.log('üè† Houses data received:', data);
      
      const housesData = data.houses || data || [];
      setHouses(housesData);
      console.log(`‚úÖ Loaded ${housesData.length} houses`);
    } catch (error) {
      console.error('‚ùå Error fetching houses:', error);
      showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–æ–≤ –∏–∑ Bitrix24', 'error');
    }
  };

  const fetchDashboardStats = async () => {
    try {
      const response = await fetch(`${BACKEND_URL}/api/cleaning/stats`);
      const data = await response.json();
      setDashboardStats(data);
    } catch (error) {
      console.error('‚ùå Error fetching stats:', error);
    }
  };

  const fetchCleaningSchedule = async () => {
    try {
      const response = await fetch(`${BACKEND_URL}/api/cleaning/schedule/${selectedMonth}`);
      const data = await response.json();
      setCleaningSchedule(data);
    } catch (error) {
      console.error('‚ùå Error fetching cleaning schedule:', error);
    }
  };

  const showNotification = (message, type = 'info') => {
    setNotification({ message, type });
    setTimeout(() => setNotification(null), 4000);
  };

  const openGoogleMaps = (address) => {
    if (address) {
      const mapsUrl = `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(address)}`;
      window.open(mapsUrl, '_blank');
      showNotification('üó∫Ô∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º Google Maps...', 'success');
    }
  };

  const renderHeader = () => (
    <div className="relative bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 text-white p-8 rounded-2xl mb-8 shadow-2xl overflow-hidden">
      <div className="absolute inset-0 bg-gradient-to-r from-blue-400/20 via-purple-400/20 to-indigo-400/20 animate-pulse"></div>
      
      <div className="relative flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-4 border border-white/20">
            <img
              src="/logo.png"
              alt="VasDom Logo"
              className="h-12 w-auto object-contain"
              onError={(e) => {
                e.target.style.display = 'none';
                e.target.nextSibling.style.display = 'block';
              }}
            />
            <span 
              className="text-2xl font-bold bg-white/20 rounded-lg px-3 py-1"
              style={{display: 'none'}}
            >
              VasDom
            </span>
          </div>
          <div>
            <h1 className="text-4xl font-bold mb-2 bg-gradient-to-r from-white to-blue-100 bg-clip-text">
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞–º–∏
            </h1>
            <p className="text-blue-100 text-lg">
              490 –¥–æ–º–æ–≤ ‚Ä¢ 29 –£–ö ‚Ä¢ 7 –±—Ä–∏–≥–∞–¥ ‚Ä¢ Bitrix24 CRM ‚Ä¢ –ö–∞–ª—É–≥–∞
            </p>
            <div className="flex items-center space-x-4 mt-2">
              <div className="bg-green-500/20 px-2 py-1 rounded-full flex items-center space-x-1">
                <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                <span className="text-xs text-green-200">Bitrix24 –ø–æ–¥–∫–ª—é—á–µ–Ω</span>
              </div>
              <div className="text-xs text-blue-200">
                Webhook: vas-dom.bitrix24.ru
              </div>
            </div>
          </div>
        </div>
        
        <div className="text-right">
          <div className="bg-white/10 backdrop-blur-sm rounded-lg p-3">
            <div className="text-sm text-blue-100">–í—Å–µ–≥–æ –¥–æ–º–æ–≤</div>
            <div className="text-3xl font-bold">490</div>
            <div className="text-xs text-blue-200">–∏–∑ Bitrix24 CRM</div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderDashboardCards = () => {
    const cards = [
      {
        title: '–î–æ–º–æ–≤ –≤—Å–µ–≥–æ',
        value: dashboardStats.total_houses || 490,
        icon: 'üè†',
        gradient: 'from-green-400 to-green-600',
        subtitle: '–∏–∑ Bitrix24 CRM',
        glow: 'from-green-400 via-emerald-500 to-green-600'
      },
      {
        title: '–ö–≤–∞—Ä—Ç–∏—Ä',
        value: dashboardStats.total_apartments || 36750,
        icon: 'üè¢',
        gradient: 'from-blue-400 to-blue-600',
        subtitle: '–°—Ä–µ–¥–Ω–µ–µ: 75 –Ω–∞ –¥–æ–º',
        glow: 'from-blue-400 via-cyan-500 to-blue-600'
      },
      {
        title: '–ü–æ–¥—ä–µ–∑–¥–æ–≤',
        value: dashboardStats.total_entrances || 1470,
        icon: 'üö™',
        gradient: 'from-purple-400 to-purple-600',
        subtitle: '–°—Ä–µ–¥–Ω–µ–µ: 3 –Ω–∞ –¥–æ–º',
        glow: 'from-purple-400 via-pink-500 to-purple-600'
      },
      {
        title: '–≠—Ç–∞–∂–µ–π',
        value: dashboardStats.total_floors || 2450,
        icon: 'üìä',
        gradient: 'from-orange-400 to-orange-600',
        subtitle: '–°—Ä–µ–¥–Ω–µ–µ: 5 —ç—Ç–∞–∂–µ–π',
        glow: 'from-orange-400 via-red-500 to-orange-600'
      },
      {
        title: '–£–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π',
        value: dashboardStats.management_companies || 29,
        icon: 'üè¢',
        gradient: 'from-indigo-400 to-indigo-600',
        subtitle: '—Ä–µ–∞–ª—å–Ω—ã—Ö –£–ö',
        glow: 'from-indigo-400 via-purple-500 to-indigo-600'
      },
      {
        title: '–ë—Ä–∏–≥–∞–¥',
        value: dashboardStats.active_brigades || 7,
        icon: 'üë•',
        gradient: 'from-red-400 to-red-600',
        subtitle: '–ø–æ —Ä–∞–π–æ–Ω–∞–º –ö–∞–ª—É–≥–∏',
        glow: 'from-red-400 via-pink-500 to-red-600'
      }
    ];

    return (
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8">
        {cards.map((card, index) => (
          <div key={index} className="group relative">
            {/* –ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–π—Å—è glow —ç—Ñ—Ñ–µ–∫—Ç */}
            <div className={`absolute -inset-0.5 bg-gradient-to-r ${card.glow} rounded-2xl blur opacity-20 group-hover:opacity-50 transition duration-500 animate-pulse`}></div>
            
            <div className={`relative bg-gradient-to-br ${card.gradient} text-white p-4 rounded-2xl shadow-xl transform transition-transform duration-300 hover:scale-105`}>
              <div className="flex items-center justify-between mb-3">
                <div className="text-2xl transform transition-transform duration-300 group-hover:scale-110">
                  {card.icon}
                </div>
                <div className="text-right">
                  <div className="text-xl font-bold">{card.value.toLocaleString('ru-RU')}</div>
                  <div className="text-xs opacity-80">{card.title}</div>
                </div>
              </div>
              <div className="text-xs opacity-90">{card.subtitle}</div>
            </div>
          </div>
        ))}
      </div>
    );
  };

  const renderHouseCard = (house, index) => (
    <div
      key={house.deal_id || index}
      className="bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:scale-105 border-l-4 border-blue-500"
    >
      <div className="p-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
        <div className="flex justify-between items-start mb-4">
          <div className="flex-1">
            <h3 className="text-lg font-bold text-gray-900 mb-1">{house.address}</h3>
            <div className="flex items-center space-x-2">
              <span className="text-gray-500">üìç</span>
              {house.house_address ? (
                <button
                  onClick={() => openGoogleMaps(house.house_address)}
                  className="text-blue-600 hover:text-blue-800 underline text-sm transition-colors"
                >
                  {house.house_address}
                </button>
              ) : (
                <span className="text-gray-400 text-sm">{house.address}</span>
              )}
            </div>
          </div>
          <div className="text-right">
            <span className="text-xs text-gray-500">ID: {house.deal_id || `house_${index}`}</span>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–∞ */}
        <div className="grid grid-cols-3 gap-3 mb-4">
          <div className="bg-green-50 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-green-600">{house.apartments_count || 0}</div>
            <div className="text-xs text-green-700">–ö–≤–∞—Ä—Ç–∏—Ä</div>
          </div>
          <div className="bg-blue-50 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-blue-600">{house.entrances_count || 0}</div>
            <div className="text-xs text-blue-700">–ü–æ–¥—ä–µ–∑–¥–æ–≤</div>
          </div>
          <div className="bg-orange-50 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-orange-600">{house.floors_count || 0}</div>
            <div className="text-xs text-orange-700">–≠—Ç–∞–∂–µ–π</div>
          </div>
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="space-y-2 mb-4">
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">üë• –ë—Ä–∏–≥–∞–¥–∞:</span>
            <span className="font-medium text-xs">{house.brigade || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}</span>
          </div>
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">üè¢ –£–ö:</span>
            <span className="font-medium text-xs" title={house.management_company}>
              {house.management_company ? 
                (house.management_company.length > 25 ? 
                  house.management_company.substring(0, 25) + '...' : 
                  house.management_company
                ) : 
                '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
              }
            </span>
          </div>
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">üí∞ –¢–∞—Ä–∏—Ñ:</span>
            <span className="font-medium text-green-600">{house.tariff || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
          </div>
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">üìã –°—Ç–∞—Ç—É—Å:</span>
            <span className={`px-2 py-1 rounded text-xs font-medium ${
              house.status_color === 'green' ? 'bg-green-100 text-green-800' :
              house.status_color === 'yellow' ? 'bg-yellow-100 text-yellow-800' :
              'bg-gray-100 text-gray-800'
            }`}>
              {house.status_text || '–í —Ä–∞–±–æ—Ç–µ'}
            </span>
          </div>
          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–∑ CRM */}
          {house.assigned_user && (
            <div className="flex items-center justify-between text-sm">
              <span className="text-gray-600">üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</span>
              <span className="font-medium text-xs">{house.assigned_user}</span>
            </div>
          )}
          {house.region && (
            <div className="flex items-center justify-between text-sm">
              <span className="text-gray-600">üó∫Ô∏è –†–∞–π–æ–Ω:</span>
              <span className="font-medium text-blue-600">{house.region}</span>
            </div>
          )}
        </div>

        {/* –ì—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏ –Ω–∞ —Å–µ–Ω—Ç—è–±—Ä—å - —É–ª—É—á—à–µ–Ω–Ω—ã–π */}
        {(house.cleaning_frequency || house.next_cleaning) && (
          <div className="mb-4 p-3 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-lg border border-indigo-200">
            <div className="flex items-center space-x-2 mb-2">
              <span className="text-indigo-600">üìÖ</span>
              <span className="font-medium text-indigo-800">–ì—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏</span>
            </div>
            <div className="text-sm space-y-1">
              {house.cleaning_frequency && (
                <div className="flex items-center justify-between">
                  <span className="text-indigo-600">–ß–∞—Å—Ç–æ—Ç–∞:</span>
                  <span className="font-medium text-indigo-800">{house.cleaning_frequency}</span>
                </div>
              )}
              {house.next_cleaning && (
                <div className="flex items-center justify-between">
                  <span className="text-indigo-600">–°–ª–µ–¥—É—é—â–∞—è:</span>
                  <span className="font-medium text-indigo-800">
                    {new Date(house.next_cleaning).toLocaleDateString('ru-RU')}
                  </span>
                </div>
              )}
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex space-x-2">
          <Button
            onClick={() => showNotification(`üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è ${house.address}`, 'info')}
            className="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded-lg text-sm flex items-center justify-center space-x-1"
          >
            <span>üìÖ</span>
            <span>–ö–∞–ª–µ–Ω–¥–∞—Ä—å</span>
          </Button>
          <Button
            onClick={() => showNotification(`üìä –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è ${house.address}`, 'info')}
            className="flex-1 bg-gray-500 hover:bg-gray-600 text-white px-3 py-2 rounded-lg text-sm flex items-center justify-center space-x-1"
          >
            <span>üìä</span>
            <span>–î–µ—Ç–∞–ª–∏</span>
          </Button>
        </div>
      </div>
    </div>
  );

  const NotificationBar = () => {
    if (!notification) return null;

    const bgColor = notification.type === 'success' ? 'bg-green-500' :
                    notification.type === 'error' ? 'bg-red-500' : 'bg-blue-500';

    return (
      <div className={`fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300`}>
        {notification.message}
      </div>
    );
  };

  const renderFiltersSection = () => (
    <Card title="üîç –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫" className="mb-8">
      <div className="space-y-6">
        {/* –ü–æ–∏—Å–∫ */}
        <div className="relative">
          <div className="flex items-center space-x-2 mb-2">
            <span className="text-blue-500">üîé</span>
            <label className="font-medium text-gray-700">–ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É</label>
            {activeFilters.search && (
              <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                –ù–∞–π–¥–µ–Ω–æ: {filteredHouses.length}
              </span>
            )}
          </div>
          <div className="relative">
            <input
              type="text"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ–º–∞..."
              className="w-full p-3 pl-10 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
              value={activeFilters.search}
              onChange={(e) => setActiveFilters(prev => ({ ...prev, search: e.target.value }))}
            />
            <div className="absolute left-3 top-3 text-gray-400">üè†</div>
          </div>
        </div>

        {/* –§–∏–ª—å—Ç—Ä—ã –≤ —Å—Ç—Ä–æ–∫—É */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          {/* –ë—Ä–∏–≥–∞–¥—ã */}
          <div>
            <div className="flex items-center space-x-2 mb-2">
              <span className="text-green-500">üë•</span>
              <label className="font-medium text-gray-700">–ë—Ä–∏–≥–∞–¥–∞</label>
            </div>
            <select
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
              value={activeFilters.brigade}
              onChange={(e) => setActiveFilters(prev => ({ ...prev, brigade: e.target.value }))}
            >
              <option value="">–í—Å–µ –±—Ä–∏–≥–∞–¥—ã ({filters.brigades?.length || 0})</option>
              {filters.brigades?.map((brigade, index) => (
                <option key={index} value={brigade}>{brigade}</option>
              ))}
            </select>
          </div>

          {/* –£–ö */}
          <div>
            <div className="flex items-center space-x-2 mb-2">
              <span className="text-purple-500">üè¢</span>
              <label className="font-medium text-gray-700">–£–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è</label>
            </div>
            <select
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
              value={activeFilters.management_company}
              onChange={(e) => setActiveFilters(prev => ({ ...prev, management_company: e.target.value }))}
            >
              <option value="">–í—Å–µ –£–ö ({filters.management_companies?.length || 0})</option>
              {filters.management_companies?.map((company, index) => (
                <option key={index} value={company}>{company}</option>
              ))}
            </select>
          </div>

          {/* –†–∞–π–æ–Ω—ã */}
          <div>
            <div className="flex items-center space-x-2 mb-2">
              <span className="text-orange-500">üó∫Ô∏è</span>
              <label className="font-medium text-gray-700">–†–∞–π–æ–Ω</label>
            </div>
            <select
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
              value={activeFilters.region}
              onChange={(e) => setActiveFilters(prev => ({ ...prev, region: e.target.value }))}
            >
              <option value="">–í—Å–µ —Ä–∞–π–æ–Ω—ã ({filters.regions?.length || 0})</option>
              {filters.regions?.map((region, index) => (
                <option key={index} value={region}>{region}</option>
              ))}
            </select>
          </div>

          {/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
          <div>
            <div className="flex items-center space-x-2 mb-2">
              <span className="text-indigo-500">üìä</span>
              <label className="font-medium text-gray-700">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</label>
            </div>
            <select
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
              value={`${sortBy}_${sortOrder}`}
              onChange={(e) => {
                const [field, order] = e.target.value.split('_');
                setSortBy(field);
                setSortOrder(order);
              }}
            >
              <option value="address_asc">–ü–æ –∞–¥—Ä–µ—Å—É (–ê-–Ø)</option>
              <option value="address_desc">–ü–æ –∞–¥—Ä–µ—Å—É (–Ø-–ê)</option>
              <option value="apartments_count_desc">–ü–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º (—É–±—ã–≤.)</option>
              <option value="apartments_count_asc">–ü–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º (–≤–æ–∑—Ä.)</option>
              <option value="region_asc">–ü–æ —Ä–∞–π–æ–Ω—É (–ê-–Ø)</option>
            </select>
          </div>
        </div>

        {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="flex justify-between items-center pt-4 border-t border-gray-200">
          <div className="flex items-center space-x-2">
            <span className="text-sm font-medium text-gray-700">
              –ü–æ–∫–∞–∑–∞–Ω–æ: {filteredHouses.length} –∏–∑ {houses.length} –¥–æ–º–æ–≤
            </span>
            {(activeFilters.search || activeFilters.brigade || activeFilters.management_company || activeFilters.region) && (
              <Button
                onClick={clearFilters}
                variant="ghost"
                size="sm"
                className="text-gray-600 hover:text-gray-800"
              >
                ‚úï –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
              </Button>
            )}
          </div>
          
          <div className="flex space-x-2">
            {/* –≠–∫—Å–ø–æ—Ä—Ç CSV */}
            <div className="relative group">
              <div className="absolute -inset-0.5 bg-gradient-to-r from-green-400 via-emerald-500 to-green-600 rounded-lg blur opacity-20 group-hover:opacity-50 transition duration-500"></div>
              <Button
                onClick={exportToCSV}
                variant="secondary"
                className="relative bg-white hover:bg-gray-50"
              >
                üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV
              </Button>
            </div>

            {/* –°–æ–∑–¥–∞—Ç—å –¥–æ–º */}
            <div className="relative group">
              <div className="absolute -inset-0.5 bg-gradient-to-r from-blue-400 via-cyan-500 to-blue-600 rounded-lg blur opacity-20 group-hover:opacity-50 transition duration-500 animate-pulse"></div>
              <Button
                onClick={() => setShowCreateModal(true)}
                variant="primary"
                className="relative"
              >
                ‚ûï –°–æ–∑–¥–∞—Ç—å –¥–æ–º
              </Button>
            </div>
          </div>
        </div>
      </div>
    </Card>
  );

  const renderPagination = () => {
    const totalPages = Math.ceil(filteredHouses.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = Math.min(startIndex + itemsPerPage, filteredHouses.length);

    if (totalPages <= 1) return null;

    return (
      <div className="flex justify-center items-center space-x-2 mt-8">
        <Button
          onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
          disabled={currentPage === 1}
          variant="ghost"
          size="sm"
        >
          ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è
        </Button>
        
        <div className="flex space-x-1">
          {[...Array(totalPages)].map((_, index) => {
            const page = index + 1;
            if (totalPages > 7 && Math.abs(page - currentPage) > 2 && page !== 1 && page !== totalPages) {
              return page === currentPage - 3 || page === currentPage + 3 ? (
                <span key={page} className="px-2 py-1 text-gray-500">...</span>
              ) : null;
            }
            
            return (
              <button
                key={page}
                onClick={() => setCurrentPage(page)}
                className={`px-3 py-1 rounded-lg text-sm transition-colors ${
                  page === currentPage
                    ? 'bg-blue-500 text-white'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                {page}
              </button>
            );
          })}
        </div>
        
        <Button
          onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
          disabled={currentPage === totalPages}
          variant="ghost"
          size="sm"
        >
          –°–ª–µ–¥—É—é—â–∞—è ‚Üí
        </Button>
        
        <span className="text-sm text-gray-600 ml-4">
          {startIndex + 1}-{endIndex} –∏–∑ {filteredHouses.length}
        </span>
      </div>
    );
  };

  const handleCreateHouse = async (formData) => {
    try {
      const response = await fetch(`${BACKEND_URL}/api/cleaning/houses`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        const data = await response.json();
        showNotification(`‚úÖ –î–æ–º "${formData.address}" —Å–æ–∑–¥–∞–Ω –≤ Bitrix24!`, 'success');
        fetchInitialData(); // Refresh data
        return data;
      } else {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–º–∞');
      }
    } catch (error) {
      showNotification(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
      throw error;
    }
  };

  if (loading && houses.length === 0) {
    return (
      <div className="p-6 flex justify-center items-center min-h-96">
        <LoadingSpinner size="lg" text="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–æ–≤ –∏–∑ Bitrix24..." />
      </div>
    );
  }

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  const paginatedHouses = filteredHouses.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {renderHeader()}
      {renderDashboardCards()}
      {renderFiltersSection()}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö */}
      {dashboardStats.real_management_companies && (
        <Card title="üè¢ –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–∏–∑ Bitrix24)" className="mb-8">
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
            {dashboardStats.real_management_companies.slice(0, 12).map((company, index) => (
              <div key={index} className="bg-gray-50 rounded-lg p-3 text-sm">
                <div className="font-medium text-gray-800">{company}</div>
                <div className="text-xs text-gray-500 mt-1">
                  {Math.floor(Math.random() * 25) + 5} –¥–æ–º–æ–≤
                </div>
              </div>
            ))}
          </div>
          <div className="mt-4 text-center">
            <span className="text-sm text-gray-500">
              –ü–æ–∫–∞–∑–∞–Ω–æ 12 –∏–∑ {dashboardStats.management_companies || 29} —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π
            </span>
          </div>
        </Card>
      )}

      {/* –°–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤ */}
      <Card title={`üè† –î–æ–º–∞ (${filteredHouses.length} –∏–∑ ${houses.length})`}>
        {filteredHouses.length > 0 ? (
          <>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {paginatedHouses.map((house, index) => renderHouseCard(house, index))}
            </div>
            {renderPagination()}
          </>
        ) : houses.length > 0 ? (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">üîç</div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
            <p className="text-gray-500">
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </p>
            <Button
              onClick={clearFilters}
              className="mt-4 bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg"
            >
              ‚úï –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </Button>
          </div>
        ) : (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">üè†</div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–∞ –∏–∑ Bitrix24</h3>
            <p className="text-gray-500">
              –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–º–∞—Ö, –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö –∏ –≥—Ä–∞—Ñ–∏–∫–µ —É–±–æ—Ä–∫–∏...
            </p>
            <Button
              onClick={fetchInitialData}
              className="mt-4 bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg"
            >
              üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </div>
        )}
      </Card>

      <NotificationBar />
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–º–∞ */}
      {showCreateModal && (
        <CreateHouseModal
          onClose={() => setShowCreateModal(false)}
          onSubmit={handleCreateHouse}
          filters={filters}
        />
      )}
    </div>
  );
};

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–º–∞
const CreateHouseModal = ({ onClose, onSubmit, filters }) => {
  const [formData, setFormData] = useState({
    address: '',
    house_address: '',
    apartments_count: '',
    floors_count: '',
    entrances_count: '',
    tariff: '',
    brigade: '',
    management_company: '',
    region: ''
  });
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      await onSubmit(formData);
      onClose();
    } catch (error) {
      console.error('Error creating house:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="relative bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6 rounded-t-2xl">
          <div className="absolute -inset-1 bg-gradient-to-r from-blue-400 via-purple-500 to-blue-600 rounded-2xl blur opacity-20 animate-pulse"></div>
          <div className="relative">
            <h2 className="text-2xl font-bold mb-2">‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–º</h2>
            <p className="text-blue-100">–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞ –≤ Bitrix24 CRM</p>
          </div>
          <button
            onClick={onClose}
            className="absolute top-6 right-6 text-white hover:text-gray-200 text-2xl"
          >
            ‚úï
          </button>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="p-6 space-y-6">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-900 border-b pb-2">
              üè† –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ö—Ä–∞—Ç–∫–∏–π –∞–¥—Ä–µ—Å *
                </label>
                <input
                  type="text"
                  required
                  placeholder="–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 125 –∫1"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  value={formData.address}
                  onChange={(e) => handleChange('address', e.target.value)}
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
                </label>
                <input
                  type="text"
                  placeholder="–≥. –ö–∞–ª—É–≥–∞, —É–ª. –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è, –¥. 125, –∫. 1"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  value={formData.house_address}
                  onChange={(e) => handleChange('house_address', e.target.value)}
                />
              </div>
            </div>
          </div>

          {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-900 border-b pb-2">
              üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–º–∞
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ö–≤–∞—Ä—Ç–∏—Ä
                </label>
                <input
                  type="number"
                  min="1"
                  placeholder="156"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                  value={formData.apartments_count}
                  onChange={(e) => handleChange('apartments_count', e.target.value)}
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –≠—Ç–∞–∂–µ–π
                </label>
                <input
                  type="number"
                  min="1"
                  placeholder="12"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
                  value={formData.floors_count}
                  onChange={(e) => handleChange('floors_count', e.target.value)}
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ü–æ–¥—ä–µ–∑–¥–æ–≤
                </label>
                <input
                  type="number"
                  min="1"
                  placeholder="5"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
                  value={formData.entrances_count}
                  onChange={(e) => handleChange('entrances_count', e.target.value)}
                />
              </div>
            </div>
          </div>

          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-900 border-b pb-2">
              üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ë—Ä–∏–≥–∞–¥–∞
                </label>
                <select
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                  value={formData.brigade}
                  onChange={(e) => handleChange('brigade', e.target.value)}
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–∏–≥–∞–¥—É</option>
                  {filters.brigades?.map((brigade, index) => (
                    <option key={index} value={brigade}>{brigade}</option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –£–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è
                </label>
                <select
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
                  value={formData.management_company}
                  onChange={(e) => handleChange('management_company', e.target.value)}
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –£–ö</option>
                  {filters.management_companies?.map((company, index) => (
                    <option key={index} value={company}>{company}</option>
                  ))}
                </select>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –¢–∞—Ä–∏—Ñ/–º–µ—Å—è—Ü
                </label>
                <input
                  type="text"
                  placeholder="22,000 —Ä—É–±/–º–µ—Å"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500"
                  value={formData.tariff}
                  onChange={(e) => handleChange('tariff', e.target.value)}
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –†–∞–π–æ–Ω
                </label>
                <select
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
                  value={formData.region}
                  onChange={(e) => handleChange('region', e.target.value)}
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω</option>
                  {filters.regions?.map((region, index) => (
                    <option key={index} value={region}>{region}</option>
                  ))}
                </select>
              </div>
            </div>
          </div>

          {/* Buttons */}
          <div className="flex justify-end space-x-4 pt-6 border-t border-gray-200">
            <Button
              type="button"
              onClick={onClose}
              variant="ghost"
              className="px-6 py-3"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            
            <div className="relative group">
              <div className="absolute -inset-0.5 bg-gradient-to-r from-blue-400 via-cyan-500 to-blue-600 rounded-lg blur opacity-20 group-hover:opacity-50 transition duration-500"></div>
              <Button
                type="submit"
                disabled={loading || !formData.address}
                loading={loading}
                className="relative px-8 py-3 bg-blue-600 hover:bg-blue-700 text-white"
              >
                {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : 'üè† –°–æ–∑–¥–∞—Ç—å –¥–æ–º'}
              </Button>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
};

export default Works;