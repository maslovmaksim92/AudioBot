import React, { useState, useEffect, useRef } from 'react';
import { useApp } from '../../context/AppContext';
import { Card, Button, LoadingSpinner } from '../UI';

const WorksEnhanced = () => {
  const { actions } = useApp();
  
  // State
  const [houses, setHouses] = useState([]);
  const [filteredHouses, setFilteredHouses] = useState([]);
  const [filters, setFilters] = useState({
    brigades: [],
    cleaning_weeks: [],
    management_companies: [],
    months: []
  });
  const [dashboardStats, setDashboardStats] = useState({});
  const [loading, setLoading] = useState(false);
  
  // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  const [activeFilters, setActiveFilters] = useState({
    brigade: '',
    cleaning_week: '',
    month: '',
    management_company: '',
    search: ''
  });

  // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –í–ê–£ —Ñ—É–Ω–∫—Ü–∏–∏
  const [viewMode, setViewMode] = useState('cards');
  const [selectedMonth, setSelectedMonth] = useState('september'); 
  const [showCalendar, setShowCalendar] = useState(false);
  const [selectedHouse, setSelectedHouse] = useState(null);
  const [showExportModal, setShowExportModal] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [sortBy, setSortBy] = useState('address');
  const [sortOrder, setSortOrder] = useState('asc');
  const [animatedCards, setAnimatedCards] = useState(new Set());
  const [searchSuggestions, setSearchSuggestions] = useState([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [hoveredCard, setHoveredCard] = useState(null);
  const [notification, setNotification] = useState(null);
  
  // Refs –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
  const searchRef = useRef(null);
  const cardRefs = useRef({});

  useEffect(() => {
    fetchInitialData();
  }, []);

  // API calls
  const fetchInitialData = async () => {
    setLoading(true);
    try {
      await Promise.all([
        fetchFilters(),
        fetchHouses(),
        fetchDashboardStats()
      ]);
    } catch (error) {
      console.error('‚ùå Error fetching initial data:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchFilters = async () => {
    try {
      const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';
      const response = await fetch(`${BACKEND_URL}/api/cleaning/filters`);
      const data = await response.json();
      setFilters(data);
    } catch (error) {
      console.error('‚ùå Error fetching filters:', error);
    }
  };

  const fetchHouses = async () => {
    try {
      const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';
      const queryParams = new URLSearchParams();
      
      Object.entries(activeFilters).forEach(([key, value]) => {
        if (value) queryParams.append(key, value);
      });
      
      const url = `${BACKEND_URL}/api/cleaning/houses${queryParams.toString() ? '?' + queryParams.toString() : ''}`;
      const response = await fetch(url);
      const data = await response.json();
      
      setHouses(data.houses || []);
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
      const newAnimated = new Set();
      (data.houses || []).forEach((_, index) => {
        setTimeout(() => {
          newAnimated.add(index);
          setAnimatedCards(new Set(newAnimated));
        }, index * 50);
      });
    } catch (error) {
      console.error('‚ùå Error fetching houses:', error);
    }
  };

  const fetchDashboardStats = async () => {
    try {
      const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';
      const response = await fetch(`${BACKEND_URL}/api/cleaning/stats`);
      const data = await response.json();
      setDashboardStats(data);
    } catch (error) {
      console.error('‚ùå Error fetching stats:', error);
    }
  };

  // –í–ê–£ —Ñ—É–Ω–∫—Ü–∏–∏
  const handleSmartSearch = (searchTerm) => {
    setActiveFilters(prev => ({ ...prev, search: searchTerm }));
    
    if (searchTerm.length > 1) {
      const suggestions = houses
        .filter(house => 
          house.address?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          house.house_address?.toLowerCase().includes(searchTerm.toLowerCase())
        )
        .slice(0, 5)
        .map(house => ({
          text: house.address,
          address: house.house_address
        }));
      
      setSearchSuggestions(suggestions);
      setShowSuggestions(true);
    } else {
      setShowSuggestions(false);
    }
  };

  const openGoogleMaps = (address) => {
    if (address) {
      const mapsUrl = `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(address)}`;
      window.open(mapsUrl, '_blank');
      showNotification('üó∫Ô∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º Google Maps...', 'success');
    }
  };

  const handleCreateHouse = async (houseData) => {
    try {
      const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';
      const response = await fetch(`${BACKEND_URL}/api/cleaning/houses`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(houseData)
      });
      
      const result = await response.json();
      
      if (response.ok) {
        showNotification(`‚úÖ ${result.message}`, 'success');
        setShowCreateModal(false);
        fetchHouses(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      } else {
        showNotification(`‚ùå ${result.detail}`, 'error');
      }
    } catch (error) {
      console.error('‚ùå Error creating house:', error);
      showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–º–∞', 'error');
    }
  };

  const showNotification = (message, type = 'info') => {
    setNotification({ message, type });
    setTimeout(() => setNotification(null), 3000);
  };

  const exportToCSV = () => {
    const csvData = houses.map(house => ({
      '–ê–¥—Ä–µ—Å': house.address,
      '–†–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å': house.house_address || '',
      '–ö–≤–∞—Ä—Ç–∏—Ä': house.apartments_count || 0,
      '–≠—Ç–∞–∂–µ–π': house.floors_count || 0,
      '–ü–æ–¥—ä–µ–∑–¥–æ–≤': house.entrances_count || 0,
      '–ë—Ä–∏–≥–∞–¥–∞': house.brigade,
      '–£–ö': house.management_company || '',
      '–°—Ç–∞—Ç—É—Å': house.status_text
    }));

    const csv = [
      Object.keys(csvData[0]).join(','),
      ...csvData.map(row => Object.values(row).join(','))
    ].join('\n');

    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `houses_export_${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    
    showNotification('üì§ CSV —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω!', 'success');
    setShowExportModal(false);
  };

  // –†–µ–Ω–¥–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
  const renderHeader = () => (
    <div className="relative bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 text-white p-8 rounded-2xl mb-8 shadow-2xl overflow-hidden">
      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω */}
      <div className="absolute inset-0 bg-gradient-to-r from-blue-400/20 via-purple-400/20 to-indigo-400/20 animate-pulse"></div>
      
      {/* –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="relative flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-4 border border-white/20">
            <img 
              src="/logo.png" 
              alt="–õ–æ–≥–æ—Ç–∏–ø" 
              className="h-12 w-auto object-contain"
              onError={(e) => {
                e.target.style.display = 'none';
                e.target.nextSibling.style.display = 'block';
              }}
            />
            <div 
              className="text-2xl font-bold bg-white/20 rounded-lg px-3 py-1" 
              style={{display: 'none'}}
            >
              –†–Ø–î–û–ú
            </div>
          </div>
          
          <div>
            <h1 className="text-4xl font-bold mb-2 bg-gradient-to-r from-white to-blue-100 bg-clip-text">
              üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞–º–∏
            </h1>
            <p className="text-blue-100 text-lg">
              –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
            </p>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
        <Button
          onClick={() => setShowCreateModal(true)}
          className="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-xl shadow-lg transform hover:scale-105 transition-all duration-200 flex items-center space-x-2"
        >
          <span className="text-xl">‚ûï</span>
          <span>–°–æ–∑–¥–∞—Ç—å –¥–æ–º</span>
        </Button>
      </div>
    </div>
  );

  const renderDashboardCards = () => {
    const cards = [
      { 
        title: '–í—Å–µ–≥–æ –¥–æ–º–æ–≤', 
        value: dashboardStats.total_houses || 490, 
        icon: 'üè†', 
        gradient: 'from-green-400 to-green-600',
        subtitle: '+3 –∑–∞ –º–µ—Å—è—Ü'
      },
      { 
        title: '–ö–≤–∞—Ä—Ç–∏—Ä', 
        value: dashboardStats.total_apartments || 30153, 
        icon: 'üè¢', 
        gradient: 'from-blue-400 to-blue-600',
        subtitle: '–°—Ä–µ–¥–Ω–µ–µ: 62 –Ω–∞ –¥–æ–º'
      },
      { 
        title: '–ü–æ–¥—ä–µ–∑–¥–æ–≤', 
        value: dashboardStats.total_entrances || 1567, 
        icon: 'üö™', 
        gradient: 'from-purple-400 to-purple-600',
        subtitle: '–°—Ä–µ–¥–Ω–µ–µ: 3 –Ω–∞ –¥–æ–º'
      },
      { 
        title: '–≠—Ç–∞–∂–µ–π', 
        value: dashboardStats.total_floors || 2512, 
        icon: 'üìä', 
        gradient: 'from-orange-400 to-orange-600',
        subtitle: '–°—Ä–µ–¥–Ω–µ–µ: 5 —ç—Ç–∞–∂–µ–π'
      }
    ];

    return (
      <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
        {cards.map((card, index) => (
          <div
            key={index}
            className={`bg-gradient-to-br ${card.gradient} text-white p-6 rounded-2xl shadow-xl transform hover:scale-105 transition-all duration-300 hover:shadow-2xl cursor-pointer`}
            onMouseEnter={() => setHoveredCard(index)}
            onMouseLeave={() => setHoveredCard(null)}
          >
            <div className="flex items-center justify-between mb-4">
              <div className={`text-3xl transform transition-transform duration-300 ${hoveredCard === index ? 'scale-110' : ''}`}>
                {card.icon}
              </div>
              <div className="text-right">
                <div className="text-2xl font-bold">{card.value.toLocaleString()}</div>
                <div className="text-xs opacity-80">{card.title}</div>
              </div>
            </div>
            <div className="text-xs opacity-90">{card.subtitle}</div>
          </div>
        ))}
      </div>
    );
  };

  const renderSmartFilters = () => (
    <Card title="üîç –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞" className="mb-8">
      <div className="space-y-4">
        {/* –£–º–Ω—ã–π –ø–æ–∏—Å–∫ */}
        <div className="relative">
          <div className="flex items-center space-x-2">
            <span className="text-red-500">üìç</span>
            <label className="font-medium text-gray-700">–ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É</label>
          </div>
          <div className="relative mt-2">
            <input
              ref={searchRef}
              type="text"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞..."
              className="w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
              value={activeFilters.search}
              onChange={(e) => handleSmartSearch(e.target.value)}
              onFocus={() => setShowSuggestions(searchSuggestions.length > 0)}
            />
            
            {/* –£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ */}
            {showSuggestions && searchSuggestions.length > 0 && (
              <div className="absolute top-full left-0 right-0 bg-white border border-gray-200 rounded-xl shadow-lg z-10 mt-1">
                {searchSuggestions.map((suggestion, index) => (
                  <div
                    key={index}
                    className="p-3 hover:bg-gray-50 cursor-pointer border-b last:border-b-0"
                    onClick={() => {
                      setActiveFilters(prev => ({ ...prev, search: suggestion.text }));
                      setShowSuggestions(false);
                    }}
                  >
                    <div className="font-medium">{suggestion.text}</div>
                    <div className="text-sm text-gray-500">{suggestion.address}</div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
          {/* –ë—Ä–∏–≥–∞–¥—ã */}
          <div>
            <div className="flex items-center space-x-2 mb-2">
              <span className="text-blue-500">üë•</span>
              <label className="font-medium text-gray-700">–ë—Ä–∏–≥–∞–¥–∞</label>
            </div>
            <select
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              value={activeFilters.brigade}
              onChange={(e) => setActiveFilters(prev => ({ ...prev, brigade: e.target.value }))}
            >
              <option value="">–í—Å–µ –±—Ä–∏–≥–∞–¥—ã (0)</option>
              {filters.brigades?.map((brigade, index) => (
                <option key={index} value={brigade}>{brigade}</option>
              ))}
            </select>
          </div>

          {/* –ù–µ–¥–µ–ª–∏ —É–±–æ—Ä–∫–∏ */}
          <div>
            <div className="flex items-center space-x-2 mb-2">
              <span className="text-orange-500">üìÖ</span>
              <label className="font-medium text-gray-700">–ù–µ–¥–µ–ª—è —É–±–æ—Ä–∫–∏</label>
            </div>
            <select
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
              value={activeFilters.cleaning_week}
              onChange={(e) => setActiveFilters(prev => ({ ...prev, cleaning_week: e.target.value }))}
            >
              <option value="">–í—Å–µ –Ω–µ–¥–µ–ª–∏</option>
              {filters.cleaning_weeks?.map((week, index) => (
                <option key={index} value={week}>–ù–µ–¥–µ–ª—è {week}</option>
              ))}
            </select>
          </div>

          {/* –ú–µ—Å—è—Ü—ã */}
          <div>
            <div className="flex items-center space-x-2 mb-2">
              <span className="text-purple-500">üóìÔ∏è</span>
              <label className="font-medium text-gray-700">–ú–µ—Å—è—Ü</label>
            </div>
            <select
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
              value={activeFilters.month}
              onChange={(e) => setActiveFilters(prev => ({ ...prev, month: e.target.value }))}
            >
              <option value="">–í—Å–µ –º–µ—Å—è—Ü—ã</option>
              {filters.months?.map((month, index) => (
                <option key={index} value={month}>{month}</option>
              ))}
            </select>
          </div>

          {/* –£–ö */}
          <div>
            <div className="flex items-center space-x-2 mb-2">
              <span className="text-green-500">üè¢</span>
              <label className="font-medium text-gray-700">–£–ö</label>
            </div>
            <select
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
              value={activeFilters.management_company}
              onChange={(e) => setActiveFilters(prev => ({ ...prev, management_company: e.target.value }))}
            >
              <option value="">–í—Å–µ –£–ö (0)</option>
              {filters.management_companies?.map((company, index) => (
                <option key={index} value={company}>{company}</option>
              ))}
            </select>
          </div>

          {/* –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ */}
          <div>
            <div className="flex items-center space-x-2 mb-2">
              <span className="text-indigo-500">üìä</span>
              <label className="font-medium text-gray-700">–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫</label>
            </div>
            <select
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
              value={selectedMonth}
              onChange={(e) => setSelectedMonth(e.target.value)}
            >
              <option value="september">–°–µ–Ω—Ç—è–±—Ä—å</option>
              <option value="october">–û–∫—Ç—è–±—Ä—å</option>
              <option value="november">–ù–æ—è–±—Ä—å</option>
              <option value="december">–î–µ–∫–∞–±—Ä—å</option>
            </select>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex justify-between items-center pt-4 border-t">
          <div className="flex space-x-2">
            <Button
              onClick={fetchHouses}
              className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg"
            >
              –ü—Ä–∏–º–µ–Ω–∏—Ç—å
            </Button>
            <Button
              onClick={() => {
                setActiveFilters({
                  brigade: '',
                  cleaning_week: '',
                  month: '',
                  management_company: '',
                  search: ''
                });
                setShowSuggestions(false);
              }}
              className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg"
            >
              –°–±—Ä–æ—Å–∏—Ç—å
            </Button>
          </div>

          <div className="flex space-x-2">
            <Button
              onClick={() => setShowExportModal(true)}
              className="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2"
            >
              <span>üì§</span>
              <span>–≠–∫—Å–ø–æ—Ä—Ç</span>
            </Button>
            
            <div className="flex bg-gray-200 rounded-lg">
              <Button
                onClick={() => setViewMode('cards')}
                className={`px-4 py-2 rounded-l-lg ${viewMode === 'cards' ? 'bg-blue-500 text-white' : 'bg-transparent text-gray-700'}`}
              >
                üìä –ö–∞—Ä—Ç–æ—á–∫–∏
              </Button>
              <Button
                onClick={() => setViewMode('table')}
                className={`px-4 py-2 rounded-r-lg ${viewMode === 'table' ? 'bg-blue-500 text-white' : 'bg-transparent text-gray-700'}`}
              >
                üìã –¢–∞–±–ª–∏—Ü–∞
              </Button>
            </div>
          </div>
        </div>
      </div>
    </Card>
  );

  const renderHouseCard = (house, index) => (
    <div
      key={house.deal_id}
      ref={el => cardRefs.current[index] = el}
      className={`bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:scale-105 ${
        animatedCards.has(index) ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'
      } border-l-4 border-blue-500`}
      onMouseEnter={() => setHoveredCard(index)}
      onMouseLeave={() => setHoveredCard(null)}
    >
      <div className="p-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
        <div className="flex justify-between items-start mb-4">
          <div className="flex-1">
            <h3 className="text-lg font-bold text-gray-900 mb-1">{house.address}</h3>
            <div className="flex items-center space-x-2">
              <span className="text-gray-500">üìç</span>
              {house.house_address ? (
                <button
                  onClick={() => openGoogleMaps(house.house_address)}
                  className="text-blue-600 hover:text-blue-800 underline text-sm transition-colors"
                >
                  {house.house_address}
                </button>
              ) : (
                <span className="text-gray-400 text-sm">{house.address}</span>
              )}
            </div>
          </div>
          <div className="text-right">
            <span className="text-xs text-gray-500">ID: {house.deal_id}</span>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–∞ */}
        <div className="grid grid-cols-3 gap-3 mb-4">
          <div className="bg-green-50 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-green-600">{house.apartments_count || 0}</div>
            <div className="text-xs text-green-700">–ö–≤–∞—Ä—Ç–∏—Ä</div>
          </div>
          <div className="bg-blue-50 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-blue-600">{house.entrances_count || 0}</div>
            <div className="text-xs text-blue-700">–ü–æ–¥—ä–µ–∑–¥–æ–≤</div>
          </div>
          <div className="bg-orange-50 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-orange-600">{house.floors_count || 0}</div>
            <div className="text-xs text-orange-700">–≠—Ç–∞–∂–µ–π</div>
          </div>
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="space-y-2 mb-4">
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">üë• –ë—Ä–∏–≥–∞–¥–∞:</span>
            <span className="font-medium">{house.brigade}</span>
          </div>
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">üè¢ –£–ö:</span>
            <span className="font-medium text-xs">{house.management_company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
          </div>
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">üìã –°—Ç–∞—Ç—É—Å:</span>
            <span className={`px-2 py-1 rounded text-xs font-medium ${
              house.status_color === 'green' ? 'bg-green-100 text-green-800' :
              house.status_color === 'yellow' ? 'bg-yellow-100 text-yellow-800' :
              'bg-gray-100 text-gray-800'
            }`}>
              {house.status_text}
            </span>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex space-x-2">
          <Button
            onClick={() => {
              setSelectedHouse(house);
              setShowCalendar(true);
            }}
            className="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded-lg text-sm flex items-center justify-center space-x-1"
          >
            <span>üìÖ</span>
            <span>–ö–∞–ª–µ–Ω–¥–∞—Ä—å</span>
          </Button>
          <Button
            onClick={() => showNotification(`üìä –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è ${house.address}`, 'info')}
            className="flex-1 bg-gray-500 hover:bg-gray-600 text-white px-3 py-2 rounded-lg text-sm flex items-center justify-center space-x-1"
          >
            <span>üìä</span>
            <span>–î–µ—Ç–∞–ª–∏</span>
          </Button>
        </div>
      </div>
    </div>
  );

  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  const CreateHouseModal = () => {
    const [formData, setFormData] = useState({
      address: '',
      apartments_count: '',
      floors_count: '',
      entrances_count: '',
      tariff: '',
      management_company: ''
    });

    const handleSubmit = (e) => {
      e.preventDefault();
      const dataToSend = {
        ...formData,
        apartments_count: formData.apartments_count ? parseInt(formData.apartments_count) : null,
        floors_count: formData.floors_count ? parseInt(formData.floors_count) : null,
        entrances_count: formData.entrances_count ? parseInt(formData.entrances_count) : null,
      };
      handleCreateHouse(dataToSend);
    };

    if (!showCreateModal) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-2xl p-8 max-w-md w-full mx-4 shadow-2xl">
          <h2 className="text-2xl font-bold mb-6 flex items-center space-x-2">
            <span>üè†</span>
            <span>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–º</span>
          </h2>
          
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ê–¥—Ä–µ—Å –¥–æ–º–∞ *
              </label>
              <input
                type="text"
                required
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ–º–∞"
                value={formData.address}
                onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}
              />
            </div>
            
            <div className="grid grid-cols-3 gap-3">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">–ö–≤–∞—Ä—Ç–∏—Ä</label>
                <input
                  type="number" 
                  className="w-full p-2 border border-gray-300 rounded-lg"
                  value={formData.apartments_count}
                  onChange={(e) => setFormData(prev => ({ ...prev, apartments_count: e.target.value }))}
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">–≠—Ç–∞–∂–µ–π</label>
                <input
                  type="number"
                  className="w-full p-2 border border-gray-300 rounded-lg"
                  value={formData.floors_count}
                  onChange={(e) => setFormData(prev => ({ ...prev, floors_count: e.target.value }))}
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">–ü–æ–¥—ä–µ–∑–¥–æ–≤</label>
                <input
                  type="number"
                  className="w-full p-2 border border-gray-300 rounded-lg"
                  value={formData.entrances_count}
                  onChange={(e) => setFormData(prev => ({ ...prev, entrances_count: e.target.value }))}
                />
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">–¢–∞—Ä–∏—Ñ</label>
              <input
                type="text"
                className="w-full p-3 border border-gray-300 rounded-lg"
                placeholder="–¢–∞—Ä–∏—Ñ —É–±–æ—Ä–∫–∏"
                value={formData.tariff}
                onChange={(e) => setFormData(prev => ({ ...prev, tariff: e.target.value }))}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">–£–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è</label>
              <input
                type="text"
                className="w-full p-3 border border-gray-300 rounded-lg"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –£–ö"
                value={formData.management_company}
                onChange={(e) => setFormData(prev => ({ ...prev, management_company: e.target.value }))}
              />
            </div>
            
            <div className="flex space-x-3 pt-4">
              <Button
                type="submit"
                className="flex-1 bg-green-500 hover:bg-green-600 text-white py-3 rounded-lg"
              >
                ‚úÖ –°–æ–∑–¥–∞—Ç—å –≤ Bitrix24
              </Button>
              <Button
                type="button"
                onClick={() => setShowCreateModal(false)}
                className="flex-1 bg-gray-500 hover:bg-gray-600 text-white py-3 rounded-lg"
              >
                ‚ùå –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </form>
        </div>
      </div>
    );
  };

  const NotificationBar = () => {
    if (!notification) return null;

    const bgColor = notification.type === 'success' ? 'bg-green-500' :
                   notification.type === 'error' ? 'bg-red-500' : 'bg-blue-500';

    return (
      <div className={`fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300`}>
        {notification.message}
      </div>
    );
  };

  if (loading && houses.length === 0) {
    return (
      <div className="p-6 flex justify-center items-center min-h-96">
        <LoadingSpinner size="lg" text="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–æ–≤..." />
      </div>
    );
  }

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {renderHeader()}
      {renderDashboardCards()}
      {renderSmartFilters()}
      
      {/* –°–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤ */}
      <div className="mt-8">
        {viewMode === 'cards' ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {houses.map((house, index) => renderHouseCard(house, index))}
          </div>
        ) : (
          <Card title="üìã –¢–∞–±–ª–∏—Ü–∞ –¥–æ–º–æ–≤">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b">
                    <th className="text-left p-3">–ê–¥—Ä–µ—Å</th>
                    <th className="text-left p-3">–ö–≤–∞—Ä—Ç–∏—Ä</th>
                    <th className="text-left p-3">–≠—Ç–∞–∂–µ–π</th>
                    <th className="text-left p-3">–ü–æ–¥—ä–µ–∑–¥–æ–≤</th>
                    <th className="text-left p-3">–ë—Ä–∏–≥–∞–¥–∞</th>
                    <th className="text-left p-3">–£–ö</th>
                    <th className="text-left p-3">–°—Ç–∞—Ç—É—Å</th>
                  </tr>
                </thead>
                <tbody>
                  {houses.map((house, index) => (
                    <tr key={house.deal_id} className="border-b hover:bg-gray-50">
                      <td className="p-3">
                        <div>
                          <div className="font-medium">{house.address}</div>
                          {house.house_address && (
                            <button
                              onClick={() => openGoogleMaps(house.house_address)}
                              className="text-blue-600 hover:text-blue-800 underline text-xs"
                            >
                              üìç {house.house_address}
                            </button>
                          )}
                        </div>
                      </td>
                      <td className="p-3">{house.apartments_count || 0}</td>
                      <td className="p-3">{house.floors_count || 0}</td>
                      <td className="p-3">{house.entrances_count || 0}</td>
                      <td className="p-3">{house.brigade}</td>
                      <td className="p-3 text-xs">{house.management_company || '-'}</td>
                      <td className="p-3">
                        <span className={`px-2 py-1 rounded text-xs ${
                          house.status_color === 'green' ? 'bg-green-100 text-green-800' :
                          house.status_color === 'yellow' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {house.status_text}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </Card>
        )}
      </div>

      <CreateHouseModal />
      <NotificationBar />
    </div>
  );
};

export default WorksEnhanced;