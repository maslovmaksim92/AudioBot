#!/usr/bin/env python3
"""
Quick Houses API Test - –ü—Ä–æ–≤–µ—Ä–∫–∞ API –¥–æ–º–æ–≤ –ø–æ—Å–ª–µ Frontend –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
–¶–µ–ª—å: —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ Frontend –ø—Ä–æ–±–ª–µ–º—ã
"""

import asyncio
import httpx
import json
from pathlib import Path

def get_backend_url():
    """–ü–æ–ª—É—á–∏—Ç—å URL backend –∏–∑ frontend/.env"""
    try:
        frontend_env_path = Path(__file__).parent / "frontend" / ".env"
        if frontend_env_path.exists():
            with open(frontend_env_path, 'r') as f:
                for line in f:
                    if line.startswith('REACT_APP_BACKEND_URL='):
                        url = line.split('=', 1)[1].strip()
                        return f"{url}/api"
        return "https://crmunified.preview.emergentagent.com/api"
    except Exception as e:
        print(f"‚ùå Error reading backend URL: {e}")
        return "https://crmunified.preview.emergentagent.com/api"

BACKEND_URL = get_backend_url()
print(f"üîó Testing backend at: {BACKEND_URL}")

async def test_houses_490_api():
    """
    –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –¥–æ–º–æ–≤:
    1. GET /api/cleaning/houses-490 - –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 490 –¥–æ–º–æ–≤
    2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å structure –¥–∞–Ω–Ω—ã—Ö - –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–æ–º–æ–≤
    """
    print("\nüè† QUICK HOUSES API TEST - GET /api/cleaning/houses-490")
    print("=" * 60)
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(f"{BACKEND_URL}/cleaning/houses-490")
            
            print(f"Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                houses = data.get("houses", [])
                total = len(houses)
                
                print(f"‚úÖ SUCCESS: API responded")
                print(f"üìä Houses loaded: {total}")
                
                # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–º–æ–≤
                if total >= 490:
                    print(f"‚úÖ –ö–û–õ–ò–ß–ï–°–¢–í–û –î–û–ú–û–í: {total} (–æ–∂–∏–¥–∞–ª–æ—Å—å 490) - OK")
                else:
                    print(f"‚ö†Ô∏è –ö–û–õ–ò–ß–ï–°–¢–í–û –î–û–ú–û–í: {total} (–æ–∂–∏–¥–∞–ª–æ—Å—å 490) - –ú–ï–ù–¨–®–ï –û–ñ–ò–î–ê–ï–ú–û–ì–û")
                
                # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = ['address', 'deal_id', 'management_company', 'september_schedule']
                
                if houses:
                    sample_house = houses[0]
                    print(f"\nüìã –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:")
                    
                    missing_fields = []
                    present_fields = []
                    
                    for field in required_fields:
                        if field in sample_house:
                            present_fields.append(field)
                            print(f"   ‚úÖ {field}: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                        else:
                            missing_fields.append(field)
                            print(f"   ‚ùå {field}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                    
                    if missing_fields:
                        print(f"‚ö†Ô∏è –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ü–û–õ–Ø: {missing_fields}")
                    else:
                        print(f"‚úÖ –í–°–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –ü–†–ò–°–£–¢–°–¢–í–£–Æ–¢")
                    
                    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–æ–º–æ–≤ - –ø–µ—Ä–≤—ã–µ 3 –¥–æ–º–∞
                    print(f"\nüè† –ü–†–ò–ú–ï–†–´ –î–û–ú–û–í - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
                    
                    for i, house in enumerate(houses[:3]):
                        print(f"\n   –î–æ–º #{i+1}:")
                        print(f"   - Address: {house.get('address', 'N/A')}")
                        print(f"   - Deal ID: {house.get('deal_id', 'N/A')}")
                        print(f"   - –£–ö: {house.get('management_company', 'N/A')}")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ september_schedule
                        september_schedule = house.get('september_schedule')
                        if september_schedule:
                            if isinstance(september_schedule, dict):
                                schedule_keys = list(september_schedule.keys())
                                print(f"   - September Schedule: {len(schedule_keys)} –ø–æ–ª–µ–π ({schedule_keys[:3]}...)")
                            else:
                                print(f"   - September Schedule: {type(september_schedule)} - {str(september_schedule)[:50]}...")
                        else:
                            print(f"   - September Schedule: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                    
                    # 4. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
                    print(f"\nüìä –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•:")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –£–ö
                    filled_uk = sum(1 for h in houses if h.get('management_company') and h.get('management_company') != 'null')
                    uk_percentage = (filled_uk / total * 100) if total > 0 else 0
                    print(f"   - –£–ö –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: {filled_uk}/{total} ({uk_percentage:.1f}%)")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ september_schedule
                    filled_schedule = sum(1 for h in houses if h.get('september_schedule'))
                    schedule_percentage = (filled_schedule / total * 100) if total > 0 else 0
                    print(f"   - September Schedule: {filled_schedule}/{total} ({schedule_percentage:.1f}%)")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
                    filled_addresses = sum(1 for h in houses if h.get('address'))
                    address_percentage = (filled_addresses / total * 100) if total > 0 else 0
                    print(f"   - –ê–¥—Ä–µ—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: {filled_addresses}/{total} ({address_percentage:.1f}%)")
                    
                    # –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
                    source = data.get("source", "Unknown")
                    print(f"   - –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {source}")
                    
                    # 5. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
                    print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
                    
                    issues = []
                    if total < 490:
                        issues.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–æ–≤ –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ ({total} < 490)")
                    if missing_fields:
                        issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
                    if uk_percentage < 50:
                        issues.append(f"–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –£–ö ({uk_percentage:.1f}%)")
                    if schedule_percentage < 50:
                        issues.append(f"–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ ({schedule_percentage:.1f}%)")
                    
                    if issues:
                        print(f"   ‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
                        for issue in issues:
                            print(f"      - {issue}")
                        print(f"   üîç –í–´–í–û–î: –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ backend –¥–∞–Ω–Ω—ã—Ö")
                    else:
                        print(f"   ‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´")
                        print(f"   üîç –í–´–í–û–î: Backend –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø—Ä–æ–±–ª–µ–º–∞ –≤ Frontend")
                    
                    return True
                else:
                    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–æ–º–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ")
                    return False
                    
            else:
                print(f"‚ùå FAILED: HTTP {response.status_code}")
                print(f"Response: {response.text}")
                return False
                
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ VasDom AudioBot - Quick Houses API Test")
    print("üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –¥–æ–º–æ–≤ –ø–æ—Å–ª–µ Frontend –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    print("üîç –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    success = await test_houses_490_api()
    
    print(f"\n{'='*60}")
    if success:
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
    else:
        print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò")
    print(f"{'='*60}")
    
    return success

if __name__ == "__main__":
    result = asyncio.run(main())