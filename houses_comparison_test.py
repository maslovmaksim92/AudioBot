#!/usr/bin/env python3
"""
Houses API Comparison Test - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –∏ houses-490 endpoints
"""

import asyncio
import httpx
import json
from pathlib import Path

def get_backend_url():
    """–ü–æ–ª—É—á–∏—Ç—å URL backend –∏–∑ frontend/.env"""
    try:
        frontend_env_path = Path(__file__).parent / "frontend" / ".env"
        if frontend_env_path.exists():
            with open(frontend_env_path, 'r') as f:
                for line in f:
                    if line.startswith('REACT_APP_BACKEND_URL='):
                        url = line.split('=', 1)[1].strip()
                        return f"{url}/api"
        return "https://crmunified.preview.emergentagent.com/api"
    except Exception as e:
        print(f"‚ùå Error reading backend URL: {e}")
        return "https://crmunified.preview.emergentagent.com/api"

BACKEND_URL = get_backend_url()

async def test_houses_endpoints():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –∏ houses-490 endpoints"""
    print("üîç –°–†–ê–í–ù–ï–ù–ò–ï HOUSES ENDPOINTS")
    print("=" * 50)
    
    endpoints = [
        ("/cleaning/houses", "–û–±—ã—á–Ω—ã–π houses endpoint"),
        ("/cleaning/houses-490", "Houses-490 endpoint")
    ]
    
    results = {}
    
    for endpoint, description in endpoints:
        print(f"\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {description}: {endpoint}")
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.get(f"{BACKEND_URL}{endpoint}")
                
                if response.status_code == 200:
                    data = response.json()
                    houses = data.get("houses", [])
                    total = len(houses)
                    source = data.get("source", "Unknown")
                    
                    print(f"   ‚úÖ Status: {response.status_code}")
                    print(f"   üìä Houses: {total}")
                    print(f"   üîó Source: {source}")
                    
                    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
                    if houses:
                        sample = houses[0]
                        uk_filled = sum(1 for h in houses if h.get('management_company') and h.get('management_company') != 'null')
                        schedule_filled = sum(1 for h in houses if h.get('september_schedule'))
                        
                        print(f"   üè¢ –£–ö –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: {uk_filled}/{total} ({uk_filled/total*100:.1f}%)")
                        print(f"   üìÖ –ì—Ä–∞—Ñ–∏–∫–∏: {schedule_filled}/{total} ({schedule_filled/total*100:.1f}%)")
                        print(f"   üìã –ü–æ–ª—è –≤ –ø—Ä–∏–º–µ—Ä–µ: {len(sample.keys())}")
                    
                    results[endpoint] = {
                        "success": True,
                        "total": total,
                        "source": source,
                        "uk_filled": uk_filled if houses else 0,
                        "schedule_filled": schedule_filled if houses else 0
                    }
                else:
                    print(f"   ‚ùå Status: {response.status_code}")
                    print(f"   üìù Response: {response.text[:100]}...")
                    results[endpoint] = {"success": False, "status": response.status_code}
                    
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
            results[endpoint] = {"success": False, "error": str(e)}
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 50)
    
    houses_result = results.get("/cleaning/houses", {})
    houses_490_result = results.get("/cleaning/houses-490", {})
    
    if houses_result.get("success") and houses_490_result.get("success"):
        print(f"‚úÖ –û–±–∞ endpoint —Ä–∞–±–æ—Ç–∞—é—Ç")
        print(f"üìä –û–±—ã—á–Ω—ã–π houses: {houses_result['total']} –¥–æ–º–æ–≤")
        print(f"üìä Houses-490: {houses_490_result['total']} –¥–æ–º–æ–≤")
        print(f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±—ã—á–Ω—ã–π: {houses_result['source']}")
        print(f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫ houses-490: {houses_490_result['source']}")
        
        if houses_result['total'] != houses_490_result['total']:
            print(f"‚ö†Ô∏è –†–ê–ó–ù–ò–¶–ê –í –ö–û–õ–ò–ß–ï–°–¢–í–ï: {abs(houses_result['total'] - houses_490_result['total'])} –¥–æ–º–æ–≤")
        else:
            print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ")
            
    else:
        print(f"‚ùå –û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
        if not houses_result.get("success"):
            print(f"   - –û–±—ã—á–Ω—ã–π houses: –û–®–ò–ë–ö–ê")
        if not houses_490_result.get("success"):
            print(f"   - Houses-490: –û–®–ò–ë–ö–ê")
    
    return results

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Houses API Comparison Test")
    
    results = await test_houses_endpoints()
    
    print(f"\n{'='*50}")
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print(f"{'='*50}")
    
    return results

if __name__ == "__main__":
    result = asyncio.run(main())