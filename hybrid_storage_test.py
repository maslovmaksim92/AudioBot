#!/usr/bin/env python3
"""
Hybrid Storage System Test for VasDom AudioBot
Testing PostgreSQL + in-memory fallback system as per review request
"""

import requests
import json
import time
from datetime import datetime

class HybridStorageTest:
    def __init__(self):
        self.base_url = "https://smart-audiobot.preview.emergentagent.com"
        self.api_url = f"{self.base_url}/api"
        self.session_id = f"hybrid_test_{int(time.time())}"
        self.log_ids = []
        
    def log_result(self, test_name, success, details=""):
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        print(f"{status} {test_name}: {details}")
        return success
    
    def make_request(self, method, endpoint, data=None):
        url = f"{self.api_url}/{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, timeout=30)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers, timeout=30)
            
            return response.status_code, response.json() if response.text else {}
        except Exception as e:
            return 0, {"error": str(e)}
    
    def test_storage_detection(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 1: Storage detection via /api/health"""
        print("\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 1: Storage Detection")
        status, data = self.make_request('GET', 'health')
        
        if status == 200:
            services = data.get('services', {})
            database_status = services.get('database', None)
            storage_status = services.get('storage', None)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            if database_status is False and storage_status is True:
                return self.log_result("Storage Detection", True, 
                    "‚úÖ In-memory fallback –∞–∫—Ç–∏–≤–µ–Ω (database=false, storage=true)")
            elif database_status is True:
                return self.log_result("Storage Detection", True, 
                    "‚úÖ PostgreSQL –∞–∫—Ç–∏–≤–µ–Ω (database=true)")
            else:
                return self.log_result("Storage Detection", False, 
                    f"‚ùå –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: database={database_status}, storage={storage_status}")
        else:
            return self.log_result("Storage Detection", False, f"‚ùå Health check failed: {status}")
    
    def test_full_ai_cycle(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 2: –ü–æ–ª–Ω—ã–π AI —Ü–∏–∫–ª"""
        print("\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 2: Full AI Cycle")
        
        # –®–∞–≥ 1: POST /api/voice/process
        print("  üìù –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        message_data = {
            "message": "–ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å –ø–æ–¥—ä–µ–∑–¥—ã –≤ –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã—Ö –¥–æ–º–∞—Ö? –ö–∞–∫–∏–µ –µ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã?",
            "session_id": self.session_id
        }
        
        status, response = self.make_request('POST', 'voice/process', message_data)
        if status != 200:
            return self.log_result("Full AI Cycle - Step 1", False, f"Voice process failed: {status}")
        
        log_id = response.get('log_id')
        if not log_id:
            return self.log_result("Full AI Cycle - Step 1", False, "No log_id returned")
        
        self.log_ids.append(log_id)
        ai_response = response.get('response', '')
        similar_found = response.get('similar_found', 0)
        
        print(f"    ‚úÖ AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ—Ö–æ–∂–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {similar_found}")
        
        # –®–∞–≥ 2: POST /api/voice/feedback
        print("  ‚≠ê –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞...")
        feedback_data = {
            "log_id": log_id,
            "rating": 5,
            "feedback_text": "–û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ –∫–ª–∏–Ω–∏–Ω–≥—É –ø–æ–¥—ä–µ–∑–¥–æ–≤!"
        }
        
        status, feedback_response = self.make_request('POST', 'voice/feedback', feedback_data)
        if status != 200:
            return self.log_result("Full AI Cycle - Step 2", False, f"Feedback failed: {status}")
        
        will_train = feedback_response.get('will_be_used_for_training', False)
        print(f"    ‚úÖ –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–∏–Ω—è—Ç, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {will_train}")
        
        # –®–∞–≥ 3: GET /api/learning/stats
        print("  üìä –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        
        status, stats = self.make_request('GET', 'learning/stats')
        if status != 200:
            return self.log_result("Full AI Cycle - Step 3", False, f"Stats failed: {status}")
        
        total_interactions = stats.get('total_interactions', 0)
        avg_rating = stats.get('avg_rating')
        positive_ratings = stats.get('positive_ratings', 0)
        
        print(f"    ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {total_interactions} –¥–∏–∞–ª–æ–≥–æ–≤, —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating}, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {positive_ratings}")
        
        return self.log_result("Full AI Cycle", True, 
            f"–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω: —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –æ—Ç–≤–µ—Ç ‚Üí —Ä–µ–π—Ç–∏–Ω–≥ ‚Üí —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    def test_persistence(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 3: Persistence test"""
        print("\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 3: Data Persistence")
        
        # –°–æ–∑–¥–∞–µ–º –µ—â–µ –æ–¥–∏–Ω –¥–∏–∞–ª–æ–≥
        message_data = {
            "message": "–ö–∞–∫–∏–µ —Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —É–±–æ—Ä–∫–∏ –ø–æ–¥—ä–µ–∑–¥–æ–≤?",
            "session_id": self.session_id
        }
        
        status, response = self.make_request('POST', 'voice/process', message_data)
        if status != 200:
            return self.log_result("Persistence Test", False, f"Failed to create dialog: {status}")
        
        log_id = response.get('log_id')
        self.log_ids.append(log_id)
        
        # –î–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        feedback_data = {
            "log_id": log_id,
            "rating": 4,
            "feedback_text": "–•–æ—Ä–æ—à–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö"
        }
        
        status, _ = self.make_request('POST', 'voice/feedback', feedback_data)
        if status != 200:
            return self.log_result("Persistence Test", False, f"Failed to rate dialog: {status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        time.sleep(1)
        status, stats = self.make_request('GET', 'learning/stats')
        if status != 200:
            return self.log_result("Persistence Test", False, f"Failed to get stats: {status}")
        
        total_interactions = stats.get('total_interactions', 0)
        if total_interactions >= 2:
            return self.log_result("Persistence Test", True, 
                f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {total_interactions} –¥–∏–∞–ª–æ–≥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ")
        else:
            return self.log_result("Persistence Test", False, 
                f"–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å: —Ç–æ–ª—å–∫–æ {total_interactions} –¥–∏–∞–ª–æ–≥–æ–≤")
    
    def test_learning_endpoints(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 4: Learning endpoints"""
        print("\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 4: Learning Endpoints")
        
        # GET /api/learning/stats
        status, stats = self.make_request('GET', 'learning/stats')
        stats_ok = status == 200 and 'total_interactions' in stats
        
        # GET /api/learning/export
        status, export_data = self.make_request('GET', 'learning/export')
        export_ok = status == 200 and 'total_exported' in export_data
        
        if stats_ok and export_ok:
            total_interactions = stats.get('total_interactions', 0)
            total_exported = export_data.get('total_exported', 0)
            return self.log_result("Learning Endpoints", True, 
                f"Stats: {total_interactions} –¥–∏–∞–ª–æ–≥–æ–≤, Export: {total_exported} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö")
        else:
            return self.log_result("Learning Endpoints", False, 
                f"Stats OK: {stats_ok}, Export OK: {export_ok}")
    
    def test_health_database_status(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 5: Health check database status"""
        print("\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 5: Database Status in Health Check")
        
        status, data = self.make_request('GET', 'health')
        if status != 200:
            return self.log_result("Health Database Status", False, f"Health check failed: {status}")
        
        services = data.get('services', {})
        database_status = services.get('database')
        storage_status = services.get('storage')
        critical_checks = data.get('critical_checks', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ç—É—Å –ë–î –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if database_status is not None and storage_status is True:
            db_type = "PostgreSQL" if database_status else "In-Memory"
            return self.log_result("Health Database Status", True, 
                f"–°—Ç–∞—Ç—É—Å –ë–î –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è: {db_type} (database={database_status})")
        else:
            return self.log_result("Health Database Status", False, 
                f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ë–î: database={database_status}, storage={storage_status}")
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ë–†–ò–î–ù–û–ô –°–ò–°–¢–ï–ú–´ –•–†–ê–ù–ï–ù–ò–Ø VasDom AudioBot")
        print("üîÑ PostgreSQL + In-Memory Fallback System")
        print("üåê URL:", self.base_url)
        print("=" * 80)
        
        results = []
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
        results.append(self.test_storage_detection())
        results.append(self.test_full_ai_cycle())
        results.append(self.test_persistence())
        results.append(self.test_learning_endpoints())
        results.append(self.test_health_database_status())
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        passed = sum(results)
        total = len(results)
        
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ì–ò–ë–†–ò–î–ù–û–ì–û –•–†–ê–ù–ò–õ–ò–©–ê")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
        
        if passed == total:
            print("üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("‚úÖ –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ Fallback –Ω–∞ in-memory —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("‚úÖ AI —Ü–∏–∫–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è")
        
        return passed == total

if __name__ == "__main__":
    tester = HybridStorageTest()
    success = tester.run_all_tests()
    exit(0 if success else 1)
