#!/usr/bin/env python3
"""
–ò–º–ø–æ—Ä—Ç –≤—ã–ø–∏—Å–æ–∫ –û–û–û –í–ê–® –î–û–ú
"""
import pandas as pd
import asyncpg
import os
import asyncio
from datetime import datetime
from uuid import uuid4
import re

# –ú–∞–ø–ø–∏–Ω–≥ –º–µ—Å—è—Ü–µ–≤
MONTH_MAP = {
    1: '–Ø–Ω–≤–∞—Ä—å 2025',
    2: '–§–µ–≤—Ä–∞–ª—å 2025',
    3: '–ú–∞—Ä—Ç 2025',
    4: '–ê–ø—Ä–µ–ª—å 2025',
    5: '–ú–∞–π 2025',
    6: '–ò—é–Ω—å 2025',
    7: '–ò—é–ª—å 2025',
    8: '–ê–≤–≥—É—Å—Ç 2025',
    9: '–°–µ–Ω—Ç—è–±—Ä—å 2025'
}

FILES = [
    '/tmp/vyp1.xlsx',
    '/tmp/vyp2.xlsx',
    '/tmp/vyp3.xlsx',
    '/tmp/vyp4.xlsx'
]

def is_internal_transfer(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–º –º–µ–∂–¥—É —Å–≤–æ–∏–º–∏ —Å—á–µ—Ç–∞–º–∏"""
    if not text or pd.isna(text):
        return False
    text_lower = str(text).lower()
    return ('–≤–∞—à –¥–æ–º' in text_lower or 
            '–æ–æ–æ "–≤–∞—à –¥–æ–º"' in text_lower or 
            '–æ–æ–æ –≤–∞—à –¥–æ–º' in text_lower or
            '–ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏' in text_lower or
            '–ø–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏' in text_lower)

def extract_counterparty(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    if not text or pd.isna(text):
        return None
    
    text = str(text)
    
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    patterns = [
        r'(?:–û–û–û|–ê–û|–ü–ê–û|–ò–ü|–ó–ê–û)\s*["\']?([^"\']+?)["\']?(?:\s+–ø–æ\s+|$|\s+–æ—Ç\s+)',
        r'(?:–û–û–û|–ê–û|–ü–ê–û|–ò–ü|–ó–ê–û)\s+([–ê-–Ø–∞-—è\s"]+?)(?:\s+–ø–æ\s+|\s+–æ—Ç\s+|$)',
        r'–î–ª—è\s+([–ê-–Ø–∞-—è\s"‚Ññ]+?)(?:\s+–ø–æ\s+|$)',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            counterparty = match.group(1).strip()
            # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            counterparty = re.sub(r'\s+', ' ', counterparty)
            if len(counterparty) > 5:
                return counterparty[:255]
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    words = text.split()[:5]
    return ' '.join(words) if words else None

async def import_statements():
    db_url = os.environ.get('DATABASE_URL')
    conn = await asyncpg.connect(db_url)
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–æ—Ö–æ–¥—ã –û–û–û –í–ê–® –î–û–ú
        await conn.execute("""
            DELETE FROM financial_transactions
            WHERE company = '–û–û–û –í–ê–® –î–û–ú' AND type = 'income'
        """)
        print("üóëÔ∏è  –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–æ—Ö–æ–¥—ã –û–û–û –í–ê–® –î–û–ú")
        
        imported = 0
        skipped = 0
        
        for file_path in FILES:
            print(f"\n{'='*60}")
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path}")
            print('='*60)
            
            try:
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å—Ç—Ä–æ–∫–∏ 10 (–∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ 9, –¥–∞–Ω–Ω—ã–µ —Å 10)
                df = pd.read_excel(file_path, header=9)
                
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")
                print(f"–ö–æ–ª–æ–Ω–∫–∏: {df.columns.tolist()[:10]}")
                
                # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
                date_col = None
                amount_col = None
                purpose_col = None
                counterparty_col = None
                
                for col in df.columns:
                    col_str = str(col).lower()
                    if '–¥–∞—Ç–∞' in col_str and not date_col:
                        date_col = col
                    if '–∫—Ä–µ–¥–∏—Ç' in col_str and '—Å—É–º–º–∞' in col_str:
                        amount_col = col
                    if '–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ' in col_str or '–Ω–∞–∑–≤–∞–Ω–∏–µ' in col_str:
                        purpose_col = col
                    if '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç' in col_str or '–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞' in col_str:
                        counterparty_col = col
                
                print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:")
                print(f"  –î–∞—Ç–∞: {date_col}")
                print(f"  –°—É–º–º–∞: {amount_col}")
                print(f"  –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {purpose_col}")
                print(f"  –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {counterparty_col}")
                
                if not all([date_col, amount_col]):
                    print("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª")
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
                for index, row in df.iterrows():
                    try:
                        date = row[date_col]
                        amount = row[amount_col]
                        
                        if pd.isna(date) or pd.isna(amount):
                            continue
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
                        if isinstance(date, str):
                            date = pd.to_datetime(date, dayfirst=True)
                        if not isinstance(date, pd.Timestamp):
                            date = pd.Timestamp(date)
                        
                        python_date = date.to_pydatetime()
                        month_ru = MONTH_MAP.get(python_date.month)
                        
                        if not month_ru:
                            continue
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—É
                        amount_float = float(amount)
                        if amount_float <= 0:
                            continue
                        
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
                        purpose = str(row[purpose_col]) if purpose_col and pd.notna(row[purpose_col]) else ""
                        counterparty = str(row[counterparty_col]) if counterparty_col and pd.notna(row[counterparty_col]) else ""
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å–≤–æ–∏–º–∏ —Å—á–µ—Ç–∞–º–∏
                        if is_internal_transfer(purpose) or is_internal_transfer(counterparty):
                            skipped += 1
                            continue
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        if not counterparty or counterparty == "":
                            counterparty = extract_counterparty(purpose)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
                        purpose_lower = purpose.lower()
                        if '—É–±–æ—Ä–∫' in purpose_lower or '–º–æ–ø' in purpose_lower:
                            category = '–£–±–æ—Ä–∫–∞'
                        elif '—à–≤' in purpose_lower or '–ø–æ—à–∏–≤' in purpose_lower:
                            category = '–®–≤–µ–∏'
                        elif '–∞—É—Ç—Å–æ—Ä—Å' in purpose_lower:
                            category = '–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥'
                        else:
                            category = '–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã'
                        
                        # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
                        transaction_id = str(uuid4())
                        query = """
                            INSERT INTO financial_transactions 
                            (id, date, amount, category, type, description, counterparty, project, company, created_at, updated_at)
                            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                        """
                        await conn.execute(
                            query,
                            transaction_id,
                            python_date,
                            amount_float,
                            category,
                            'income',
                            purpose[:500] if purpose else '',
                            counterparty[:255] if counterparty else '',
                            month_ru,
                            '–û–û–û –í–ê–® –î–û–ú'
                        )
                        imported += 1
                        
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index}: {e}")
                        continue
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
                continue
        
        print(f"\n{'='*60}")
        print(f"=== –ò–¢–û–ì–û ===")
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–æ—Ö–æ–¥–æ–≤: {imported}")
        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã): {skipped}")
        print('='*60)
        
    finally:
        await conn.close()

if __name__ == '__main__':
    asyncio.run(import_statements())
