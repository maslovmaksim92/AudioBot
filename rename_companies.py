#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–û–û–û –í–ê–® –î–û–ú -> –í–ê–® –î–û–ú –§–ê–ö–¢
–£–§–ò–¶ -> –£–§–ò–¶ –º–æ–¥–µ–ª—å
"""

import asyncio
import asyncpg
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('/app/backend/.env')

async def rename_companies():
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db_url = os.environ.get('DATABASE_URL')
    
    if not db_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    conn = await asyncpg.connect(db_url)
    
    try:
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ financial_transactions
        print("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã financial_transactions...")
        
        # –û–û–û –í–ê–® –î–û–ú -> –í–ê–® –î–û–ú –§–ê–ö–¢
        result1 = await conn.execute("""
            UPDATE financial_transactions 
            SET company = '–í–ê–® –î–û–ú –§–ê–ö–¢' 
            WHERE company = '–û–û–û –í–ê–® –î–û–ú'
        """)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ '–û–û–û –í–ê–® –î–û–ú' -> '–í–ê–® –î–û–ú –§–ê–ö–¢': {result1}")
        
        # –£–§–ò–¶ -> –£–§–ò–¶ –º–æ–¥–µ–ª—å
        result2 = await conn.execute("""
            UPDATE financial_transactions 
            SET company = '–£–§–ò–¶ –º–æ–¥–µ–ª—å' 
            WHERE company = '–£–§–ò–¶'
        """)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ '–£–§–ò–¶' -> '–£–§–ò–¶ –º–æ–¥–µ–ª—å': {result2}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        companies = await conn.fetch("""
            SELECT company, COUNT(*) as count 
            FROM financial_transactions 
            GROUP BY company
        """)
        
        for row in companies:
            print(f"   {row['company']}: {row['count']} –∑–∞–ø–∏—Å–µ–π")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É monthly_revenue –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        print("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã monthly_revenue...")
        table_exists = await conn.fetchval("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'monthly_revenue'
            )
        """)
        
        if table_exists:
            result3 = await conn.execute("""
                UPDATE monthly_revenue 
                SET company = '–í–ê–® –î–û–ú –§–ê–ö–¢' 
                WHERE company = '–û–û–û –í–ê–® –î–û–ú'
            """)
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ '–û–û–û –í–ê–® –î–û–ú' -> '–í–ê–® –î–û–ú –§–ê–ö–¢': {result3}")
            
            result4 = await conn.execute("""
                UPDATE monthly_revenue 
                SET company = '–£–§–ò–¶ –º–æ–¥–µ–ª—å' 
                WHERE company = '–£–§–ò–¶'
            """)
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ '–£–§–ò–¶' -> '–£–§–ò–¶ –º–æ–¥–µ–ª—å': {result4}")
        else:
            print("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ monthly_revenue –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        print("\n‚úÖ –í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await conn.close()

if __name__ == "__main__":
    asyncio.run(rename_companies())
