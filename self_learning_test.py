#!/usr/bin/env python3
"""
Advanced Self-Learning Test for VasDom AudioBot v3.0
Tests the revolutionary self-learning features:
- Multiple conversations to build learning data
- Rating system impact on learning
- Similar conversation detection
- Learning statistics evolution
- Export functionality with quality data
"""

import requests
import json
import time
from datetime import datetime

class SelfLearningTester:
    def __init__(self, base_url="http://localhost:8001"):
        self.base_url = base_url
        self.api_url = f"{base_url}/api"
        self.conversations = []
        
    def create_conversation(self, message: str, session_id: str = None) -> dict:
        """Create a conversation and return the response"""
        if not session_id:
            session_id = f"learning_test_{int(time.time())}"
            
        data = {
            "message": message,
            "session_id": session_id
        }
        
        response = requests.post(f"{self.api_url}/voice/process", json=data)
        if response.status_code == 200:
            result = response.json()
            self.conversations.append(result)
            return result
        else:
            print(f"‚ùå Failed to create conversation: {response.status_code}")
            return {}
    
    def rate_conversation(self, log_id: str, rating: int, feedback: str = None) -> bool:
        """Rate a conversation"""
        data = {
            "log_id": log_id,
            "rating": rating,
            "feedback_text": feedback
        }
        
        response = requests.post(f"{self.api_url}/voice/feedback", json=data)
        return response.status_code == 200
    
    def get_learning_stats(self) -> dict:
        """Get current learning statistics"""
        response = requests.get(f"{self.api_url}/learning/stats")
        if response.status_code == 200:
            return response.json()
        return {}
    
    def get_similar_conversations(self, log_id: str) -> dict:
        """Get similar conversations for a log_id"""
        response = requests.get(f"{self.api_url}/learning/similar/{log_id}")
        if response.status_code == 200:
            return response.json()
        return {}
    
    def export_learning_data(self) -> dict:
        """Export learning data"""
        response = requests.get(f"{self.api_url}/learning/export")
        if response.status_code == 200:
            return response.json()
        return {}
    
    def run_self_learning_test(self):
        """Run comprehensive self-learning test"""
        print("üß† ADVANCED SELF-LEARNING TEST FOR VASDOM AUDIOBOT v3.0")
        print("=" * 60)
        
        # Phase 1: Create initial conversations
        print("\nüìù Phase 1: Creating Initial Conversations...")
        
        test_messages = [
            "–ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å—Å—è –≤ –æ—Ñ–∏—Å–µ?",
            "–ö–∞–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —É–±–æ—Ä–∫–∏ –ø–æ–¥—ä–µ–∑–¥–æ–≤?",
            "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç —É–±–æ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—ä–µ–∑–¥–∞?",
            "–ö–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±—Ä–∏–≥–∞–¥—ã –ø–æ —É–±–æ—Ä–∫–µ?",
            "–ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —á–∞—â–µ –≤—Å–µ–≥–æ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–∏ —É–±–æ—Ä–∫–µ –ø–æ–¥—ä–µ–∑–¥–æ–≤?",
            "–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—É—é —É–±–æ—Ä–∫—É –≤ –æ—Ñ–∏—Å–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏—è—Ö?",  # Similar to first
            "–ö–∞–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —É–±–æ—Ä–∫–∏ –ø–æ–¥—ä–µ–∑–¥–æ–≤?",   # Similar to second
        ]
        
        for i, message in enumerate(test_messages, 1):
            print(f"  {i}. Creating conversation: '{message[:40]}...'")
            result = self.create_conversation(message)
            if result:
                print(f"     ‚úÖ Created (ID: {result.get('log_id', 'N/A')[:8]}..., Similar found: {result.get('similar_found', 0)})")
            time.sleep(0.5)  # Small delay between requests
        
        print(f"\n‚úÖ Created {len(self.conversations)} conversations")
        
        # Phase 2: Rate conversations to create learning data
        print("\n‚≠ê Phase 2: Rating Conversations for Learning...")
        
        ratings = [5, 4, 5, 3, 4, 5, 4]  # Mix of high and medium ratings
        feedbacks = [
            "–û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–æ —á–∞—Å—Ç–æ—Ç—É —É–±–æ—Ä–∫–∏!",
            "–•–æ—Ä–æ—à–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ä–µ–¥—Å—Ç–≤–∞–º",
            "–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏",
            "–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
            "–•–æ—Ä–æ—à–∏–π —Å–æ–≤–µ—Ç –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
            "–û—Ç–ª–∏—á–Ω–æ! –ü–æ—Ö–æ–∂–µ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å",
            "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
        ]
        
        for i, conv in enumerate(self.conversations):
            if 'log_id' in conv:
                rating = ratings[i] if i < len(ratings) else 4
                feedback = feedbacks[i] if i < len(feedbacks) else "–•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç"
                
                success = self.rate_conversation(conv['log_id'], rating, feedback)
                print(f"  {i+1}. Rated conversation {conv['log_id'][:8]}... with {rating}‚òÖ: {'‚úÖ' if success else '‚ùå'}")
        
        # Phase 3: Check learning statistics
        print("\nüìä Phase 3: Analyzing Learning Statistics...")
        
        stats = self.get_learning_stats()
        if stats:
            print(f"  üìà Total interactions: {stats.get('total_interactions', 0)}")
            print(f"  ‚≠ê Average rating: {stats.get('avg_rating', 'N/A')}")
            print(f"  üëç Positive ratings (‚â•4‚òÖ): {stats.get('positive_ratings', 0)}")
            print(f"  üëé Negative ratings (‚â§2‚òÖ): {stats.get('negative_ratings', 0)}")
            print(f"  üöÄ Improvement rate: {stats.get('improvement_rate', 0):.2f}")
        else:
            print("  ‚ùå Failed to get learning statistics")
        
        # Phase 4: Test similar conversation detection
        print("\nüîç Phase 4: Testing Similar Conversation Detection...")
        
        if len(self.conversations) >= 2:
            # Test with the first conversation (should find the 6th as similar)
            first_conv = self.conversations[0]
            if 'log_id' in first_conv:
                similar = self.get_similar_conversations(first_conv['log_id'])
                if similar:
                    print(f"  üéØ Original: '{similar.get('original_message', '')[:40]}...'")
                    print(f"  üîç Found {similar.get('found_similar', 0)} similar conversations:")
                    
                    for i, sim_conv in enumerate(similar.get('similar_conversations', []), 1):
                        print(f"    {i}. '{sim_conv.get('user_message', '')[:40]}...' (Rating: {sim_conv.get('rating', 'N/A')}‚òÖ)")
                else:
                    print("  ‚ùå Failed to get similar conversations")
        
        # Phase 5: Test learning data export
        print("\nüì§ Phase 5: Testing Learning Data Export...")
        
        export_data = self.export_learning_data()
        if export_data:
            print(f"  üì¶ Exported {export_data.get('total_exported', 0)} high-quality conversations")
            print(f"  ‚≠ê Minimum rating used: {export_data.get('min_rating_used', 'N/A')}‚òÖ")
            print(f"  üìÖ Export timestamp: {export_data.get('export_timestamp', 'N/A')}")
            
            # Show sample of exported data
            sample_data = export_data.get('data', [])
            if sample_data:
                print(f"  üìã Sample exported conversation:")
                sample = sample_data[0]
                messages = sample.get('messages', [])
                if len(messages) >= 2:
                    print(f"    üë§ User: '{messages[0].get('content', '')[:50]}...'")
                    print(f"    ü§ñ AI: '{messages[1].get('content', '')[:50]}...'")
                    print(f"    ‚≠ê Rating: {sample.get('metadata', {}).get('rating', 'N/A')}‚òÖ")
        else:
            print("  ‚ùå Failed to export learning data")
        
        # Phase 6: Test learning improvement with new conversation
        print("\nüß† Phase 6: Testing Learning Improvement...")
        
        # Create a new conversation similar to existing ones
        new_message = "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —É–±–æ—Ä–∫—É –≤ –æ—Ñ–∏—Å–Ω—ã—Ö –∑–¥–∞–Ω–∏—è—Ö?"
        print(f"  üÜï Creating new conversation: '{new_message}'")
        
        new_conv = self.create_conversation(new_message)
        if new_conv:
            similar_found = new_conv.get('similar_found', 0)
            learning_improved = new_conv.get('learning_improved', False)
            
            print(f"  üîç Similar conversations found: {similar_found}")
            print(f"  üß† Learning improved: {'‚úÖ Yes' if learning_improved else '‚ùå No'}")
            print(f"  üìù Response length: {len(new_conv.get('response', ''))} characters")
            
            if similar_found > 0:
                print("  üéâ SUCCESS: AI found similar conversations and used them for learning!")
            else:
                print("  ‚ö†Ô∏è  No similar conversations found - this might be expected for new topics")
        
        # Final summary
        print("\n" + "=" * 60)
        print("üéØ SELF-LEARNING TEST SUMMARY")
        print("=" * 60)
        
        final_stats = self.get_learning_stats()
        if final_stats:
            print(f"üìä Final Statistics:")
            print(f"  ‚Ä¢ Total interactions: {final_stats.get('total_interactions', 0)}")
            print(f"  ‚Ä¢ Average rating: {final_stats.get('avg_rating', 'N/A')}")
            print(f"  ‚Ä¢ Positive ratings: {final_stats.get('positive_ratings', 0)}")
            print(f"  ‚Ä¢ Improvement rate: {final_stats.get('improvement_rate', 0):.2f}")
        
        print(f"\nüß† Self-Learning Features Tested:")
        print(f"  ‚úÖ Conversation creation and storage")
        print(f"  ‚úÖ Rating system for quality filtering")
        print(f"  ‚úÖ Learning statistics tracking")
        print(f"  ‚úÖ Similar conversation detection")
        print(f"  ‚úÖ Quality data export for fine-tuning")
        print(f"  ‚úÖ Learning improvement on new conversations")
        
        print(f"\nüöÄ VasDom AudioBot v3.0 Self-Learning System is {'WORKING CORRECTLY!' if len(self.conversations) > 0 else 'NEEDS ATTENTION!'}")

def main():
    """Run the self-learning test"""
    tester = SelfLearningTester()
    tester.run_self_learning_test()

if __name__ == "__main__":
    main()