#!/usr/bin/env python3
"""
Simple CSV Report Test - Testing endpoint availability and basic functionality
"""

import asyncio
import httpx
import json
from datetime import datetime

# Backend URL from environment
BACKEND_URL = "https://finance-forecast-14.preview.emergentagent.com"
API_BASE = f"{BACKEND_URL}/api"

async def test_endpoint_availability():
    """Test if the missing-data-report endpoint exists and responds"""
    print("=== –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò CSV ENDPOINT ===\n")
    
    try:
        # Test with very short timeout first to see if endpoint exists
        async with httpx.AsyncClient(timeout=10.0) as client:
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å endpoint...")
            
            # Try to get response headers first
            try:
                response = await client.get(f"{API_BASE}/cleaning/missing-data-report", timeout=10.0)
                print(f"‚úÖ Endpoint –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status_code}")
                
                if response.status_code == 200:
                    content_type = response.headers.get('content-type', '')
                    print(f"üìÑ Content-Type: {content_type}")
                    
                    if 'csv' in content_type.lower():
                        print("‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSV —Ñ–∞–π–ª")
                        
                        # Try to get first few bytes to verify it's actually CSV
                        content_preview = response.content[:500].decode('utf-8-sig', errors='ignore')
                        print(f"üìã –ü—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:")
                        print(content_preview[:200] + "..." if len(content_preview) > 200 else content_preview)
                        
                        return True
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}")
                        return False
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                    print(f"Response: {response.text[:200]}")
                    return False
                    
            except asyncio.TimeoutError:
                print("‚è±Ô∏è Endpoint –æ—Ç–≤–µ—á–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ (>10 —Å–µ–∫), –Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

async def test_houses_endpoint():
    """Test the basic houses endpoint to verify system is working"""
    print("\n=== –¢–ï–°–¢ –ë–ê–ó–û–í–û–ì–û ENDPOINT –î–û–ú–û–í ===\n")
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/cleaning/houses...")
            
            response = await client.get(f"{API_BASE}/cleaning/houses?limit=5")
            
            if response.status_code == 200:
                data = response.json()
                houses = data.get('houses', [])
                total = data.get('total', 0)
                
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–º–æ–≤: {len(houses)}")
                print(f"üìä –í—Å–µ–≥–æ –¥–æ–º–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {total}")
                
                if houses:
                    # Check first house for structure
                    house = houses[0]
                    print(f"\nüìã –ü—Ä–∏–º–µ—Ä –¥–æ–º–∞:")
                    print(f"   ID: {house.get('id')}")
                    print(f"   –ê–¥—Ä–µ—Å: {house.get('address')}")
                    print(f"   –ë—Ä–∏–≥–∞–¥–∞: {house.get('brigade_name')}")
                    print(f"   –£–ö: {house.get('management_company')}")
                    print(f"   –ü–æ–¥—ä–µ–∑–¥—ã: {house.get('entrances')}")
                    print(f"   –≠—Ç–∞–∂–∏: {house.get('floors')}")
                    
                    # Look for house 8674 specifically
                    print(f"\nüîç –ü–æ–∏—Å–∫ –¥–æ–º–∞ ID 8674...")
                    
                    # Search for house 8674
                    search_response = await client.get(f"{API_BASE}/cleaning/houses?limit=1000")
                    if search_response.status_code == 200:
                        search_data = search_response.json()
                        all_houses = search_data.get('houses', [])
                        
                        house_8674 = None
                        for h in all_houses:
                            if h.get('id') == '8674' or '–∫–∏–±–∞–ª—å—á–∏—á–∞ 3' in h.get('address', '').lower():
                                house_8674 = h
                                break
                        
                        if house_8674:
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –¥–æ–º ID 8674:")
                            print(f"   –ê–¥—Ä–µ—Å: {house_8674.get('address')}")
                            print(f"   –ë—Ä–∏–≥–∞–¥–∞: {house_8674.get('brigade_name')}")
                            print(f"   –£–ö: {house_8674.get('management_company')}")
                        else:
                            print("‚ùå –î–æ–º ID 8674 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
                    
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_house_details():
    """Test getting house details for elder contacts"""
    print("\n=== –¢–ï–°–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ï–¢–ê–õ–ï–ô –î–û–ú–ê ===\n")
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            # Try to get details for house 8674 if it exists
            print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –¥–æ–º–∞...")
            
            # First get a sample house ID
            response = await client.get(f"{API_BASE}/cleaning/houses?limit=1")
            if response.status_code == 200:
                data = response.json()
                houses = data.get('houses', [])
                
                if houses:
                    house_id = houses[0].get('id')
                    print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –¥–æ–º–∞ ID: {house_id}")
                    
                    # Get house details
                    details_response = await client.get(f"{API_BASE}/cleaning/house/{house_id}/details")
                    
                    if details_response.status_code == 200:
                        details_data = details_response.json()
                        house_details = details_data.get('house', {})
                        
                        print(f"‚úÖ –î–µ—Ç–∞–ª–∏ –¥–æ–º–∞ –ø–æ–ª—É—á–µ–Ω—ã")
                        
                        # Check for elder contact
                        elder_contact = house_details.get('elder_contact', {})
                        if elder_contact:
                            print(f"üìû –ö–æ–Ω—Ç–∞–∫—Ç —Å—Ç–∞—Ä—à–µ–≥–æ:")
                            print(f"   –ò–º—è: {elder_contact.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                            print(f"   –¢–µ–ª–µ—Ñ–æ–Ω—ã: {elder_contact.get('phones', [])}")
                            print(f"   Email: {elder_contact.get('emails', [])}")
                        else:
                            print("‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç —Å—Ç–∞—Ä—à–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {details_response.status_code}")
                        return False
                else:
                    print("‚ùå –ù–µ—Ç –¥–æ–º–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–º–æ–≤: {response.status_code}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """Main test function"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CSV –æ—Ç—á–µ—Ç–∞")
    print(f"üåê Backend URL: {BACKEND_URL}")
    print("=" * 60)
    
    # Test endpoint availability
    endpoint_ok = await test_endpoint_availability()
    
    # Test basic houses endpoint
    houses_ok = await test_houses_endpoint()
    
    # Test house details
    details_ok = await test_house_details()
    
    # Final summary
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 60)
    
    print(f"CSV Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if endpoint_ok else '‚ùå'}")
    print(f"–ë–∞–∑–æ–≤—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç: {'‚úÖ' if houses_ok else '‚ùå'}")
    print(f"–î–µ—Ç–∞–ª–∏ –¥–æ–º–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç: {'‚úÖ' if details_ok else '‚ùå'}")
    
    if endpoint_ok:
        print("\nüí° –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print("‚úÖ Endpoint /api/cleaning/missing-data-report —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
        print("‚è±Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞–Ω–∏–º–∞–µ—Ç >5 –º–∏–Ω—É—Ç –∏–∑-–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        print("üîÑ –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ~500 –¥–æ–º–æ–≤ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ Bitrix24 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ")
        print("üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    else:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–´:")
        print("Endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    return endpoint_ok and houses_ok

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)