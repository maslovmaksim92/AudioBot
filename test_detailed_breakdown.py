#!/usr/bin/env python3
"""
Test script for –£–§–ò–¶ –º–æ–¥–µ–ª—å forecast endpoint with detailed breakdown
"""

import asyncio
import httpx
import json
from typing import Dict, List, Any, Optional

# Backend URL from environment
BACKEND_URL = "https://finreport-dashboard.preview.emergentagent.com"
API_BASE = f"{BACKEND_URL}/api"

class TestResults:
    def __init__(self):
        self.errors = []

async def test_ufic_forecast_detailed_breakdown():
    """Test –£–§–ò–¶ –º–æ–¥–µ–ª—å forecast endpoint with detailed revenue and expense breakdown"""
    print("\n=== –¢–ï–°–¢ –ü–†–û–ì–ù–û–ó–ê –£–§–ò–¶ –ú–û–î–ï–õ–¨ –° –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ï–ô –î–û–•–û–î–û–í –ò –†–ê–°–•–û–î–û–í ===\n")
    
    results = TestResults()
    company = "–£–§–ò–¶ –º–æ–¥–µ–ª—å"
    scenario = "realistic"
    
    # Expected detailed breakdown for 2026 realistic scenario
    expected_2026_breakdown = {
        "revenue_breakdown": {
            "sewing": 15739136,
            "cleaning": 24615780,
            "outsourcing": 14332500
        },
        "expense_breakdown": {
            "labor": 36947205
        }
    }
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print(f"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è: {company}")
            print(f"üìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")
            print("üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:")
            print("   1. Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å—Ç–∞—Ç—É—Å")
            print("   2. –ö–∞–∂–¥—ã–π –≥–æ–¥ –≤ –º–∞—Å—Å–∏–≤–µ forecast —Å–æ–¥–µ—Ä–∂–∏—Ç:")
            print("      - revenue_breakdown —Å –ø–æ–ª—è–º–∏: sewing, cleaning, outsourcing")
            print("      - expense_breakdown —Å –ø–æ–ª–µ–º: labor")
            print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ 2026 –≥–æ–¥ (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π):")
            print(f"      - sewing ~{expected_2026_breakdown['revenue_breakdown']['sewing']:,}")
            print(f"      - cleaning ~{expected_2026_breakdown['revenue_breakdown']['cleaning']:,}")
            print(f"      - outsourcing ~{expected_2026_breakdown['revenue_breakdown']['outsourcing']:,}")
            print(f"      - labor ~{expected_2026_breakdown['expense_breakdown']['labor']:,}")
            print("   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é 6% –µ–∂–µ–≥–æ–¥–Ω–æ –¥–ª—è 2027-2030")
            print("   5. –°—É–º–º—ã –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –æ–±—â–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏")
            print("")
            
            # Test the forecast endpoint
            response = await client.get(
                f"{API_BASE}/finances/forecast",
                params={"company": company, "scenario": scenario}
            )
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            # Criterion 1: Check 200 status
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            data = response.json()
            print(f"‚úÖ Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å—Ç–∞—Ç—É—Å")
            
            # Check forecast array exists
            forecast = data.get('forecast', [])
            if not forecast:
                error_msg = "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ forecast"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            print(f"üìä –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(forecast)} –ª–µ—Ç")
            
            # Criterion 2: Check each year has breakdown fields
            breakdown_errors = []
            for year_data in forecast:
                year = year_data.get('year')
                
                # Check revenue_breakdown
                revenue_breakdown = year_data.get('revenue_breakdown')
                if not revenue_breakdown:
                    breakdown_errors.append(f"‚ùå –ì–æ–¥ {year}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç revenue_breakdown")
                else:
                    required_revenue_fields = ['sewing', 'cleaning', 'outsourcing']
                    for field in required_revenue_fields:
                        if field not in revenue_breakdown:
                            breakdown_errors.append(f"‚ùå –ì–æ–¥ {year}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field} –≤ revenue_breakdown")
                
                # Check expense_breakdown
                expense_breakdown = year_data.get('expense_breakdown')
                if not expense_breakdown:
                    breakdown_errors.append(f"‚ùå –ì–æ–¥ {year}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç expense_breakdown")
                else:
                    if 'labor' not in expense_breakdown:
                        breakdown_errors.append(f"‚ùå –ì–æ–¥ {year}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ labor –≤ expense_breakdown")
            
            if breakdown_errors:
                results.errors.extend(breakdown_errors)
                for error in breakdown_errors:
                    print(error)
            else:
                print("‚úÖ –í—Å–µ –≥–æ–¥—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
            
            # Criterion 3: Check 2026 detailed breakdown values
            year_2026 = None
            for year_data in forecast:
                if year_data.get('year') == 2026:
                    year_2026 = year_data
                    break
            
            if not year_2026:
                error_msg = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≥–æ–¥ 2026 –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                print(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é 2026 –≥–æ–¥–∞:")
                
                # Check revenue breakdown 2026
                revenue_breakdown_2026 = year_2026.get('revenue_breakdown', {})
                for category, expected_value in expected_2026_breakdown['revenue_breakdown'].items():
                    actual_value = revenue_breakdown_2026.get(category, 0)
                    tolerance = expected_value * 0.05  # 5% tolerance
                    
                    print(f"   - {category}: {actual_value:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å ~{expected_value:,})")
                    
                    if abs(actual_value - expected_value) > tolerance:
                        error_msg = f"‚ùå 2026 {category}: {actual_value:,.0f} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É ~{expected_value:,}"
                        results.errors.append(error_msg)
                        print(f"     {error_msg}")
                    else:
                        print(f"     ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
                
                # Check expense breakdown 2026
                expense_breakdown_2026 = year_2026.get('expense_breakdown', {})
                expected_labor = expected_2026_breakdown['expense_breakdown']['labor']
                actual_labor = expense_breakdown_2026.get('labor', 0)
                labor_tolerance = expected_labor * 0.05  # 5% tolerance
                
                print(f"   - labor: {actual_labor:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å ~{expected_labor:,})")
                
                if abs(actual_labor - expected_labor) > labor_tolerance:
                    error_msg = f"‚ùå 2026 labor: {actual_labor:,.0f} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É ~{expected_labor:,}"
                    results.errors.append(error_msg)
                    print(f"     {error_msg}")
                else:
                    print(f"     ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
            
            # Criterion 4: Check 6% indexation for 2027-2030
            print(f"\nüìà –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é 6% –µ–∂–µ–≥–æ–¥–Ω–æ –¥–ª—è 2027-2030:")
            
            if year_2026:
                base_revenue_breakdown = year_2026.get('revenue_breakdown', {})
                base_expense_breakdown = year_2026.get('expense_breakdown', {})
                
                for year_data in forecast:
                    year = year_data.get('year')
                    if year in [2027, 2028, 2029, 2030]:
                        years_from_2026 = year - 2026
                        expected_multiplier = 1.06 ** years_from_2026
                        
                        print(f"   –ì–æ–¥ {year} (–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è {expected_multiplier:.4f}):")
                        
                        # Check revenue breakdown indexation
                        current_revenue_breakdown = year_data.get('revenue_breakdown', {})
                        for category, base_value in base_revenue_breakdown.items():
                            expected_indexed_value = base_value * expected_multiplier
                            actual_indexed_value = current_revenue_breakdown.get(category, 0)
                            indexation_tolerance = expected_indexed_value * 0.02  # 2% tolerance for rounding
                            
                            if abs(actual_indexed_value - expected_indexed_value) > indexation_tolerance:
                                error_msg = f"‚ùå {year} {category}: {actual_indexed_value:,.0f} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é {expected_indexed_value:,.0f}"
                                results.errors.append(error_msg)
                                print(f"     {error_msg}")
                            else:
                                print(f"     ‚úÖ {category}: {actual_indexed_value:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_indexed_value:,.0f})")
                        
                        # Check expense breakdown indexation
                        current_expense_breakdown = year_data.get('expense_breakdown', {})
                        for category, base_value in base_expense_breakdown.items():
                            expected_indexed_value = base_value * expected_multiplier
                            actual_indexed_value = current_expense_breakdown.get(category, 0)
                            indexation_tolerance = expected_indexed_value * 0.02  # 2% tolerance for rounding
                            
                            if abs(actual_indexed_value - expected_indexed_value) > indexation_tolerance:
                                error_msg = f"‚ùå {year} {category}: {actual_indexed_value:,.0f} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é {expected_indexed_value:,.0f}"
                                results.errors.append(error_msg)
                                print(f"     {error_msg}")
                            else:
                                print(f"     ‚úÖ {category}: {actual_indexed_value:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_indexed_value:,.0f})")
            
            # Criterion 5: Check that breakdown sums match total revenue and expenses
            print(f"\nüßÆ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—â–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º:")
            
            for year_data in forecast:
                year = year_data.get('year')
                total_revenue = year_data.get('revenue', 0)
                total_expenses = year_data.get('expenses', 0)
                
                # Sum revenue breakdown
                revenue_breakdown = year_data.get('revenue_breakdown', {})
                breakdown_revenue_sum = sum(revenue_breakdown.values())
                
                # Sum expense breakdown
                expense_breakdown = year_data.get('expense_breakdown', {})
                breakdown_expense_sum = sum(expense_breakdown.values())
                
                # Check revenue sum
                revenue_tolerance = max(total_revenue * 0.01, 1)  # 1% tolerance or 1 ruble minimum
                if abs(breakdown_revenue_sum - total_revenue) > revenue_tolerance:
                    error_msg = f"‚ùå {year}: —Å—É–º–º–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã—Ä—É—á–∫–∏ ({breakdown_revenue_sum:,.0f}) –Ω–µ —Ä–∞–≤–Ω–∞ –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–µ ({total_revenue:,.0f})"
                    results.errors.append(error_msg)
                    print(f"   {error_msg}")
                else:
                    print(f"   ‚úÖ {year}: —Å—É–º–º–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã—Ä—É—á–∫–∏ = –æ–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ ({total_revenue:,.0f})")
                
                # Check expense sum
                expense_tolerance = max(total_expenses * 0.01, 1)  # 1% tolerance or 1 ruble minimum
                if abs(breakdown_expense_sum - total_expenses) > expense_tolerance:
                    error_msg = f"‚ùå {year}: —Å—É–º–º–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ ({breakdown_expense_sum:,.0f}) –Ω–µ —Ä–∞–≤–Ω–∞ –æ–±—â–∏–º —Ä–∞—Å—Ö–æ–¥–∞–º ({total_expenses:,.0f})"
                    results.errors.append(error_msg)
                    print(f"   {error_msg}")
                else:
                    print(f"   ‚úÖ {year}: —Å—É–º–º–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ = –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã ({total_expenses:,.0f})")
            
            # Summary
            if not results.errors:
                print(f"\nüéâ –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
                print("‚úÖ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –≤—Å–µ—Ö –≥–æ–¥–æ–≤")
                print("‚úÖ –ß–∏—Å–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º")
                print("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
                print("‚úÖ –°—É–º–º—ã –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ = –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            else:
                print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π: {len(results.errors)} –æ—à–∏–±–æ–∫")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def main():
    """Main test runner"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò –ü–†–û–ì–ù–û–ó–ê –£–§–ò–¶ –ú–û–î–ï–õ–¨")
    print("=" * 80)
    print(f"üåê Backend URL: {BACKEND_URL}")
    print(f"üì° API Base: {API_BASE}")
    print("=" * 80)
    
    # Run the detailed breakdown test
    result = await test_ufic_forecast_detailed_breakdown()
    
    # Print summary
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 80)
    
    if not result.errors:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    else:
        print(f"‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ ({len(result.errors)}):")
        for i, error in enumerate(result.errors, 1):
            print(f"   {i}. {error}")
    
    print("\n" + "=" * 80)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 80)

if __name__ == "__main__":
    asyncio.run(main())