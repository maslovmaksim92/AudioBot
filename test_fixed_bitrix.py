#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Bitrix24
"""

import asyncio
import httpx
import json

async def test_fixed_api():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Bitrix24...")
    
    base_url = "http://localhost:8001"
    
    try:
        async with httpx.AsyncClient() as client:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–º–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            response = await client.get(f"{base_url}/api/cleaning/houses?limit=2", timeout=60)
            
            if response.status_code == 200:
                data = response.json()
                houses = data.get('houses', [])
                
                if houses:
                    first_house = houses[0]
                    
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–º–æ–≤: {len(houses)}")
                    print(f"üè† –ü–µ—Ä–≤—ã–π –¥–æ–º: {first_house.get('address', 'N/A')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
                    print(f"\nüè¢ –£–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è:")
                    print(f"   management_company: {first_house.get('management_company', '–ù–ï–¢')}")
                    print(f"   company_id: {first_house.get('company_id', '–ù–ï–¢')}")
                    
                    print(f"\nüë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ:")
                    print(f"   brigade: {first_house.get('brigade', '–ù–ï–¢')}")
                    print(f"   assigned_by_id: {first_house.get('assigned_by_id', '–ù–ï–¢')}")
                    
                    print(f"\nüìù –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                    print(f"   deal_id: {first_house.get('deal_id', '–ù–ï–¢')}")
                    print(f"   apartments_count: {first_house.get('apartments_count', '–ù–ï–¢')}")
                    print(f"   entrances_count: {first_house.get('entrances_count', '–ù–ï–¢')}")
                    print(f"   floors_count: {first_house.get('floors_count', '–ù–ï–¢')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    is_fixed = (
                        first_house.get('management_company') is not None and
                        first_house.get('management_company') != "" and
                        first_house.get('assigned_by_id') is not None
                    )
                    
                    if is_fixed:
                        print(f"\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û!")
                        print(f"   –£–ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {first_house.get('management_company')}")
                        print(f"   –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ID {first_house.get('assigned_by_id')}")
                    else:
                        print(f"\n‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–°–¢–ò–ß–ù–û:")
                        print(f"   –ù—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –º–∞–ø–ø–∏–Ω–≥–∞")
                    
                    return True
                else:
                    print("‚ùå –ù–µ—Ç –¥–æ–º–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ")
                    return False
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text[:200]}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

async def main():
    success = await test_fixed_api()
    if success:
        print(f"\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")

if __name__ == "__main__":
    asyncio.run(main())