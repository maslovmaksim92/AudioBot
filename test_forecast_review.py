#!/usr/bin/env python3
"""
Test script for forecast endpoints according to review request
"""

import asyncio
import httpx
import json
from typing import Dict, List, Any

# Backend URL from environment
BACKEND_URL = "https://finreport-dashboard.preview.emergentagent.com"
API_BASE = f"{BACKEND_URL}/api"

class TestResults:
    def __init__(self):
        self.errors = []
        self.finance_endpoints = {}

async def test_forecast_updates_review():
    """Test forecast endpoints according to review request requirements"""
    print("\n=== –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ò–ô –ü–†–û–ì–ù–û–ó–ê (REVIEW REQUEST) ===\n")
    
    results = TestResults()
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print("üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å–æ–≥–ª–∞—Å–Ω–æ review request:")
            print("1. GET /api/finances/forecast?company=–í–ê–® –î–û–ú –§–ê–ö–¢&scenario=optimistic")
            print("2. GET /api/finances/forecast?company=–£–§–ò–¶ –º–æ–¥–µ–ª—å&scenario=realistic")
            print("")
            
            # Test 1: –í–ê–® –î–û–ú –§–ê–ö–¢ - –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π
            print("üè¢ 1. –¢–ï–°–¢–ò–†–£–ï–ú –í–ê–® –î–û–ú –§–ê–ö–¢ - –û–ü–¢–ò–ú–ò–°–¢–ò–ß–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô")
            print("-" * 60)
            
            response = await client.get(
                f"{API_BASE}/finances/forecast",
                params={"company": "–í–ê–® –î–û–ú –§–ê–ö–¢", "scenario": "optimistic"}
            )
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –í–ê–® –î–û–ú –§–ê–ö–¢ optimistic: –æ—à–∏–±–∫–∞ {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                data = response.json()
                results.finance_endpoints['vasdom_fact_optimistic'] = data
                print("‚úÖ –í–ê–® –î–û–ú –§–ê–ö–¢ optimistic: 200 —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
                
                # Check forecast data
                forecast = data.get('forecast', [])
                scenario_info = data.get('scenario_info', {})
                
                print(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –í–ê–® –î–û–ú –§–ê–ö–¢ - –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π:")
                
                # 1. –ú–∞—Ä–∂–∞ 2026-2030 –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 27.58%-36.42%
                print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∂—É 2026-2030 (–¥–∏–∞–ø–∞–∑–æ–Ω 27.58%-36.42%):")
                margin_errors = []
                for year_data in forecast:
                    year = year_data.get('year')
                    if year and 2026 <= year <= 2030:
                        margin = year_data.get('margin', 0)
                        if not (27.58 <= margin <= 36.42):
                            margin_errors.append(f"   ‚ùå {year}: –º–∞—Ä–∂–∞ {margin:.2f}% –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
                        else:
                            print(f"   ‚úÖ {year}: –º–∞—Ä–∂–∞ {margin:.2f}% –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
                
                if margin_errors:
                    results.errors.extend(margin_errors)
                else:
                    print("   ‚úÖ –í—Å–µ –º–∞—Ä–∂–∏ –≤ —Ç—Ä–µ–±—É–µ–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
                
                # 2. –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç "—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏"
                print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ '—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏' –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:")
                legal_services_found = False
                for year_data in forecast:
                    expense_breakdown = year_data.get('expense_breakdown', {})
                    for category, amount in expense_breakdown.items():
                        if '—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ' in category.lower() or '—é—Ä–∏–¥–∏—á–µ—Å–∫' in category.lower():
                            legal_services_found = True
                            results.errors.append(f"   ‚ùå –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
                            break
                
                if not legal_services_found:
                    print("   ‚úÖ '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
                
                # 3. –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–∑–∞—Ä–ø–ª–∞—Ç–∞" —É–≤–µ–ª–∏—á–µ–Ω–∞ (–≤–∫–ª—é—á–∞–µ—Ç –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã)
                print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–∑–∞—Ä–ø–ª–∞—Ç–∞' (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞):")
                salary_found = False
                for year_data in forecast:
                    expense_breakdown = year_data.get('expense_breakdown', {})
                    for category, amount in expense_breakdown.items():
                        if '–∑–∞—Ä–ø–ª–∞—Ç–∞' in category.lower() or '–∑–ø' in category.lower():
                            salary_found = True
                            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}': {amount:,.0f} ‚ÇΩ")
                            break
                
                if not salary_found:
                    results.errors.append("   ‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '–∑–∞—Ä–ø–ª–∞—Ç–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
                
                # 4. –†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ +22.5% (–≤–º–µ—Å—Ç–æ +18.9%)
                print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +22.5%:")
                if len(forecast) >= 2:
                    year_2026 = next((y for y in forecast if y.get('year') == 2026), None)
                    year_2027 = next((y for y in forecast if y.get('year') == 2027), None)
                    
                    if year_2026 and year_2027:
                        expenses_2026 = year_2026.get('expenses', 0)
                        expenses_2027 = year_2027.get('expenses', 0)
                        
                        if expenses_2026 > 0:
                            growth_rate = ((expenses_2027 - expenses_2026) / expenses_2026) * 100
                            expected_growth = 22.5
                            
                            if abs(growth_rate - expected_growth) > 1.0:  # Allow 1% tolerance
                                results.errors.append(f"   ‚ùå –†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ {growth_rate:.1f}%, –æ–∂–∏–¥–∞–ª—Å—è {expected_growth}%")
                            else:
                                print(f"   ‚úÖ –†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ {growth_rate:.1f}% (–æ–∂–∏–¥–∞–ª—Å—è {expected_growth}%)")
                
                # 5. –ü–æ–ª–µ detailed_description –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ scenario_info
                print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ 'detailed_description' –≤ scenario_info:")
                detailed_description = scenario_info.get('detailed_description')
                if not detailed_description:
                    results.errors.append("   ‚ùå –ü–æ–ª–µ 'detailed_description' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ scenario_info")
                else:
                    print("   ‚úÖ –ü–æ–ª–µ 'detailed_description' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    # 6. detailed_description —Å–æ–¥–µ—Ä–∂–∏—Ç: summary, revenue_factors, expense_factors
                    print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É detailed_description:")
                    required_fields = ['summary', 'revenue_factors', 'expense_factors']
                    for field in required_fields:
                        if field not in detailed_description:
                            results.errors.append(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ detailed_description")
                        else:
                            content = detailed_description[field]
                            print(f"   ‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç ({len(str(content))} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            print("\n" + "=" * 60)
            
            # Test 2: –£–§–ò–¶ –º–æ–¥–µ–ª—å - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π
            print("üè¢ 2. –¢–ï–°–¢–ò–†–£–ï–ú –£–§–ò–¶ –ú–û–î–ï–õ–¨ - –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô")
            print("-" * 60)
            
            response = await client.get(
                f"{API_BASE}/finances/forecast",
                params={"company": "–£–§–ò–¶ –º–æ–¥–µ–ª—å", "scenario": "realistic"}
            )
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code != 200:
                error_msg = f"‚ùå –£–§–ò–¶ –º–æ–¥–µ–ª—å realistic: –æ—à–∏–±–∫–∞ {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
            else:
                data = response.json()
                results.finance_endpoints['ufic_realistic'] = data
                print("‚úÖ –£–§–ò–¶ –º–æ–¥–µ–ª—å realistic: 200 —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
                
                scenario_info = data.get('scenario_info', {})
                
                print(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –£–§–ò–¶ –º–æ–¥–µ–ª—å - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π:")
                
                # 1. –ü–æ–ª–µ detailed_description –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ scenario_info
                print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ 'detailed_description' –≤ scenario_info:")
                detailed_description = scenario_info.get('detailed_description')
                if not detailed_description:
                    results.errors.append("   ‚ùå –ü–æ–ª–µ 'detailed_description' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ scenario_info")
                else:
                    print("   ‚úÖ –ü–æ–ª–µ 'detailed_description' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    # 2. detailed_description —Å–æ–¥–µ—Ä–∂–∏—Ç: summary, revenue_factors, expense_factors
                    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É detailed_description:")
                    required_fields = ['summary', 'revenue_factors', 'expense_factors']
                    for field in required_fields:
                        if field not in detailed_description:
                            results.errors.append(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ detailed_description")
                        else:
                            content = detailed_description[field]
                            print(f"   ‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç ({len(str(content))} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            print("\n" + "=" * 60)
            print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–ô –ü–†–û–ì–ù–û–ó–ê:")
            
            if not results.errors:
                print("üéâ –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê –í–´–ü–û–õ–ù–ï–ù–´!")
                print("‚úÖ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã")
                print("‚úÖ –ú–∞—Ä–∂–∞ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 27.58%-36.42%")
                print("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ detailed_description –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            else:
                print(f"‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–û {len(results.errors)} –ü–†–û–ë–õ–ï–ú:")
                for error in results.errors:
                    print(f"   {error}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def main():
    """Main test execution"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–ô –ü–†–û–ì–ù–û–ó–ê (REVIEW REQUEST)")
    print("=" * 80)
    print(f"üåê Backend URL: {BACKEND_URL}")
    print(f"üîó API Base: {API_BASE}")
    print("=" * 80)
    
    # Check basic connectivity
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend...")
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(f"{API_BASE}/health")
            if response.status_code == 200:
                print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {str(e)}")
        return
    
    # Run the test
    result = await test_forecast_updates_review()
    
    # Print summary
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 80)
    
    if result.errors:
        print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(result.errors)}")
        print("\nüîç –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:")
        for i, error in enumerate(result.errors, 1):
            print(f"   {i}. {error}")
    else:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        print("‚úÖ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã")
        print("‚úÖ –ú–∞—Ä–∂–∞ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 27.58%-36.42%")
        print("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ detailed_description –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    print("\n" + "=" * 80)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 80)

if __name__ == "__main__":
    asyncio.run(main())