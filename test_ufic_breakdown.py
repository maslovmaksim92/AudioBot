#!/usr/bin/env python3
"""
Focused test for –£–§–ò–¶ –º–æ–¥–µ–ª—å expense breakdown as per review request

This test validates the specific requirements from the review request:
1. Endpoint returns 200 status
2. Expense breakdown contains SEVERAL categories (not just "labor")
3. Categories are taken from "–§–∏–Ω–∞–Ω—Å—ã - –†–∞—Å—Ö–æ–¥—ã - –£–§–ò–¶ –º–æ–¥–µ–ª—å"
4. Breakdown is present for all years 2026-2030
5. Each category is indexed at 4.8% annually for pessimistic scenario
6. Sum of all categories = total expenses for each year
"""

import asyncio
import httpx
import json
from datetime import datetime
from typing import Dict, List, Any, Optional

# Backend URL from environment
BACKEND_URL = "https://vasdom-finance-1.preview.emergentagent.com"
API_BASE = f"{BACKEND_URL}/api"

class TestResults:
    def __init__(self):
        self.finance_endpoints = {}
        self.errors = []

async def test_ufic_expense_breakdown():
    """Test –£–§–ò–¶ –º–æ–¥–µ–ª—å forecast endpoint expense breakdown as per review request"""
    print("\n=== –¢–ï–°–¢ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò –†–ê–°–•–û–î–û–í –£–§–ò–¶ –ú–û–î–ï–õ–¨ –í –ü–†–û–ì–ù–û–ó–ï ===\n")
    
    results = TestResults()
    company = "–£–§–ò–¶ –º–æ–¥–µ–ª—å"
    scenario = "pessimistic"
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print(f"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è: {company}")
            print(f"üìä –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")
            print("üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:")
            print("   1. Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å—Ç–∞—Ç—É—Å")
            print("   2. –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ (expense_breakdown) —Å–æ–¥–µ—Ä–∂–∏—Ç –ù–ï–°–ö–û–õ–¨–ö–û –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–Ω–µ —Ç–æ–ª—å–∫–æ 'labor')")
            print("   3. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ '–§–∏–Ω–∞–Ω—Å—ã - –†–∞—Å—Ö–æ–¥—ã - –£–§–ò–¶ –º–æ–¥–µ–ª—å'")
            print("   4. –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –≤—Å–µ—Ö –≥–æ–¥–æ–≤ 2026-2030")
            print("   5. –ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 4.8% –µ–∂–µ–≥–æ–¥–Ω–æ –¥–ª—è –ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ")
            print("   6. –°—É–º–º–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π = total expenses –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞")
            print("")
            print("üéØ –û–∂–∏–¥–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:")
            print("   - –ó–∞—Ä–ø–ª–∞—Ç–∞")
            print("   - –ù–∞–ª–æ–≥–∏")
            print("   - –ê—Ä–µ–Ω–¥–∞")
            print("   - –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏")
            print("   - –ò –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –£–§–ò–¶ –º–æ–¥–µ–ª—å")
            print("")
            
            # Test the forecast endpoint
            response = await client.get(
                f"{API_BASE}/finances/forecast",
                params={"company": company, "scenario": scenario}
            )
            
            print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            # 1. Check 200 status
            if response.status_code != 200:
                error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 1 –ù–ï –í–´–ü–û–õ–ù–ï–ù: Endpoint –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å—Ç–∞—Ç—É—Å. –ü–æ–ª—É—á–µ–Ω: {response.status_code} - {response.text}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            print("‚úÖ –ö–†–ò–¢–ï–†–ò–ô 1 –í–´–ü–û–õ–ù–ï–ù: Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å—Ç–∞—Ç—É—Å")
            
            data = response.json()
            results.finance_endpoints['ufic_expense_breakdown'] = data
            
            # Validate basic structure
            required_fields = ['company', 'scenario', 'forecast']
            for field in required_fields:
                if field not in data:
                    error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –æ—Ç–≤–µ—Ç–µ"
                    results.errors.append(error_msg)
                    print(error_msg)
                    return results
            
            # Check forecast data
            forecast = data.get('forecast', [])
            if len(forecast) < 5:
                error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 4 –ù–ï –í–´–ü–û–õ–ù–ï–ù: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–µ—Ç –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ. –û–∂–∏–¥–∞–ª–æ—Å—å 5 (2026-2030), –ø–æ–ª—É—á–µ–Ω–æ {len(forecast)}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(forecast)} –ª–µ—Ç")
            
            # Check each year for expense breakdown
            years_with_breakdown = 0
            years_with_multiple_categories = 0
            years_with_correct_sum = 0
            all_categories = set()
            indexation_errors = []
            
            print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –≥–æ–¥–∞–º:")
            
            prev_year_breakdown = None
            
            for i, year_data in enumerate(forecast):
                year = year_data.get('year')
                total_expenses = year_data.get('expenses', 0)
                expense_breakdown = year_data.get('expense_breakdown', {})
                
                print(f"\nüìÖ –ì–æ–¥ {year}:")
                print(f"   - –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_expenses:,.0f} ‚ÇΩ")
                
                # 2. Check if expense_breakdown exists and has multiple categories
                if not expense_breakdown:
                    error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 2 –ù–ï –í–´–ü–û–õ–ù–ï–ù: –ì–æ–¥ {year} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç expense_breakdown"
                    results.errors.append(error_msg)
                    print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç expense_breakdown")
                    continue
                
                years_with_breakdown += 1
                
                # Check number of categories
                categories = list(expense_breakdown.keys())
                category_count = len(categories)
                
                print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: {category_count}")
                print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories)}")
                
                if category_count <= 1:
                    error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 2 –ù–ï –í–´–ü–û–õ–ù–ï–ù: –ì–æ–¥ {year} —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ {category_count} –∫–∞—Ç–µ–≥–æ—Ä–∏—é(–π). –û–∂–∏–¥–∞–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–Ω–µ —Ç–æ–ª—å–∫–æ 'labor')"
                    results.errors.append(error_msg)
                    print(f"   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                else:
                    years_with_multiple_categories += 1
                    print(f"   ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                
                # Collect all categories for analysis
                all_categories.update(categories)
                
                # 6. Check if sum of categories equals total expenses
                breakdown_sum = sum(expense_breakdown.values())
                sum_diff = abs(breakdown_sum - total_expenses)
                sum_diff_pct = (sum_diff / total_expenses * 100) if total_expenses > 0 else 0
                
                print(f"   - –°—É–º–º–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: {breakdown_sum:,.0f} ‚ÇΩ")
                print(f"   - –†–∞–∑–Ω–∏—Ü–∞ —Å –æ–±—â–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏: {sum_diff:,.0f} ‚ÇΩ ({sum_diff_pct:.2f}%)")
                
                if sum_diff_pct > 1.0:  # Allow 1% tolerance
                    error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 6 –ù–ï –í–´–ü–û–õ–ù–ï–ù: –ì–æ–¥ {year} - —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ({breakdown_sum:,.0f}) –Ω–µ —Ä–∞–≤–Ω–∞ –æ–±—â–∏–º —Ä–∞—Å—Ö–æ–¥–∞–º ({total_expenses:,.0f}). –†–∞–∑–Ω–∏—Ü–∞: {sum_diff:,.0f} ‚ÇΩ"
                    results.errors.append(error_msg)
                    print(f"   ‚ùå –°—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
                else:
                    years_with_correct_sum += 1
                    print(f"   ‚úÖ –°—É–º–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                
                # 5. Check indexation (4.8% annually for pessimistic scenario)
                if prev_year_breakdown and i > 0:
                    print(f"   üìà –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é 4.8% –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ–¥–∞:")
                    
                    for category, current_amount in expense_breakdown.items():
                        if category in prev_year_breakdown:
                            prev_amount = prev_year_breakdown[category]
                            expected_amount = prev_amount * 1.048  # 4.8% increase
                            actual_growth = (current_amount / prev_amount - 1) * 100 if prev_amount > 0 else 0
                            growth_diff = abs(actual_growth - 4.8)
                            
                            print(f"     - {category}: {prev_amount:,.0f} ‚Üí {current_amount:,.0f} (—Ä–æ—Å—Ç: {actual_growth:.1f}%)")
                            
                            if growth_diff > 0.5:  # Allow 0.5% tolerance
                                error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 5 –ù–ï –í–´–ü–û–õ–ù–ï–ù: –ì–æ–¥ {year}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' - –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è. –û–∂–∏–¥–∞–ª—Å—è —Ä–æ—Å—Ç 4.8%, –ø–æ–ª—É—á–µ–Ω {actual_growth:.1f}%"
                                indexation_errors.append(error_msg)
                                print(f"       ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è")
                            else:
                                print(f"       ‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                
                prev_year_breakdown = expense_breakdown.copy()
            
            # Summary of criteria checks
            print(f"\nüìã –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ï–†–ò–ï–í:")
            
            # Criterion 1: Already checked above
            print(f"‚úÖ –ö–†–ò–¢–ï–†–ò–ô 1: Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å—Ç–∞—Ç—É—Å")
            
            # Criterion 2: Multiple categories
            if years_with_multiple_categories == len(forecast):
                print(f"‚úÖ –ö–†–ò–¢–ï–†–ò–ô 2: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–æ –≤—Å–µ—Ö –≥–æ–¥–∞—Ö")
            else:
                error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 2 –ù–ï –í–´–ü–û–õ–ù–ï–ù: –¢–æ–ª—å–∫–æ {years_with_multiple_categories} –∏–∑ {len(forecast)} –ª–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
                results.errors.append(error_msg)
                print(error_msg)
            
            # Criterion 3: Categories from –£–§–ò–¶ –º–æ–¥–µ–ª—å
            print(f"‚úÖ –ö–†–ò–¢–ï–†–ò–ô 3: –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –£–§–ò–¶ –º–æ–¥–µ–ª—å:")
            expected_categories = ['–∑–∞—Ä–ø–ª–∞—Ç–∞', '–Ω–∞–ª–æ–≥–∏', '–∞—Ä–µ–Ω–¥–∞', '–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ']
            found_expected = []
            
            for category in all_categories:
                category_lower = category.lower()
                for expected in expected_categories:
                    if expected in category_lower:
                        found_expected.append(category)
                        break
            
            print(f"   - –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(all_categories)}")
            print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(sorted(all_categories))}")
            print(f"   - –û–∂–∏–¥–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(found_expected) if found_expected else '–ù–µ—Ç'}")
            
            if len(found_expected) >= 2:
                print(f"‚úÖ –ö–†–ò–¢–ï–†–ò–ô 3 –í–´–ü–û–õ–ù–ï–ù: –ù–∞–π–¥–µ–Ω–æ {len(found_expected)} –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            else:
                error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 3 –ù–ï –í–´–ü–û–õ–ù–ï–ù: –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(found_expected)} –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ {len(expected_categories)}"
                results.errors.append(error_msg)
                print(error_msg)
            
            # Criterion 4: All years 2026-2030
            if years_with_breakdown == len(forecast):
                print(f"‚úÖ –ö–†–ò–¢–ï–†–ò–ô 4: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –≤—Å–µ—Ö {len(forecast)} –ª–µ—Ç (2026-2030)")
            else:
                error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 4 –ù–ï –í–´–ü–û–õ–ù–ï–ù: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤ {years_with_breakdown} –∏–∑ {len(forecast)} –ª–µ—Ç"
                results.errors.append(error_msg)
                print(error_msg)
            
            # Criterion 5: 4.8% indexation
            if indexation_errors:
                for error in indexation_errors:
                    results.errors.append(error)
                    print(error)
            else:
                print(f"‚úÖ –ö–†–ò–¢–ï–†–ò–ô 5: –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è 4.8% –µ–∂–µ–≥–æ–¥–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # Criterion 6: Sum equals total
            if years_with_correct_sum == len(forecast):
                print(f"‚úÖ –ö–†–ò–¢–ï–†–ò–ô 6: –°—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞–≤–Ω–∞ –æ–±—â–∏–º —Ä–∞—Å—Ö–æ–¥–∞–º –≤–æ –≤—Å–µ—Ö {len(forecast)} –≥–æ–¥–∞—Ö")
            else:
                error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 6 –ù–ï –í–´–ü–û–õ–ù–ï–ù: –°—É–º–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ {years_with_correct_sum} –∏–∑ {len(forecast)} –ª–µ—Ç"
                results.errors.append(error_msg)
                print(error_msg)
            
            # Final summary
            print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê:")
            criteria_passed = 0
            total_criteria = 6
            
            if response.status_code == 200:
                criteria_passed += 1
            if years_with_multiple_categories == len(forecast):
                criteria_passed += 1
            if len(found_expected) >= 2:
                criteria_passed += 1
            if years_with_breakdown == len(forecast):
                criteria_passed += 1
            if not indexation_errors:
                criteria_passed += 1
            if years_with_correct_sum == len(forecast):
                criteria_passed += 1
            
            print(f"üìä –ö—Ä–∏—Ç–µ—Ä–∏–µ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {criteria_passed}/{total_criteria}")
            
            if criteria_passed == total_criteria:
                print(f"üéâ –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê –í–´–ü–û–õ–ù–ï–ù–´!")
                print(f"‚úÖ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –£–§–ò–¶ –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"‚ö†Ô∏è –ù–ï –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –í–´–ü–û–õ–ù–ï–ù–´: {total_criteria - criteria_passed} –ø—Ä–æ–±–ª–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –£–§–ò–¶: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def main():
    """Main test runner for –£–§–ò–¶ expense breakdown"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò –†–ê–°–•–û–î–û–í –£–§–ò–¶ –ú–û–î–ï–õ–¨")
    print("=" * 80)
    print(f"üåê Backend URL: {BACKEND_URL}")
    print(f"üì° API Base: {API_BASE}")
    print("=" * 80)
    
    # Run the specific test
    result = await test_ufic_expense_breakdown()
    
    # Print summary
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 80)
    
    if result.errors:
        print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(result.errors)} –æ—à–∏–±–æ–∫:")
        for i, error in enumerate(result.errors, 1):
            print(f"  {i}. {error}")
        print("\n‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û")
    else:
        print("üéâ –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê –í–´–ü–û–õ–ù–ï–ù–´!")
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û")
    
    print("=" * 80)

if __name__ == "__main__":
    asyncio.run(main())