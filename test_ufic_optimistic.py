#!/usr/bin/env python3
"""
Test script for updated –£–§–ò–¶ –º–æ–¥–µ–ª—å forecast endpoint with 10% optimistic indexation
"""

import asyncio
import httpx
import json
from typing import Dict, List, Any

# Backend URL from environment
BACKEND_URL = "https://finreport-dashboard.preview.emergentagent.com"
API_BASE = f"{BACKEND_URL}/api"

class TestResults:
    def __init__(self):
        self.errors = []

async def test_ufic_forecast_updated_optimistic():
    """Test updated –£–§–ò–¶ –º–æ–¥–µ–ª—å forecast endpoint with 10% indexation for optimistic scenario"""
    print("\n=== –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ü–†–û–ì–ù–û–ó–ê –£–§–ò–¶ –ú–û–î–ï–õ–¨ (–û–ü–¢–ò–ú–ò–°–¢–ò–ß–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô 10%) ===\n")
    
    results = TestResults()
    company = "–£–§–ò–¶ –º–æ–¥–µ–ª—å"
    
    # Expected staff counts in descriptions
    expected_descriptions = {
        "pessimistic": "–®–≤–µ–∏: 60, –£–±–æ—Ä—â–∏—Ü—ã: 60, –ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥: 14",
        "realistic": "–®–≤–µ–∏: 41, –£–±–æ—Ä—â–∏—Ü—ã: 40, –ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥: 5", 
        "optimistic": "–®–≤–µ–∏: 65, –£–±–æ—Ä—â–∏—Ü—ã: 70, –ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥: 20"
    }
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print(f"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {company}")
            print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:")
            print("   1. –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é 10% (–∞ –Ω–µ 6%)")
            print("   2. –û–ø–∏—Å–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞")
            print("   3. –î–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ—Å—Ç –º–µ–∂–¥—É –≥–æ–¥–∞–º–∏")
            print("   4. –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è (revenue_breakdown, expense_breakdown) –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 10%")
            print("")
            
            # Test all three scenarios to check descriptions
            for scenario in ["pessimistic", "realistic", "optimistic"]:
                print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")
                
                response = await client.get(
                    f"{API_BASE}/finances/forecast",
                    params={"company": company, "scenario": scenario}
                )
                
                print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è {scenario}: {response.status_code}")
                
                if response.status_code != 200:
                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –æ—à–∏–±–∫–∞ {response.status_code} - {response.text}"
                    results.errors.append(error_msg)
                    print(error_msg)
                    continue
                
                data = response.json()
                print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: 200 —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
                
                # Check scenario description contains staff counts
                scenario_info = data.get('scenario_info', {})
                description = scenario_info.get('description', '')
                expected_desc = expected_descriptions[scenario]
                
                print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {description}")
                print(f"üéØ –û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {expected_desc}")
                
                if expected_desc in description:
                    print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞")
                else:
                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é '{expected_desc}'"
                    results.errors.append(error_msg)
                    print(error_msg)
                
                # For optimistic scenario, check 10% indexation
                if scenario == "optimistic":
                    print(f"\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è (10% –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è):")
                    
                    forecast = data.get('forecast', [])
                    if not forecast:
                        error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ forecast –¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"
                        results.errors.append(error_msg)
                        print(error_msg)
                        continue
                    
                    # Find 2026 and subsequent years
                    year_2026_data = None
                    year_data = {}
                    
                    for year_item in forecast:
                        year = year_item.get('year')
                        if year == 2026:
                            year_2026_data = year_item
                        if year >= 2026:
                            year_data[year] = year_item
                    
                    if not year_2026_data:
                        error_msg = f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è 2026 –≥–æ–¥–∞ –≤ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏"
                        results.errors.append(error_msg)
                        print(error_msg)
                        continue
                    
                    # Get 2026 base values
                    revenue_2026 = year_2026_data.get('revenue', 0)
                    expenses_2026 = year_2026_data.get('expenses', 0)
                    
                    print(f"üìä –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è 2026:")
                    print(f"   - –í—ã—Ä—É—á–∫–∞: {revenue_2026:,.0f}")
                    print(f"   - –†–∞—Å—Ö–æ–¥—ã: {expenses_2026:,.0f}")
                    
                    # Check 10% growth for subsequent years
                    for year in [2027, 2028, 2029, 2030]:
                        if year not in year_data:
                            error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è {year} –≥–æ–¥–∞"
                            results.errors.append(error_msg)
                            print(error_msg)
                            continue
                        
                        year_item = year_data[year]
                        actual_revenue = year_item.get('revenue', 0)
                        actual_expenses = year_item.get('expenses', 0)
                        
                        # Calculate expected values with 10% compound growth
                        years_passed = year - 2026
                        growth_factor = 1.10 ** years_passed
                        expected_revenue = revenue_2026 * growth_factor
                        expected_expenses = expenses_2026 * growth_factor
                        
                        print(f"üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ {year} –≥–æ–¥–∞ (—Ä–æ—Å—Ç {years_passed} –ª–µ—Ç —Å 10% –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π):")
                        print(f"   - –í—ã—Ä—É—á–∫–∞: {actual_revenue:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue:,.0f})")
                        print(f"   - –†–∞—Å—Ö–æ–¥—ã: {actual_expenses:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_expenses:,.0f})")
                        
                        # Allow small rounding differences (0.1%)
                        revenue_diff_pct = abs(actual_revenue - expected_revenue) / expected_revenue * 100 if expected_revenue > 0 else 0
                        expenses_diff_pct = abs(actual_expenses - expected_expenses) / expected_expenses * 100 if expected_expenses > 0 else 0
                        
                        if revenue_diff_pct > 0.1:
                            error_msg = f"‚ùå {year}: –≤—ã—Ä—É—á–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 10% —Ä–æ—Å—Ç—É: {actual_revenue:,.0f} vs {expected_revenue:,.0f} (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {revenue_diff_pct:.2f}%)"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ –í—ã—Ä—É—á–∫–∞ {year} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 10% —Ä–æ—Å—Ç—É")
                        
                        if expenses_diff_pct > 0.1:
                            error_msg = f"‚ùå {year}: —Ä–∞—Å—Ö–æ–¥—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç 10% —Ä–æ—Å—Ç—É: {actual_expenses:,.0f} vs {expected_expenses:,.0f} (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {expenses_diff_pct:.2f}%)"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ –†–∞—Å—Ö–æ–¥—ã {year} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç 10% —Ä–æ—Å—Ç—É")
                    
                    # Check detailed breakdown indexation for optimistic scenario
                    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (revenue_breakdown, expense_breakdown):")
                    
                    # Check if 2026 has breakdown data
                    revenue_breakdown_2026 = year_2026_data.get('revenue_breakdown', {})
                    expense_breakdown_2026 = year_2026_data.get('expense_breakdown', {})
                    
                    if not revenue_breakdown_2026:
                        error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç revenue_breakdown –¥–ª—è 2026 –≥–æ–¥–∞"
                        results.errors.append(error_msg)
                        print(error_msg)
                    else:
                        print(f"‚úÖ revenue_breakdown –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è 2026")
                        print(f"   - sewing: {revenue_breakdown_2026.get('sewing', 0):,.0f}")
                        print(f"   - cleaning: {revenue_breakdown_2026.get('cleaning', 0):,.0f}")
                        print(f"   - outsourcing: {revenue_breakdown_2026.get('outsourcing', 0):,.0f}")
                    
                    if not expense_breakdown_2026:
                        error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç expense_breakdown –¥–ª—è 2026 –≥–æ–¥–∞"
                        results.errors.append(error_msg)
                        print(error_msg)
                    else:
                        print(f"‚úÖ expense_breakdown –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è 2026")
                        print(f"   - labor: {expense_breakdown_2026.get('labor', 0):,.0f}")
                    
                    # Check breakdown indexation for subsequent years
                    if revenue_breakdown_2026 and expense_breakdown_2026:
                        for year in [2027, 2028, 2029, 2030]:
                            if year not in year_data:
                                continue
                            
                            year_item = year_data[year]
                            revenue_breakdown = year_item.get('revenue_breakdown', {})
                            expense_breakdown = year_item.get('expense_breakdown', {})
                            
                            years_passed = year - 2026
                            growth_factor = 1.10 ** years_passed
                            
                            print(f"üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è {year} –≥–æ–¥–∞:")
                            
                            # Check revenue breakdown
                            for category in ['sewing', 'cleaning', 'outsourcing']:
                                base_value = revenue_breakdown_2026.get(category, 0)
                                expected_value = base_value * growth_factor
                                actual_value = revenue_breakdown.get(category, 0)
                                
                                if base_value > 0:  # Only check if base value exists
                                    diff_pct = abs(actual_value - expected_value) / expected_value * 100 if expected_value > 0 else 0
                                    
                                    if diff_pct > 0.1:
                                        error_msg = f"‚ùå {year}: revenue {category} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 10% —Ä–æ—Å—Ç—É: {actual_value:,.0f} vs {expected_value:,.0f}"
                                        results.errors.append(error_msg)
                                        print(f"   ‚ùå {category}: {actual_value:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_value:,.0f})")
                                    else:
                                        print(f"   ‚úÖ {category}: {actual_value:,.0f}")
                            
                            # Check expense breakdown
                            base_labor = expense_breakdown_2026.get('labor', 0)
                            expected_labor = base_labor * growth_factor
                            actual_labor = expense_breakdown.get('labor', 0)
                            
                            if base_labor > 0:
                                diff_pct = abs(actual_labor - expected_labor) / expected_labor * 100 if expected_labor > 0 else 0
                                
                                if diff_pct > 0.1:
                                    error_msg = f"‚ùå {year}: expense labor –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 10% —Ä–æ—Å—Ç—É: {actual_labor:,.0f} vs {expected_labor:,.0f}"
                                    results.errors.append(error_msg)
                                    print(f"   ‚ùå labor: {actual_labor:,.0f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_labor:,.0f})")
                                else:
                                    print(f"   ‚úÖ labor: {actual_labor:,.0f}")
                
                print("")  # Empty line for readability
            
            # Summary
            print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ü–†–û–ì–ù–û–ó–ê:")
            if not results.errors:
                print("üéâ –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê –í–´–ü–û–õ–ù–ï–ù–´:")
                print("‚úÖ –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è 10%")
                print("‚úÖ –û–ø–∏—Å–∞–Ω–∏—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–≤–µ–π, —É–±–æ—Ä—â–∏—Ü, –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥–∞")
                print("‚úÖ –†–∞—Å—á–µ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≥–æ–¥–æ–≤")
                print("‚úÖ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            else:
                print(f"‚ùå –ù–ê–ô–î–ï–ù–û –û–®–ò–ë–û–ö: {len(results.errors)}")
                for error in results.errors:
                    print(f"   - {error}")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –£–§–ò–¶: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def main():
    """Main test runner"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ü–†–û–ì–ù–û–ó–ê –£–§–ò–¶ –ú–û–î–ï–õ–¨")
    print("=" * 80)
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint GET /api/finances/forecast –¥–ª—è –£–§–ò–¶ –º–æ–¥–µ–ª—å –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    print("=" * 80)
    
    result = await test_ufic_forecast_updated_optimistic()
    
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 80)
    
    if result.errors:
        print(f"‚ùå –ù–ê–ô–î–ï–ù–û –û–®–ò–ë–û–ö: {len(result.errors)}")
        for error in result.errors:
            print(f"   - {error}")
    else:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é 10%")
        print("‚úÖ –û–ø–∏—Å–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞")
        print("‚úÖ –†–∞—Å—á–µ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≥–æ–¥–æ–≤")
        print("‚úÖ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    
    print("=" * 80)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 80)

if __name__ == "__main__":
    asyncio.run(main())