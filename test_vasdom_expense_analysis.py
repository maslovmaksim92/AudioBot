#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è endpoint GET /api/finances/expense-analysis?company=–í–ê–® –î–û–ú –º–æ–¥–µ–ª—å

–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –∏–∑ review request:
1. Endpoint –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 —Å—Ç–∞—Ç—É—Å
2. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ "expenses" (–º–∞—Å—Å–∏–≤)
3. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ "total" (—á–∏—Å–ª–æ > 0)
4. –í –º–∞—Å—Å–∏–≤–µ "expenses" –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–ª—è–º–∏: category, amount, percentage
5. –°—É–º–º–∞ –≤—Å–µ—Ö amount –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—è—Ç—å—Å—è total
6. –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: "–ó–∞—Ä–ø–ª–∞—Ç–∞" (—É–º–µ–Ω—å—à–µ–Ω–Ω–∞—è), "–ù–∞–ª–æ–≥–∏" (5% –æ—Ç –≤—ã—Ä—É—á–∫–∏), –≤–æ–∑–º–æ–∂–Ω–æ "–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"
7. –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π: "–ö—Ä–µ–¥–∏—Ç—ã", "–®–≤–µ–∏", "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏", "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è"

Backend URL: https://finance-forecast-14.preview.emergentagent.com
"""

import asyncio
import httpx
import json
from typing import Dict, List, Any, Optional

# Backend URL from review request
BACKEND_URL = "https://finance-forecast-14.preview.emergentagent.com"
API_BASE = f"{BACKEND_URL}/api"

class TestResults:
    def __init__(self):
        self.success_criteria = {
            "status_200": False,
            "has_expenses_field": False,
            "has_total_field": False,
            "total_greater_than_zero": False,
            "expenses_have_required_fields": False,
            "sum_matches_total": False,
            "has_required_categories": False,
            "no_forbidden_categories": False
        }
        self.errors = []
        self.warnings = []
        self.response_data = None
        self.found_categories = []
        self.forbidden_found = []
        self.required_found = []

async def test_vasdom_expense_analysis():
    """Test –í–ê–® –î–û–ú –º–æ–¥–µ–ª—å expense analysis endpoint according to review request"""
    print("=" * 80)
    print("–¢–ï–°–¢ ENDPOINT: GET /api/finances/expense-analysis?company=–í–ê–® –î–û–ú –º–æ–¥–µ–ª—å")
    print("=" * 80)
    print()
    
    results = TestResults()
    company = "–í–ê–® –î–û–ú –º–æ–¥–µ–ª—å"
    
    # Required categories (should be present)
    required_categories = ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ù–∞–ª–æ–≥–∏"]
    possible_categories = ["–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"]
    
    # Forbidden categories (should NOT be present)
    forbidden_categories = ["–ö—Ä–µ–¥–∏—Ç—ã", "–®–≤–µ–∏", "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏", "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è"]
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print(f"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–∞–Ω–∏—é: {company}")
            print(f"üåê Backend URL: {BACKEND_URL}")
            print(f"üì° Endpoint: GET /api/finances/expense-analysis?company={company}")
            print()
            
            # Make the API request
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
            response = await client.get(
                f"{API_BASE}/finances/expense-analysis",
                params={"company": company}
            )
            
            print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.status_code}")
            
            # –ö–†–ò–¢–ï–†–ò–ô 1: Endpoint –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 —Å—Ç–∞—Ç—É—Å
            if response.status_code == 200:
                results.success_criteria["status_200"] = True
                print("‚úÖ –ö–†–ò–¢–ï–†–ò–ô 1: –°—Ç–∞—Ç—É—Å 200 - –í–´–ü–û–õ–ù–ï–ù")
            else:
                error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 1: –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
                results.errors.append(error_msg)
                print(error_msg)
                print(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
                return results
            
            # Parse response
            try:
                data = response.json()
                results.response_data = data
                print("‚úÖ JSON –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}"
                results.errors.append(error_msg)
                print(error_msg)
                return results
            
            print()
            print("üìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê:")
            print("-" * 40)
            
            # –ö–†–ò–¢–ï–†–ò–ô 2: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ "expenses" (–º–∞—Å—Å–∏–≤)
            if "expenses" in data and isinstance(data["expenses"], list):
                results.success_criteria["has_expenses_field"] = True
                print("‚úÖ –ö–†–ò–¢–ï–†–ò–ô 2: –ü–æ–ª–µ 'expenses' (–º–∞—Å—Å–∏–≤) - –í–´–ü–û–õ–ù–ï–ù")
                print(f"   üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤: {len(data['expenses'])}")
            else:
                error_msg = "‚ùå –ö–†–ò–¢–ï–†–ò–ô 2: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'expenses' –∏–ª–∏ –æ–Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º"
                results.errors.append(error_msg)
                print(error_msg)
            
            # –ö–†–ò–¢–ï–†–ò–ô 3: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ "total" (—á–∏—Å–ª–æ > 0)
            if "total" in data:
                total_value = data["total"]
                if isinstance(total_value, (int, float)) and total_value > 0:
                    results.success_criteria["has_total_field"] = True
                    results.success_criteria["total_greater_than_zero"] = True
                    print("‚úÖ –ö–†–ò–¢–ï–†–ò–ô 3: –ü–æ–ª–µ 'total' (—á–∏—Å–ª–æ > 0) - –í–´–ü–û–õ–ù–ï–ù")
                    print(f"   üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_value:,.2f} ‚ÇΩ")
                else:
                    error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 3: –ü–æ–ª–µ 'total' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º > 0, –ø–æ–ª—É—á–µ–Ω–æ: {total_value}"
                    results.errors.append(error_msg)
                    print(error_msg)
            else:
                error_msg = "‚ùå –ö–†–ò–¢–ï–†–ò–ô 3: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'total'"
                results.errors.append(error_msg)
                print(error_msg)
            
            print()
            
            # –ö–†–ò–¢–ï–†–ò–ô 4: –í –º–∞—Å—Å–∏–≤–µ "expenses" –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–ª—è–º–∏: category, amount, percentage
            expenses = data.get("expenses", [])
            if expenses:
                print("üìã –ê–ù–ê–õ–ò–ó –ö–ê–¢–ï–ì–û–†–ò–ô –†–ê–°–•–û–î–û–í:")
                print("-" * 40)
                
                required_expense_fields = ["category", "amount", "percentage"]
                all_expenses_valid = True
                
                for i, expense in enumerate(expenses):
                    category_name = expense.get("category", f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è_{i}")
                    results.found_categories.append(category_name)
                    
                    # Check required fields for each expense
                    missing_fields = []
                    for field in required_expense_fields:
                        if field not in expense:
                            missing_fields.append(field)
                    
                    if missing_fields:
                        all_expenses_valid = False
                        error_msg = f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}': –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing_fields}"
                        results.errors.append(error_msg)
                        print(error_msg)
                    else:
                        amount = expense.get("amount", 0)
                        percentage = expense.get("percentage", 0)
                        print(f"   üìä {category_name}: {amount:,.2f} ‚ÇΩ ({percentage:.1f}%)")
                
                if all_expenses_valid:
                    results.success_criteria["expenses_have_required_fields"] = True
                    print("‚úÖ –ö–†–ò–¢–ï–†–ò–ô 4: –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–º–µ—é—Ç —Ç—Ä–µ–±—É–µ–º—ã–µ –ø–æ–ª—è - –í–´–ü–û–õ–ù–ï–ù")
                else:
                    print("‚ùå –ö–†–ò–¢–ï–†–ò–ô 4: –ù–µ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–º–µ—é—Ç —Ç—Ä–µ–±—É–µ–º—ã–µ –ø–æ–ª—è")
            
            print()
            
            # –ö–†–ò–¢–ï–†–ò–ô 5: –°—É–º–º–∞ –≤—Å–µ—Ö amount –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—è—Ç—å—Å—è total
            if expenses and "total" in data:
                calculated_sum = sum(expense.get("amount", 0) for expense in expenses)
                total_value = data["total"]
                
                # Allow 1% difference for floating point precision
                difference = abs(calculated_sum - total_value)
                tolerance = total_value * 0.01  # 1% tolerance
                
                print(f"üßÆ –ü–†–û–í–ï–†–ö–ê –°–£–ú–ú–´:")
                print(f"   üìä –°—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {calculated_sum:,.2f} ‚ÇΩ")
                print(f"   üìä –ü–æ–ª–µ 'total': {total_value:,.2f} ‚ÇΩ")
                print(f"   üìä –†–∞–∑–Ω–∏—Ü–∞: {difference:,.2f} ‚ÇΩ")
                print(f"   üìä –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (1%): {tolerance:,.2f} ‚ÇΩ")
                
                if difference <= tolerance:
                    results.success_criteria["sum_matches_total"] = True
                    print("‚úÖ –ö–†–ò–¢–ï–†–ò–ô 5: –°—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç total - –í–´–ü–û–õ–ù–ï–ù")
                else:
                    error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 5: –°—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ({calculated_sum:,.2f}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç total ({total_value:,.2f})"
                    results.errors.append(error_msg)
                    print(error_msg)
            
            print()
            
            # –ö–†–ò–¢–ï–†–ò–ô 6: –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: "–ó–∞—Ä–ø–ª–∞—Ç–∞" (—É–º–µ–Ω—å—à–µ–Ω–Ω–∞—è), "–ù–∞–ª–æ–≥–∏" (5% –æ—Ç –≤—ã—Ä—É—á–∫–∏), –≤–æ–∑–º–æ–∂–Ω–æ "–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"
            print("üîç –ü–†–û–í–ï–†–ö–ê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ô:")
            print("-" * 40)
            
            found_required = []
            found_possible = []
            
            for category in results.found_categories:
                # Check for required categories (case-insensitive partial match)
                for req_cat in required_categories:
                    if req_cat.lower() in category.lower():
                        found_required.append(category)
                        results.required_found.append(category)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: '{category}' (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç '{req_cat}')")
                        break
                
                # Check for possible categories
                for poss_cat in possible_categories:
                    if poss_cat.lower() in category.lower():
                        found_possible.append(category)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: '{category}' (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç '{poss_cat}')")
                        break
            
            # Check if all required categories are found
            if len(found_required) >= len(required_categories):
                results.success_criteria["has_required_categories"] = True
                print("‚úÖ –ö–†–ò–¢–ï–†–ò–ô 6: –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω—ã - –í–´–ü–û–õ–ù–ï–ù")
            else:
                missing_required = []
                for req_cat in required_categories:
                    found = False
                    for found_cat in found_required:
                        if req_cat.lower() in found_cat.lower():
                            found = True
                            break
                    if not found:
                        missing_required.append(req_cat)
                
                error_msg = f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 6: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {missing_required}"
                results.errors.append(error_msg)
                print(error_msg)
            
            if found_possible:
                print(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {found_possible}")
            
            print()
            
            # –ö–†–ò–¢–ï–†–ò–ô 7: –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π: "–ö—Ä–µ–¥–∏—Ç—ã", "–®–≤–µ–∏", "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏", "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è"
            print("üö´ –ü–†–û–í–ï–†–ö–ê –ó–ê–ü–†–ï–©–ï–ù–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ô:")
            print("-" * 40)
            
            found_forbidden = []
            
            for category in results.found_categories:
                for forbidden_cat in forbidden_categories:
                    if forbidden_cat.lower() in category.lower():
                        found_forbidden.append(category)
                        results.forbidden_found.append(category)
                        error_msg = f"‚ùå –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: '{category}' (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç '{forbidden_cat}')"
                        results.errors.append(error_msg)
                        print(error_msg)
                        break
            
            if not found_forbidden:
                results.success_criteria["no_forbidden_categories"] = True
                print("‚úÖ –ö–†–ò–¢–ï–†–ò–ô 7: –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –í–´–ü–û–õ–ù–ï–ù")
            else:
                print(f"‚ùå –ö–†–ò–¢–ï–†–ò–ô 7: –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {found_forbidden}")
            
            print()
            print("üìã –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ù–ê–ô–î–ï–ù–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ô:")
            print("-" * 40)
            for i, category in enumerate(results.found_categories, 1):
                expense = expenses[i-1] if i-1 < len(expenses) else {}
                amount = expense.get("amount", 0)
                percentage = expense.get("percentage", 0)
                print(f"   {i:2d}. {category}: {amount:,.2f} ‚ÇΩ ({percentage:.1f}%)")
            
    except Exception as e:
        error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
        import traceback
        print(f"üìÑ Traceback: {traceback.format_exc()}")
    
    return results

def print_final_summary(results: TestResults):
    """Print final test summary"""
    print()
    print("=" * 80)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    
    # Count successful criteria
    successful_criteria = sum(1 for success in results.success_criteria.values() if success)
    total_criteria = len(results.success_criteria)
    
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {successful_criteria}/{total_criteria} –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    print()
    
    # Print each criterion status
    criterion_names = {
        "status_200": "1. –°—Ç–∞—Ç—É—Å 200",
        "has_expenses_field": "2. –ü–æ–ª–µ 'expenses' (–º–∞—Å—Å–∏–≤)",
        "has_total_field": "3. –ü–æ–ª–µ 'total' (—á–∏—Å–ª–æ > 0)",
        "total_greater_than_zero": "3. Total > 0",
        "expenses_have_required_fields": "4. –ü–æ–ª—è category, amount, percentage",
        "sum_matches_total": "5. –°—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π = total",
        "has_required_categories": "6. –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        "no_forbidden_categories": "7. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
    }
    
    print("üìã –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ö–†–ò–¢–ï–†–ò–Ø–ú:")
    for key, success in results.success_criteria.items():
        name = criterion_names.get(key, key)
        status = "‚úÖ –í–´–ü–û–õ–ù–ï–ù" if success else "‚ùå –ù–ï –í–´–ü–û–õ–ù–ï–ù"
        print(f"   {name}: {status}")
    
    print()
    
    if results.errors:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò:")
        for i, error in enumerate(results.errors, 1):
            print(f"   {i}. {error}")
        print()
    
    if results.warnings:
        print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        for i, warning in enumerate(results.warnings, 1):
            print(f"   {i}. {warning}")
        print()
    
    # Overall result
    if successful_criteria == total_criteria:
        print("üéâ –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê –í–´–ü–û–õ–ù–ï–ù–´!")
        print("‚úÖ Endpoint GET /api/finances/expense-analysis?company=–í–ê–® –î–û–ú –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print(f"‚ö†Ô∏è –í–´–ü–û–õ–ù–ï–ù–û {successful_criteria} –∏–∑ {total_criteria} –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
    
    print()
    print("=" * 80)

async def main():
    """Main test function"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ENDPOINT –í–ê–® –î–û–ú –ú–û–î–ï–õ–¨")
    print()
    
    # Run the test
    results = await test_vasdom_expense_analysis()
    
    # Print final summary
    print_final_summary(results)
    
    # Return exit code based on results
    if all(results.success_criteria.values()):
        return 0  # Success
    else:
        return 1  # Failure

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code)