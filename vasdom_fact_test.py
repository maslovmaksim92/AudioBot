#!/usr/bin/env python3
"""
–í–ê–® –î–û–ú –§–ê–ö–¢ Forecast Test - Testing updated requirements from review request
"""

import asyncio
import httpx
import json
from datetime import datetime
from typing import Dict, List, Any, Optional

# Backend URL from environment
BACKEND_URL = "https://finance-forecast-14.preview.emergentagent.com"
API_BASE = f"{BACKEND_URL}/api"

class TestResults:
    def __init__(self):
        self.errors = []
        self.finance_endpoints = {}

async def test_vasdom_fact_forecast_endpoint():
    """Test –í–ê–® –î–û–ú –§–ê–ö–¢ forecast endpoint with updated requirements from review request"""
    print("\n=== –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ü–†–û–ì–ù–û–ó–ê –í–ê–® –î–û–ú –§–ê–ö–¢ ===\n")
    
    results = TestResults()
    scenarios = ["pessimistic", "realistic", "optimistic"]
    company = "–í–ê–® –î–û–ú –§–ê–ö–¢"
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            print(f"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {company}")
            print("üìã –ù–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ:")
            print("   –ü–ï–°–°–ò–ú–ò–°–¢–ò–ß–ù–´–ô:")
            print("   - 2026: –≤—ã—Ä—É—á–∫–∞ = 56,539,380 ‚ÇΩ")
            print("   - 2027-2030: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +10% –µ–∂–µ–≥–æ–¥–Ω–æ")
            print("   - –†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +9.7% –µ–∂–µ–≥–æ–¥–Ω–æ")
            print("")
            print("   –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ô:")
            print("   - –†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +20% –µ–∂–µ–≥–æ–¥–Ω–æ")
            print("   - –†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +16.2% –µ–∂–µ–≥–æ–¥–Ω–æ")
            print("   - –ú–∞—Ä–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 26.48% - 36.61%")
            print("")
            print("   –û–ü–¢–ò–ú–ò–°–¢–ò–ß–ù–´–ô:")
            print("   - –†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +30% –µ–∂–µ–≥–æ–¥–Ω–æ")
            print("   - –†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +18.9% –µ–∂–µ–≥–æ–¥–Ω–æ")
            print("")
            print("   –î–õ–Ø –í–°–ï–• –°–¶–ï–ù–ê–†–ò–ï–í:")
            print("   - –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ù–ï –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å: –∫—Ä–µ–¥–∏—Ç—ã, –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥, –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è")
            print("   - –í –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—É—â–∏–π —Ä–µ–º–æ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ 70% –º–µ–Ω—å—à–µ")
            print("   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è '–∑–∞—Ä–ø–ª–∞—Ç–∞' –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã")
            print("")
            
            scenario_results = {}
            
            for scenario in scenarios:
                print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")
                
                # Test the forecast endpoint
                response = await client.get(
                    f"{API_BASE}/finances/forecast",
                    params={"company": company, "scenario": scenario}
                )
                
                print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è {scenario}: {response.status_code}")
                
                # Check 200 status
                if response.status_code != 200:
                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –æ—à–∏–±–∫–∞ {response.status_code} - {response.text}"
                    results.errors.append(error_msg)
                    print(error_msg)
                    continue
                
                data = response.json()
                scenario_results[scenario] = data
                print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: 200 —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
                
                # Validate response structure
                required_fields = ['company', 'scenario', 'base_year', 'base_data', 'forecast']
                for field in required_fields:
                    if field not in data:
                        error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}'"
                        results.errors.append(error_msg)
                        print(error_msg)
                    else:
                        print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # Check forecast data for years 2026-2030
                forecast = data.get('forecast', [])
                if len(forecast) < 5:
                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–µ—Ç –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ (–æ–∂–∏–¥–∞–ª–æ—Å—å 5, –ø–æ–ª—É—á–µ–Ω–æ {len(forecast)})"
                    results.errors.append(error_msg)
                    print(error_msg)
                    continue
                
                print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(forecast)} –ª–µ—Ç (2026-2030)")
                
                # Get base year data
                base_data = data.get('base_data', {})
                base_revenue = base_data.get('revenue', 0)
                base_expenses = base_data.get('expenses', 0)
                
                print(f"üìä –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ 2025:")
                print(f"   - –í—ã—Ä—É—á–∫–∞: {base_revenue:,.0f} ‚ÇΩ")
                print(f"   - –†–∞—Å—Ö–æ–¥—ã: {base_expenses:,.0f} ‚ÇΩ")
                
                # Check scenario-specific requirements
                if scenario == "pessimistic":
                    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ü–ï–°–°–ò–ú–ò–°–¢–ò–ß–ù–´–ô —Å—Ü–µ–Ω–∞—Ä–∏–π:")
                    
                    # Check 2026 specific revenue requirement
                    year_2026 = next((y for y in forecast if y.get('year') == 2026), None)
                    if year_2026:
                        revenue_2026 = year_2026.get('revenue', 0)
                        expected_2026_revenue = 56539380
                        
                        revenue_diff_pct = abs(revenue_2026 - expected_2026_revenue) / expected_2026_revenue * 100
                        if revenue_diff_pct > 1.0:  # Allow 1% tolerance
                            error_msg = f"‚ùå –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π 2026: –Ω–µ–≤–µ—Ä–Ω–∞—è –≤—ã—Ä—É—á–∫–∞. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_2026_revenue:,.0f} ‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {revenue_2026:,.0f} ‚ÇΩ"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ 2026: –≤—ã—Ä—É—á–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ({revenue_2026:,.0f} ‚ÇΩ)")
                    
                    # Check 10% annual revenue growth for 2027-2030
                    prev_revenue = year_2026.get('revenue', 0) if year_2026 else 0
                    for year_data in forecast[1:]:  # Skip 2026, check 2027-2030
                        year = year_data.get('year')
                        revenue = year_data.get('revenue', 0)
                        
                        expected_revenue = prev_revenue * 1.10
                        revenue_diff_pct = abs(revenue - expected_revenue) / expected_revenue * 100
                        
                        if revenue_diff_pct > 1.0:
                            error_msg = f"‚ùå –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π {year}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +10%. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue:,.0f} ‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {revenue:,.0f} ‚ÇΩ"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +10% –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({revenue:,.0f} ‚ÇΩ)")
                        
                        prev_revenue = revenue
                    
                    # Check 9.7% annual expense growth
                    prev_expenses = year_2026.get('expenses', 0) if year_2026 else 0
                    for year_data in forecast:
                        year = year_data.get('year')
                        expenses = year_data.get('expenses', 0)
                        
                        if year == 2026:
                            prev_expenses = expenses
                            continue
                            
                        expected_expenses = prev_expenses * 1.097
                        expense_diff_pct = abs(expenses - expected_expenses) / expected_expenses * 100
                        
                        if expense_diff_pct > 1.0:
                            error_msg = f"‚ùå –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π {year}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +9.7%. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_expenses:,.0f} ‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {expenses:,.0f} ‚ÇΩ"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +9.7% –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({expenses:,.0f} ‚ÇΩ)")
                        
                        prev_expenses = expenses
                
                elif scenario == "realistic":
                    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ô —Å—Ü–µ–Ω–∞—Ä–∏–π:")
                    
                    # Check 20% annual revenue growth
                    prev_revenue = base_revenue
                    for year_data in forecast:
                        year = year_data.get('year')
                        revenue = year_data.get('revenue', 0)
                        expenses = year_data.get('expenses', 0)
                        
                        expected_revenue = prev_revenue * 1.20
                        revenue_diff_pct = abs(revenue - expected_revenue) / expected_revenue * 100
                        
                        if revenue_diff_pct > 1.0:
                            error_msg = f"‚ùå –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π {year}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +20%. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue:,.0f} ‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {revenue:,.0f} ‚ÇΩ"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +20% –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({revenue:,.0f} ‚ÇΩ)")
                        
                        prev_revenue = revenue
                    
                    # Check 16.2% annual expense growth
                    prev_expenses = base_expenses
                    for year_data in forecast:
                        year = year_data.get('year')
                        expenses = year_data.get('expenses', 0)
                        
                        expected_expenses = prev_expenses * 1.162
                        expense_diff_pct = abs(expenses - expected_expenses) / expected_expenses * 100
                        
                        if expense_diff_pct > 1.0:
                            error_msg = f"‚ùå –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π {year}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +16.2%. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_expenses:,.0f} ‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {expenses:,.0f} ‚ÇΩ"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +16.2% –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({expenses:,.0f} ‚ÇΩ)")
                        
                        prev_expenses = expenses
                    
                    # Check margin range 26.48% - 36.61%
                    for year_data in forecast:
                        year = year_data.get('year')
                        revenue = year_data.get('revenue', 0)
                        expenses = year_data.get('expenses', 0)
                        
                        if revenue > 0:
                            margin = ((revenue - expenses) / revenue) * 100
                            
                            if margin < 26.48 or margin > 36.61:
                                error_msg = f"‚ùå –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π {year}: –º–∞—Ä–∂–∞ {margin:.2f}% –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 26.48% - 36.61%"
                                results.errors.append(error_msg)
                                print(error_msg)
                            else:
                                print(f"‚úÖ {year}: –º–∞—Ä–∂–∞ {margin:.2f}% –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
                
                elif scenario == "optimistic":
                    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –û–ü–¢–ò–ú–ò–°–¢–ò–ß–ù–´–ô —Å—Ü–µ–Ω–∞—Ä–∏–π:")
                    
                    # Check 30% annual revenue growth
                    prev_revenue = base_revenue
                    for year_data in forecast:
                        year = year_data.get('year')
                        revenue = year_data.get('revenue', 0)
                        
                        expected_revenue = prev_revenue * 1.30
                        revenue_diff_pct = abs(revenue - expected_revenue) / expected_revenue * 100
                        
                        if revenue_diff_pct > 1.0:
                            error_msg = f"‚ùå –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π {year}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +30%. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue:,.0f} ‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {revenue:,.0f} ‚ÇΩ"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ +30% –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({revenue:,.0f} ‚ÇΩ)")
                        
                        prev_revenue = revenue
                    
                    # Check 18.9% annual expense growth
                    prev_expenses = base_expenses
                    for year_data in forecast:
                        year = year_data.get('year')
                        expenses = year_data.get('expenses', 0)
                        
                        expected_expenses = prev_expenses * 1.189
                        expense_diff_pct = abs(expenses - expected_expenses) / expected_expenses * 100
                        
                        if expense_diff_pct > 1.0:
                            error_msg = f"‚ùå –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π {year}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +18.9%. –û–∂–∏–¥–∞–ª–æ—Å—å {expected_expenses:,.0f} ‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {expenses:,.0f} ‚ÇΩ"
                            results.errors.append(error_msg)
                            print(error_msg)
                        else:
                            print(f"‚úÖ {year}: —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ +18.9% –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({expenses:,.0f} ‚ÇΩ)")
                        
                        prev_expenses = expenses
                
                # Check expense breakdown for all scenarios
                print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario}:")
                
                # Check that expense_breakdown is present
                has_expense_breakdown = False
                for year_data in forecast:
                    if 'expense_breakdown' in year_data:
                        has_expense_breakdown = True
                        break
                
                if not has_expense_breakdown:
                    error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç expense_breakdown –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ"
                    results.errors.append(error_msg)
                    print(error_msg)
                else:
                    print(f"‚úÖ expense_breakdown –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    # Check excluded categories
                    excluded_categories = ['–∫—Ä–µ–¥–∏—Ç—ã', '–∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥', '–ø—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è']
                    found_excluded = []
                    
                    sample_year = forecast[0] if forecast else {}
                    expense_breakdown = sample_year.get('expense_breakdown', {})
                    
                    for category_key, amount in expense_breakdown.items():
                        category_lower = category_key.lower()
                        for excluded in excluded_categories:
                            if excluded in category_lower:
                                found_excluded.append(category_key)
                    
                    if found_excluded:
                        error_msg = f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario}: –Ω–∞–π–¥–µ–Ω—ã –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: {found_excluded}"
                        results.errors.append(error_msg)
                        print(error_msg)
                    else:
                        print(f"‚úÖ –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
                    
                    # Check for salary redistribution
                    salary_categories = [k for k in expense_breakdown.keys() if '–∑–∞—Ä–ø–ª–∞—Ç–∞' in k.lower() or '–∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è' in k.lower()]
                    if salary_categories:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã: {salary_categories}")
                    else:
                        print(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
                    
                    # Check current repair reduction (should be 70% less)
                    repair_categories = [k for k in expense_breakdown.keys() if '—Ç–µ–∫—É—â–∏–π —Ä–µ–º–æ–Ω—Ç' in k.lower() or '—Ä–µ–º–æ–Ω—Ç' in k.lower()]
                    if repair_categories:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–º–æ–Ω—Ç–∞: {repair_categories}")
                        print(f"   (–ü—Ä–æ–≤–µ—Ä–∫–∞ 70% —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)")
                    else:
                        print(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–º–æ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
                
                print(f"")  # Empty line for readability
            
            # Store results
            results.finance_endpoints['vasdom_fact_forecast'] = scenario_results
            
            # Summary
            print("üìã –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:")
            success_count = len([s for s in scenarios if s in scenario_results])
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {success_count}/3")
            
            if results.errors:
                print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(results.errors)}")
                for error in results.errors[-5:]:  # Show last 5 errors
                    print(f"   - {error}")
            else:
                print(f"üéâ –í—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –í–ê–® –î–û–ú –§–ê–ö–¢: {str(e)}"
        results.errors.append(error_msg)
        print(error_msg)
    
    return results

async def main():
    """Main test execution - focused on –í–ê–® –î–û–ú –§–ê–ö–¢ forecast testing as per review request"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ü–†–û–ì–ù–û–ó–ê –í–ê–® –î–û–ú –§–ê–ö–¢ –° –ù–û–í–´–ú–ò –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú–ò")
    print("=" * 80)
    print(f"üåê Backend URL: {BACKEND_URL}")
    print(f"üîó API Base: {API_BASE}")
    print("=" * 80)
    
    # Check basic connectivity
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend...")
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(f"{API_BASE}/health")
            if response.status_code == 200:
                print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {str(e)}")
        return
    
    print("\n" + "=" * 80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ì–ù–û–ó–ê –í–ê–® –î–û–ú –§–ê–ö–¢")
    print("=" * 80)
    
    # Run the specific test for –í–ê–® –î–û–ú –§–ê–ö–¢ as requested
    result = await test_vasdom_fact_forecast_endpoint()
    
    # Print summary
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 80)
    
    if result.errors:
        print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(result.errors)}")
        print("\nüîç –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:")
        for i, error in enumerate(result.errors, 1):
            print(f"   {i}. {error}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        critical_errors = [e for e in result.errors if "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê" in e or "500" in e]
        if critical_errors:
            print(f"\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö: {len(critical_errors)}")
            print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–î–ê")
        else:
            print("\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            print("‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –º–∏–Ω–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –í—Å–µ —Ç—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚úÖ –†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        print("‚úÖ –†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        print("‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print("‚úÖ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –∑–∞—Ä–ø–ª–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    print("\n" + "=" * 80)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 80)
    
    return [("–í–ê–® –î–û–ú –§–ê–ö–¢ Forecast Test", result)]

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)